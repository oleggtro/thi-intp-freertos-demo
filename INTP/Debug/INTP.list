
INTP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb08  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800cc98  0800cc98  0000dc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdcc  0800cdcc  0000e080  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdcc  0800cdcc  0000ddcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdd4  0800cdd4  0000e080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdd4  0800cdd4  0000ddd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cdd8  0800cdd8  0000ddd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800cddc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e080  2**0
                  CONTENTS
 10 .bss          000054dc  20000080  20000080  0000e080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000555c  2000555c  0000e080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025e7c  00000000  00000000  0000e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056b6  00000000  00000000  00033f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f00  00000000  00000000  000395e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017ee  00000000  00000000  0003b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006e0b  00000000  00000000  0003ccd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027704  00000000  00000000  00043ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000deba4  00000000  00000000  0006b1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149d89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000086c4  00000000  00000000  00149dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  00152490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc80 	.word	0x0800cc80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800cc80 	.word	0x0800cc80

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fda2 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f868 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f99e 	bl	800080c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f8ce 	bl	8000670 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f8fa 	bl	80006cc <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f928 	bl	800072c <MX_SPI1_Init>
  MX_TIM7_Init();
 80004dc:	f000 f95c 	bl	8000798 <MX_TIM7_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e0:	f008 fdfc 	bl	80090dc <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 80004e4:	4b1d      	ldr	r3, [pc, #116]	@ (800055c <main+0x9c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	2101      	movs	r1, #1
 80004ea:	481d      	ldr	r0, [pc, #116]	@ (8000560 <main+0xa0>)
 80004ec:	f008 ff02 	bl	80092f4 <osTimerNew>
 80004f0:	4603      	mov	r3, r0
 80004f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000564 <main+0xa4>)
 80004f4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(myTimer01Handle, pdMS_TO_TICKS(100));
 80004f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000564 <main+0xa4>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2164      	movs	r1, #100	@ 0x64
 80004fc:	4618      	mov	r0, r3
 80004fe:	f008 ff75 	bl	80093ec <osTimerStart>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000502:	4a19      	ldr	r2, [pc, #100]	@ (8000568 <main+0xa8>)
 8000504:	2102      	movs	r1, #2
 8000506:	2010      	movs	r0, #16
 8000508:	f008 ff9e 	bl	8009448 <osMessageQueueNew>
 800050c:	4603      	mov	r3, r0
 800050e:	4a17      	ldr	r2, [pc, #92]	@ (800056c <main+0xac>)
 8000510:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue02_attributes);
 8000512:	4a17      	ldr	r2, [pc, #92]	@ (8000570 <main+0xb0>)
 8000514:	2102      	movs	r1, #2
 8000516:	2010      	movs	r0, #16
 8000518:	f008 ff96 	bl	8009448 <osMessageQueueNew>
 800051c:	4603      	mov	r3, r0
 800051e:	4a15      	ldr	r2, [pc, #84]	@ (8000574 <main+0xb4>)
 8000520:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000522:	4a15      	ldr	r2, [pc, #84]	@ (8000578 <main+0xb8>)
 8000524:	2100      	movs	r1, #0
 8000526:	4815      	ldr	r0, [pc, #84]	@ (800057c <main+0xbc>)
 8000528:	f008 fe22 	bl	8009170 <osThreadNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a14      	ldr	r2, [pc, #80]	@ (8000580 <main+0xc0>)
 8000530:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000532:	4a14      	ldr	r2, [pc, #80]	@ (8000584 <main+0xc4>)
 8000534:	2100      	movs	r1, #0
 8000536:	4814      	ldr	r0, [pc, #80]	@ (8000588 <main+0xc8>)
 8000538:	f008 fe1a 	bl	8009170 <osThreadNew>
 800053c:	4603      	mov	r3, r0
 800053e:	4a13      	ldr	r2, [pc, #76]	@ (800058c <main+0xcc>)
 8000540:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000542:	4a13      	ldr	r2, [pc, #76]	@ (8000590 <main+0xd0>)
 8000544:	2100      	movs	r1, #0
 8000546:	4813      	ldr	r0, [pc, #76]	@ (8000594 <main+0xd4>)
 8000548:	f008 fe12 	bl	8009170 <osThreadNew>
 800054c:	4603      	mov	r3, r0
 800054e:	4a12      	ldr	r2, [pc, #72]	@ (8000598 <main+0xd8>)
 8000550:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000552:	f008 fde7 	bl	8009124 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	bf00      	nop
 8000558:	e7fd      	b.n	8000556 <main+0x96>
 800055a:	bf00      	nop
 800055c:	0800cda4 	.word	0x0800cda4
 8000560:	08000a79 	.word	0x08000a79
 8000564:	200001ec 	.word	0x200001ec
 8000568:	0800cd74 	.word	0x0800cd74
 800056c:	200001e4 	.word	0x200001e4
 8000570:	0800cd8c 	.word	0x0800cd8c
 8000574:	200001e8 	.word	0x200001e8
 8000578:	0800cd08 	.word	0x0800cd08
 800057c:	08000a09 	.word	0x08000a09
 8000580:	200001d8 	.word	0x200001d8
 8000584:	0800cd2c 	.word	0x0800cd2c
 8000588:	08000a21 	.word	0x08000a21
 800058c:	200001dc 	.word	0x200001dc
 8000590:	0800cd50 	.word	0x0800cd50
 8000594:	08000a69 	.word	0x08000a69
 8000598:	200001e0 	.word	0x200001e0

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	@ 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	@ 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f00c fa76 	bl	800ca9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b28      	ldr	r3, [pc, #160]	@ (8000668 <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	4a27      	ldr	r2, [pc, #156]	@ (8000668 <SystemClock_Config+0xcc>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d0:	4b25      	ldr	r3, [pc, #148]	@ (8000668 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b22      	ldr	r3, [pc, #136]	@ (800066c <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a21      	ldr	r2, [pc, #132]	@ (800066c <SystemClock_Config+0xd0>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1f      	ldr	r3, [pc, #124]	@ (800066c <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000600:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800060c:	2308      	movs	r3, #8
 800060e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000610:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000614:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061a:	2307      	movs	r3, #7
 800061c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	4618      	mov	r0, r3
 8000624:	f003 ff3a 	bl	800449c <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062e:	f000 fa5b 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000648:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2105      	movs	r1, #5
 8000650:	4618      	mov	r0, r3
 8000652:	f004 f99b 	bl	800498c <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800065c:	f000 fa44 	bl	8000ae8 <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3750      	adds	r7, #80	@ 0x50
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000676:	4a13      	ldr	r2, [pc, #76]	@ (80006c4 <MX_I2C1_Init+0x54>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_I2C1_Init+0x50>)
 800067c:	4a12      	ldr	r2, [pc, #72]	@ (80006c8 <MX_I2C1_Init+0x58>)
 800067e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_I2C1_Init+0x50>)
 800068e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000692:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_I2C1_Init+0x50>)
 80006ae:	f003 f911 	bl	80038d4 <HAL_I2C_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b8:	f000 fa16 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000009c 	.word	0x2000009c
 80006c4:	40005400 	.word	0x40005400
 80006c8:	000186a0 	.word	0x000186a0

080006cc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006d2:	4a14      	ldr	r2, [pc, #80]	@ (8000724 <MX_I2S3_Init+0x58>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000728 <MX_I2S3_Init+0x5c>)
 80006f6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_I2S3_Init+0x54>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_I2S3_Init+0x54>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_I2S3_Init+0x54>)
 800070c:	f003 fa26 	bl	8003b5c <HAL_I2S_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000716:	f000 f9e7 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000f0 	.word	0x200000f0
 8000724:	40003c00 	.word	0x40003c00
 8000728:	00017700 	.word	0x00017700

0800072c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000730:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000732:	4a18      	ldr	r2, [pc, #96]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000738:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800073c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_SPI1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800075c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000778:	220a      	movs	r2, #10
 800077a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_SPI1_Init+0x64>)
 800077e:	f004 fc85 	bl	800508c <HAL_SPI_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000788:	f000 f9ae 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000138 	.word	0x20000138
 8000794:	40013000 	.word	0x40013000

08000798 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007a6:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <MX_TIM7_Init+0x6c>)
 80007a8:	4a17      	ldr	r2, [pc, #92]	@ (8000808 <MX_TIM7_Init+0x70>)
 80007aa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 80007ac:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <MX_TIM7_Init+0x6c>)
 80007ae:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80007b2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_TIM7_Init+0x6c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000;
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <MX_TIM7_Init+0x6c>)
 80007bc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80007c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <MX_TIM7_Init+0x6c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007c8:	480e      	ldr	r0, [pc, #56]	@ (8000804 <MX_TIM7_Init+0x6c>)
 80007ca:	f004 fce8 	bl	800519e <HAL_TIM_Base_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80007d4:	f000 f988 	bl	8000ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d8:	2300      	movs	r3, #0
 80007da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4807      	ldr	r0, [pc, #28]	@ (8000804 <MX_TIM7_Init+0x6c>)
 80007e6:	f004 ff5d 	bl	80056a4 <HAL_TIMEx_MasterConfigSynchronization>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80007f0:	f000 f97a 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80007f4:	4803      	ldr	r0, [pc, #12]	@ (8000804 <MX_TIM7_Init+0x6c>)
 80007f6:	f004 fd21 	bl	800523c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000190 	.word	0x20000190
 8000808:	40001400 	.word	0x40001400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	@ 0x30
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	4b72      	ldr	r3, [pc, #456]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a71      	ldr	r2, [pc, #452]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 800082c:	f043 0310 	orr.w	r3, r3, #16
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b6f      	ldr	r3, [pc, #444]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0310 	and.w	r3, r3, #16
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	4b6b      	ldr	r3, [pc, #428]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a6a      	ldr	r2, [pc, #424]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b68      	ldr	r3, [pc, #416]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b64      	ldr	r3, [pc, #400]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a63      	ldr	r2, [pc, #396]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b61      	ldr	r3, [pc, #388]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b5d      	ldr	r3, [pc, #372]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a5c      	ldr	r2, [pc, #368]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b5a      	ldr	r3, [pc, #360]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b56      	ldr	r3, [pc, #344]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a55      	ldr	r2, [pc, #340]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b53      	ldr	r3, [pc, #332]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b4f      	ldr	r3, [pc, #316]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a4e      	ldr	r2, [pc, #312]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b4c      	ldr	r3, [pc, #304]	@ (80009f0 <MX_GPIO_Init+0x1e4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2108      	movs	r1, #8
 80008ce:	4849      	ldr	r0, [pc, #292]	@ (80009f4 <MX_GPIO_Init+0x1e8>)
 80008d0:	f000 fe98 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2101      	movs	r1, #1
 80008d8:	4847      	ldr	r0, [pc, #284]	@ (80009f8 <MX_GPIO_Init+0x1ec>)
 80008da:	f000 fe93 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008de:	2200      	movs	r2, #0
 80008e0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008e4:	4845      	ldr	r0, [pc, #276]	@ (80009fc <MX_GPIO_Init+0x1f0>)
 80008e6:	f000 fe8d 	bl	8001604 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ea:	2308      	movs	r3, #8
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	483c      	ldr	r0, [pc, #240]	@ (80009f4 <MX_GPIO_Init+0x1e8>)
 8000902:	f000 fccb 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4836      	ldr	r0, [pc, #216]	@ (80009f8 <MX_GPIO_Init+0x1ec>)
 800091e:	f000 fcbd 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000922:	2308      	movs	r3, #8
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000932:	2305      	movs	r3, #5
 8000934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	482e      	ldr	r0, [pc, #184]	@ (80009f8 <MX_GPIO_Init+0x1ec>)
 800093e:	f000 fcad 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000946:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	482a      	ldr	r0, [pc, #168]	@ (8000a00 <MX_GPIO_Init+0x1f4>)
 8000958:	f000 fca0 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800095c:	2304      	movs	r3, #4
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4825      	ldr	r0, [pc, #148]	@ (8000a04 <MX_GPIO_Init+0x1f8>)
 8000970:	f000 fc94 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000974:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000986:	2305      	movs	r3, #5
 8000988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	481c      	ldr	r0, [pc, #112]	@ (8000a04 <MX_GPIO_Init+0x1f8>)
 8000992:	f000 fc83 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000996:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800099a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4813      	ldr	r0, [pc, #76]	@ (80009fc <MX_GPIO_Init+0x1f0>)
 80009b0:	f000 fc74 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b4:	2320      	movs	r3, #32
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	480d      	ldr	r0, [pc, #52]	@ (80009fc <MX_GPIO_Init+0x1f0>)
 80009c8:	f000 fc68 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <MX_GPIO_Init+0x1e8>)
 80009e2:	f000 fc5b 	bl	800129c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e6:	bf00      	nop
 80009e8:	3730      	adds	r7, #48	@ 0x30
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40020800 	.word	0x40020800
 80009fc:	40020c00 	.word	0x40020c00
 8000a00:	40020000 	.word	0x40020000
 8000a04:	40020400 	.word	0x40020400

08000a08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000a10:	f00b fc82 	bl	800c318 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  int counter = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
	  } else {
		  if (counter > 2) {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
		  }
	  }*/
    osDelay(200);
 8000a18:	20c8      	movs	r0, #200	@ 0xc8
 8000a1a:	f008 fc3b 	bl	8009294 <osDelay>
 8000a1e:	e7fb      	b.n	8000a18 <StartDefaultTask+0x10>

08000a20 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

	int counter = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	int buf = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
	osMessageQueueGet(myQueue01Handle, &buf, NULL, 10);
 8000a30:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <StartTask02+0x40>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	f107 0108 	add.w	r1, r7, #8
 8000a38:	230a      	movs	r3, #10
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f008 fdd8 	bl	80095f0 <osMessageQueueGet>
	counter = counter + buf;
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4413      	add	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]
	osMessageQueuePut(myQueue02Handle, counter, NULL, 10);
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <StartTask02+0x44>)
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	68f9      	ldr	r1, [r7, #12]
 8000a4e:	230a      	movs	r3, #10
 8000a50:	2200      	movs	r2, #0
 8000a52:	f008 fd6d 	bl	8009530 <osMessageQueuePut>
    osDelay(1);
 8000a56:	2001      	movs	r0, #1
 8000a58:	f008 fc1c 	bl	8009294 <osDelay>
  {
 8000a5c:	bf00      	nop
 8000a5e:	e7e5      	b.n	8000a2c <StartTask02+0xc>
 8000a60:	200001e4 	.word	0x200001e4
 8000a64:	200001e8 	.word	0x200001e8

08000a68 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f008 fc0f 	bl	8009294 <osDelay>
 8000a76:	e7fb      	b.n	8000a70 <StartTask03+0x8>

08000a78 <Callback01>:
  /* USER CODE END StartTask03 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000a80:	2101      	movs	r1, #1
 8000a82:	4807      	ldr	r0, [pc, #28]	@ (8000aa0 <Callback01+0x28>)
 8000a84:	f000 fda6 	bl	80015d4 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d004      	beq.n	8000a98 <Callback01+0x20>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a92:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <Callback01+0x2c>)
 8000a94:	f000 fdcf 	bl	8001636 <HAL_GPIO_TogglePin>
		  }
  /* USER CODE END Callback01 */
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40020c00 	.word	0x40020c00

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a09      	ldr	r2, [pc, #36]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aba:	f000 fac9 	bl	8001050 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM7){
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a07      	ldr	r2, [pc, #28]	@ (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d104      	bne.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000ac8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000acc:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ace:	f000 fdb2 	bl	8001636 <HAL_GPIO_TogglePin>

  }

  /* USER CODE END Callback 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40001000 	.word	0x40001000
 8000ae0:	40001400 	.word	0x40001400
 8000ae4:	40020c00 	.word	0x40020c00

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <Error_Handler+0x8>

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <HAL_MspInit+0x54>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	4a11      	ldr	r2, [pc, #68]	@ (8000b48 <HAL_MspInit+0x54>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <HAL_MspInit+0x54>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <HAL_MspInit+0x54>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <HAL_MspInit+0x54>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <HAL_MspInit+0x54>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	210f      	movs	r1, #15
 8000b36:	f06f 0001 	mvn.w	r0, #1
 8000b3a:	f000 fb85 	bl	8001248 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	@ 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	@ (8000bd0 <HAL_I2C_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12c      	bne.n	8000bc8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a17      	ldr	r2, [pc, #92]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b8a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b90:	2312      	movs	r3, #18
 8000b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <HAL_I2C_MspInit+0x8c>)
 8000ba8:	f000 fb78 	bl	800129c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	4a07      	ldr	r2, [pc, #28]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bb6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	@ 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020400 	.word	0x40020400

08000bdc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	@ 0x38
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a31      	ldr	r2, [pc, #196]	@ (8000ccc <HAL_I2S_MspInit+0xf0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d15a      	bne.n	8000cc2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c10:	23c0      	movs	r3, #192	@ 0xc0
 8000c12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 f8f3 	bl	8004e08 <HAL_RCCEx_PeriphCLKConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c28:	f7ff ff5e 	bl	8000ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	4b27      	ldr	r3, [pc, #156]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	4a26      	ldr	r2, [pc, #152]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3c:	4b24      	ldr	r3, [pc, #144]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c50:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6c:	4a18      	ldr	r2, [pc, #96]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c80:	2310      	movs	r3, #16
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c90:	2306      	movs	r3, #6
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480e      	ldr	r0, [pc, #56]	@ (8000cd4 <HAL_I2S_MspInit+0xf8>)
 8000c9c:	f000 fafe 	bl	800129c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ca0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb2:	2306      	movs	r3, #6
 8000cb4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4806      	ldr	r0, [pc, #24]	@ (8000cd8 <HAL_I2S_MspInit+0xfc>)
 8000cbe:	f000 faed 	bl	800129c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3738      	adds	r7, #56	@ 0x38
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40003c00 	.word	0x40003c00
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40020800 	.word	0x40020800

08000cdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a19      	ldr	r2, [pc, #100]	@ (8000d60 <HAL_SPI_MspInit+0x84>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d12b      	bne.n	8000d56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	4a17      	ldr	r2, [pc, #92]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a10      	ldr	r2, [pc, #64]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d36:	23e0      	movs	r3, #224	@ 0xe0
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d46:	2305      	movs	r3, #5
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <HAL_SPI_MspInit+0x8c>)
 8000d52:	f000 faa3 	bl	800129c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	@ 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40013000 	.word	0x40013000
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000

08000d6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0e      	ldr	r2, [pc, #56]	@ (8000db4 <HAL_TIM_Base_MspInit+0x48>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d115      	bne.n	8000daa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <HAL_TIM_Base_MspInit+0x4c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	4a0c      	ldr	r2, [pc, #48]	@ (8000db8 <HAL_TIM_Base_MspInit+0x4c>)
 8000d88:	f043 0320 	orr.w	r3, r3, #32
 8000d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <HAL_TIM_Base_MspInit+0x4c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	f003 0320 	and.w	r3, r3, #32
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2105      	movs	r1, #5
 8000d9e:	2037      	movs	r0, #55	@ 0x37
 8000da0:	f000 fa52 	bl	8001248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000da4:	2037      	movs	r0, #55	@ 0x37
 8000da6:	f000 fa6b 	bl	8001280 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40001400 	.word	0x40001400
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08e      	sub	sp, #56	@ 0x38
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	4b33      	ldr	r3, [pc, #204]	@ (8000ea0 <HAL_InitTick+0xe4>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	4a32      	ldr	r2, [pc, #200]	@ (8000ea0 <HAL_InitTick+0xe4>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ddc:	4b30      	ldr	r3, [pc, #192]	@ (8000ea0 <HAL_InitTick+0xe4>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de0:	f003 0310 	and.w	r3, r3, #16
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000de8:	f107 0210 	add.w	r2, r7, #16
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4611      	mov	r1, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 ffd6 	bl	8004da4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d103      	bne.n	8000e0a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e02:	f003 ffbb 	bl	8004d7c <HAL_RCC_GetPCLK1Freq>
 8000e06:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e08:	e004      	b.n	8000e14 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e0a:	f003 ffb7 	bl	8004d7c <HAL_RCC_GetPCLK1Freq>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e16:	4a23      	ldr	r2, [pc, #140]	@ (8000ea4 <HAL_InitTick+0xe8>)
 8000e18:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1c:	0c9b      	lsrs	r3, r3, #18
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e22:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e24:	4a21      	ldr	r2, [pc, #132]	@ (8000eac <HAL_InitTick+0xf0>)
 8000e26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e2a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e2e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e30:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e34:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e42:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e48:	4817      	ldr	r0, [pc, #92]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e4a:	f004 f9a8 	bl	800519e <HAL_TIM_Base_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d11b      	bne.n	8000e94 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e5c:	4812      	ldr	r0, [pc, #72]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e5e:	f004 f9ed 	bl	800523c <HAL_TIM_Base_Start_IT>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d111      	bne.n	8000e94 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e70:	2036      	movs	r0, #54	@ 0x36
 8000e72:	f000 fa05 	bl	8001280 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d808      	bhi.n	8000e8e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	2036      	movs	r0, #54	@ 0x36
 8000e82:	f000 f9e1 	bl	8001248 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <HAL_InitTick+0xf4>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	e002      	b.n	8000e94 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3738      	adds	r7, #56	@ 0x38
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	431bde83 	.word	0x431bde83
 8000ea8:	200001f0 	.word	0x200001f0
 8000eac:	40001000 	.word	0x40001000
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <NMI_Handler+0x4>

08000ebc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <MemManage_Handler+0x4>

08000ecc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
	...

08000eec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <TIM6_DAC_IRQHandler+0x10>)
 8000ef2:	f004 fa13 	bl	800531c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200001f0 	.word	0x200001f0

08000f00 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <TIM7_IRQHandler+0x10>)
 8000f06:	f004 fa09 	bl	800531c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000190 	.word	0x20000190

08000f14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f18:	4802      	ldr	r0, [pc, #8]	@ (8000f24 <OTG_FS_IRQHandler+0x10>)
 8000f1a:	f000 fe87 	bl	8001c2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20005034 	.word	0x20005034

08000f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f30:	4a14      	ldr	r2, [pc, #80]	@ (8000f84 <_sbrk+0x5c>)
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <_sbrk+0x60>)
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f3c:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <_sbrk+0x64>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	@ (8000f90 <_sbrk+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f58:	f00b fe0e 	bl	800cb78 <__errno>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	e009      	b.n	8000f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <_sbrk+0x64>)
 8000f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20020000 	.word	0x20020000
 8000f88:	00000400 	.word	0x00000400
 8000f8c:	20000238 	.word	0x20000238
 8000f90:	20005560 	.word	0x20005560

08000f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fbc:	f7ff ffea 	bl	8000f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	@ (8000ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f00b fdcd 	bl	800cb84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff fa69 	bl	80004c0 <main>
  bx  lr    
 8000fee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ff0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000ffc:	0800cddc 	.word	0x0800cddc
  ldr r2, =_sbss
 8001000:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001004:	2000555c 	.word	0x2000555c

08001008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001010:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <HAL_Init+0x40>)
 8001016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800101a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <HAL_Init+0x40>)
 8001022:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	@ (800104c <HAL_Init+0x40>)
 800102e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 f8fc 	bl	8001232 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	200f      	movs	r0, #15
 800103c:	f7ff febe 	bl	8000dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff fd58 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023c00 	.word	0x40023c00

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	2000023c 	.word	0x2000023c

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	2000023c 	.word	0x2000023c

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ffee 	bl	8001078 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <HAL_Delay+0x44>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffde 	bl	8001078 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	@ (800111c <__NVIC_SetPriorityGrouping+0x44>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db0b      	blt.n	8001166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f003 021f 	and.w	r2, r3, #31
 8001154:	4907      	ldr	r1, [pc, #28]	@ (8001174 <__NVIC_EnableIRQ+0x38>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	2001      	movs	r0, #1
 800115e:	fa00 f202 	lsl.w	r2, r0, r2
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	@ (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	@ (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	@ 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	@ 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff4c 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125a:	f7ff ff61 	bl	8001120 <__NVIC_GetPriorityGrouping>
 800125e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	6978      	ldr	r0, [r7, #20]
 8001266:	f7ff ffb1 	bl	80011cc <NVIC_EncodePriority>
 800126a:	4602      	mov	r2, r0
 800126c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff80 	bl	8001178 <__NVIC_SetPriority>
}
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff54 	bl	800113c <__NVIC_EnableIRQ>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	@ 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	e16b      	b.n	8001590 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012b8:	2201      	movs	r2, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	f040 815a 	bne.w	800158a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d005      	beq.n	80012ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d130      	bne.n	8001350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001324:	2201      	movs	r2, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	091b      	lsrs	r3, r3, #4
 800133a:	f003 0201 	and.w	r2, r3, #1
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	2b03      	cmp	r3, #3
 800135a:	d017      	beq.n	800138c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d123      	bne.n	80013e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	08da      	lsrs	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3208      	adds	r2, #8
 80013a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	220f      	movs	r2, #15
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	08da      	lsrs	r2, r3, #3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3208      	adds	r2, #8
 80013da:	69b9      	ldr	r1, [r7, #24]
 80013dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	2203      	movs	r2, #3
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0203 	and.w	r2, r3, #3
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80b4 	beq.w	800158a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b60      	ldr	r3, [pc, #384]	@ (80015a8 <HAL_GPIO_Init+0x30c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	4a5f      	ldr	r2, [pc, #380]	@ (80015a8 <HAL_GPIO_Init+0x30c>)
 800142c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001430:	6453      	str	r3, [r2, #68]	@ 0x44
 8001432:	4b5d      	ldr	r3, [pc, #372]	@ (80015a8 <HAL_GPIO_Init+0x30c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800143e:	4a5b      	ldr	r2, [pc, #364]	@ (80015ac <HAL_GPIO_Init+0x310>)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	220f      	movs	r2, #15
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a52      	ldr	r2, [pc, #328]	@ (80015b0 <HAL_GPIO_Init+0x314>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d02b      	beq.n	80014c2 <HAL_GPIO_Init+0x226>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a51      	ldr	r2, [pc, #324]	@ (80015b4 <HAL_GPIO_Init+0x318>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d025      	beq.n	80014be <HAL_GPIO_Init+0x222>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a50      	ldr	r2, [pc, #320]	@ (80015b8 <HAL_GPIO_Init+0x31c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d01f      	beq.n	80014ba <HAL_GPIO_Init+0x21e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4f      	ldr	r2, [pc, #316]	@ (80015bc <HAL_GPIO_Init+0x320>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d019      	beq.n	80014b6 <HAL_GPIO_Init+0x21a>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4e      	ldr	r2, [pc, #312]	@ (80015c0 <HAL_GPIO_Init+0x324>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d013      	beq.n	80014b2 <HAL_GPIO_Init+0x216>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4d      	ldr	r2, [pc, #308]	@ (80015c4 <HAL_GPIO_Init+0x328>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00d      	beq.n	80014ae <HAL_GPIO_Init+0x212>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4c      	ldr	r2, [pc, #304]	@ (80015c8 <HAL_GPIO_Init+0x32c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d007      	beq.n	80014aa <HAL_GPIO_Init+0x20e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4b      	ldr	r2, [pc, #300]	@ (80015cc <HAL_GPIO_Init+0x330>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_GPIO_Init+0x20a>
 80014a2:	2307      	movs	r3, #7
 80014a4:	e00e      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014a6:	2308      	movs	r3, #8
 80014a8:	e00c      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014aa:	2306      	movs	r3, #6
 80014ac:	e00a      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014ae:	2305      	movs	r3, #5
 80014b0:	e008      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014b2:	2304      	movs	r3, #4
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e004      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014c2:	2300      	movs	r3, #0
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	f002 0203 	and.w	r2, r2, #3
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4093      	lsls	r3, r2
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d4:	4935      	ldr	r1, [pc, #212]	@ (80015ac <HAL_GPIO_Init+0x310>)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	3302      	adds	r3, #2
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e2:	4b3b      	ldr	r3, [pc, #236]	@ (80015d0 <HAL_GPIO_Init+0x334>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001506:	4a32      	ldr	r2, [pc, #200]	@ (80015d0 <HAL_GPIO_Init+0x334>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800150c:	4b30      	ldr	r3, [pc, #192]	@ (80015d0 <HAL_GPIO_Init+0x334>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001530:	4a27      	ldr	r2, [pc, #156]	@ (80015d0 <HAL_GPIO_Init+0x334>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001536:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <HAL_GPIO_Init+0x334>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800155a:	4a1d      	ldr	r2, [pc, #116]	@ (80015d0 <HAL_GPIO_Init+0x334>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001560:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <HAL_GPIO_Init+0x334>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001584:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <HAL_GPIO_Init+0x334>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3301      	adds	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b0f      	cmp	r3, #15
 8001594:	f67f ae90 	bls.w	80012b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3724      	adds	r7, #36	@ 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40013800 	.word	0x40013800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40020c00 	.word	0x40020c00
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40021400 	.word	0x40021400
 80015c8:	40021800 	.word	0x40021800
 80015cc:	40021c00 	.word	0x40021c00
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e001      	b.n	80015f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
 8001610:	4613      	mov	r3, r2
 8001612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001620:	e003      	b.n	800162a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	041a      	lsls	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	619a      	str	r2, [r3, #24]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001636:	b480      	push	{r7}
 8001638:	b085      	sub	sp, #20
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001648:	887a      	ldrh	r2, [r7, #2]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4013      	ands	r3, r2
 800164e:	041a      	lsls	r2, r3, #16
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43d9      	mvns	r1, r3
 8001654:	887b      	ldrh	r3, [r7, #2]
 8001656:	400b      	ands	r3, r1
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	619a      	str	r2, [r3, #24]
}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af02      	add	r7, sp, #8
 8001670:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e059      	b.n	8001730 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d106      	bne.n	800169c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f00a fe92 	bl	800c3c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2203      	movs	r2, #3
 80016a0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016aa:	d102      	bne.n	80016b2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f004 f8f9 	bl	80058ae <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7c1a      	ldrb	r2, [r3, #16]
 80016c4:	f88d 2000 	strb.w	r2, [sp]
 80016c8:	3304      	adds	r3, #4
 80016ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016cc:	f004 f87a 	bl	80057c4 <USB_CoreInit>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2202      	movs	r2, #2
 80016da:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e026      	b.n	8001730 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2101      	movs	r1, #1
 80016e8:	4618      	mov	r0, r3
 80016ea:	f004 f8f1 	bl	80058d0 <USB_SetCurrentMode>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2202      	movs	r2, #2
 80016f8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e017      	b.n	8001730 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7c1a      	ldrb	r2, [r3, #16]
 8001708:	f88d 2000 	strb.w	r2, [sp]
 800170c:	3304      	adds	r3, #4
 800170e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001710:	f004 fa94 	bl	8005c3c <USB_HostInit>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2202      	movs	r2, #2
 800171e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e004      	b.n	8001730 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b08b      	sub	sp, #44	@ 0x2c
 800173c:	af04      	add	r7, sp, #16
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	4608      	mov	r0, r1
 8001742:	4611      	mov	r1, r2
 8001744:	461a      	mov	r2, r3
 8001746:	4603      	mov	r3, r0
 8001748:	70fb      	strb	r3, [r7, #3]
 800174a:	460b      	mov	r3, r1
 800174c:	70bb      	strb	r3, [r7, #2]
 800174e:	4613      	mov	r3, r2
 8001750:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001752:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001754:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_HCD_HC_Init+0x2c>
 8001760:	2302      	movs	r3, #2
 8001762:	e09d      	b.n	80018a0 <HAL_HCD_HC_Init+0x168>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	1a9b      	subs	r3, r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	3319      	adds	r3, #25
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001780:	78fa      	ldrb	r2, [r7, #3]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	1a9b      	subs	r3, r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	3314      	adds	r3, #20
 8001790:	787a      	ldrb	r2, [r7, #1]
 8001792:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	3315      	adds	r3, #21
 80017a4:	78fa      	ldrb	r2, [r7, #3]
 80017a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017a8:	78fa      	ldrb	r2, [r7, #3]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	3326      	adds	r3, #38	@ 0x26
 80017b8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80017bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	78bb      	ldrb	r3, [r7, #2]
 80017c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017c6:	b2d8      	uxtb	r0, r3
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	1a9b      	subs	r3, r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	3316      	adds	r3, #22
 80017d6:	4602      	mov	r2, r0
 80017d8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	4619      	mov	r1, r3
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fbc8 	bl	8001f74 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80017e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	da0a      	bge.n	8001802 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	3317      	adds	r3, #23
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	e009      	b.n	8001816 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	1a9b      	subs	r3, r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	3317      	adds	r3, #23
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f004 fb72 	bl	8005f04 <USB_GetHostSpeed>
 8001820:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001822:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001826:	2b01      	cmp	r3, #1
 8001828:	d10b      	bne.n	8001842 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800182a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800182e:	2b01      	cmp	r3, #1
 8001830:	d107      	bne.n	8001842 <HAL_HCD_HC_Init+0x10a>
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d104      	bne.n	8001842 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2bbc      	cmp	r3, #188	@ 0xbc
 800183c:	d901      	bls.n	8001842 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800183e:	23bc      	movs	r3, #188	@ 0xbc
 8001840:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001842:	78fa      	ldrb	r2, [r7, #3]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	3318      	adds	r3, #24
 8001852:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001856:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001858:	78fa      	ldrb	r2, [r7, #3]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	b298      	uxth	r0, r3
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	3328      	adds	r3, #40	@ 0x28
 800186c:	4602      	mov	r2, r0
 800186e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	b29b      	uxth	r3, r3
 8001878:	787c      	ldrb	r4, [r7, #1]
 800187a:	78ba      	ldrb	r2, [r7, #2]
 800187c:	78f9      	ldrb	r1, [r7, #3]
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	4623      	mov	r3, r4
 800188e:	f004 fb61 	bl	8005f54 <USB_HC_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd90      	pop	{r4, r7, pc}

080018a8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_HCD_HC_Halt+0x1e>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e00f      	b.n	80018e6 <HAL_HCD_HC_Halt+0x3e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f004 fef3 	bl	80066c2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	4608      	mov	r0, r1
 80018fa:	4611      	mov	r1, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	4603      	mov	r3, r0
 8001900:	70fb      	strb	r3, [r7, #3]
 8001902:	460b      	mov	r3, r1
 8001904:	70bb      	strb	r3, [r7, #2]
 8001906:	4613      	mov	r3, r2
 8001908:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	3317      	adds	r3, #23
 800191a:	78ba      	ldrb	r2, [r7, #2]
 800191c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	3326      	adds	r3, #38	@ 0x26
 800192e:	787a      	ldrb	r2, [r7, #1]
 8001930:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001932:	7c3b      	ldrb	r3, [r7, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d114      	bne.n	8001962 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	332a      	adds	r3, #42	@ 0x2a
 8001948:	2203      	movs	r2, #3
 800194a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	3319      	adds	r3, #25
 800195c:	7f3a      	ldrb	r2, [r7, #28]
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	e009      	b.n	8001976 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	1a9b      	subs	r3, r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	332a      	adds	r3, #42	@ 0x2a
 8001972:	2202      	movs	r2, #2
 8001974:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001976:	787b      	ldrb	r3, [r7, #1]
 8001978:	2b03      	cmp	r3, #3
 800197a:	f200 8102 	bhi.w	8001b82 <HAL_HCD_HC_SubmitRequest+0x292>
 800197e:	a201      	add	r2, pc, #4	@ (adr r2, 8001984 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001984:	08001995 	.word	0x08001995
 8001988:	08001b6d 	.word	0x08001b6d
 800198c:	08001a59 	.word	0x08001a59
 8001990:	08001ae3 	.word	0x08001ae3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001994:	7c3b      	ldrb	r3, [r7, #16]
 8001996:	2b01      	cmp	r3, #1
 8001998:	f040 80f5 	bne.w	8001b86 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800199c:	78bb      	ldrb	r3, [r7, #2]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d12d      	bne.n	80019fe <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80019a2:	8b3b      	ldrh	r3, [r7, #24]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d109      	bne.n	80019bc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80019a8:	78fa      	ldrb	r2, [r7, #3]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	333d      	adds	r3, #61	@ 0x3d
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	333d      	adds	r3, #61	@ 0x3d
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10a      	bne.n	80019e8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019d2:	78fa      	ldrb	r2, [r7, #3]
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	1a9b      	subs	r3, r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	332a      	adds	r3, #42	@ 0x2a
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80019e6:	e0ce      	b.n	8001b86 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	332a      	adds	r3, #42	@ 0x2a
 80019f8:	2202      	movs	r2, #2
 80019fa:	701a      	strb	r2, [r3, #0]
      break;
 80019fc:	e0c3      	b.n	8001b86 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	1a9b      	subs	r3, r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	331a      	adds	r3, #26
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	f040 80b8 	bne.w	8001b86 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	333c      	adds	r3, #60	@ 0x3c
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10a      	bne.n	8001a42 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	1a9b      	subs	r3, r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	332a      	adds	r3, #42	@ 0x2a
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
      break;
 8001a40:	e0a1      	b.n	8001b86 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	332a      	adds	r3, #42	@ 0x2a
 8001a52:	2202      	movs	r2, #2
 8001a54:	701a      	strb	r2, [r3, #0]
      break;
 8001a56:	e096      	b.n	8001b86 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a58:	78bb      	ldrb	r3, [r7, #2]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d120      	bne.n	8001aa0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a5e:	78fa      	ldrb	r2, [r7, #3]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	1a9b      	subs	r3, r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	333d      	adds	r3, #61	@ 0x3d
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10a      	bne.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	332a      	adds	r3, #42	@ 0x2a
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a88:	e07e      	b.n	8001b88 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	332a      	adds	r3, #42	@ 0x2a
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	701a      	strb	r2, [r3, #0]
      break;
 8001a9e:	e073      	b.n	8001b88 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	333c      	adds	r3, #60	@ 0x3c
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10a      	bne.n	8001acc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ab6:	78fa      	ldrb	r2, [r7, #3]
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	332a      	adds	r3, #42	@ 0x2a
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
      break;
 8001aca:	e05d      	b.n	8001b88 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001acc:	78fa      	ldrb	r2, [r7, #3]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	1a9b      	subs	r3, r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	332a      	adds	r3, #42	@ 0x2a
 8001adc:	2202      	movs	r2, #2
 8001ade:	701a      	strb	r2, [r3, #0]
      break;
 8001ae0:	e052      	b.n	8001b88 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ae2:	78bb      	ldrb	r3, [r7, #2]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d120      	bne.n	8001b2a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ae8:	78fa      	ldrb	r2, [r7, #3]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	333d      	adds	r3, #61	@ 0x3d
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10a      	bne.n	8001b14 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001afe:	78fa      	ldrb	r2, [r7, #3]
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	1a9b      	subs	r3, r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	332a      	adds	r3, #42	@ 0x2a
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b12:	e039      	b.n	8001b88 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b14:	78fa      	ldrb	r2, [r7, #3]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	332a      	adds	r3, #42	@ 0x2a
 8001b24:	2202      	movs	r2, #2
 8001b26:	701a      	strb	r2, [r3, #0]
      break;
 8001b28:	e02e      	b.n	8001b88 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	333c      	adds	r3, #60	@ 0x3c
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10a      	bne.n	8001b56 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	1a9b      	subs	r3, r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	332a      	adds	r3, #42	@ 0x2a
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
      break;
 8001b54:	e018      	b.n	8001b88 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	332a      	adds	r3, #42	@ 0x2a
 8001b66:	2202      	movs	r2, #2
 8001b68:	701a      	strb	r2, [r3, #0]
      break;
 8001b6a:	e00d      	b.n	8001b88 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	332a      	adds	r3, #42	@ 0x2a
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
      break;
 8001b80:	e002      	b.n	8001b88 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001b82:	bf00      	nop
 8001b84:	e000      	b.n	8001b88 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001b86:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b88:	78fa      	ldrb	r2, [r7, #3]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	1a9b      	subs	r3, r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	332c      	adds	r3, #44	@ 0x2c
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	8b39      	ldrh	r1, [r7, #24]
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	1a9b      	subs	r3, r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4403      	add	r3, r0
 8001bac:	3334      	adds	r3, #52	@ 0x34
 8001bae:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	334c      	adds	r3, #76	@ 0x4c
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bc4:	78fa      	ldrb	r2, [r7, #3]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3338      	adds	r3, #56	@ 0x38
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3315      	adds	r3, #21
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	334d      	adds	r3, #77	@ 0x4d
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	4613      	mov	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	3310      	adds	r3, #16
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	1d19      	adds	r1, r3, #4
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	799b      	ldrb	r3, [r3, #6]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f004 fac6 	bl	80061ac <USB_HC_StartXfer>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop

08001c2c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 ffba 	bl	8005bbc <USB_GetMode>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	f040 80fb 	bne.w	8001e46 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 ff7d 	bl	8005b54 <USB_ReadInterrupts>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80f1 	beq.w	8001e44 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 ff74 	bl	8005b54 <USB_ReadInterrupts>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c76:	d104      	bne.n	8001c82 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001c80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 ff64 	bl	8005b54 <USB_ReadInterrupts>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c96:	d104      	bne.n	8001ca2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ca0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 ff54 	bl	8005b54 <USB_ReadInterrupts>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001cb6:	d104      	bne.n	8001cc2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001cc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 ff44 	bl	8005b54 <USB_ReadInterrupts>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d103      	bne.n	8001cde <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 ff36 	bl	8005b54 <USB_ReadInterrupts>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cf2:	d120      	bne.n	8001d36 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001cfc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d113      	bne.n	8001d36 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d0e:	2110      	movs	r1, #16
 8001d10:	6938      	ldr	r0, [r7, #16]
 8001d12:	f003 fe29 	bl	8005968 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d16:	6938      	ldr	r0, [r7, #16]
 8001d18:	f003 fe58 	bl	80059cc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	7a5b      	ldrb	r3, [r3, #9]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d105      	bne.n	8001d30 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f004 f84a 	bl	8005dc4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f00a fbc3 	bl	800c4bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 ff0a 	bl	8005b54 <USB_ReadInterrupts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d4a:	d102      	bne.n	8001d52 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f001 fd4d 	bl	80037ec <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 fefc 	bl	8005b54 <USB_ReadInterrupts>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d106      	bne.n	8001d74 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f00a fb8c 	bl	800c484 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2208      	movs	r2, #8
 8001d72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 feeb 	bl	8005b54 <USB_ReadInterrupts>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d88:	d139      	bne.n	8001dfe <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f004 fc86 	bl	80066a0 <USB_HC_ReadInterrupt>
 8001d94:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	e025      	b.n	8001de8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d018      	beq.n	8001de2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dc6:	d106      	bne.n	8001dd6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	4619      	mov	r1, r3
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f905 	bl	8001fde <HCD_HC_IN_IRQHandler>
 8001dd4:	e005      	b.n	8001de2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4619      	mov	r1, r3
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 ff67 	bl	8002cb0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	795b      	ldrb	r3, [r3, #5]
 8001dec:	461a      	mov	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d3d3      	bcc.n	8001d9c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fea6 	bl	8005b54 <USB_ReadInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b10      	cmp	r3, #16
 8001e10:	d101      	bne.n	8001e16 <HAL_HCD_IRQHandler+0x1ea>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_HCD_IRQHandler+0x1ec>
 8001e16:	2300      	movs	r3, #0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d014      	beq.n	8001e46 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0210 	bic.w	r2, r2, #16
 8001e2a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f001 fbfe 	bl	800362e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699a      	ldr	r2, [r3, #24]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0210 	orr.w	r2, r2, #16
 8001e40:	619a      	str	r2, [r3, #24]
 8001e42:	e000      	b.n	8001e46 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001e44:	bf00      	nop
    }
  }
}
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_HCD_Start+0x16>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e013      	b.n	8001e8a <HAL_HCD_Start+0x3e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2101      	movs	r1, #1
 8001e70:	4618      	mov	r0, r3
 8001e72:	f004 f80e 	bl	8005e92 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 fd06 	bl	800588c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_HCD_Stop+0x16>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e00d      	b.n	8001ec4 <HAL_HCD_Stop+0x32>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f004 fd61 	bl	800697c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 ffb0 	bl	8005e3e <USB_ResetPort>
 8001ede:	4603      	mov	r3, r0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	334c      	adds	r3, #76	@ 0x4c
 8001f04:	781b      	ldrb	r3, [r3, #0]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3338      	adds	r3, #56	@ 0x38
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f003 fff2 	bl	8005f32 <USB_GetCurrentFrame>
 8001f4e:	4603      	mov	r3, r0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f003 ffcd 	bl	8005f04 <USB_GetHostSpeed>
 8001f6a:	4603      	mov	r3, r0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	331a      	adds	r3, #26
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	331b      	adds	r3, #27
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001fa8:	78fa      	ldrb	r2, [r7, #3]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3325      	adds	r3, #37	@ 0x25
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	3324      	adds	r3, #36	@ 0x24
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 fdbc 	bl	8005b7a <USB_ReadChInterrupts>
 8002002:	4603      	mov	r3, r0
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b04      	cmp	r3, #4
 800200a:	d11a      	bne.n	8002042 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4413      	add	r3, r2
 8002014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002018:	461a      	mov	r2, r3
 800201a:	2304      	movs	r3, #4
 800201c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	334d      	adds	r3, #77	@ 0x4d
 800202e:	2207      	movs	r2, #7
 8002030:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	78fa      	ldrb	r2, [r7, #3]
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f004 fb41 	bl	80066c2 <USB_HC_Halt>
 8002040:	e09e      	b.n	8002180 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f003 fd95 	bl	8005b7a <USB_ReadChInterrupts>
 8002050:	4603      	mov	r3, r0
 8002052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800205a:	d11b      	bne.n	8002094 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002068:	461a      	mov	r2, r3
 800206a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800206e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	334d      	adds	r3, #77	@ 0x4d
 8002080:	2208      	movs	r2, #8
 8002082:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f004 fb18 	bl	80066c2 <USB_HC_Halt>
 8002092:	e075      	b.n	8002180 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f003 fd6c 	bl	8005b7a <USB_ReadChInterrupts>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d11a      	bne.n	80020e2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b8:	461a      	mov	r2, r3
 80020ba:	2308      	movs	r3, #8
 80020bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80020be:	78fa      	ldrb	r2, [r7, #3]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	334d      	adds	r3, #77	@ 0x4d
 80020ce:	2206      	movs	r2, #6
 80020d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f004 faf1 	bl	80066c2 <USB_HC_Halt>
 80020e0:	e04e      	b.n	8002180 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fd45 	bl	8005b7a <USB_ReadChInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fa:	d11b      	bne.n	8002134 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4413      	add	r3, r2
 8002104:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002108:	461a      	mov	r2, r3
 800210a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800210e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	334d      	adds	r3, #77	@ 0x4d
 8002120:	2209      	movs	r2, #9
 8002122:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f004 fac8 	bl	80066c2 <USB_HC_Halt>
 8002132:	e025      	b.n	8002180 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f003 fd1c 	bl	8005b7a <USB_ReadChInterrupts>
 8002142:	4603      	mov	r3, r0
 8002144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002148:	2b80      	cmp	r3, #128	@ 0x80
 800214a:	d119      	bne.n	8002180 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002158:	461a      	mov	r2, r3
 800215a:	2380      	movs	r3, #128	@ 0x80
 800215c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	334d      	adds	r3, #77	@ 0x4d
 800216e:	2207      	movs	r2, #7
 8002170:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f004 faa1 	bl	80066c2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f003 fcf6 	bl	8005b7a <USB_ReadChInterrupts>
 800218e:	4603      	mov	r3, r0
 8002190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002198:	d112      	bne.n	80021c0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 fa8d 	bl	80066c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021b4:	461a      	mov	r2, r3
 80021b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021ba:	6093      	str	r3, [r2, #8]
 80021bc:	f000 bd75 	b.w	8002caa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f003 fcd6 	bl	8005b7a <USB_ReadChInterrupts>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	f040 8128 	bne.w	800242a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021e6:	461a      	mov	r2, r3
 80021e8:	2320      	movs	r3, #32
 80021ea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	331b      	adds	r3, #27
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d119      	bne.n	8002236 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	331b      	adds	r3, #27
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	0151      	lsls	r1, r2, #5
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	440a      	add	r2, r1
 800222c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002234:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	799b      	ldrb	r3, [r3, #6]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01b      	beq.n	8002276 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	3330      	adds	r3, #48	@ 0x30
 800224e:	6819      	ldr	r1, [r3, #0]
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002262:	78fa      	ldrb	r2, [r7, #3]
 8002264:	1ac9      	subs	r1, r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4403      	add	r3, r0
 8002272:	3338      	adds	r3, #56	@ 0x38
 8002274:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	334d      	adds	r3, #77	@ 0x4d
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	3344      	adds	r3, #68	@ 0x44
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022aa:	461a      	mov	r2, r3
 80022ac:	2301      	movs	r3, #1
 80022ae:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	3326      	adds	r3, #38	@ 0x26
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3326      	adds	r3, #38	@ 0x26
 80022d6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d110      	bne.n	80022fe <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f004 f9ec 	bl	80066c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022f6:	461a      	mov	r2, r3
 80022f8:	2310      	movs	r3, #16
 80022fa:	6093      	str	r3, [r2, #8]
 80022fc:	e03d      	b.n	800237a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80022fe:	78fa      	ldrb	r2, [r7, #3]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	3326      	adds	r3, #38	@ 0x26
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d00a      	beq.n	800232a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	3326      	adds	r3, #38	@ 0x26
 8002324:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002326:	2b01      	cmp	r3, #1
 8002328:	d127      	bne.n	800237a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	0151      	lsls	r1, r2, #5
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	440a      	add	r2, r1
 8002340:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002344:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002348:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	334c      	adds	r3, #76	@ 0x4c
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	334c      	adds	r3, #76	@ 0x4c
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	4619      	mov	r1, r3
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f00a f8af 	bl	800c4d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	799b      	ldrb	r3, [r3, #6]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d13b      	bne.n	80023fa <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	3338      	adds	r3, #56	@ 0x38
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4403      	add	r3, r0
 80023a2:	3328      	adds	r3, #40	@ 0x28
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	440b      	add	r3, r1
 80023a8:	1e59      	subs	r1, r3, #1
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4403      	add	r3, r0
 80023b8:	3328      	adds	r3, #40	@ 0x28
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8470 	beq.w	8002caa <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	333c      	adds	r3, #60	@ 0x3c
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	f083 0301 	eor.w	r3, r3, #1
 80023e2:	b2d8      	uxtb	r0, r3
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	333c      	adds	r3, #60	@ 0x3c
 80023f2:	4602      	mov	r2, r0
 80023f4:	701a      	strb	r2, [r3, #0]
 80023f6:	f000 bc58 	b.w	8002caa <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	333c      	adds	r3, #60	@ 0x3c
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	f083 0301 	eor.w	r3, r3, #1
 8002412:	b2d8      	uxtb	r0, r3
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	333c      	adds	r3, #60	@ 0x3c
 8002422:	4602      	mov	r2, r0
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	f000 bc40 	b.w	8002caa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f003 fba1 	bl	8005b7a <USB_ReadChInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b20      	cmp	r3, #32
 8002440:	d131      	bne.n	80024a6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800244e:	461a      	mov	r2, r3
 8002450:	2320      	movs	r3, #32
 8002452:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	331a      	adds	r3, #26
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	f040 841f 	bne.w	8002caa <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	331b      	adds	r3, #27
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	334d      	adds	r3, #77	@ 0x4d
 8002490:	2203      	movs	r2, #3
 8002492:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f004 f910 	bl	80066c2 <USB_HC_Halt>
 80024a2:	f000 bc02 	b.w	8002caa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 fb63 	bl	8005b7a <USB_ReadChInterrupts>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	f040 8305 	bne.w	8002aca <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024cc:	461a      	mov	r2, r3
 80024ce:	2302      	movs	r3, #2
 80024d0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	334d      	adds	r3, #77	@ 0x4d
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d114      	bne.n	8002512 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	334d      	adds	r3, #77	@ 0x4d
 80024f8:	2202      	movs	r2, #2
 80024fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	334c      	adds	r3, #76	@ 0x4c
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	e2cc      	b.n	8002aac <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	1a9b      	subs	r3, r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	334d      	adds	r3, #77	@ 0x4d
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b06      	cmp	r3, #6
 8002526:	d114      	bne.n	8002552 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	334d      	adds	r3, #77	@ 0x4d
 8002538:	2202      	movs	r2, #2
 800253a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	334c      	adds	r3, #76	@ 0x4c
 800254c:	2205      	movs	r2, #5
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	e2ac      	b.n	8002aac <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	334d      	adds	r3, #77	@ 0x4d
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b07      	cmp	r3, #7
 8002566:	d00b      	beq.n	8002580 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	334d      	adds	r3, #77	@ 0x4d
 8002578:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800257a:	2b09      	cmp	r3, #9
 800257c:	f040 80a6 	bne.w	80026cc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	334d      	adds	r3, #77	@ 0x4d
 8002590:	2202      	movs	r2, #2
 8002592:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	3344      	adds	r3, #68	@ 0x44
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	1c59      	adds	r1, r3, #1
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4403      	add	r3, r0
 80025b4:	3344      	adds	r3, #68	@ 0x44
 80025b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	3344      	adds	r3, #68	@ 0x44
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d943      	bls.n	8002656 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	3344      	adds	r3, #68	@ 0x44
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	331a      	adds	r3, #26
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d123      	bne.n	8002640 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	331b      	adds	r3, #27
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	331c      	adds	r3, #28
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	78fa      	ldrb	r2, [r7, #3]
 8002630:	0151      	lsls	r1, r2, #5
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	440a      	add	r2, r1
 8002636:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800263a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800263e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	334c      	adds	r3, #76	@ 0x4c
 8002650:	2204      	movs	r2, #4
 8002652:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002654:	e229      	b.n	8002aaa <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	334c      	adds	r3, #76	@ 0x4c
 8002666:	2202      	movs	r2, #2
 8002668:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	3326      	adds	r3, #38	@ 0x26
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3326      	adds	r3, #38	@ 0x26
 8002690:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002692:	2b02      	cmp	r3, #2
 8002694:	f040 8209 	bne.w	8002aaa <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026ae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026b6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c4:	461a      	mov	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026ca:	e1ee      	b.n	8002aaa <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	334d      	adds	r3, #77	@ 0x4d
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b05      	cmp	r3, #5
 80026e0:	f040 80c8 	bne.w	8002874 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	334d      	adds	r3, #77	@ 0x4d
 80026f4:	2202      	movs	r2, #2
 80026f6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	331b      	adds	r3, #27
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	f040 81ce 	bne.w	8002aac <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	3326      	adds	r3, #38	@ 0x26
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b03      	cmp	r3, #3
 8002724:	d16b      	bne.n	80027fe <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	1a9b      	subs	r3, r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	3348      	adds	r3, #72	@ 0x48
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	1c59      	adds	r1, r3, #1
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4403      	add	r3, r0
 8002746:	3348      	adds	r3, #72	@ 0x48
 8002748:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	3348      	adds	r3, #72	@ 0x48
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d943      	bls.n	80027e8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	3348      	adds	r3, #72	@ 0x48
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	331b      	adds	r3, #27
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	3344      	adds	r3, #68	@ 0x44
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d809      	bhi.n	80027b2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	331c      	adds	r3, #28
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	0151      	lsls	r1, r2, #5
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	440a      	add	r2, r1
 80027c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80027d2:	78fa      	ldrb	r2, [r7, #3]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	334c      	adds	r3, #76	@ 0x4c
 80027e2:	2204      	movs	r2, #4
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	e014      	b.n	8002812 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	334c      	adds	r3, #76	@ 0x4c
 80027f8:	2202      	movs	r2, #2
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e009      	b.n	8002812 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	334c      	adds	r3, #76	@ 0x4c
 800280e:	2202      	movs	r2, #2
 8002810:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3326      	adds	r3, #38	@ 0x26
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00b      	beq.n	8002840 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	3326      	adds	r3, #38	@ 0x26
 8002838:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800283a:	2b02      	cmp	r3, #2
 800283c:	f040 8136 	bne.w	8002aac <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002856:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800285e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800286c:	461a      	mov	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e11b      	b.n	8002aac <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	334d      	adds	r3, #77	@ 0x4d
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b03      	cmp	r3, #3
 8002888:	f040 8081 	bne.w	800298e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	334d      	adds	r3, #77	@ 0x4d
 800289c:	2202      	movs	r2, #2
 800289e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	331b      	adds	r3, #27
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	f040 80fa 	bne.w	8002aac <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	334c      	adds	r3, #76	@ 0x4c
 80028c8:	2202      	movs	r2, #2
 80028ca:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	0151      	lsls	r1, r2, #5
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	440a      	add	r2, r1
 80028e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ea:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	0151      	lsls	r1, r2, #5
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	440a      	add	r2, r1
 8002902:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800290a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	0151      	lsls	r1, r2, #5
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	440a      	add	r2, r1
 8002922:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002926:	f023 0320 	bic.w	r3, r3, #32
 800292a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3326      	adds	r3, #38	@ 0x26
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00b      	beq.n	800295a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	3326      	adds	r3, #38	@ 0x26
 8002952:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002954:	2b02      	cmp	r3, #2
 8002956:	f040 80a9 	bne.w	8002aac <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002970:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002978:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002986:	461a      	mov	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	e08e      	b.n	8002aac <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	334d      	adds	r3, #77	@ 0x4d
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d143      	bne.n	8002a2c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	334d      	adds	r3, #77	@ 0x4d
 80029b4:	2202      	movs	r2, #2
 80029b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	334c      	adds	r3, #76	@ 0x4c
 80029c8:	2202      	movs	r2, #2
 80029ca:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	3326      	adds	r3, #38	@ 0x26
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3326      	adds	r3, #38	@ 0x26
 80029f2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d159      	bne.n	8002aac <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a0e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a16:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a24:	461a      	mov	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e03f      	b.n	8002aac <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	334d      	adds	r3, #77	@ 0x4d
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d126      	bne.n	8002a90 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	334d      	adds	r3, #77	@ 0x4d
 8002a52:	2202      	movs	r2, #2
 8002a54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	3344      	adds	r3, #68	@ 0x44
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	1c59      	adds	r1, r3, #1
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4403      	add	r3, r0
 8002a76:	3344      	adds	r3, #68	@ 0x44
 8002a78:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	334c      	adds	r3, #76	@ 0x4c
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e00d      	b.n	8002aac <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	334d      	adds	r3, #77	@ 0x4d
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	f000 8100 	beq.w	8002ca8 <HCD_HC_IN_IRQHandler+0xcca>
 8002aa8:	e000      	b.n	8002aac <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002aaa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	334c      	adds	r3, #76	@ 0x4c
 8002abc:	781a      	ldrb	r2, [r3, #0]
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f009 fd08 	bl	800c4d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ac8:	e0ef      	b.n	8002caa <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f003 f851 	bl	8005b7a <USB_ReadChInterrupts>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ade:	2b40      	cmp	r3, #64	@ 0x40
 8002ae0:	d12f      	bne.n	8002b42 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aee:	461a      	mov	r2, r3
 8002af0:	2340      	movs	r3, #64	@ 0x40
 8002af2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	334d      	adds	r3, #77	@ 0x4d
 8002b04:	2205      	movs	r2, #5
 8002b06:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	331a      	adds	r3, #26
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3344      	adds	r3, #68	@ 0x44
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 fdc1 	bl	80066c2 <USB_HC_Halt>
 8002b40:	e0b3      	b.n	8002caa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 f815 	bl	8005b7a <USB_ReadChInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	f040 80a7 	bne.w	8002caa <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3326      	adds	r3, #38	@ 0x26
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d11b      	bne.n	8002baa <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3344      	adds	r3, #68	@ 0x44
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	334d      	adds	r3, #77	@ 0x4d
 8002b96:	2204      	movs	r2, #4
 8002b98:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 fd8d 	bl	80066c2 <USB_HC_Halt>
 8002ba8:	e03f      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3326      	adds	r3, #38	@ 0x26
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	3326      	adds	r3, #38	@ 0x26
 8002bd0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d129      	bne.n	8002c2a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	3344      	adds	r3, #68	@ 0x44
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	799b      	ldrb	r3, [r3, #6]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HCD_HC_IN_IRQHandler+0xc2a>
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	331b      	adds	r3, #27
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d110      	bne.n	8002c2a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	334d      	adds	r3, #77	@ 0x4d
 8002c18:	2204      	movs	r2, #4
 8002c1a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 fd4c 	bl	80066c2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	331b      	adds	r3, #27
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d129      	bne.n	8002c94 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	331b      	adds	r3, #27
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	0151      	lsls	r1, r2, #5
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	440a      	add	r2, r1
 8002c6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c72:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	0151      	lsls	r1, r2, #5
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	440a      	add	r2, r1
 8002c8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c8e:	f043 0320 	orr.w	r3, r3, #32
 8002c92:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2310      	movs	r3, #16
 8002ca4:	6093      	str	r3, [r2, #8]
 8002ca6:	e000      	b.n	8002caa <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002ca8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f002 ff53 	bl	8005b7a <USB_ReadChInterrupts>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d11b      	bne.n	8002d16 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cea:	461a      	mov	r2, r3
 8002cec:	2304      	movs	r3, #4
 8002cee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	334d      	adds	r3, #77	@ 0x4d
 8002d00:	2207      	movs	r2, #7
 8002d02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 fcd8 	bl	80066c2 <USB_HC_Halt>
 8002d12:	f000 bc89 	b.w	8003628 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f002 ff2b 	bl	8005b7a <USB_ReadChInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	f040 8082 	bne.w	8002e34 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2320      	movs	r3, #32
 8002d40:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	3319      	adds	r3, #25
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d124      	bne.n	8002da2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	3319      	adds	r3, #25
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	334c      	adds	r3, #76	@ 0x4c
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	334d      	adds	r3, #77	@ 0x4d
 8002d90:	2203      	movs	r2, #3
 8002d92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f003 fc90 	bl	80066c2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	331a      	adds	r3, #26
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	f040 8437 	bne.w	8003628 <HCD_HC_OUT_IRQHandler+0x978>
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	331b      	adds	r3, #27
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f040 842b 	bne.w	8003628 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	3326      	adds	r3, #38	@ 0x26
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d009      	beq.n	8002dfc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	331b      	adds	r3, #27
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	334d      	adds	r3, #77	@ 0x4d
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 fc52 	bl	80066c2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3344      	adds	r3, #68	@ 0x44
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	e3f9      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f002 fe9c 	bl	8005b7a <USB_ReadChInterrupts>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e4c:	d111      	bne.n	8002e72 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e60:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f003 fc29 	bl	80066c2 <USB_HC_Halt>
 8002e70:	e3da      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f002 fe7d 	bl	8005b7a <USB_ReadChInterrupts>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d168      	bne.n	8002f5c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3344      	adds	r3, #68	@ 0x44
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f002 fe67 	bl	8005b7a <USB_ReadChInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb2:	2b40      	cmp	r3, #64	@ 0x40
 8002eb4:	d112      	bne.n	8002edc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3319      	adds	r3, #25
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2340      	movs	r3, #64	@ 0x40
 8002eda:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	331b      	adds	r3, #27
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d019      	beq.n	8002f26 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	331b      	adds	r3, #27
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	0151      	lsls	r1, r2, #5
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	440a      	add	r2, r1
 8002f1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f24:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f32:	461a      	mov	r2, r3
 8002f34:	2301      	movs	r3, #1
 8002f36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	334d      	adds	r3, #77	@ 0x4d
 8002f48:	2201      	movs	r2, #1
 8002f4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 fbb4 	bl	80066c2 <USB_HC_Halt>
 8002f5a:	e365      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f002 fe08 	bl	8005b7a <USB_ReadChInterrupts>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f70:	2b40      	cmp	r3, #64	@ 0x40
 8002f72:	d139      	bne.n	8002fe8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	334d      	adds	r3, #77	@ 0x4d
 8002f84:	2205      	movs	r2, #5
 8002f86:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	331a      	adds	r3, #26
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	3319      	adds	r3, #25
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3344      	adds	r3, #68	@ 0x44
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f003 fb77 	bl	80066c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2340      	movs	r3, #64	@ 0x40
 8002fe4:	6093      	str	r3, [r2, #8]
 8002fe6:	e31f      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f002 fdc2 	bl	8005b7a <USB_ReadChInterrupts>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d11a      	bne.n	8003036 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800300c:	461a      	mov	r2, r3
 800300e:	2308      	movs	r3, #8
 8003010:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	334d      	adds	r3, #77	@ 0x4d
 8003022:	2206      	movs	r2, #6
 8003024:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f003 fb47 	bl	80066c2 <USB_HC_Halt>
 8003034:	e2f8      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	4611      	mov	r1, r2
 800303e:	4618      	mov	r0, r3
 8003040:	f002 fd9b 	bl	8005b7a <USB_ReadChInterrupts>
 8003044:	4603      	mov	r3, r0
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b10      	cmp	r3, #16
 800304c:	d144      	bne.n	80030d8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	3344      	adds	r3, #68	@ 0x44
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	1a9b      	subs	r3, r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	334d      	adds	r3, #77	@ 0x4d
 8003072:	2204      	movs	r2, #4
 8003074:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	3319      	adds	r3, #25
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d114      	bne.n	80030b6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	3318      	adds	r3, #24
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	3319      	adds	r3, #25
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 faff 	bl	80066c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030d0:	461a      	mov	r2, r3
 80030d2:	2310      	movs	r3, #16
 80030d4:	6093      	str	r3, [r2, #8]
 80030d6:	e2a7      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f002 fd4a 	bl	8005b7a <USB_ReadChInterrupts>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ec:	2b80      	cmp	r3, #128	@ 0x80
 80030ee:	f040 8083 	bne.w	80031f8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	799b      	ldrb	r3, [r3, #6]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d111      	bne.n	800311e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	334d      	adds	r3, #77	@ 0x4d
 800310a:	2207      	movs	r2, #7
 800310c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f003 fad3 	bl	80066c2 <USB_HC_Halt>
 800311c:	e062      	b.n	80031e4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	3344      	adds	r3, #68	@ 0x44
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	1c59      	adds	r1, r3, #1
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4403      	add	r3, r0
 800313e:	3344      	adds	r3, #68	@ 0x44
 8003140:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	3344      	adds	r3, #68	@ 0x44
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d922      	bls.n	800319e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3344      	adds	r3, #68	@ 0x44
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334c      	adds	r3, #76	@ 0x4c
 800317c:	2204      	movs	r2, #4
 800317e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	334c      	adds	r3, #76	@ 0x4c
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	4619      	mov	r1, r3
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f009 f99e 	bl	800c4d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800319c:	e022      	b.n	80031e4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	334c      	adds	r3, #76	@ 0x4c
 80031ae:	2202      	movs	r2, #2
 80031b0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031c8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031d0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031de:	461a      	mov	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f0:	461a      	mov	r2, r3
 80031f2:	2380      	movs	r3, #128	@ 0x80
 80031f4:	6093      	str	r3, [r2, #8]
 80031f6:	e217      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f002 fcba 	bl	8005b7a <USB_ReadChInterrupts>
 8003206:	4603      	mov	r3, r0
 8003208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800320c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003210:	d11b      	bne.n	800324a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	334d      	adds	r3, #77	@ 0x4d
 8003222:	2209      	movs	r2, #9
 8003224:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f003 fa47 	bl	80066c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4413      	add	r3, r2
 800323c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003240:	461a      	mov	r2, r3
 8003242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003246:	6093      	str	r3, [r2, #8]
 8003248:	e1ee      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	4611      	mov	r1, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f002 fc91 	bl	8005b7a <USB_ReadChInterrupts>
 8003258:	4603      	mov	r3, r0
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b02      	cmp	r3, #2
 8003260:	f040 81df 	bne.w	8003622 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4413      	add	r3, r2
 800326c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003270:	461a      	mov	r2, r3
 8003272:	2302      	movs	r3, #2
 8003274:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	334d      	adds	r3, #77	@ 0x4d
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b01      	cmp	r3, #1
 800328a:	f040 8093 	bne.w	80033b4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	334d      	adds	r3, #77	@ 0x4d
 800329e:	2202      	movs	r2, #2
 80032a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	334c      	adds	r3, #76	@ 0x4c
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	3326      	adds	r3, #38	@ 0x26
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d00b      	beq.n	80032e4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	3326      	adds	r3, #38	@ 0x26
 80032dc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80032de:	2b03      	cmp	r3, #3
 80032e0:	f040 8190 	bne.w	8003604 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	799b      	ldrb	r3, [r3, #6]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d115      	bne.n	8003318 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	333d      	adds	r3, #61	@ 0x3d
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	f083 0301 	eor.w	r3, r3, #1
 8003304:	b2d8      	uxtb	r0, r3
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	333d      	adds	r3, #61	@ 0x3d
 8003314:	4602      	mov	r2, r0
 8003316:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	799b      	ldrb	r3, [r3, #6]
 800331c:	2b01      	cmp	r3, #1
 800331e:	f040 8171 	bne.w	8003604 <HCD_HC_OUT_IRQHandler+0x954>
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	3334      	adds	r3, #52	@ 0x34
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8165 	beq.w	8003604 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3334      	adds	r3, #52	@ 0x34
 800334a:	6819      	ldr	r1, [r3, #0]
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4403      	add	r3, r0
 800335a:	3328      	adds	r3, #40	@ 0x28
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	440b      	add	r3, r1
 8003360:	1e59      	subs	r1, r3, #1
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4403      	add	r3, r0
 8003370:	3328      	adds	r3, #40	@ 0x28
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	fbb1 f3f3 	udiv	r3, r1, r3
 8003378:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 813f 	beq.w	8003604 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	333d      	adds	r3, #61	@ 0x3d
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	f083 0301 	eor.w	r3, r3, #1
 800339e:	b2d8      	uxtb	r0, r3
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	333d      	adds	r3, #61	@ 0x3d
 80033ae:	4602      	mov	r2, r0
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	e127      	b.n	8003604 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	334d      	adds	r3, #77	@ 0x4d
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d120      	bne.n	800340c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	334d      	adds	r3, #77	@ 0x4d
 80033da:	2202      	movs	r2, #2
 80033dc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	331b      	adds	r3, #27
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	f040 8107 	bne.w	8003604 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033f6:	78fa      	ldrb	r2, [r7, #3]
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	334c      	adds	r3, #76	@ 0x4c
 8003406:	2202      	movs	r2, #2
 8003408:	701a      	strb	r2, [r3, #0]
 800340a:	e0fb      	b.n	8003604 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	334d      	adds	r3, #77	@ 0x4d
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b04      	cmp	r3, #4
 8003420:	d13a      	bne.n	8003498 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	334d      	adds	r3, #77	@ 0x4d
 8003432:	2202      	movs	r2, #2
 8003434:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	334c      	adds	r3, #76	@ 0x4c
 8003446:	2202      	movs	r2, #2
 8003448:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	331b      	adds	r3, #27
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	f040 80d1 	bne.w	8003604 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	331b      	adds	r3, #27
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4413      	add	r3, r2
 800347e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	0151      	lsls	r1, r2, #5
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	440a      	add	r2, r1
 800348c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003494:	6053      	str	r3, [r2, #4]
 8003496:	e0b5      	b.n	8003604 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003498:	78fa      	ldrb	r2, [r7, #3]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	334d      	adds	r3, #77	@ 0x4d
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d114      	bne.n	80034d8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	334d      	adds	r3, #77	@ 0x4d
 80034be:	2202      	movs	r2, #2
 80034c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	334c      	adds	r3, #76	@ 0x4c
 80034d2:	2202      	movs	r2, #2
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	e095      	b.n	8003604 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	334d      	adds	r3, #77	@ 0x4d
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d114      	bne.n	8003518 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	334d      	adds	r3, #77	@ 0x4d
 80034fe:	2202      	movs	r2, #2
 8003500:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	334c      	adds	r3, #76	@ 0x4c
 8003512:	2205      	movs	r2, #5
 8003514:	701a      	strb	r2, [r3, #0]
 8003516:	e075      	b.n	8003604 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	334d      	adds	r3, #77	@ 0x4d
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b07      	cmp	r3, #7
 800352c:	d00a      	beq.n	8003544 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	334d      	adds	r3, #77	@ 0x4d
 800353e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003540:	2b09      	cmp	r3, #9
 8003542:	d170      	bne.n	8003626 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	334d      	adds	r3, #77	@ 0x4d
 8003554:	2202      	movs	r2, #2
 8003556:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	3344      	adds	r3, #68	@ 0x44
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	1c59      	adds	r1, r3, #1
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4403      	add	r3, r0
 8003578:	3344      	adds	r3, #68	@ 0x44
 800357a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	3344      	adds	r3, #68	@ 0x44
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d914      	bls.n	80035bc <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	3344      	adds	r3, #68	@ 0x44
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	334c      	adds	r3, #76	@ 0x4c
 80035b6:	2204      	movs	r2, #4
 80035b8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035ba:	e022      	b.n	8003602 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	334c      	adds	r3, #76	@ 0x4c
 80035cc:	2202      	movs	r2, #2
 80035ce:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035e6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035ee:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035fc:	461a      	mov	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003602:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	334c      	adds	r3, #76	@ 0x4c
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	4619      	mov	r1, r3
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f008 ff5c 	bl	800c4d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003620:	e002      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003626:	bf00      	nop
  }
}
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b08a      	sub	sp, #40	@ 0x28
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	0c5b      	lsrs	r3, r3, #17
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003662:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d004      	beq.n	8003674 <HCD_RXQLVL_IRQHandler+0x46>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b05      	cmp	r3, #5
 800366e:	f000 80b6 	beq.w	80037de <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003672:	e0b7      	b.n	80037e4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80b3 	beq.w	80037e2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	332c      	adds	r3, #44	@ 0x2c
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80a7 	beq.w	80037e2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4613      	mov	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	3338      	adds	r3, #56	@ 0x38
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	18d1      	adds	r1, r2, r3
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4403      	add	r3, r0
 80036b8:	3334      	adds	r3, #52	@ 0x34
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4299      	cmp	r1, r3
 80036be:	f200 8083 	bhi.w	80037c8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4613      	mov	r3, r2
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	332c      	adds	r3, #44	@ 0x2c
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	b292      	uxth	r2, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	f002 f9e1 	bl	8005aa4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4613      	mov	r3, r2
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	332c      	adds	r3, #44	@ 0x2c
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	18d1      	adds	r1, r2, r3
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4613      	mov	r3, r2
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4403      	add	r3, r0
 8003706:	332c      	adds	r3, #44	@ 0x2c
 8003708:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	3338      	adds	r3, #56	@ 0x38
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	18d1      	adds	r1, r2, r3
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4403      	add	r3, r0
 800372e:	3338      	adds	r3, #56	@ 0x38
 8003730:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	4413      	add	r3, r2
 800373a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	0cdb      	lsrs	r3, r3, #19
 8003742:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003746:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	3328      	adds	r3, #40	@ 0x28
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4293      	cmp	r3, r2
 8003760:	d13f      	bne.n	80037e2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d03c      	beq.n	80037e2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800377e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003786:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003794:	461a      	mov	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	333c      	adds	r3, #60	@ 0x3c
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	f083 0301 	eor.w	r3, r3, #1
 80037b0:	b2d8      	uxtb	r0, r3
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4613      	mov	r3, r2
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	333c      	adds	r3, #60	@ 0x3c
 80037c2:	4602      	mov	r2, r0
 80037c4:	701a      	strb	r2, [r3, #0]
      break;
 80037c6:	e00c      	b.n	80037e2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	334c      	adds	r3, #76	@ 0x4c
 80037d8:	2204      	movs	r2, #4
 80037da:	701a      	strb	r2, [r3, #0]
      break;
 80037dc:	e001      	b.n	80037e2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80037de:	bf00      	nop
 80037e0:	e000      	b.n	80037e4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80037e2:	bf00      	nop
  }
}
 80037e4:	bf00      	nop
 80037e6:	3728      	adds	r7, #40	@ 0x28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003818:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b02      	cmp	r3, #2
 8003822:	d10b      	bne.n	800383c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b01      	cmp	r3, #1
 800382c:	d102      	bne.n	8003834 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f008 fe36 	bl	800c4a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f043 0302 	orr.w	r3, r3, #2
 800383a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b08      	cmp	r3, #8
 8003844:	d132      	bne.n	80038ac <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f043 0308 	orr.w	r3, r3, #8
 800384c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b04      	cmp	r3, #4
 8003856:	d126      	bne.n	80038a6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7a5b      	ldrb	r3, [r3, #9]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d113      	bne.n	8003888 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003866:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800386a:	d106      	bne.n	800387a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2102      	movs	r1, #2
 8003872:	4618      	mov	r0, r3
 8003874:	f002 faa6 	bl	8005dc4 <USB_InitFSLSPClkSel>
 8003878:	e011      	b.n	800389e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2101      	movs	r1, #1
 8003880:	4618      	mov	r0, r3
 8003882:	f002 fa9f 	bl	8005dc4 <USB_InitFSLSPClkSel>
 8003886:	e00a      	b.n	800389e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	79db      	ldrb	r3, [r3, #7]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d106      	bne.n	800389e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003896:	461a      	mov	r2, r3
 8003898:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800389c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f008 fe2c 	bl	800c4fc <HAL_HCD_PortEnabled_Callback>
 80038a4:	e002      	b.n	80038ac <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f008 fe36 	bl	800c518 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d103      	bne.n	80038be <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f043 0320 	orr.w	r3, r3, #32
 80038bc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038c4:	461a      	mov	r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	6013      	str	r3, [r2, #0]
}
 80038ca:	bf00      	nop
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e12b      	b.n	8003b3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fd f926 	bl	8000b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2224      	movs	r2, #36	@ 0x24
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003936:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003938:	f001 fa20 	bl	8004d7c <HAL_RCC_GetPCLK1Freq>
 800393c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4a81      	ldr	r2, [pc, #516]	@ (8003b48 <HAL_I2C_Init+0x274>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d807      	bhi.n	8003958 <HAL_I2C_Init+0x84>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a80      	ldr	r2, [pc, #512]	@ (8003b4c <HAL_I2C_Init+0x278>)
 800394c:	4293      	cmp	r3, r2
 800394e:	bf94      	ite	ls
 8003950:	2301      	movls	r3, #1
 8003952:	2300      	movhi	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	e006      	b.n	8003966 <HAL_I2C_Init+0x92>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b50 <HAL_I2C_Init+0x27c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	bf94      	ite	ls
 8003960:	2301      	movls	r3, #1
 8003962:	2300      	movhi	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e0e7      	b.n	8003b3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4a78      	ldr	r2, [pc, #480]	@ (8003b54 <HAL_I2C_Init+0x280>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	0c9b      	lsrs	r3, r3, #18
 8003978:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a6a      	ldr	r2, [pc, #424]	@ (8003b48 <HAL_I2C_Init+0x274>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d802      	bhi.n	80039a8 <HAL_I2C_Init+0xd4>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	3301      	adds	r3, #1
 80039a6:	e009      	b.n	80039bc <HAL_I2C_Init+0xe8>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039ae:	fb02 f303 	mul.w	r3, r2, r3
 80039b2:	4a69      	ldr	r2, [pc, #420]	@ (8003b58 <HAL_I2C_Init+0x284>)
 80039b4:	fba2 2303 	umull	r2, r3, r2, r3
 80039b8:	099b      	lsrs	r3, r3, #6
 80039ba:	3301      	adds	r3, #1
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	495c      	ldr	r1, [pc, #368]	@ (8003b48 <HAL_I2C_Init+0x274>)
 80039d8:	428b      	cmp	r3, r1
 80039da:	d819      	bhi.n	8003a10 <HAL_I2C_Init+0x13c>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	1e59      	subs	r1, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ea:	1c59      	adds	r1, r3, #1
 80039ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039f0:	400b      	ands	r3, r1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_I2C_Init+0x138>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1e59      	subs	r1, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a04:	3301      	adds	r3, #1
 8003a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0a:	e051      	b.n	8003ab0 <HAL_I2C_Init+0x1dc>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	e04f      	b.n	8003ab0 <HAL_I2C_Init+0x1dc>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d111      	bne.n	8003a3c <HAL_I2C_Init+0x168>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	1e58      	subs	r0, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	440b      	add	r3, r1
 8003a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e012      	b.n	8003a62 <HAL_I2C_Init+0x18e>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1e58      	subs	r0, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	0099      	lsls	r1, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_I2C_Init+0x196>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e022      	b.n	8003ab0 <HAL_I2C_Init+0x1dc>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10e      	bne.n	8003a90 <HAL_I2C_Init+0x1bc>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1e58      	subs	r0, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	440b      	add	r3, r1
 8003a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a84:	3301      	adds	r3, #1
 8003a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a8e:	e00f      	b.n	8003ab0 <HAL_I2C_Init+0x1dc>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1e58      	subs	r0, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	0099      	lsls	r1, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	6809      	ldr	r1, [r1, #0]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ade:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6911      	ldr	r1, [r2, #16]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68d2      	ldr	r2, [r2, #12]
 8003aea:	4311      	orrs	r1, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	000186a0 	.word	0x000186a0
 8003b4c:	001e847f 	.word	0x001e847f
 8003b50:	003d08ff 	.word	0x003d08ff
 8003b54:	431bde83 	.word	0x431bde83
 8003b58:	10624dd3 	.word	0x10624dd3

08003b5c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e128      	b.n	8003dc0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a90      	ldr	r2, [pc, #576]	@ (8003dc8 <HAL_I2S_Init+0x26c>)
 8003b86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7fd f827 	bl	8000bdc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2202      	movs	r2, #2
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ba4:	f023 030f 	bic.w	r3, r3, #15
 8003ba8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d060      	beq.n	8003c7c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003bc2:	2310      	movs	r3, #16
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e001      	b.n	8003bcc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003bc8:	2320      	movs	r3, #32
 8003bca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b20      	cmp	r3, #32
 8003bd2:	d802      	bhi.n	8003bda <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003bda:	2001      	movs	r0, #1
 8003bdc:	f001 f9f6 	bl	8004fcc <HAL_RCCEx_GetPeriphCLKFreq>
 8003be0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bea:	d125      	bne.n	8003c38 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d010      	beq.n	8003c16 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	461a      	mov	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	3305      	adds	r3, #5
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	e01f      	b.n	8003c56 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	461a      	mov	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	3305      	adds	r3, #5
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	e00e      	b.n	8003c56 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	461a      	mov	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c52:	3305      	adds	r3, #5
 8003c54:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4a5c      	ldr	r2, [pc, #368]	@ (8003dcc <HAL_I2S_Init+0x270>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	08db      	lsrs	r3, r3, #3
 8003c60:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	e003      	b.n	8003c84 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d902      	bls.n	8003c90 <HAL_I2S_Init+0x134>
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	2bff      	cmp	r3, #255	@ 0xff
 8003c8e:	d907      	bls.n	8003ca0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c94:	f043 0210 	orr.w	r2, r3, #16
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e08f      	b.n	8003dc0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	ea42 0103 	orr.w	r1, r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003cbe:	f023 030f 	bic.w	r3, r3, #15
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6851      	ldr	r1, [r2, #4]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6892      	ldr	r2, [r2, #8]
 8003cca:	4311      	orrs	r1, r2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	68d2      	ldr	r2, [r2, #12]
 8003cd0:	4311      	orrs	r1, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6992      	ldr	r2, [r2, #24]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ce2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d161      	bne.n	8003db0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a38      	ldr	r2, [pc, #224]	@ (8003dd0 <HAL_I2S_Init+0x274>)
 8003cf0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a37      	ldr	r2, [pc, #220]	@ (8003dd4 <HAL_I2S_Init+0x278>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <HAL_I2S_Init+0x1a4>
 8003cfc:	4b36      	ldr	r3, [pc, #216]	@ (8003dd8 <HAL_I2S_Init+0x27c>)
 8003cfe:	e001      	b.n	8003d04 <HAL_I2S_Init+0x1a8>
 8003d00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	4932      	ldr	r1, [pc, #200]	@ (8003dd4 <HAL_I2S_Init+0x278>)
 8003d0c:	428a      	cmp	r2, r1
 8003d0e:	d101      	bne.n	8003d14 <HAL_I2S_Init+0x1b8>
 8003d10:	4a31      	ldr	r2, [pc, #196]	@ (8003dd8 <HAL_I2S_Init+0x27c>)
 8003d12:	e001      	b.n	8003d18 <HAL_I2S_Init+0x1bc>
 8003d14:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003d18:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d1c:	f023 030f 	bic.w	r3, r3, #15
 8003d20:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a2b      	ldr	r2, [pc, #172]	@ (8003dd4 <HAL_I2S_Init+0x278>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d101      	bne.n	8003d30 <HAL_I2S_Init+0x1d4>
 8003d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd8 <HAL_I2S_Init+0x27c>)
 8003d2e:	e001      	b.n	8003d34 <HAL_I2S_Init+0x1d8>
 8003d30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d34:	2202      	movs	r2, #2
 8003d36:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a25      	ldr	r2, [pc, #148]	@ (8003dd4 <HAL_I2S_Init+0x278>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d101      	bne.n	8003d46 <HAL_I2S_Init+0x1ea>
 8003d42:	4b25      	ldr	r3, [pc, #148]	@ (8003dd8 <HAL_I2S_Init+0x27c>)
 8003d44:	e001      	b.n	8003d4a <HAL_I2S_Init+0x1ee>
 8003d46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d56:	d003      	beq.n	8003d60 <HAL_I2S_Init+0x204>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d103      	bne.n	8003d68 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003d60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	e001      	b.n	8003d6c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d76:	4313      	orrs	r3, r2
 8003d78:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d80:	4313      	orrs	r3, r2
 8003d82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	897b      	ldrh	r3, [r7, #10]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d98:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd4 <HAL_I2S_Init+0x278>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d101      	bne.n	8003da8 <HAL_I2S_Init+0x24c>
 8003da4:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd8 <HAL_I2S_Init+0x27c>)
 8003da6:	e001      	b.n	8003dac <HAL_I2S_Init+0x250>
 8003da8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dac:	897a      	ldrh	r2, [r7, #10]
 8003dae:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3720      	adds	r7, #32
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	08003ed3 	.word	0x08003ed3
 8003dcc:	cccccccd 	.word	0xcccccccd
 8003dd0:	08003fe9 	.word	0x08003fe9
 8003dd4:	40003800 	.word	0x40003800
 8003dd8:	40003400 	.word	0x40003400

08003ddc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e24:	881a      	ldrh	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	1c9a      	adds	r2, r3, #2
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10e      	bne.n	8003e6c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e5c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ffb8 	bl	8003ddc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e86:	b292      	uxth	r2, r2
 8003e88:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8e:	1c9a      	adds	r2, r3, #2
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10e      	bne.n	8003eca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003eba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff ff93 	bl	8003df0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d13a      	bne.n	8003f64 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d109      	bne.n	8003f0c <I2S_IRQHandler+0x3a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f02:	2b40      	cmp	r3, #64	@ 0x40
 8003f04:	d102      	bne.n	8003f0c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ffb4 	bl	8003e74 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f12:	2b40      	cmp	r3, #64	@ 0x40
 8003f14:	d126      	bne.n	8003f64 <I2S_IRQHandler+0x92>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d11f      	bne.n	8003f64 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f34:	2300      	movs	r3, #0
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	f043 0202 	orr.w	r2, r3, #2
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff ff50 	bl	8003e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d136      	bne.n	8003fde <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d109      	bne.n	8003f8e <I2S_IRQHandler+0xbc>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f84:	2b80      	cmp	r3, #128	@ 0x80
 8003f86:	d102      	bne.n	8003f8e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff ff45 	bl	8003e18 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d122      	bne.n	8003fde <I2S_IRQHandler+0x10c>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d11b      	bne.n	8003fde <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fb4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd0:	f043 0204 	orr.w	r2, r3, #4
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff ff13 	bl	8003e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fde:	bf00      	nop
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a92      	ldr	r2, [pc, #584]	@ (8004248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d101      	bne.n	8004006 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004002:	4b92      	ldr	r3, [pc, #584]	@ (800424c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004004:	e001      	b.n	800400a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004006:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a8b      	ldr	r2, [pc, #556]	@ (8004248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d101      	bne.n	8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004020:	4b8a      	ldr	r3, [pc, #552]	@ (800424c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004022:	e001      	b.n	8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004024:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004034:	d004      	beq.n	8004040 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f040 8099 	bne.w	8004172 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b02      	cmp	r3, #2
 8004048:	d107      	bne.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f925 	bl	80042a4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b01      	cmp	r3, #1
 8004062:	d107      	bne.n	8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f9c8 	bl	8004404 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407a:	2b40      	cmp	r3, #64	@ 0x40
 800407c:	d13a      	bne.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b00      	cmp	r3, #0
 8004086:	d035      	beq.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a6e      	ldr	r2, [pc, #440]	@ (8004248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004092:	4b6e      	ldr	r3, [pc, #440]	@ (800424c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004094:	e001      	b.n	800409a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004096:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4969      	ldr	r1, [pc, #420]	@ (8004248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040a2:	428b      	cmp	r3, r1
 80040a4:	d101      	bne.n	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80040a6:	4b69      	ldr	r3, [pc, #420]	@ (800424c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040a8:	e001      	b.n	80040ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80040aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040b2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e6:	f043 0202 	orr.w	r2, r3, #2
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff fe88 	bl	8003e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	f040 80c3 	bne.w	8004286 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 80bd 	beq.w	8004286 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800411a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a49      	ldr	r2, [pc, #292]	@ (8004248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d101      	bne.n	800412a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004126:	4b49      	ldr	r3, [pc, #292]	@ (800424c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004128:	e001      	b.n	800412e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800412a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4944      	ldr	r1, [pc, #272]	@ (8004248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004136:	428b      	cmp	r3, r1
 8004138:	d101      	bne.n	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800413a:	4b44      	ldr	r3, [pc, #272]	@ (800424c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800413c:	e001      	b.n	8004142 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800413e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004142:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004146:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004148:	2300      	movs	r3, #0
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004162:	f043 0204 	orr.w	r2, r3, #4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fe4a 	bl	8003e04 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004170:	e089      	b.n	8004286 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b02      	cmp	r3, #2
 800417a:	d107      	bne.n	800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f8be 	bl	8004308 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d107      	bne.n	80041a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f8fd 	bl	80043a0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ac:	2b40      	cmp	r3, #64	@ 0x40
 80041ae:	d12f      	bne.n	8004210 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d02a      	beq.n	8004210 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041c8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d101      	bne.n	80041d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80041d4:	4b1d      	ldr	r3, [pc, #116]	@ (800424c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041d6:	e001      	b.n	80041dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80041d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4919      	ldr	r1, [pc, #100]	@ (8004248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d101      	bne.n	80041ec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80041e8:	4b18      	ldr	r3, [pc, #96]	@ (800424c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041ea:	e001      	b.n	80041f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80041ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004202:	f043 0202 	orr.w	r2, r3, #2
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff fdfa 	bl	8003e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b08      	cmp	r3, #8
 8004218:	d136      	bne.n	8004288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b00      	cmp	r3, #0
 8004222:	d031      	beq.n	8004288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a07      	ldr	r2, [pc, #28]	@ (8004248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d101      	bne.n	8004232 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800422e:	4b07      	ldr	r3, [pc, #28]	@ (800424c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004230:	e001      	b.n	8004236 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004232:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4902      	ldr	r1, [pc, #8]	@ (8004248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800423e:	428b      	cmp	r3, r1
 8004240:	d106      	bne.n	8004250 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004242:	4b02      	ldr	r3, [pc, #8]	@ (800424c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004244:	e006      	b.n	8004254 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004246:	bf00      	nop
 8004248:	40003800 	.word	0x40003800
 800424c:	40003400 	.word	0x40003400
 8004250:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004254:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004258:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004268:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	f043 0204 	orr.w	r2, r3, #4
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff fdc0 	bl	8003e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004284:	e000      	b.n	8004288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004286:	bf00      	nop
}
 8004288:	bf00      	nop
 800428a:	3720      	adds	r7, #32
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	1c99      	adds	r1, r3, #2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6251      	str	r1, [r2, #36]	@ 0x24
 80042b6:	881a      	ldrh	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d113      	bne.n	80042fe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ffc9 	bl	8004290 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	1c99      	adds	r1, r3, #2
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6251      	str	r1, [r2, #36]	@ 0x24
 800431a:	8819      	ldrh	r1, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1d      	ldr	r2, [pc, #116]	@ (8004398 <I2SEx_TxISR_I2SExt+0x90>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d101      	bne.n	800432a <I2SEx_TxISR_I2SExt+0x22>
 8004326:	4b1d      	ldr	r3, [pc, #116]	@ (800439c <I2SEx_TxISR_I2SExt+0x94>)
 8004328:	e001      	b.n	800432e <I2SEx_TxISR_I2SExt+0x26>
 800432a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800432e:	460a      	mov	r2, r1
 8004330:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d121      	bne.n	800438e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a12      	ldr	r2, [pc, #72]	@ (8004398 <I2SEx_TxISR_I2SExt+0x90>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d101      	bne.n	8004358 <I2SEx_TxISR_I2SExt+0x50>
 8004354:	4b11      	ldr	r3, [pc, #68]	@ (800439c <I2SEx_TxISR_I2SExt+0x94>)
 8004356:	e001      	b.n	800435c <I2SEx_TxISR_I2SExt+0x54>
 8004358:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	490d      	ldr	r1, [pc, #52]	@ (8004398 <I2SEx_TxISR_I2SExt+0x90>)
 8004364:	428b      	cmp	r3, r1
 8004366:	d101      	bne.n	800436c <I2SEx_TxISR_I2SExt+0x64>
 8004368:	4b0c      	ldr	r3, [pc, #48]	@ (800439c <I2SEx_TxISR_I2SExt+0x94>)
 800436a:	e001      	b.n	8004370 <I2SEx_TxISR_I2SExt+0x68>
 800436c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004370:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004374:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d106      	bne.n	800438e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff ff81 	bl	8004290 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40003800 	.word	0x40003800
 800439c:	40003400 	.word	0x40003400

080043a0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68d8      	ldr	r0, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b2:	1c99      	adds	r1, r3, #2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80043b8:	b282      	uxth	r2, r0
 80043ba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d113      	bne.n	80043fc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043e2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff ff4a 	bl	8004290 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a20      	ldr	r2, [pc, #128]	@ (8004494 <I2SEx_RxISR_I2SExt+0x90>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <I2SEx_RxISR_I2SExt+0x16>
 8004416:	4b20      	ldr	r3, [pc, #128]	@ (8004498 <I2SEx_RxISR_I2SExt+0x94>)
 8004418:	e001      	b.n	800441e <I2SEx_RxISR_I2SExt+0x1a>
 800441a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800441e:	68d8      	ldr	r0, [r3, #12]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004424:	1c99      	adds	r1, r3, #2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800442a:	b282      	uxth	r2, r0
 800442c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d121      	bne.n	800448a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a12      	ldr	r2, [pc, #72]	@ (8004494 <I2SEx_RxISR_I2SExt+0x90>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d101      	bne.n	8004454 <I2SEx_RxISR_I2SExt+0x50>
 8004450:	4b11      	ldr	r3, [pc, #68]	@ (8004498 <I2SEx_RxISR_I2SExt+0x94>)
 8004452:	e001      	b.n	8004458 <I2SEx_RxISR_I2SExt+0x54>
 8004454:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	490d      	ldr	r1, [pc, #52]	@ (8004494 <I2SEx_RxISR_I2SExt+0x90>)
 8004460:	428b      	cmp	r3, r1
 8004462:	d101      	bne.n	8004468 <I2SEx_RxISR_I2SExt+0x64>
 8004464:	4b0c      	ldr	r3, [pc, #48]	@ (8004498 <I2SEx_RxISR_I2SExt+0x94>)
 8004466:	e001      	b.n	800446c <I2SEx_RxISR_I2SExt+0x68>
 8004468:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800446c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004470:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d106      	bne.n	800448a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff ff03 	bl	8004290 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40003800 	.word	0x40003800
 8004498:	40003400 	.word	0x40003400

0800449c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e267      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d075      	beq.n	80045a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044ba:	4b88      	ldr	r3, [pc, #544]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d00c      	beq.n	80044e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c6:	4b85      	ldr	r3, [pc, #532]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d112      	bne.n	80044f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d2:	4b82      	ldr	r3, [pc, #520]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044de:	d10b      	bne.n	80044f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e0:	4b7e      	ldr	r3, [pc, #504]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d05b      	beq.n	80045a4 <HAL_RCC_OscConfig+0x108>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d157      	bne.n	80045a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e242      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004500:	d106      	bne.n	8004510 <HAL_RCC_OscConfig+0x74>
 8004502:	4b76      	ldr	r3, [pc, #472]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a75      	ldr	r2, [pc, #468]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e01d      	b.n	800454c <HAL_RCC_OscConfig+0xb0>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004518:	d10c      	bne.n	8004534 <HAL_RCC_OscConfig+0x98>
 800451a:	4b70      	ldr	r3, [pc, #448]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a6f      	ldr	r2, [pc, #444]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	4b6d      	ldr	r3, [pc, #436]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a6c      	ldr	r2, [pc, #432]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e00b      	b.n	800454c <HAL_RCC_OscConfig+0xb0>
 8004534:	4b69      	ldr	r3, [pc, #420]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a68      	ldr	r2, [pc, #416]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 800453a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	4b66      	ldr	r3, [pc, #408]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a65      	ldr	r2, [pc, #404]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800454a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d013      	beq.n	800457c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fc fd90 	bl	8001078 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800455c:	f7fc fd8c 	bl	8001078 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	@ 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e207      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456e:	4b5b      	ldr	r3, [pc, #364]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0xc0>
 800457a:	e014      	b.n	80045a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fc fd7c 	bl	8001078 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004584:	f7fc fd78 	bl	8001078 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b64      	cmp	r3, #100	@ 0x64
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e1f3      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004596:	4b51      	ldr	r3, [pc, #324]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0xe8>
 80045a2:	e000      	b.n	80045a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d063      	beq.n	800467a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045b2:	4b4a      	ldr	r3, [pc, #296]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045be:	4b47      	ldr	r3, [pc, #284]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d11c      	bne.n	8004604 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ca:	4b44      	ldr	r3, [pc, #272]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d116      	bne.n	8004604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d6:	4b41      	ldr	r3, [pc, #260]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_RCC_OscConfig+0x152>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d001      	beq.n	80045ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e1c7      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ee:	4b3b      	ldr	r3, [pc, #236]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4937      	ldr	r1, [pc, #220]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004602:	e03a      	b.n	800467a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d020      	beq.n	800464e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800460c:	4b34      	ldr	r3, [pc, #208]	@ (80046e0 <HAL_RCC_OscConfig+0x244>)
 800460e:	2201      	movs	r2, #1
 8004610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004612:	f7fc fd31 	bl	8001078 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461a:	f7fc fd2d 	bl	8001078 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e1a8      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462c:	4b2b      	ldr	r3, [pc, #172]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0f0      	beq.n	800461a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004638:	4b28      	ldr	r3, [pc, #160]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4925      	ldr	r1, [pc, #148]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004648:	4313      	orrs	r3, r2
 800464a:	600b      	str	r3, [r1, #0]
 800464c:	e015      	b.n	800467a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800464e:	4b24      	ldr	r3, [pc, #144]	@ (80046e0 <HAL_RCC_OscConfig+0x244>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fc fd10 	bl	8001078 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465c:	f7fc fd0c 	bl	8001078 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e187      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466e:	4b1b      	ldr	r3, [pc, #108]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d036      	beq.n	80046f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d016      	beq.n	80046bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800468e:	4b15      	ldr	r3, [pc, #84]	@ (80046e4 <HAL_RCC_OscConfig+0x248>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004694:	f7fc fcf0 	bl	8001078 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469c:	f7fc fcec 	bl	8001078 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e167      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ae:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80046b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCC_OscConfig+0x200>
 80046ba:	e01b      	b.n	80046f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046bc:	4b09      	ldr	r3, [pc, #36]	@ (80046e4 <HAL_RCC_OscConfig+0x248>)
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c2:	f7fc fcd9 	bl	8001078 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c8:	e00e      	b.n	80046e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ca:	f7fc fcd5 	bl	8001078 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d907      	bls.n	80046e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e150      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
 80046dc:	40023800 	.word	0x40023800
 80046e0:	42470000 	.word	0x42470000
 80046e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e8:	4b88      	ldr	r3, [pc, #544]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80046ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1ea      	bne.n	80046ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8097 	beq.w	8004830 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004702:	2300      	movs	r3, #0
 8004704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004706:	4b81      	ldr	r3, [pc, #516]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10f      	bne.n	8004732 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	4b7d      	ldr	r3, [pc, #500]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	4a7c      	ldr	r2, [pc, #496]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004720:	6413      	str	r3, [r2, #64]	@ 0x40
 8004722:	4b7a      	ldr	r3, [pc, #488]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800472e:	2301      	movs	r3, #1
 8004730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004732:	4b77      	ldr	r3, [pc, #476]	@ (8004910 <HAL_RCC_OscConfig+0x474>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d118      	bne.n	8004770 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800473e:	4b74      	ldr	r3, [pc, #464]	@ (8004910 <HAL_RCC_OscConfig+0x474>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a73      	ldr	r2, [pc, #460]	@ (8004910 <HAL_RCC_OscConfig+0x474>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474a:	f7fc fc95 	bl	8001078 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004752:	f7fc fc91 	bl	8001078 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e10c      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004764:	4b6a      	ldr	r3, [pc, #424]	@ (8004910 <HAL_RCC_OscConfig+0x474>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d106      	bne.n	8004786 <HAL_RCC_OscConfig+0x2ea>
 8004778:	4b64      	ldr	r3, [pc, #400]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477c:	4a63      	ldr	r2, [pc, #396]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	6713      	str	r3, [r2, #112]	@ 0x70
 8004784:	e01c      	b.n	80047c0 <HAL_RCC_OscConfig+0x324>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b05      	cmp	r3, #5
 800478c:	d10c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x30c>
 800478e:	4b5f      	ldr	r3, [pc, #380]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004792:	4a5e      	ldr	r2, [pc, #376]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004794:	f043 0304 	orr.w	r3, r3, #4
 8004798:	6713      	str	r3, [r2, #112]	@ 0x70
 800479a:	4b5c      	ldr	r3, [pc, #368]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	4a5b      	ldr	r2, [pc, #364]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a6:	e00b      	b.n	80047c0 <HAL_RCC_OscConfig+0x324>
 80047a8:	4b58      	ldr	r3, [pc, #352]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ac:	4a57      	ldr	r2, [pc, #348]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b4:	4b55      	ldr	r3, [pc, #340]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b8:	4a54      	ldr	r2, [pc, #336]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047ba:	f023 0304 	bic.w	r3, r3, #4
 80047be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d015      	beq.n	80047f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c8:	f7fc fc56 	bl	8001078 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ce:	e00a      	b.n	80047e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d0:	f7fc fc52 	bl	8001078 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e0cb      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e6:	4b49      	ldr	r3, [pc, #292]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0ee      	beq.n	80047d0 <HAL_RCC_OscConfig+0x334>
 80047f2:	e014      	b.n	800481e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f4:	f7fc fc40 	bl	8001078 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fa:	e00a      	b.n	8004812 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fc:	f7fc fc3c 	bl	8001078 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e0b5      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004812:	4b3e      	ldr	r3, [pc, #248]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1ee      	bne.n	80047fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800481e:	7dfb      	ldrb	r3, [r7, #23]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d105      	bne.n	8004830 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004824:	4b39      	ldr	r3, [pc, #228]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004828:	4a38      	ldr	r2, [pc, #224]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800482a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800482e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 80a1 	beq.w	800497c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800483a:	4b34      	ldr	r3, [pc, #208]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b08      	cmp	r3, #8
 8004844:	d05c      	beq.n	8004900 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d141      	bne.n	80048d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484e:	4b31      	ldr	r3, [pc, #196]	@ (8004914 <HAL_RCC_OscConfig+0x478>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fc fc10 	bl	8001078 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485c:	f7fc fc0c 	bl	8001078 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e087      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486e:	4b27      	ldr	r3, [pc, #156]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	019b      	lsls	r3, r3, #6
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	085b      	lsrs	r3, r3, #1
 8004892:	3b01      	subs	r3, #1
 8004894:	041b      	lsls	r3, r3, #16
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489c:	061b      	lsls	r3, r3, #24
 800489e:	491b      	ldr	r1, [pc, #108]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004914 <HAL_RCC_OscConfig+0x478>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048aa:	f7fc fbe5 	bl	8001078 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b2:	f7fc fbe1 	bl	8001078 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e05c      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c4:	4b11      	ldr	r3, [pc, #68]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x416>
 80048d0:	e054      	b.n	800497c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d2:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <HAL_RCC_OscConfig+0x478>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7fc fbce 	bl	8001078 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fc fbca 	bl	8001078 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e045      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f2:	4b06      	ldr	r3, [pc, #24]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x444>
 80048fe:	e03d      	b.n	800497c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d107      	bne.n	8004918 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e038      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
 800490c:	40023800 	.word	0x40023800
 8004910:	40007000 	.word	0x40007000
 8004914:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004918:	4b1b      	ldr	r3, [pc, #108]	@ (8004988 <HAL_RCC_OscConfig+0x4ec>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d028      	beq.n	8004978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d121      	bne.n	8004978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493e:	429a      	cmp	r2, r3
 8004940:	d11a      	bne.n	8004978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004948:	4013      	ands	r3, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800494e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004950:	4293      	cmp	r3, r2
 8004952:	d111      	bne.n	8004978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495e:	085b      	lsrs	r3, r3, #1
 8004960:	3b01      	subs	r3, #1
 8004962:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d107      	bne.n	8004978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004972:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004974:	429a      	cmp	r2, r3
 8004976:	d001      	beq.n	800497c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800

0800498c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0cc      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049a0:	4b68      	ldr	r3, [pc, #416]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d90c      	bls.n	80049c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ae:	4b65      	ldr	r3, [pc, #404]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	4b63      	ldr	r3, [pc, #396]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0b8      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d020      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e0:	4b59      	ldr	r3, [pc, #356]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	4a58      	ldr	r2, [pc, #352]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f8:	4b53      	ldr	r3, [pc, #332]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4a52      	ldr	r2, [pc, #328]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a04:	4b50      	ldr	r3, [pc, #320]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	494d      	ldr	r1, [pc, #308]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d044      	beq.n	8004aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2a:	4b47      	ldr	r3, [pc, #284]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d119      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e07f      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d003      	beq.n	8004a4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d107      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e06f      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e067      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a6a:	4b37      	ldr	r3, [pc, #220]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f023 0203 	bic.w	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	4934      	ldr	r1, [pc, #208]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a7c:	f7fc fafc 	bl	8001078 <HAL_GetTick>
 8004a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a82:	e00a      	b.n	8004a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a84:	f7fc faf8 	bl	8001078 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e04f      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 020c 	and.w	r2, r3, #12
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d1eb      	bne.n	8004a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aac:	4b25      	ldr	r3, [pc, #148]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d20c      	bcs.n	8004ad4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aba:	4b22      	ldr	r3, [pc, #136]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac2:	4b20      	ldr	r3, [pc, #128]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e032      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d008      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae0:	4b19      	ldr	r3, [pc, #100]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4916      	ldr	r1, [pc, #88]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004afe:	4b12      	ldr	r3, [pc, #72]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	490e      	ldr	r1, [pc, #56]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b12:	f000 f821 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8004b16:	4602      	mov	r2, r0
 8004b18:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	490a      	ldr	r1, [pc, #40]	@ (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 8004b24:	5ccb      	ldrb	r3, [r1, r3]
 8004b26:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2a:	4a09      	ldr	r2, [pc, #36]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b2e:	4b09      	ldr	r3, [pc, #36]	@ (8004b54 <HAL_RCC_ClockConfig+0x1c8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fc f942 	bl	8000dbc <HAL_InitTick>

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40023c00 	.word	0x40023c00
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	0800cdb4 	.word	0x0800cdb4
 8004b50:	20000000 	.word	0x20000000
 8004b54:	20000004 	.word	0x20000004

08004b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b5c:	b094      	sub	sp, #80	@ 0x50
 8004b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b70:	4b79      	ldr	r3, [pc, #484]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 030c 	and.w	r3, r3, #12
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d00d      	beq.n	8004b98 <HAL_RCC_GetSysClockFreq+0x40>
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	f200 80e1 	bhi.w	8004d44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x34>
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d003      	beq.n	8004b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b8a:	e0db      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b8c:	4b73      	ldr	r3, [pc, #460]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b90:	e0db      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b92:	4b73      	ldr	r3, [pc, #460]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b96:	e0d8      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b98:	4b6f      	ldr	r3, [pc, #444]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ba0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d063      	beq.n	8004c76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bae:	4b6a      	ldr	r3, [pc, #424]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	099b      	lsrs	r3, r3, #6
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bca:	4622      	mov	r2, r4
 8004bcc:	462b      	mov	r3, r5
 8004bce:	f04f 0000 	mov.w	r0, #0
 8004bd2:	f04f 0100 	mov.w	r1, #0
 8004bd6:	0159      	lsls	r1, r3, #5
 8004bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bdc:	0150      	lsls	r0, r2, #5
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	4621      	mov	r1, r4
 8004be4:	1a51      	subs	r1, r2, r1
 8004be6:	6139      	str	r1, [r7, #16]
 8004be8:	4629      	mov	r1, r5
 8004bea:	eb63 0301 	sbc.w	r3, r3, r1
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bfc:	4659      	mov	r1, fp
 8004bfe:	018b      	lsls	r3, r1, #6
 8004c00:	4651      	mov	r1, sl
 8004c02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c06:	4651      	mov	r1, sl
 8004c08:	018a      	lsls	r2, r1, #6
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	ebb2 0801 	subs.w	r8, r2, r1
 8004c10:	4659      	mov	r1, fp
 8004c12:	eb63 0901 	sbc.w	r9, r3, r1
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c2a:	4690      	mov	r8, r2
 8004c2c:	4699      	mov	r9, r3
 8004c2e:	4623      	mov	r3, r4
 8004c30:	eb18 0303 	adds.w	r3, r8, r3
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	462b      	mov	r3, r5
 8004c38:	eb49 0303 	adc.w	r3, r9, r3
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	024b      	lsls	r3, r1, #9
 8004c4e:	4621      	mov	r1, r4
 8004c50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c54:	4621      	mov	r1, r4
 8004c56:	024a      	lsls	r2, r1, #9
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c5e:	2200      	movs	r2, #0
 8004c60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c68:	f7fb fab2 	bl	80001d0 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4613      	mov	r3, r2
 8004c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c74:	e058      	b.n	8004d28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c76:	4b38      	ldr	r3, [pc, #224]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	099b      	lsrs	r3, r3, #6
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	4611      	mov	r1, r2
 8004c82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c86:	623b      	str	r3, [r7, #32]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c90:	4642      	mov	r2, r8
 8004c92:	464b      	mov	r3, r9
 8004c94:	f04f 0000 	mov.w	r0, #0
 8004c98:	f04f 0100 	mov.w	r1, #0
 8004c9c:	0159      	lsls	r1, r3, #5
 8004c9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ca2:	0150      	lsls	r0, r2, #5
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4641      	mov	r1, r8
 8004caa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cae:	4649      	mov	r1, r9
 8004cb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cc8:	ebb2 040a 	subs.w	r4, r2, sl
 8004ccc:	eb63 050b 	sbc.w	r5, r3, fp
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	00eb      	lsls	r3, r5, #3
 8004cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cde:	00e2      	lsls	r2, r4, #3
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	461d      	mov	r5, r3
 8004ce4:	4643      	mov	r3, r8
 8004ce6:	18e3      	adds	r3, r4, r3
 8004ce8:	603b      	str	r3, [r7, #0]
 8004cea:	464b      	mov	r3, r9
 8004cec:	eb45 0303 	adc.w	r3, r5, r3
 8004cf0:	607b      	str	r3, [r7, #4]
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cfe:	4629      	mov	r1, r5
 8004d00:	028b      	lsls	r3, r1, #10
 8004d02:	4621      	mov	r1, r4
 8004d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d08:	4621      	mov	r1, r4
 8004d0a:	028a      	lsls	r2, r1, #10
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d12:	2200      	movs	r2, #0
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	61fa      	str	r2, [r7, #28]
 8004d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d1c:	f7fb fa58 	bl	80001d0 <__aeabi_uldivmod>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4613      	mov	r3, r2
 8004d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d28:	4b0b      	ldr	r3, [pc, #44]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	0c1b      	lsrs	r3, r3, #16
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	3301      	adds	r3, #1
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d42:	e002      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d44:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3750      	adds	r7, #80	@ 0x50
 8004d50:	46bd      	mov	sp, r7
 8004d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d56:	bf00      	nop
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	00f42400 	.word	0x00f42400
 8004d60:	007a1200 	.word	0x007a1200

08004d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d68:	4b03      	ldr	r3, [pc, #12]	@ (8004d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000000 	.word	0x20000000

08004d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d80:	f7ff fff0 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	0a9b      	lsrs	r3, r3, #10
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	4903      	ldr	r1, [pc, #12]	@ (8004da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d92:	5ccb      	ldrb	r3, [r1, r3]
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	0800cdc4 	.word	0x0800cdc4

08004da4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	220f      	movs	r2, #15
 8004db2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004db4:	4b12      	ldr	r3, [pc, #72]	@ (8004e00 <HAL_RCC_GetClockConfig+0x5c>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 0203 	and.w	r2, r3, #3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004e00 <HAL_RCC_GetClockConfig+0x5c>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8004e00 <HAL_RCC_GetClockConfig+0x5c>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004dd8:	4b09      	ldr	r3, [pc, #36]	@ (8004e00 <HAL_RCC_GetClockConfig+0x5c>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	08db      	lsrs	r3, r3, #3
 8004dde:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004de6:	4b07      	ldr	r3, [pc, #28]	@ (8004e04 <HAL_RCC_GetClockConfig+0x60>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0207 	and.w	r2, r3, #7
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	601a      	str	r2, [r3, #0]
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40023c00 	.word	0x40023c00

08004e08 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d105      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d035      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e30:	4b62      	ldr	r3, [pc, #392]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e36:	f7fc f91f 	bl	8001078 <HAL_GetTick>
 8004e3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e3e:	f7fc f91b 	bl	8001078 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e0b0      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e50:	4b5b      	ldr	r3, [pc, #364]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1f0      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	019a      	lsls	r2, r3, #6
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	071b      	lsls	r3, r3, #28
 8004e68:	4955      	ldr	r1, [pc, #340]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e70:	4b52      	ldr	r3, [pc, #328]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e76:	f7fc f8ff 	bl	8001078 <HAL_GetTick>
 8004e7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e7e:	f7fc f8fb 	bl	8001078 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e090      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e90:	4b4b      	ldr	r3, [pc, #300]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 8083 	beq.w	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	4b44      	ldr	r3, [pc, #272]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	4a43      	ldr	r2, [pc, #268]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eba:	4b41      	ldr	r3, [pc, #260]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a3e      	ldr	r2, [pc, #248]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ed2:	f7fc f8d1 	bl	8001078 <HAL_GetTick>
 8004ed6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004ed8:	e008      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eda:	f7fc f8cd 	bl	8001078 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e062      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004eec:	4b35      	ldr	r3, [pc, #212]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ef8:	4b31      	ldr	r3, [pc, #196]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f00:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d02f      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d028      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f16:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f1e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f20:	4b29      	ldr	r3, [pc, #164]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f26:	4b28      	ldr	r3, [pc, #160]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f2c:	4a24      	ldr	r2, [pc, #144]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f32:	4b23      	ldr	r3, [pc, #140]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d114      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f3e:	f7fc f89b 	bl	8001078 <HAL_GetTick>
 8004f42:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f44:	e00a      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f46:	f7fc f897 	bl	8001078 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e02a      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5c:	4b18      	ldr	r3, [pc, #96]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0ee      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f74:	d10d      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004f76:	4b12      	ldr	r3, [pc, #72]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f8a:	490d      	ldr	r1, [pc, #52]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	608b      	str	r3, [r1, #8]
 8004f90:	e005      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f92:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f98:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f9c:	6093      	str	r3, [r2, #8]
 8004f9e:	4b08      	ldr	r3, [pc, #32]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fa0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004faa:	4905      	ldr	r1, [pc, #20]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	42470068 	.word	0x42470068
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	40007000 	.word	0x40007000
 8004fc8:	42470e40 	.word	0x42470e40

08004fcc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d13f      	bne.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004fea:	4b24      	ldr	r3, [pc, #144]	@ (800507c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d006      	beq.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005000:	d12f      	bne.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005002:	4b1f      	ldr	r3, [pc, #124]	@ (8005080 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005004:	617b      	str	r3, [r7, #20]
          break;
 8005006:	e02f      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005008:	4b1c      	ldr	r3, [pc, #112]	@ (800507c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005010:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005014:	d108      	bne.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005016:	4b19      	ldr	r3, [pc, #100]	@ (800507c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800501e:	4a19      	ldr	r2, [pc, #100]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005020:	fbb2 f3f3 	udiv	r3, r2, r3
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	e007      	b.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005028:	4b14      	ldr	r3, [pc, #80]	@ (800507c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005030:	4a15      	ldr	r2, [pc, #84]	@ (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005032:	fbb2 f3f3 	udiv	r3, r2, r3
 8005036:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005038:	4b10      	ldr	r3, [pc, #64]	@ (800507c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800503a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800503e:	099b      	lsrs	r3, r3, #6
 8005040:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	fb02 f303 	mul.w	r3, r2, r3
 800504a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800504c:	4b0b      	ldr	r3, [pc, #44]	@ (800507c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800504e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005052:	0f1b      	lsrs	r3, r3, #28
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	617b      	str	r3, [r7, #20]
          break;
 8005060:	e002      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
          break;
 8005066:	bf00      	nop
        }
      }
      break;
 8005068:	e000      	b.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800506a:	bf00      	nop
    }
  }
  return frequency;
 800506c:	697b      	ldr	r3, [r7, #20]
}
 800506e:	4618      	mov	r0, r3
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800
 8005080:	00bb8000 	.word	0x00bb8000
 8005084:	007a1200 	.word	0x007a1200
 8005088:	00f42400 	.word	0x00f42400

0800508c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e07b      	b.n	8005196 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d108      	bne.n	80050b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050ae:	d009      	beq.n	80050c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	61da      	str	r2, [r3, #28]
 80050b6:	e005      	b.n	80050c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fb fdfc 	bl	8000cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005148:	ea42 0103 	orr.w	r1, r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005150:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	0c1b      	lsrs	r3, r3, #16
 8005162:	f003 0104 	and.w	r1, r3, #4
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516a:	f003 0210 	and.w	r2, r3, #16
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005184:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e041      	b.n	8005234 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d106      	bne.n	80051ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7fb fdd1 	bl	8000d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3304      	adds	r3, #4
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f000 f9b5 	bl	800554c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	d001      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e04e      	b.n	80052f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a23      	ldr	r2, [pc, #140]	@ (8005300 <HAL_TIM_Base_Start_IT+0xc4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d022      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x80>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800527e:	d01d      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x80>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1f      	ldr	r2, [pc, #124]	@ (8005304 <HAL_TIM_Base_Start_IT+0xc8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d018      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x80>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1e      	ldr	r2, [pc, #120]	@ (8005308 <HAL_TIM_Base_Start_IT+0xcc>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x80>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1c      	ldr	r2, [pc, #112]	@ (800530c <HAL_TIM_Base_Start_IT+0xd0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00e      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x80>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005310 <HAL_TIM_Base_Start_IT+0xd4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d009      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x80>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a19      	ldr	r2, [pc, #100]	@ (8005314 <HAL_TIM_Base_Start_IT+0xd8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x80>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a18      	ldr	r2, [pc, #96]	@ (8005318 <HAL_TIM_Base_Start_IT+0xdc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d111      	bne.n	80052e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b06      	cmp	r3, #6
 80052cc:	d010      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0201 	orr.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052de:	e007      	b.n	80052f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40010000 	.word	0x40010000
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40000c00 	.word	0x40000c00
 8005310:	40010400 	.word	0x40010400
 8005314:	40014000 	.word	0x40014000
 8005318:	40001800 	.word	0x40001800

0800531c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d020      	beq.n	8005380 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01b      	beq.n	8005380 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0202 	mvn.w	r2, #2
 8005350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f8d2 	bl	8005510 <HAL_TIM_IC_CaptureCallback>
 800536c:	e005      	b.n	800537a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f8c4 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f8d5 	bl	8005524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	2b00      	cmp	r3, #0
 8005388:	d020      	beq.n	80053cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01b      	beq.n	80053cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0204 	mvn.w	r2, #4
 800539c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2202      	movs	r2, #2
 80053a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f8ac 	bl	8005510 <HAL_TIM_IC_CaptureCallback>
 80053b8:	e005      	b.n	80053c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f89e 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f8af 	bl	8005524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d020      	beq.n	8005418 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01b      	beq.n	8005418 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0208 	mvn.w	r2, #8
 80053e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2204      	movs	r2, #4
 80053ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f886 	bl	8005510 <HAL_TIM_IC_CaptureCallback>
 8005404:	e005      	b.n	8005412 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f878 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f889 	bl	8005524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	d020      	beq.n	8005464 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01b      	beq.n	8005464 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0210 	mvn.w	r2, #16
 8005434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2208      	movs	r2, #8
 800543a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f860 	bl	8005510 <HAL_TIM_IC_CaptureCallback>
 8005450:	e005      	b.n	800545e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f852 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f863 	bl	8005524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00c      	beq.n	8005488 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0201 	mvn.w	r2, #1
 8005480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fb fb10 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00c      	beq.n	80054ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f982 	bl	80057b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00c      	beq.n	80054d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f834 	bl	8005538 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00c      	beq.n	80054f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d007      	beq.n	80054f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0220 	mvn.w	r2, #32
 80054ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f954 	bl	800579c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f4:	bf00      	nop
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a46      	ldr	r2, [pc, #280]	@ (8005678 <TIM_Base_SetConfig+0x12c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d013      	beq.n	800558c <TIM_Base_SetConfig+0x40>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800556a:	d00f      	beq.n	800558c <TIM_Base_SetConfig+0x40>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a43      	ldr	r2, [pc, #268]	@ (800567c <TIM_Base_SetConfig+0x130>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00b      	beq.n	800558c <TIM_Base_SetConfig+0x40>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a42      	ldr	r2, [pc, #264]	@ (8005680 <TIM_Base_SetConfig+0x134>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d007      	beq.n	800558c <TIM_Base_SetConfig+0x40>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a41      	ldr	r2, [pc, #260]	@ (8005684 <TIM_Base_SetConfig+0x138>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d003      	beq.n	800558c <TIM_Base_SetConfig+0x40>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a40      	ldr	r2, [pc, #256]	@ (8005688 <TIM_Base_SetConfig+0x13c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d108      	bne.n	800559e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a35      	ldr	r2, [pc, #212]	@ (8005678 <TIM_Base_SetConfig+0x12c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d02b      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ac:	d027      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a32      	ldr	r2, [pc, #200]	@ (800567c <TIM_Base_SetConfig+0x130>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d023      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a31      	ldr	r2, [pc, #196]	@ (8005680 <TIM_Base_SetConfig+0x134>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d01f      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a30      	ldr	r2, [pc, #192]	@ (8005684 <TIM_Base_SetConfig+0x138>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d01b      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005688 <TIM_Base_SetConfig+0x13c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d017      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2e      	ldr	r2, [pc, #184]	@ (800568c <TIM_Base_SetConfig+0x140>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d013      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005690 <TIM_Base_SetConfig+0x144>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00f      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005694 <TIM_Base_SetConfig+0x148>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00b      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005698 <TIM_Base_SetConfig+0x14c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d007      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2a      	ldr	r2, [pc, #168]	@ (800569c <TIM_Base_SetConfig+0x150>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d003      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a29      	ldr	r2, [pc, #164]	@ (80056a0 <TIM_Base_SetConfig+0x154>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d108      	bne.n	8005610 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a10      	ldr	r2, [pc, #64]	@ (8005678 <TIM_Base_SetConfig+0x12c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_Base_SetConfig+0xf8>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a12      	ldr	r2, [pc, #72]	@ (8005688 <TIM_Base_SetConfig+0x13c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d103      	bne.n	800564c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b01      	cmp	r3, #1
 800565c:	d105      	bne.n	800566a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f023 0201 	bic.w	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	611a      	str	r2, [r3, #16]
  }
}
 800566a:	bf00      	nop
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40010000 	.word	0x40010000
 800567c:	40000400 	.word	0x40000400
 8005680:	40000800 	.word	0x40000800
 8005684:	40000c00 	.word	0x40000c00
 8005688:	40010400 	.word	0x40010400
 800568c:	40014000 	.word	0x40014000
 8005690:	40014400 	.word	0x40014400
 8005694:	40014800 	.word	0x40014800
 8005698:	40001800 	.word	0x40001800
 800569c:	40001c00 	.word	0x40001c00
 80056a0:	40002000 	.word	0x40002000

080056a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e05a      	b.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a21      	ldr	r2, [pc, #132]	@ (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d022      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005708:	d01d      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1d      	ldr	r2, [pc, #116]	@ (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d018      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1b      	ldr	r2, [pc, #108]	@ (8005788 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1a      	ldr	r2, [pc, #104]	@ (800578c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00e      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a18      	ldr	r2, [pc, #96]	@ (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d009      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a17      	ldr	r2, [pc, #92]	@ (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d004      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a15      	ldr	r2, [pc, #84]	@ (8005798 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d10c      	bne.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800574c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	4313      	orrs	r3, r2
 8005756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40010000 	.word	0x40010000
 8005784:	40000400 	.word	0x40000400
 8005788:	40000800 	.word	0x40000800
 800578c:	40000c00 	.word	0x40000c00
 8005790:	40010400 	.word	0x40010400
 8005794:	40014000 	.word	0x40014000
 8005798:	40001800 	.word	0x40001800

0800579c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057c4:	b084      	sub	sp, #16
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	f107 001c 	add.w	r0, r7, #28
 80057d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057d6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d123      	bne.n	8005826 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80057f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005806:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800580a:	2b01      	cmp	r3, #1
 800580c:	d105      	bne.n	800581a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f9dc 	bl	8005bd8 <USB_CoreReset>
 8005820:	4603      	mov	r3, r0
 8005822:	73fb      	strb	r3, [r7, #15]
 8005824:	e01b      	b.n	800585e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f9d0 	bl	8005bd8 <USB_CoreReset>
 8005838:	4603      	mov	r3, r0
 800583a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800583c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005840:	2b00      	cmp	r3, #0
 8005842:	d106      	bne.n	8005852 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005848:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005850:	e005      	b.n	800585e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005856:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800585e:	7fbb      	ldrb	r3, [r7, #30]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d10b      	bne.n	800587c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f043 0206 	orr.w	r2, r3, #6
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f043 0220 	orr.w	r2, r3, #32
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800587c:	7bfb      	ldrb	r3, [r7, #15]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005888:	b004      	add	sp, #16
 800588a:	4770      	bx	lr

0800588c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f043 0201 	orr.w	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f023 0201 	bic.w	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d115      	bne.n	800591e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058fe:	200a      	movs	r0, #10
 8005900:	f7fb fbc6 	bl	8001090 <HAL_Delay>
      ms += 10U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	330a      	adds	r3, #10
 8005908:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f956 	bl	8005bbc <USB_GetMode>
 8005910:	4603      	mov	r3, r0
 8005912:	2b01      	cmp	r3, #1
 8005914:	d01e      	beq.n	8005954 <USB_SetCurrentMode+0x84>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2bc7      	cmp	r3, #199	@ 0xc7
 800591a:	d9f0      	bls.n	80058fe <USB_SetCurrentMode+0x2e>
 800591c:	e01a      	b.n	8005954 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d115      	bne.n	8005950 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005930:	200a      	movs	r0, #10
 8005932:	f7fb fbad 	bl	8001090 <HAL_Delay>
      ms += 10U;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	330a      	adds	r3, #10
 800593a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f93d 	bl	8005bbc <USB_GetMode>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <USB_SetCurrentMode+0x84>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2bc7      	cmp	r3, #199	@ 0xc7
 800594c:	d9f0      	bls.n	8005930 <USB_SetCurrentMode+0x60>
 800594e:	e001      	b.n	8005954 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e005      	b.n	8005960 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2bc8      	cmp	r3, #200	@ 0xc8
 8005958:	d101      	bne.n	800595e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3301      	adds	r3, #1
 800597a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005982:	d901      	bls.n	8005988 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e01b      	b.n	80059c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	daf2      	bge.n	8005976 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	019b      	lsls	r3, r3, #6
 8005998:	f043 0220 	orr.w	r2, r3, #32
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3301      	adds	r3, #1
 80059a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059ac:	d901      	bls.n	80059b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e006      	b.n	80059c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d0f0      	beq.n	80059a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3301      	adds	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059e4:	d901      	bls.n	80059ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e018      	b.n	8005a1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	daf2      	bge.n	80059d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2210      	movs	r2, #16
 80059fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3301      	adds	r3, #1
 8005a00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a08:	d901      	bls.n	8005a0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e006      	b.n	8005a1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b10      	cmp	r3, #16
 8005a18:	d0f0      	beq.n	80059fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b089      	sub	sp, #36	@ 0x24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	4611      	mov	r1, r2
 8005a34:	461a      	mov	r2, r3
 8005a36:	460b      	mov	r3, r1
 8005a38:	71fb      	strb	r3, [r7, #7]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d123      	bne.n	8005a96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a4e:	88bb      	ldrh	r3, [r7, #4]
 8005a50:	3303      	adds	r3, #3
 8005a52:	089b      	lsrs	r3, r3, #2
 8005a54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a56:	2300      	movs	r3, #0
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	e018      	b.n	8005a8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	031a      	lsls	r2, r3, #12
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a68:	461a      	mov	r2, r3
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	3301      	adds	r3, #1
 8005a74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	3301      	adds	r3, #1
 8005a86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d3e2      	bcc.n	8005a5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3724      	adds	r7, #36	@ 0x24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b08b      	sub	sp, #44	@ 0x2c
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	089b      	lsrs	r3, r3, #2
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ac2:	88fb      	ldrh	r3, [r7, #6]
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005aca:	2300      	movs	r3, #0
 8005acc:	623b      	str	r3, [r7, #32]
 8005ace:	e014      	b.n	8005afa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	601a      	str	r2, [r3, #0]
    pDest++;
 8005adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ade:	3301      	adds	r3, #1
 8005ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	3301      	adds	r3, #1
 8005aec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	3301      	adds	r3, #1
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	3301      	adds	r3, #1
 8005af8:	623b      	str	r3, [r7, #32]
 8005afa:	6a3a      	ldr	r2, [r7, #32]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d3e6      	bcc.n	8005ad0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b02:	8bfb      	ldrh	r3, [r7, #30]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01e      	beq.n	8005b46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b12:	461a      	mov	r2, r3
 8005b14:	f107 0310 	add.w	r3, r7, #16
 8005b18:	6812      	ldr	r2, [r2, #0]
 8005b1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	fa22 f303 	lsr.w	r3, r2, r3
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	701a      	strb	r2, [r3, #0]
      i++;
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	3301      	adds	r3, #1
 8005b32:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	3301      	adds	r3, #1
 8005b38:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005b3a:	8bfb      	ldrh	r3, [r7, #30]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b40:	8bfb      	ldrh	r3, [r7, #30]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1ea      	bne.n	8005b1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	372c      	adds	r7, #44	@ 0x2c
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b085      	sub	sp, #20
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	460b      	mov	r3, r1
 8005b84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	4013      	ands	r3, r2
 8005bac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bae:	68bb      	ldr	r3, [r7, #8]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3301      	adds	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bf0:	d901      	bls.n	8005bf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e01b      	b.n	8005c2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	daf2      	bge.n	8005be4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f043 0201 	orr.w	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3301      	adds	r3, #1
 8005c12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c1a:	d901      	bls.n	8005c20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e006      	b.n	8005c2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d0f0      	beq.n	8005c0e <USB_CoreReset+0x36>

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b086      	sub	sp, #24
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c66:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c72:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d119      	bne.n	8005cc6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d10a      	bne.n	8005cb0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ca8:	f043 0304 	orr.w	r3, r3, #4
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	e014      	b.n	8005cda <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005cbe:	f023 0304 	bic.w	r3, r3, #4
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	e009      	b.n	8005cda <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005cd4:	f023 0304 	bic.w	r3, r3, #4
 8005cd8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cda:	2110      	movs	r1, #16
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff fe43 	bl	8005968 <USB_FlushTxFifo>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff fe6d 	bl	80059cc <USB_FlushRxFifo>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	613b      	str	r3, [r7, #16]
 8005d00:	e015      	b.n	8005d2e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f04f 33ff 	mov.w	r3, #4294967295
 8005d14:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d22:	461a      	mov	r2, r3
 8005d24:	2300      	movs	r3, #0
 8005d26:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005d32:	461a      	mov	r2, r3
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d3e3      	bcc.n	8005d02 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f04f 32ff 	mov.w	r2, #4294967295
 8005d46:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a18      	ldr	r2, [pc, #96]	@ (8005dac <USB_HostInit+0x170>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d10b      	bne.n	8005d68 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d56:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a15      	ldr	r2, [pc, #84]	@ (8005db0 <USB_HostInit+0x174>)
 8005d5c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a14      	ldr	r2, [pc, #80]	@ (8005db4 <USB_HostInit+0x178>)
 8005d62:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005d66:	e009      	b.n	8005d7c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2280      	movs	r2, #128	@ 0x80
 8005d6c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a11      	ldr	r2, [pc, #68]	@ (8005db8 <USB_HostInit+0x17c>)
 8005d72:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a11      	ldr	r2, [pc, #68]	@ (8005dbc <USB_HostInit+0x180>)
 8005d78:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	f043 0210 	orr.w	r2, r3, #16
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699a      	ldr	r2, [r3, #24]
 8005d94:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc0 <USB_HostInit+0x184>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005da8:	b004      	add	sp, #16
 8005daa:	4770      	bx	lr
 8005dac:	40040000 	.word	0x40040000
 8005db0:	01000200 	.word	0x01000200
 8005db4:	00e00300 	.word	0x00e00300
 8005db8:	00600080 	.word	0x00600080
 8005dbc:	004000e0 	.word	0x004000e0
 8005dc0:	a3200008 	.word	0xa3200008

08005dc4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005de2:	f023 0303 	bic.w	r3, r3, #3
 8005de6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	78fb      	ldrb	r3, [r7, #3]
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	68f9      	ldr	r1, [r7, #12]
 8005df8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d107      	bne.n	8005e16 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005e12:	6053      	str	r3, [r2, #4]
 8005e14:	e00c      	b.n	8005e30 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d107      	bne.n	8005e2c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e22:	461a      	mov	r2, r3
 8005e24:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005e28:	6053      	str	r3, [r2, #4]
 8005e2a:	e001      	b.n	8005e30 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005e5e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e6c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e6e:	2064      	movs	r0, #100	@ 0x64
 8005e70:	f7fb f90e 	bl	8001090 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e80:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005e82:	200a      	movs	r0, #10
 8005e84:	f7fb f904 	bl	8001090 <HAL_Delay>

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005eb6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <USB_DriveVbus+0x44>
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d106      	bne.n	8005ed6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ed0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ed4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ee0:	d109      	bne.n	8005ef6 <USB_DriveVbus+0x64>
 8005ee2:	78fb      	ldrb	r3, [r7, #3]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ef0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ef4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	0c5b      	lsrs	r3, r3, #17
 8005f22:	f003 0303 	and.w	r3, r3, #3
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b085      	sub	sp, #20
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	b29b      	uxth	r3, r3
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	4611      	mov	r1, r2
 8005f60:	461a      	mov	r2, r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	70fb      	strb	r3, [r7, #3]
 8005f66:	460b      	mov	r3, r1
 8005f68:	70bb      	strb	r3, [r7, #2]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f82:	461a      	mov	r2, r3
 8005f84:	f04f 33ff 	mov.w	r3, #4294967295
 8005f88:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f8a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d87c      	bhi.n	800608c <USB_HC_Init+0x138>
 8005f92:	a201      	add	r2, pc, #4	@ (adr r2, 8005f98 <USB_HC_Init+0x44>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fa9 	.word	0x08005fa9
 8005f9c:	0800604f 	.word	0x0800604f
 8005fa0:	08005fa9 	.word	0x08005fa9
 8005fa4:	08006011 	.word	0x08006011
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005fba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005fbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	da10      	bge.n	8005fe6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	78fa      	ldrb	r2, [r7, #3]
 8005fd4:	0151      	lsls	r1, r2, #5
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	440a      	add	r2, r1
 8005fda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005fe4:	e055      	b.n	8006092 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a6f      	ldr	r2, [pc, #444]	@ (80061a8 <USB_HC_Init+0x254>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d151      	bne.n	8006092 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005fee:	78fb      	ldrb	r3, [r7, #3]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	78fa      	ldrb	r2, [r7, #3]
 8005ffe:	0151      	lsls	r1, r2, #5
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	440a      	add	r2, r1
 8006004:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006008:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800600c:	60d3      	str	r3, [r2, #12]
      break;
 800600e:	e040      	b.n	8006092 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	4413      	add	r3, r2
 8006018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800601c:	461a      	mov	r2, r3
 800601e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006022:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006024:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006028:	2b00      	cmp	r3, #0
 800602a:	da34      	bge.n	8006096 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	4413      	add	r3, r2
 8006034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	78fa      	ldrb	r2, [r7, #3]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	440a      	add	r2, r1
 8006042:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800604a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800604c:	e023      	b.n	8006096 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800605a:	461a      	mov	r2, r3
 800605c:	f240 2325 	movw	r3, #549	@ 0x225
 8006060:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006062:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006066:	2b00      	cmp	r3, #0
 8006068:	da17      	bge.n	800609a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800606a:	78fb      	ldrb	r3, [r7, #3]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	4413      	add	r3, r2
 8006072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	78fa      	ldrb	r2, [r7, #3]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	440a      	add	r2, r1
 8006080:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006084:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006088:	60d3      	str	r3, [r2, #12]
      }
      break;
 800608a:	e006      	b.n	800609a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	77fb      	strb	r3, [r7, #31]
      break;
 8006090:	e004      	b.n	800609c <USB_HC_Init+0x148>
      break;
 8006092:	bf00      	nop
 8006094:	e002      	b.n	800609c <USB_HC_Init+0x148>
      break;
 8006096:	bf00      	nop
 8006098:	e000      	b.n	800609c <USB_HC_Init+0x148>
      break;
 800609a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a8:	461a      	mov	r2, r3
 80060aa:	2300      	movs	r3, #0
 80060ac:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	78fa      	ldrb	r2, [r7, #3]
 80060be:	0151      	lsls	r1, r2, #5
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	440a      	add	r2, r1
 80060c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060c8:	f043 0302 	orr.w	r3, r3, #2
 80060cc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	2101      	movs	r1, #1
 80060de:	fa01 f303 	lsl.w	r3, r1, r3
 80060e2:	6939      	ldr	r1, [r7, #16]
 80060e4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80060e8:	4313      	orrs	r3, r2
 80060ea:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80060f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	da03      	bge.n	8006108 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006100:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	e001      	b.n	800610c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff fef9 	bl	8005f04 <USB_GetHostSpeed>
 8006112:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006114:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006118:	2b02      	cmp	r3, #2
 800611a:	d106      	bne.n	800612a <USB_HC_Init+0x1d6>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d003      	beq.n	800612a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006122:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	e001      	b.n	800612e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800612e:	787b      	ldrb	r3, [r7, #1]
 8006130:	059b      	lsls	r3, r3, #22
 8006132:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006136:	78bb      	ldrb	r3, [r7, #2]
 8006138:	02db      	lsls	r3, r3, #11
 800613a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800613e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006140:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006144:	049b      	lsls	r3, r3, #18
 8006146:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800614a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800614c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800614e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006152:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	431a      	orrs	r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800615c:	78fa      	ldrb	r2, [r7, #3]
 800615e:	0151      	lsls	r1, r2, #5
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	440a      	add	r2, r1
 8006164:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006168:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800616c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800616e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006172:	2b03      	cmp	r3, #3
 8006174:	d003      	beq.n	800617e <USB_HC_Init+0x22a>
 8006176:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800617a:	2b01      	cmp	r3, #1
 800617c:	d10f      	bne.n	800619e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800617e:	78fb      	ldrb	r3, [r7, #3]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4413      	add	r3, r2
 8006186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	78fa      	ldrb	r2, [r7, #3]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	440a      	add	r2, r1
 8006194:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006198:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800619c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800619e:	7ffb      	ldrb	r3, [r7, #31]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3720      	adds	r7, #32
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40040000 	.word	0x40040000

080061ac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08c      	sub	sp, #48	@ 0x30
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	4613      	mov	r3, r2
 80061b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	785b      	ldrb	r3, [r3, #1]
 80061c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80061c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061c8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4a5d      	ldr	r2, [pc, #372]	@ (8006344 <USB_HC_StartXfer+0x198>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d12f      	bne.n	8006232 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d11c      	bne.n	8006212 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	7c9b      	ldrb	r3, [r3, #18]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <USB_HC_StartXfer+0x3c>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	7c9b      	ldrb	r3, [r3, #18]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d124      	bne.n	8006232 <USB_HC_StartXfer+0x86>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	799b      	ldrb	r3, [r3, #6]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d120      	bne.n	8006232 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	6a3a      	ldr	r2, [r7, #32]
 8006204:	440a      	add	r2, r1
 8006206:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800620a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800620e:	60d3      	str	r3, [r2, #12]
 8006210:	e00f      	b.n	8006232 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	791b      	ldrb	r3, [r3, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <USB_HC_StartXfer+0x86>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	795b      	ldrb	r3, [r3, #5]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d107      	bne.n	8006232 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	785b      	ldrb	r3, [r3, #1]
 8006226:	4619      	mov	r1, r3
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 fb6b 	bl	8006904 <USB_DoPing>
        return HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	e232      	b.n	8006698 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	799b      	ldrb	r3, [r3, #6]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d158      	bne.n	80062ec <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800623a:	2301      	movs	r3, #1
 800623c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	78db      	ldrb	r3, [r3, #3]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d007      	beq.n	8006256 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006246:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	8a92      	ldrh	r2, [r2, #20]
 800624c:	fb03 f202 	mul.w	r2, r3, r2
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	61da      	str	r2, [r3, #28]
 8006254:	e07c      	b.n	8006350 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	7c9b      	ldrb	r3, [r3, #18]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d130      	bne.n	80062c0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	2bbc      	cmp	r3, #188	@ 0xbc
 8006264:	d918      	bls.n	8006298 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	8a9b      	ldrh	r3, [r3, #20]
 800626a:	461a      	mov	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d003      	beq.n	8006288 <USB_HC_StartXfer+0xdc>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d103      	bne.n	8006290 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2202      	movs	r2, #2
 800628c:	60da      	str	r2, [r3, #12]
 800628e:	e05f      	b.n	8006350 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2201      	movs	r2, #1
 8006294:	60da      	str	r2, [r3, #12]
 8006296:	e05b      	b.n	8006350 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6a1a      	ldr	r2, [r3, #32]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d007      	beq.n	80062b8 <USB_HC_StartXfer+0x10c>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d003      	beq.n	80062b8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2204      	movs	r2, #4
 80062b4:	60da      	str	r2, [r3, #12]
 80062b6:	e04b      	b.n	8006350 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2203      	movs	r2, #3
 80062bc:	60da      	str	r2, [r3, #12]
 80062be:	e047      	b.n	8006350 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80062c0:	79fb      	ldrb	r3, [r7, #7]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d10d      	bne.n	80062e2 <USB_HC_StartXfer+0x136>
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	8a92      	ldrh	r2, [r2, #20]
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d907      	bls.n	80062e2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	8a92      	ldrh	r2, [r2, #20]
 80062d8:	fb03 f202 	mul.w	r2, r3, r2
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	61da      	str	r2, [r3, #28]
 80062e0:	e036      	b.n	8006350 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	6a1a      	ldr	r2, [r3, #32]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	61da      	str	r2, [r3, #28]
 80062ea:	e031      	b.n	8006350 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d018      	beq.n	8006326 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	8a92      	ldrh	r2, [r2, #20]
 80062fc:	4413      	add	r3, r2
 80062fe:	3b01      	subs	r3, #1
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	8a92      	ldrh	r2, [r2, #20]
 8006304:	fbb3 f3f2 	udiv	r3, r3, r2
 8006308:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800630a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800630c:	8b7b      	ldrh	r3, [r7, #26]
 800630e:	429a      	cmp	r2, r3
 8006310:	d90b      	bls.n	800632a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006312:	8b7b      	ldrh	r3, [r7, #26]
 8006314:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006316:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	8a92      	ldrh	r2, [r2, #20]
 800631c:	fb03 f202 	mul.w	r2, r3, r2
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	61da      	str	r2, [r3, #28]
 8006324:	e001      	b.n	800632a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006326:	2301      	movs	r3, #1
 8006328:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	78db      	ldrb	r3, [r3, #3]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006332:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	8a92      	ldrh	r2, [r2, #20]
 8006338:	fb03 f202 	mul.w	r2, r3, r2
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	61da      	str	r2, [r3, #28]
 8006340:	e006      	b.n	8006350 <USB_HC_StartXfer+0x1a4>
 8006342:	bf00      	nop
 8006344:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	6a1a      	ldr	r2, [r3, #32]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006358:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800635a:	04d9      	lsls	r1, r3, #19
 800635c:	4ba3      	ldr	r3, [pc, #652]	@ (80065ec <USB_HC_StartXfer+0x440>)
 800635e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006360:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	7d9b      	ldrb	r3, [r3, #22]
 8006366:	075b      	lsls	r3, r3, #29
 8006368:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800636c:	69f9      	ldr	r1, [r7, #28]
 800636e:	0148      	lsls	r0, r1, #5
 8006370:	6a39      	ldr	r1, [r7, #32]
 8006372:	4401      	add	r1, r0
 8006374:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006378:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800637a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d009      	beq.n	8006396 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	6999      	ldr	r1, [r3, #24]
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	4413      	add	r3, r2
 800638e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006392:	460a      	mov	r2, r1
 8006394:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	bf0c      	ite	eq
 80063a6:	2301      	moveq	r3, #1
 80063a8:	2300      	movne	r3, #0
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	0151      	lsls	r1, r2, #5
 80063c0:	6a3a      	ldr	r2, [r7, #32]
 80063c2:	440a      	add	r2, r1
 80063c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80063cc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	7e7b      	ldrb	r3, [r7, #25]
 80063de:	075b      	lsls	r3, r3, #29
 80063e0:	69f9      	ldr	r1, [r7, #28]
 80063e2:	0148      	lsls	r0, r1, #5
 80063e4:	6a39      	ldr	r1, [r7, #32]
 80063e6:	4401      	add	r1, r0
 80063e8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80063ec:	4313      	orrs	r3, r2
 80063ee:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	799b      	ldrb	r3, [r3, #6]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	f040 80c3 	bne.w	8006580 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	7c5b      	ldrb	r3, [r3, #17]
 80063fe:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006404:	4313      	orrs	r3, r2
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	6a3a      	ldr	r2, [r7, #32]
 800640c:	440a      	add	r2, r1
 800640e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006412:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006416:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	69fa      	ldr	r2, [r7, #28]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	6a3a      	ldr	r2, [r7, #32]
 800642c:	440a      	add	r2, r1
 800642e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006432:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006436:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	79db      	ldrb	r3, [r3, #7]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d123      	bne.n	8006488 <USB_HC_StartXfer+0x2dc>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	78db      	ldrb	r3, [r3, #3]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d11f      	bne.n	8006488 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	4413      	add	r3, r2
 8006450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	69fa      	ldr	r2, [r7, #28]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	6a3a      	ldr	r2, [r7, #32]
 800645c:	440a      	add	r2, r1
 800645e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006466:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	4413      	add	r3, r2
 8006470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	440a      	add	r2, r1
 800647e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006486:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	7c9b      	ldrb	r3, [r3, #18]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d003      	beq.n	8006498 <USB_HC_StartXfer+0x2ec>
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	7c9b      	ldrb	r3, [r3, #18]
 8006494:	2b03      	cmp	r3, #3
 8006496:	d117      	bne.n	80064c8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800649c:	2b01      	cmp	r3, #1
 800649e:	d113      	bne.n	80064c8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	78db      	ldrb	r3, [r3, #3]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d10f      	bne.n	80064c8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	69fa      	ldr	r2, [r7, #28]
 80064b8:	0151      	lsls	r1, r2, #5
 80064ba:	6a3a      	ldr	r2, [r7, #32]
 80064bc:	440a      	add	r2, r1
 80064be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064c6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	7c9b      	ldrb	r3, [r3, #18]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d162      	bne.n	8006596 <USB_HC_StartXfer+0x3ea>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	78db      	ldrb	r3, [r3, #3]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d15e      	bne.n	8006596 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	3b01      	subs	r3, #1
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d858      	bhi.n	8006594 <USB_HC_StartXfer+0x3e8>
 80064e2:	a201      	add	r2, pc, #4	@ (adr r2, 80064e8 <USB_HC_StartXfer+0x33c>)
 80064e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e8:	080064f9 	.word	0x080064f9
 80064ec:	0800651b 	.word	0x0800651b
 80064f0:	0800653d 	.word	0x0800653d
 80064f4:	0800655f 	.word	0x0800655f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	0151      	lsls	r1, r2, #5
 800650a:	6a3a      	ldr	r2, [r7, #32]
 800650c:	440a      	add	r2, r1
 800650e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006516:	6053      	str	r3, [r2, #4]
          break;
 8006518:	e03d      	b.n	8006596 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	4413      	add	r3, r2
 8006522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	6a3a      	ldr	r2, [r7, #32]
 800652e:	440a      	add	r2, r1
 8006530:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006534:	f043 030e 	orr.w	r3, r3, #14
 8006538:	6053      	str	r3, [r2, #4]
          break;
 800653a:	e02c      	b.n	8006596 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	4413      	add	r3, r2
 8006544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	6a3a      	ldr	r2, [r7, #32]
 8006550:	440a      	add	r2, r1
 8006552:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006556:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800655a:	6053      	str	r3, [r2, #4]
          break;
 800655c:	e01b      	b.n	8006596 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	4413      	add	r3, r2
 8006566:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	69fa      	ldr	r2, [r7, #28]
 800656e:	0151      	lsls	r1, r2, #5
 8006570:	6a3a      	ldr	r2, [r7, #32]
 8006572:	440a      	add	r2, r1
 8006574:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006578:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800657c:	6053      	str	r3, [r2, #4]
          break;
 800657e:	e00a      	b.n	8006596 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	4413      	add	r3, r2
 8006588:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800658c:	461a      	mov	r2, r3
 800658e:	2300      	movs	r3, #0
 8006590:	6053      	str	r3, [r2, #4]
 8006592:	e000      	b.n	8006596 <USB_HC_StartXfer+0x3ea>
          break;
 8006594:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	4413      	add	r3, r2
 800659e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065ac:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	78db      	ldrb	r3, [r3, #3]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d004      	beq.n	80065c0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	e003      	b.n	80065c8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80065c6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065ce:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065dc:	461a      	mov	r2, r3
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80065e2:	79fb      	ldrb	r3, [r7, #7]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	e055      	b.n	8006698 <USB_HC_StartXfer+0x4ec>
 80065ec:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	78db      	ldrb	r3, [r3, #3]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d14e      	bne.n	8006696 <USB_HC_StartXfer+0x4ea>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d04a      	beq.n	8006696 <USB_HC_StartXfer+0x4ea>
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	79db      	ldrb	r3, [r3, #7]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d146      	bne.n	8006696 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	7c9b      	ldrb	r3, [r3, #18]
 800660c:	2b03      	cmp	r3, #3
 800660e:	d831      	bhi.n	8006674 <USB_HC_StartXfer+0x4c8>
 8006610:	a201      	add	r2, pc, #4	@ (adr r2, 8006618 <USB_HC_StartXfer+0x46c>)
 8006612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006616:	bf00      	nop
 8006618:	08006629 	.word	0x08006629
 800661c:	0800664d 	.word	0x0800664d
 8006620:	08006629 	.word	0x08006629
 8006624:	0800664d 	.word	0x0800664d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	3303      	adds	r3, #3
 800662e:	089b      	lsrs	r3, r3, #2
 8006630:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006632:	8afa      	ldrh	r2, [r7, #22]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006638:	b29b      	uxth	r3, r3
 800663a:	429a      	cmp	r2, r3
 800663c:	d91c      	bls.n	8006678 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	f043 0220 	orr.w	r2, r3, #32
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	619a      	str	r2, [r3, #24]
        }
        break;
 800664a:	e015      	b.n	8006678 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	3303      	adds	r3, #3
 8006652:	089b      	lsrs	r3, r3, #2
 8006654:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006656:	8afa      	ldrh	r2, [r7, #22]
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	b29b      	uxth	r3, r3
 8006662:	429a      	cmp	r2, r3
 8006664:	d90a      	bls.n	800667c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	619a      	str	r2, [r3, #24]
        }
        break;
 8006672:	e003      	b.n	800667c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006674:	bf00      	nop
 8006676:	e002      	b.n	800667e <USB_HC_StartXfer+0x4d2>
        break;
 8006678:	bf00      	nop
 800667a:	e000      	b.n	800667e <USB_HC_StartXfer+0x4d2>
        break;
 800667c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	6999      	ldr	r1, [r3, #24]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	785a      	ldrb	r2, [r3, #1]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	b29b      	uxth	r3, r3
 800668c:	2000      	movs	r0, #0
 800668e:	9000      	str	r0, [sp, #0]
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f7ff f9c9 	bl	8005a28 <USB_WritePacket>
  }

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3728      	adds	r7, #40	@ 0x28
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	b29b      	uxth	r3, r3
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b089      	sub	sp, #36	@ 0x24
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	460b      	mov	r3, r1
 80066cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80066d2:	78fb      	ldrb	r3, [r7, #3]
 80066d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	0c9b      	lsrs	r3, r3, #18
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	0fdb      	lsrs	r3, r3, #31
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4413      	add	r3, r2
 800670e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	0fdb      	lsrs	r3, r3, #31
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 0320 	and.w	r3, r3, #32
 8006724:	2b20      	cmp	r3, #32
 8006726:	d10d      	bne.n	8006744 <USB_HC_Halt+0x82>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10a      	bne.n	8006744 <USB_HC_Halt+0x82>
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d002      	beq.n	8006740 <USB_HC_Halt+0x7e>
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b03      	cmp	r3, #3
 800673e:	d101      	bne.n	8006744 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	e0d8      	b.n	80068f6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <USB_HC_Halt+0x8e>
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d173      	bne.n	8006838 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	4413      	add	r3, r2
 8006758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	440a      	add	r2, r1
 8006766:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800676a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800676e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d14a      	bne.n	8006812 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006780:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d133      	bne.n	80067f0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	4413      	add	r3, r2
 8006790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	440a      	add	r2, r1
 800679e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067a6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067c6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	3301      	adds	r3, #1
 80067cc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067d4:	d82e      	bhi.n	8006834 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067ec:	d0ec      	beq.n	80067c8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067ee:	e081      	b.n	80068f4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	0151      	lsls	r1, r2, #5
 8006802:	69fa      	ldr	r2, [r7, #28]
 8006804:	440a      	add	r2, r1
 8006806:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800680a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800680e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006810:	e070      	b.n	80068f4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	4413      	add	r3, r2
 800681a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	0151      	lsls	r1, r2, #5
 8006824:	69fa      	ldr	r2, [r7, #28]
 8006826:	440a      	add	r2, r1
 8006828:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800682c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006830:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006832:	e05f      	b.n	80068f4 <USB_HC_Halt+0x232>
            break;
 8006834:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006836:	e05d      	b.n	80068f4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	4413      	add	r3, r2
 8006840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	0151      	lsls	r1, r2, #5
 800684a:	69fa      	ldr	r2, [r7, #28]
 800684c:	440a      	add	r2, r1
 800684e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006852:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006856:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d133      	bne.n	80068d0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	4413      	add	r3, r2
 8006870:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	0151      	lsls	r1, r2, #5
 800687a:	69fa      	ldr	r2, [r7, #28]
 800687c:	440a      	add	r2, r1
 800687e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006882:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006886:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	4413      	add	r3, r2
 8006890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	0151      	lsls	r1, r2, #5
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	440a      	add	r2, r1
 800689e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068a6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	3301      	adds	r3, #1
 80068ac:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068b4:	d81d      	bhi.n	80068f2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068cc:	d0ec      	beq.n	80068a8 <USB_HC_Halt+0x1e6>
 80068ce:	e011      	b.n	80068f4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	0151      	lsls	r1, r2, #5
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	440a      	add	r2, r1
 80068e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	e000      	b.n	80068f4 <USB_HC_Halt+0x232>
          break;
 80068f2:	bf00      	nop
    }
  }

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3724      	adds	r7, #36	@ 0x24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
	...

08006904 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006918:	2301      	movs	r3, #1
 800691a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	04da      	lsls	r2, r3, #19
 8006920:	4b15      	ldr	r3, [pc, #84]	@ (8006978 <USB_DoPing+0x74>)
 8006922:	4013      	ands	r3, r2
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	0151      	lsls	r1, r2, #5
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	440a      	add	r2, r1
 800692c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006930:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006934:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	4413      	add	r3, r2
 800693e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800694c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006954:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	4413      	add	r3, r2
 800695e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006962:	461a      	mov	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	1ff80000 	.word	0x1ff80000

0800697c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fe ff8c 	bl	80058ae <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006996:	2110      	movs	r1, #16
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7fe ffe5 	bl	8005968 <USB_FlushTxFifo>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff f80f 	bl	80059cc <USB_FlushRxFifo>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80069b8:	2300      	movs	r3, #0
 80069ba:	61bb      	str	r3, [r7, #24]
 80069bc:	e01f      	b.n	80069fe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80069e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069f2:	461a      	mov	r2, r3
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	3301      	adds	r3, #1
 80069fc:	61bb      	str	r3, [r7, #24]
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b0f      	cmp	r3, #15
 8006a02:	d9dc      	bls.n	80069be <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a04:	2300      	movs	r3, #0
 8006a06:	61bb      	str	r3, [r7, #24]
 8006a08:	e034      	b.n	8006a74 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a20:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a30:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a3e:	461a      	mov	r2, r3
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3301      	adds	r3, #1
 8006a48:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a50:	d80c      	bhi.n	8006a6c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a68:	d0ec      	beq.n	8006a44 <USB_StopHost+0xc8>
 8006a6a:	e000      	b.n	8006a6e <USB_StopHost+0xf2>
        break;
 8006a6c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	3301      	adds	r3, #1
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	2b0f      	cmp	r3, #15
 8006a78:	d9c7      	bls.n	8006a0a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a80:	461a      	mov	r2, r3
 8006a82:	f04f 33ff 	mov.w	r3, #4294967295
 8006a86:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7fe fefb 	bl	800588c <USB_EnableGlobalInt>

  return ret;
 8006a96:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3720      	adds	r7, #32
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006aa0:	b590      	push	{r4, r7, lr}
 8006aa2:	b089      	sub	sp, #36	@ 0x24
 8006aa4:	af04      	add	r7, sp, #16
 8006aa6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	2202      	movs	r2, #2
 8006aac:	2102      	movs	r1, #2
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fcd1 	bl	8007456 <USBH_FindInterface>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	2bff      	cmp	r3, #255	@ 0xff
 8006abc:	d002      	beq.n	8006ac4 <USBH_CDC_InterfaceInit+0x24>
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d901      	bls.n	8006ac8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	e13d      	b.n	8006d44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fca6 	bl	800741e <USBH_SelectInterface>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006adc:	2302      	movs	r3, #2
 8006ade:	e131      	b.n	8006d44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006ae6:	2050      	movs	r0, #80	@ 0x50
 8006ae8:	f005 ff1a 	bl	800c920 <malloc>
 8006aec:	4603      	mov	r3, r0
 8006aee:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006b00:	2302      	movs	r3, #2
 8006b02:	e11f      	b.n	8006d44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006b04:	2250      	movs	r2, #80	@ 0x50
 8006b06:	2100      	movs	r1, #0
 8006b08:	68b8      	ldr	r0, [r7, #8]
 8006b0a:	f005 ffc7 	bl	800ca9c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	211a      	movs	r1, #26
 8006b14:	fb01 f303 	mul.w	r3, r1, r3
 8006b18:	4413      	add	r3, r2
 8006b1a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	b25b      	sxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	da15      	bge.n	8006b52 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	211a      	movs	r1, #26
 8006b2c:	fb01 f303 	mul.w	r3, r1, r3
 8006b30:	4413      	add	r3, r2
 8006b32:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006b36:	781a      	ldrb	r2, [r3, #0]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	211a      	movs	r1, #26
 8006b42:	fb01 f303 	mul.w	r3, r1, r3
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006b4c:	881a      	ldrh	r2, [r3, #0]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	785b      	ldrb	r3, [r3, #1]
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f002 fa18 	bl	8008f8e <USBH_AllocPipe>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	461a      	mov	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	7819      	ldrb	r1, [r3, #0]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	7858      	ldrb	r0, [r3, #1]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	8952      	ldrh	r2, [r2, #10]
 8006b7e:	9202      	str	r2, [sp, #8]
 8006b80:	2203      	movs	r2, #3
 8006b82:	9201      	str	r2, [sp, #4]
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	4623      	mov	r3, r4
 8006b88:	4602      	mov	r2, r0
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f002 f9d0 	bl	8008f30 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	2200      	movs	r2, #0
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f005 fe3b 	bl	800c814 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	210a      	movs	r1, #10
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fc56 	bl	8007456 <USBH_FindInterface>
 8006baa:	4603      	mov	r3, r0
 8006bac:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	2bff      	cmp	r3, #255	@ 0xff
 8006bb2:	d002      	beq.n	8006bba <USBH_CDC_InterfaceInit+0x11a>
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d901      	bls.n	8006bbe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e0c2      	b.n	8006d44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	211a      	movs	r1, #26
 8006bc4:	fb01 f303 	mul.w	r3, r1, r3
 8006bc8:	4413      	add	r3, r2
 8006bca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	b25b      	sxtb	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	da16      	bge.n	8006c04 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	211a      	movs	r1, #26
 8006bdc:	fb01 f303 	mul.w	r3, r1, r3
 8006be0:	4413      	add	r3, r2
 8006be2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006be6:	781a      	ldrb	r2, [r3, #0]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	211a      	movs	r1, #26
 8006bf2:	fb01 f303 	mul.w	r3, r1, r3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006bfc:	881a      	ldrh	r2, [r3, #0]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	835a      	strh	r2, [r3, #26]
 8006c02:	e015      	b.n	8006c30 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	211a      	movs	r1, #26
 8006c0a:	fb01 f303 	mul.w	r3, r1, r3
 8006c0e:	4413      	add	r3, r2
 8006c10:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c14:	781a      	ldrb	r2, [r3, #0]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	211a      	movs	r1, #26
 8006c20:	fb01 f303 	mul.w	r3, r1, r3
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006c2a:	881a      	ldrh	r2, [r3, #0]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	211a      	movs	r1, #26
 8006c36:	fb01 f303 	mul.w	r3, r1, r3
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	b25b      	sxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	da16      	bge.n	8006c76 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	211a      	movs	r1, #26
 8006c4e:	fb01 f303 	mul.w	r3, r1, r3
 8006c52:	4413      	add	r3, r2
 8006c54:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006c58:	781a      	ldrb	r2, [r3, #0]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	211a      	movs	r1, #26
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006c6e:	881a      	ldrh	r2, [r3, #0]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	835a      	strh	r2, [r3, #26]
 8006c74:	e015      	b.n	8006ca2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	211a      	movs	r1, #26
 8006c7c:	fb01 f303 	mul.w	r3, r1, r3
 8006c80:	4413      	add	r3, r2
 8006c82:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006c86:	781a      	ldrb	r2, [r3, #0]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	211a      	movs	r1, #26
 8006c92:	fb01 f303 	mul.w	r3, r1, r3
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006c9c:	881a      	ldrh	r2, [r3, #0]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	7b9b      	ldrb	r3, [r3, #14]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f002 f970 	bl	8008f8e <USBH_AllocPipe>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	7bdb      	ldrb	r3, [r3, #15]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f002 f966 	bl	8008f8e <USBH_AllocPipe>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	7b59      	ldrb	r1, [r3, #13]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	7b98      	ldrb	r0, [r3, #14]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	8b12      	ldrh	r2, [r2, #24]
 8006ce2:	9202      	str	r2, [sp, #8]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	9201      	str	r2, [sp, #4]
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	4623      	mov	r3, r4
 8006cec:	4602      	mov	r2, r0
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f002 f91e 	bl	8008f30 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	7b19      	ldrb	r1, [r3, #12]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	7bd8      	ldrb	r0, [r3, #15]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	8b52      	ldrh	r2, [r2, #26]
 8006d0c:	9202      	str	r2, [sp, #8]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	9201      	str	r2, [sp, #4]
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	4623      	mov	r3, r4
 8006d16:	4602      	mov	r2, r0
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f002 f909 	bl	8008f30 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	7b5b      	ldrb	r3, [r3, #13]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f005 fd70 	bl	800c814 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	7b1b      	ldrb	r3, [r3, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f005 fd69 	bl	800c814 <USBH_LL_SetToggle>

  return USBH_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd90      	pop	{r4, r7, pc}

08006d4c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00e      	beq.n	8006d84 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f002 f8fe 	bl	8008f6e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f002 f929 	bl	8008fd0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	7b1b      	ldrb	r3, [r3, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00e      	beq.n	8006daa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	7b1b      	ldrb	r3, [r3, #12]
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f002 f8eb 	bl	8008f6e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	7b1b      	ldrb	r3, [r3, #12]
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f002 f916 	bl	8008fd0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	7b5b      	ldrb	r3, [r3, #13]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00e      	beq.n	8006dd0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	7b5b      	ldrb	r3, [r3, #13]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f002 f8d8 	bl	8008f6e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	7b5b      	ldrb	r3, [r3, #13]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f002 f903 	bl	8008fd0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00b      	beq.n	8006df4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f005 fda3 	bl	800c930 <free>
    phost->pActiveClass->pData = 0U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006df0:	2200      	movs	r2, #0
 8006df2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3340      	adds	r3, #64	@ 0x40
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f8b1 	bl	8006f7e <GetLineCoding>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006e20:	7afb      	ldrb	r3, [r7, #11]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d105      	bne.n	8006e32 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e2c:	2102      	movs	r1, #2
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006e32:	7afb      	ldrb	r3, [r7, #11]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e44:	2301      	movs	r3, #1
 8006e46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	d877      	bhi.n	8006f50 <USBH_CDC_Process+0x114>
 8006e60:	a201      	add	r2, pc, #4	@ (adr r2, 8006e68 <USBH_CDC_Process+0x2c>)
 8006e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e66:	bf00      	nop
 8006e68:	08006e7d 	.word	0x08006e7d
 8006e6c:	08006e83 	.word	0x08006e83
 8006e70:	08006eb3 	.word	0x08006eb3
 8006e74:	08006f27 	.word	0x08006f27
 8006e78:	08006f35 	.word	0x08006f35
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e80:	e06d      	b.n	8006f5e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f897 	bl	8006fbc <SetLineCoding>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ea0:	e058      	b.n	8006f54 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006ea2:	7bbb      	ldrb	r3, [r7, #14]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d055      	beq.n	8006f54 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2204      	movs	r2, #4
 8006eac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006eb0:	e050      	b.n	8006f54 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	3340      	adds	r3, #64	@ 0x40
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f860 	bl	8006f7e <GetLineCoding>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ec2:	7bbb      	ldrb	r3, [r7, #14]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d126      	bne.n	8006f16 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eda:	791b      	ldrb	r3, [r3, #4]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d13b      	bne.n	8006f58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eea:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d133      	bne.n	8006f58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006efa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d12b      	bne.n	8006f58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f08:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d124      	bne.n	8006f58 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f982 	bl	8007218 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f14:	e020      	b.n	8006f58 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006f16:	7bbb      	ldrb	r3, [r7, #14]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d01d      	beq.n	8006f58 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2204      	movs	r2, #4
 8006f20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006f24:	e018      	b.n	8006f58 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f867 	bl	8006ffa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f8f6 	bl	800711e <CDC_ProcessReception>
      break;
 8006f32:	e014      	b.n	8006f5e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006f34:	2100      	movs	r1, #0
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f001 f984 	bl	8008244 <USBH_ClrFeature>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006f4e:	e005      	b.n	8006f5c <USBH_CDC_Process+0x120>

    default:
      break;
 8006f50:	bf00      	nop
 8006f52:	e004      	b.n	8006f5e <USBH_CDC_Process+0x122>
      break;
 8006f54:	bf00      	nop
 8006f56:	e002      	b.n	8006f5e <USBH_CDC_Process+0x122>
      break;
 8006f58:	bf00      	nop
 8006f5a:	e000      	b.n	8006f5e <USBH_CDC_Process+0x122>
      break;
 8006f5c:	bf00      	nop

  }

  return status;
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	22a1      	movs	r2, #161	@ 0xa1
 8006f8c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2221      	movs	r2, #33	@ 0x21
 8006f92:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2207      	movs	r2, #7
 8006fa4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2207      	movs	r2, #7
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 fc7e 	bl	80088ae <USBH_CtlReq>
 8006fb2:	4603      	mov	r3, r0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2221      	movs	r2, #33	@ 0x21
 8006fca:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2207      	movs	r2, #7
 8006fe2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2207      	movs	r2, #7
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 fc5f 	bl	80088ae <USBH_CtlReq>
 8006ff0:	4603      	mov	r3, r0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b086      	sub	sp, #24
 8006ffe:	af02      	add	r7, sp, #8
 8007000:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800700c:	2300      	movs	r3, #0
 800700e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007016:	2b01      	cmp	r3, #1
 8007018:	d002      	beq.n	8007020 <CDC_ProcessTransmission+0x26>
 800701a:	2b02      	cmp	r3, #2
 800701c:	d023      	beq.n	8007066 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800701e:	e07a      	b.n	8007116 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	8b12      	ldrh	r2, [r2, #24]
 8007028:	4293      	cmp	r3, r2
 800702a:	d90b      	bls.n	8007044 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	69d9      	ldr	r1, [r3, #28]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	8b1a      	ldrh	r2, [r3, #24]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	7b5b      	ldrb	r3, [r3, #13]
 8007038:	2001      	movs	r0, #1
 800703a:	9000      	str	r0, [sp, #0]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 ff34 	bl	8008eaa <USBH_BulkSendData>
 8007042:	e00b      	b.n	800705c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800704c:	b29a      	uxth	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	7b5b      	ldrb	r3, [r3, #13]
 8007052:	2001      	movs	r0, #1
 8007054:	9000      	str	r0, [sp, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 ff27 	bl	8008eaa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2202      	movs	r2, #2
 8007060:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007064:	e057      	b.n	8007116 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	7b5b      	ldrb	r3, [r3, #13]
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f005 fba7 	bl	800c7c0 <USBH_LL_GetURBState>
 8007072:	4603      	mov	r3, r0
 8007074:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007076:	7afb      	ldrb	r3, [r7, #11]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d136      	bne.n	80070ea <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	8b12      	ldrh	r2, [r2, #24]
 8007084:	4293      	cmp	r3, r2
 8007086:	d90e      	bls.n	80070a6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	8b12      	ldrh	r2, [r2, #24]
 8007090:	1a9a      	subs	r2, r3, r2
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	8b12      	ldrh	r2, [r2, #24]
 800709e:	441a      	add	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	61da      	str	r2, [r3, #28]
 80070a4:	e002      	b.n	80070ac <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80070bc:	e006      	b.n	80070cc <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f892 	bl	80071f0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2204      	movs	r2, #4
 80070d0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80070e0:	2300      	movs	r3, #0
 80070e2:	2200      	movs	r2, #0
 80070e4:	f002 fa24 	bl	8009530 <osMessageQueuePut>
      break;
 80070e8:	e014      	b.n	8007114 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80070ea:	7afb      	ldrb	r3, [r7, #11]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d111      	bne.n	8007114 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2204      	movs	r2, #4
 80070fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800710c:	2300      	movs	r3, #0
 800710e:	2200      	movs	r2, #0
 8007110:	f002 fa0e 	bl	8009530 <osMessageQueuePut>
      break;
 8007114:	bf00      	nop
  }
}
 8007116:	bf00      	nop
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b086      	sub	sp, #24
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007130:	2300      	movs	r3, #0
 8007132:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800713a:	2b03      	cmp	r3, #3
 800713c:	d002      	beq.n	8007144 <CDC_ProcessReception+0x26>
 800713e:	2b04      	cmp	r3, #4
 8007140:	d00e      	beq.n	8007160 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007142:	e051      	b.n	80071e8 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	6a19      	ldr	r1, [r3, #32]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	8b5a      	ldrh	r2, [r3, #26]
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	7b1b      	ldrb	r3, [r3, #12]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 fecf 	bl	8008ef4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2204      	movs	r2, #4
 800715a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800715e:	e043      	b.n	80071e8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	7b1b      	ldrb	r3, [r3, #12]
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f005 fb2a 	bl	800c7c0 <USBH_LL_GetURBState>
 800716c:	4603      	mov	r3, r0
 800716e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007170:	7cfb      	ldrb	r3, [r7, #19]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d137      	bne.n	80071e6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	7b1b      	ldrb	r3, [r3, #12]
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f005 fa8d 	bl	800c69c <USBH_LL_GetLastXferSize>
 8007182:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	429a      	cmp	r2, r3
 800718c:	d016      	beq.n	80071bc <CDC_ProcessReception+0x9e>
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	8b5b      	ldrh	r3, [r3, #26]
 8007192:	461a      	mov	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4293      	cmp	r3, r2
 8007198:	d110      	bne.n	80071bc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	1ad2      	subs	r2, r2, r3
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	6a1a      	ldr	r2, [r3, #32]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	441a      	add	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2203      	movs	r2, #3
 80071b6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 80071ba:	e006      	b.n	80071ca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f81d 	bl	8007204 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2204      	movs	r2, #4
 80071ce:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80071de:	2300      	movs	r3, #0
 80071e0:	2200      	movs	r2, #0
 80071e2:	f002 f9a5 	bl	8009530 <osMessageQueuePut>
      break;
 80071e6:	bf00      	nop
  }
}
 80071e8:	bf00      	nop
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	4613      	mov	r3, r2
 8007238:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007240:	2302      	movs	r3, #2
 8007242:	e044      	b.n	80072ce <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	79fa      	ldrb	r2, [r7, #7]
 8007248:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 f841 	bl	80072e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d003      	beq.n	8007290 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007290:	2200      	movs	r2, #0
 8007292:	2104      	movs	r1, #4
 8007294:	2010      	movs	r0, #16
 8007296:	f002 f8d7 	bl	8009448 <osMessageQueueNew>
 800729a:	4602      	mov	r2, r0
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 80072a2:	4b0d      	ldr	r3, [pc, #52]	@ (80072d8 <USBH_Init+0xac>)
 80072a4:	4a0d      	ldr	r2, [pc, #52]	@ (80072dc <USBH_Init+0xb0>)
 80072a6:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 80072a8:	4b0b      	ldr	r3, [pc, #44]	@ (80072d8 <USBH_Init+0xac>)
 80072aa:	2280      	movs	r2, #128	@ 0x80
 80072ac:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 80072ae:	4b0a      	ldr	r3, [pc, #40]	@ (80072d8 <USBH_Init+0xac>)
 80072b0:	2218      	movs	r2, #24
 80072b2:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80072b4:	4a08      	ldr	r2, [pc, #32]	@ (80072d8 <USBH_Init+0xac>)
 80072b6:	68f9      	ldr	r1, [r7, #12]
 80072b8:	4809      	ldr	r0, [pc, #36]	@ (80072e0 <USBH_Init+0xb4>)
 80072ba:	f001 ff59 	bl	8009170 <osThreadNew>
 80072be:	4602      	mov	r2, r0
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f005 f934 	bl	800c534 <USBH_LL_Init>

  return USBH_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000240 	.word	0x20000240
 80072dc:	0800cce4 	.word	0x0800cce4
 80072e0:	08007f95 	.word	0x08007f95

080072e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	e009      	b.n	800730a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	33e0      	adds	r3, #224	@ 0xe0
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	2200      	movs	r2, #0
 8007302:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	3301      	adds	r3, #1
 8007308:	60fb      	str	r3, [r7, #12]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2b0f      	cmp	r3, #15
 800730e:	d9f2      	bls.n	80072f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	e009      	b.n	800732a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007320:	2200      	movs	r2, #0
 8007322:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3301      	adds	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007330:	d3f1      	bcc.n	8007316 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2240      	movs	r2, #64	@ 0x40
 8007356:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	331c      	adds	r3, #28
 8007382:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f005 fb87 	bl	800ca9c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007394:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007398:	2100      	movs	r1, #0
 800739a:	4618      	mov	r0, r3
 800739c:	f005 fb7e 	bl	800ca9c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80073a6:	2212      	movs	r2, #18
 80073a8:	2100      	movs	r1, #0
 80073aa:	4618      	mov	r0, r3
 80073ac:	f005 fb76 	bl	800ca9c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80073b6:	223e      	movs	r2, #62	@ 0x3e
 80073b8:	2100      	movs	r1, #0
 80073ba:	4618      	mov	r0, r3
 80073bc:	f005 fb6e 	bl	800ca9c <memset>

  return USBH_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d016      	beq.n	800740c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10e      	bne.n	8007406 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80073ee:	1c59      	adds	r1, r3, #1
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	33de      	adds	r3, #222	@ 0xde
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]
 8007404:	e004      	b.n	8007410 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007406:	2302      	movs	r3, #2
 8007408:	73fb      	strb	r3, [r7, #15]
 800740a:	e001      	b.n	8007410 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800740c:	2302      	movs	r3, #2
 800740e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007410:	7bfb      	ldrb	r3, [r7, #15]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800741e:	b480      	push	{r7}
 8007420:	b085      	sub	sp, #20
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	460b      	mov	r3, r1
 8007428:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007434:	78fa      	ldrb	r2, [r7, #3]
 8007436:	429a      	cmp	r2, r3
 8007438:	d204      	bcs.n	8007444 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	78fa      	ldrb	r2, [r7, #3]
 800743e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007442:	e001      	b.n	8007448 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007444:	2302      	movs	r3, #2
 8007446:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007448:	7bfb      	ldrb	r3, [r7, #15]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007456:	b480      	push	{r7}
 8007458:	b087      	sub	sp, #28
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	4608      	mov	r0, r1
 8007460:	4611      	mov	r1, r2
 8007462:	461a      	mov	r2, r3
 8007464:	4603      	mov	r3, r0
 8007466:	70fb      	strb	r3, [r7, #3]
 8007468:	460b      	mov	r3, r1
 800746a:	70bb      	strb	r3, [r7, #2]
 800746c:	4613      	mov	r3, r2
 800746e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007474:	2300      	movs	r3, #0
 8007476:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800747e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007480:	e025      	b.n	80074ce <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007482:	7dfb      	ldrb	r3, [r7, #23]
 8007484:	221a      	movs	r2, #26
 8007486:	fb02 f303 	mul.w	r3, r2, r3
 800748a:	3308      	adds	r3, #8
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	3302      	adds	r3, #2
 8007492:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	795b      	ldrb	r3, [r3, #5]
 8007498:	78fa      	ldrb	r2, [r7, #3]
 800749a:	429a      	cmp	r2, r3
 800749c:	d002      	beq.n	80074a4 <USBH_FindInterface+0x4e>
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	2bff      	cmp	r3, #255	@ 0xff
 80074a2:	d111      	bne.n	80074c8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80074a8:	78ba      	ldrb	r2, [r7, #2]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d002      	beq.n	80074b4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80074ae:	78bb      	ldrb	r3, [r7, #2]
 80074b0:	2bff      	cmp	r3, #255	@ 0xff
 80074b2:	d109      	bne.n	80074c8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80074b8:	787a      	ldrb	r2, [r7, #1]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d002      	beq.n	80074c4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80074be:	787b      	ldrb	r3, [r7, #1]
 80074c0:	2bff      	cmp	r3, #255	@ 0xff
 80074c2:	d101      	bne.n	80074c8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	e006      	b.n	80074d6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	3301      	adds	r3, #1
 80074cc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d9d6      	bls.n	8007482 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80074d4:	23ff      	movs	r3, #255	@ 0xff
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f005 f85e 	bl	800c5ac <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80074f0:	2101      	movs	r1, #1
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f005 f977 	bl	800c7e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af04      	add	r7, sp, #16
 800750a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800750c:	2302      	movs	r3, #2
 800750e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b01      	cmp	r3, #1
 800751e:	d102      	bne.n	8007526 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2203      	movs	r2, #3
 8007524:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b0b      	cmp	r3, #11
 800752e:	f200 8244 	bhi.w	80079ba <USBH_Process+0x4b6>
 8007532:	a201      	add	r2, pc, #4	@ (adr r2, 8007538 <USBH_Process+0x34>)
 8007534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007538:	08007569 	.word	0x08007569
 800753c:	080075b7 	.word	0x080075b7
 8007540:	0800763b 	.word	0x0800763b
 8007544:	08007939 	.word	0x08007939
 8007548:	080079bb 	.word	0x080079bb
 800754c:	080076f7 	.word	0x080076f7
 8007550:	080078c3 	.word	0x080078c3
 8007554:	08007749 	.word	0x08007749
 8007558:	08007785 	.word	0x08007785
 800755c:	080077bd 	.word	0x080077bd
 8007560:	0800781b 	.word	0x0800781b
 8007564:	08007921 	.word	0x08007921
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8224 	beq.w	80079be <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800757c:	20c8      	movs	r0, #200	@ 0xc8
 800757e:	f005 f97c 	bl	800c87a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f005 f86f 	bl	800c666 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80075ac:	2300      	movs	r3, #0
 80075ae:	2200      	movs	r2, #0
 80075b0:	f001 ffbe 	bl	8009530 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80075b4:	e203      	b.n	80079be <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d107      	bne.n	80075d0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	701a      	strb	r2, [r3, #0]
 80075ce:	e025      	b.n	800761c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80075d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80075da:	d914      	bls.n	8007606 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80075e2:	3301      	adds	r3, #1
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d903      	bls.n	80075fe <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	220d      	movs	r2, #13
 80075fa:	701a      	strb	r2, [r3, #0]
 80075fc:	e00e      	b.n	800761c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	701a      	strb	r2, [r3, #0]
 8007604:	e00a      	b.n	800761c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800760c:	f103 020a 	add.w	r2, r3, #10
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007616:	200a      	movs	r0, #10
 8007618:	f005 f92f 	bl	800c87a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007630:	2300      	movs	r3, #0
 8007632:	2200      	movs	r2, #0
 8007634:	f001 ff7c 	bl	8009530 <osMessageQueuePut>
#endif
#endif
      break;
 8007638:	e1c8      	b.n	80079cc <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800764a:	2104      	movs	r1, #4
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007650:	2064      	movs	r0, #100	@ 0x64
 8007652:	f005 f912 	bl	800c87a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f004 ffde 	bl	800c618 <USBH_LL_GetSpeed>
 800765c:	4603      	mov	r3, r0
 800765e:	461a      	mov	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2205      	movs	r2, #5
 800766a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800766c:	2100      	movs	r1, #0
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f001 fc8d 	bl	8008f8e <USBH_AllocPipe>
 8007674:	4603      	mov	r3, r0
 8007676:	461a      	mov	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800767c:	2180      	movs	r1, #128	@ 0x80
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 fc85 	bl	8008f8e <USBH_AllocPipe>
 8007684:	4603      	mov	r3, r0
 8007686:	461a      	mov	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	7919      	ldrb	r1, [r3, #4]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076a0:	9202      	str	r2, [sp, #8]
 80076a2:	2200      	movs	r2, #0
 80076a4:	9201      	str	r2, [sp, #4]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	4603      	mov	r3, r0
 80076aa:	2280      	movs	r2, #128	@ 0x80
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 fc3f 	bl	8008f30 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	7959      	ldrb	r1, [r3, #5]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80076c6:	9202      	str	r2, [sp, #8]
 80076c8:	2200      	movs	r2, #0
 80076ca:	9201      	str	r2, [sp, #4]
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	4603      	mov	r3, r0
 80076d0:	2200      	movs	r2, #0
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f001 fc2c 	bl	8008f30 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80076ec:	2300      	movs	r3, #0
 80076ee:	2200      	movs	r2, #0
 80076f0:	f001 ff1e 	bl	8009530 <osMessageQueuePut>
#endif
#endif
      break;
 80076f4:	e16a      	b.n	80079cc <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f96e 	bl	80079d8 <USBH_HandleEnum>
 80076fc:	4603      	mov	r3, r0
 80076fe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	f040 815c 	bne.w	80079c2 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007718:	2b01      	cmp	r3, #1
 800771a:	d103      	bne.n	8007724 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2208      	movs	r2, #8
 8007720:	701a      	strb	r2, [r3, #0]
 8007722:	e002      	b.n	800772a <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2207      	movs	r2, #7
 8007728:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2205      	movs	r2, #5
 800772e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800773e:	2300      	movs	r3, #0
 8007740:	2200      	movs	r2, #0
 8007742:	f001 fef5 	bl	8009530 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007746:	e13c      	b.n	80079c2 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 8139 	beq.w	80079c6 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800775a:	2101      	movs	r1, #1
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2208      	movs	r2, #8
 8007764:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2205      	movs	r2, #5
 800776a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800777a:	2300      	movs	r3, #0
 800777c:	2200      	movs	r2, #0
 800777e:	f001 fed7 	bl	8009530 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8007782:	e120      	b.n	80079c6 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fd12 	bl	80081b6 <USBH_SetCfg>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d102      	bne.n	800779e <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2209      	movs	r2, #9
 800779c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80077b2:	2300      	movs	r3, #0
 80077b4:	2200      	movs	r2, #0
 80077b6:	f001 febb 	bl	8009530 <osMessageQueuePut>
#endif
#endif
      break;
 80077ba:	e107      	b.n	80079cc <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d015      	beq.n	80077f6 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80077ca:	2101      	movs	r1, #1
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fd15 	bl	80081fc <USBH_SetFeature>
 80077d2:	4603      	mov	r3, r0
 80077d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d103      	bne.n	80077e6 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	220a      	movs	r2, #10
 80077e2:	701a      	strb	r2, [r3, #0]
 80077e4:	e00a      	b.n	80077fc <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d106      	bne.n	80077fc <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	220a      	movs	r2, #10
 80077f2:	701a      	strb	r2, [r3, #0]
 80077f4:	e002      	b.n	80077fc <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	220a      	movs	r2, #10
 80077fa:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007810:	2300      	movs	r3, #0
 8007812:	2200      	movs	r2, #0
 8007814:	f001 fe8c 	bl	8009530 <osMessageQueuePut>
#endif
#endif
      break;
 8007818:	e0d8      	b.n	80079cc <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007820:	2b00      	cmp	r3, #0
 8007822:	d03f      	beq.n	80078a4 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
 8007830:	e016      	b.n	8007860 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007832:	7bfa      	ldrb	r2, [r7, #15]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	32de      	adds	r2, #222	@ 0xde
 8007838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783c:	791a      	ldrb	r2, [r3, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007844:	429a      	cmp	r2, r3
 8007846:	d108      	bne.n	800785a <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007848:	7bfa      	ldrb	r2, [r7, #15]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	32de      	adds	r2, #222	@ 0xde
 800784e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007858:	e005      	b.n	8007866 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800785a:	7bfb      	ldrb	r3, [r7, #15]
 800785c:	3301      	adds	r3, #1
 800785e:	73fb      	strb	r3, [r7, #15]
 8007860:	7bfb      	ldrb	r3, [r7, #15]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0e5      	beq.n	8007832 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800786c:	2b00      	cmp	r3, #0
 800786e:	d016      	beq.n	800789e <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	4798      	blx	r3
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2206      	movs	r2, #6
 8007886:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800788e:	2103      	movs	r1, #3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	4798      	blx	r3
 8007894:	e006      	b.n	80078a4 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	220d      	movs	r2, #13
 800789a:	701a      	strb	r2, [r3, #0]
 800789c:	e002      	b.n	80078a4 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	220d      	movs	r2, #13
 80078a2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2205      	movs	r2, #5
 80078a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80078b8:	2300      	movs	r3, #0
 80078ba:	2200      	movs	r2, #0
 80078bc:	f001 fe38 	bl	8009530 <osMessageQueuePut>
#endif
#endif
      break;
 80078c0:	e084      	b.n	80079cc <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d017      	beq.n	80078fc <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	4798      	blx	r3
 80078d8:	4603      	mov	r3, r0
 80078da:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d103      	bne.n	80078ec <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	220b      	movs	r2, #11
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	e00a      	b.n	8007902 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d106      	bne.n	8007902 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	220d      	movs	r2, #13
 80078f8:	701a      	strb	r2, [r3, #0]
 80078fa:	e002      	b.n	8007902 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	220d      	movs	r2, #13
 8007900:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2205      	movs	r2, #5
 8007906:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007916:	2300      	movs	r3, #0
 8007918:	2200      	movs	r2, #0
 800791a:	f001 fe09 	bl	8009530 <osMessageQueuePut>
#endif
#endif
      break;
 800791e:	e055      	b.n	80079cc <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007926:	2b00      	cmp	r3, #0
 8007928:	d04f      	beq.n	80079ca <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
      }
      break;
 8007936:	e048      	b.n	80079ca <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff fccf 	bl	80072e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800794c:	2b00      	cmp	r3, #0
 800794e:	d009      	beq.n	8007964 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800796a:	2b00      	cmp	r3, #0
 800796c:	d005      	beq.n	800797a <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007974:	2105      	movs	r1, #5
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b01      	cmp	r3, #1
 8007984:	d107      	bne.n	8007996 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7ff fda7 	bl	80074e2 <USBH_Start>
 8007994:	e002      	b.n	800799c <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f004 fe08 	bl	800c5ac <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80079b0:	2300      	movs	r3, #0
 80079b2:	2200      	movs	r2, #0
 80079b4:	f001 fdbc 	bl	8009530 <osMessageQueuePut>
#endif
#endif
      break;
 80079b8:	e008      	b.n	80079cc <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80079ba:	bf00      	nop
 80079bc:	e006      	b.n	80079cc <USBH_Process+0x4c8>
      break;
 80079be:	bf00      	nop
 80079c0:	e004      	b.n	80079cc <USBH_Process+0x4c8>
      break;
 80079c2:	bf00      	nop
 80079c4:	e002      	b.n	80079cc <USBH_Process+0x4c8>
    break;
 80079c6:	bf00      	nop
 80079c8:	e000      	b.n	80079cc <USBH_Process+0x4c8>
      break;
 80079ca:	bf00      	nop
  }
  return USBH_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop

080079d8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af04      	add	r7, sp, #16
 80079de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80079e0:	2301      	movs	r3, #1
 80079e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80079e4:	2301      	movs	r3, #1
 80079e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	785b      	ldrb	r3, [r3, #1]
 80079ec:	2b07      	cmp	r3, #7
 80079ee:	f200 8204 	bhi.w	8007dfa <USBH_HandleEnum+0x422>
 80079f2:	a201      	add	r2, pc, #4	@ (adr r2, 80079f8 <USBH_HandleEnum+0x20>)
 80079f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f8:	08007a19 	.word	0x08007a19
 80079fc:	08007ad3 	.word	0x08007ad3
 8007a00:	08007b3d 	.word	0x08007b3d
 8007a04:	08007bc7 	.word	0x08007bc7
 8007a08:	08007c31 	.word	0x08007c31
 8007a0c:	08007ca1 	.word	0x08007ca1
 8007a10:	08007d3d 	.word	0x08007d3d
 8007a14:	08007dbb 	.word	0x08007dbb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007a18:	2108      	movs	r1, #8
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fae8 	bl	8007ff0 <USBH_Get_DevDesc>
 8007a20:	4603      	mov	r3, r0
 8007a22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d12e      	bne.n	8007a88 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	7919      	ldrb	r1, [r3, #4]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a4e:	9202      	str	r2, [sp, #8]
 8007a50:	2200      	movs	r2, #0
 8007a52:	9201      	str	r2, [sp, #4]
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	4603      	mov	r3, r0
 8007a58:	2280      	movs	r2, #128	@ 0x80
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 fa68 	bl	8008f30 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7959      	ldrb	r1, [r3, #5]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a74:	9202      	str	r2, [sp, #8]
 8007a76:	2200      	movs	r2, #0
 8007a78:	9201      	str	r2, [sp, #4]
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2200      	movs	r2, #0
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 fa55 	bl	8008f30 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a86:	e1ba      	b.n	8007dfe <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	f040 81b7 	bne.w	8007dfe <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a96:	3301      	adds	r3, #1
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d903      	bls.n	8007ab2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	220d      	movs	r2, #13
 8007aae:	701a      	strb	r2, [r3, #0]
      break;
 8007ab0:	e1a5      	b.n	8007dfe <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	795b      	ldrb	r3, [r3, #5]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 fa89 	bl	8008fd0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	791b      	ldrb	r3, [r3, #4]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f001 fa83 	bl	8008fd0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	701a      	strb	r2, [r3, #0]
      break;
 8007ad0:	e195      	b.n	8007dfe <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007ad2:	2112      	movs	r1, #18
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fa8b 	bl	8007ff0 <USBH_Get_DevDesc>
 8007ada:	4603      	mov	r3, r0
 8007adc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d103      	bne.n	8007aec <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007aea:	e18a      	b.n	8007e02 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	f040 8187 	bne.w	8007e02 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007afa:	3301      	adds	r3, #1
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d903      	bls.n	8007b16 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	220d      	movs	r2, #13
 8007b12:	701a      	strb	r2, [r3, #0]
      break;
 8007b14:	e175      	b.n	8007e02 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	795b      	ldrb	r3, [r3, #5]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f001 fa57 	bl	8008fd0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	791b      	ldrb	r3, [r3, #4]
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 fa51 	bl	8008fd0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	701a      	strb	r2, [r3, #0]
      break;
 8007b3a:	e162      	b.n	8007e02 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fb15 	bl	800816e <USBH_SetAddress>
 8007b44:	4603      	mov	r3, r0
 8007b46:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d130      	bne.n	8007bb0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007b4e:	2002      	movs	r0, #2
 8007b50:	f004 fe93 	bl	800c87a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2203      	movs	r2, #3
 8007b60:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	7919      	ldrb	r1, [r3, #4]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b76:	9202      	str	r2, [sp, #8]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	9201      	str	r2, [sp, #4]
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2280      	movs	r2, #128	@ 0x80
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 f9d4 	bl	8008f30 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	7959      	ldrb	r1, [r3, #5]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b9c:	9202      	str	r2, [sp, #8]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	9201      	str	r2, [sp, #4]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 f9c1 	bl	8008f30 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007bae:	e12a      	b.n	8007e06 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	f040 8127 	bne.w	8007e06 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	220d      	movs	r2, #13
 8007bbc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	705a      	strb	r2, [r3, #1]
      break;
 8007bc4:	e11f      	b.n	8007e06 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007bc6:	2109      	movs	r1, #9
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fa3d 	bl	8008048 <USBH_Get_CfgDesc>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d103      	bne.n	8007be0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2204      	movs	r2, #4
 8007bdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bde:	e114      	b.n	8007e0a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	f040 8111 	bne.w	8007e0a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bee:	3301      	adds	r3, #1
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d903      	bls.n	8007c0a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	220d      	movs	r2, #13
 8007c06:	701a      	strb	r2, [r3, #0]
      break;
 8007c08:	e0ff      	b.n	8007e0a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	795b      	ldrb	r3, [r3, #5]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 f9dd 	bl	8008fd0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	791b      	ldrb	r3, [r3, #4]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 f9d7 	bl	8008fd0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	701a      	strb	r2, [r3, #0]
      break;
 8007c2e:	e0ec      	b.n	8007e0a <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fa05 	bl	8008048 <USBH_Get_CfgDesc>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d103      	bne.n	8007c50 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2205      	movs	r2, #5
 8007c4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c4e:	e0de      	b.n	8007e0e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	f040 80db 	bne.w	8007e0e <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c5e:	3301      	adds	r3, #1
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d903      	bls.n	8007c7a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	220d      	movs	r2, #13
 8007c76:	701a      	strb	r2, [r3, #0]
      break;
 8007c78:	e0c9      	b.n	8007e0e <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	795b      	ldrb	r3, [r3, #5]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 f9a5 	bl	8008fd0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	791b      	ldrb	r3, [r3, #4]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 f99f 	bl	8008fd0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	701a      	strb	r2, [r3, #0]
      break;
 8007c9e:	e0b6      	b.n	8007e0e <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d036      	beq.n	8007d18 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007cb6:	23ff      	movs	r3, #255	@ 0xff
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f9ef 	bl	800809c <USBH_Get_StringDesc>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d111      	bne.n	8007cec <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2206      	movs	r2, #6
 8007ccc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2205      	movs	r2, #5
 8007cd2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f001 fc23 	bl	8009530 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007cea:	e092      	b.n	8007e12 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	f040 808f 	bne.w	8007e12 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2206      	movs	r2, #6
 8007cf8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2205      	movs	r2, #5
 8007cfe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007d0e:	2300      	movs	r3, #0
 8007d10:	2200      	movs	r2, #0
 8007d12:	f001 fc0d 	bl	8009530 <osMessageQueuePut>
      break;
 8007d16:	e07c      	b.n	8007e12 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2206      	movs	r2, #6
 8007d1c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2205      	movs	r2, #5
 8007d22:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007d32:	2300      	movs	r3, #0
 8007d34:	2200      	movs	r2, #0
 8007d36:	f001 fbfb 	bl	8009530 <osMessageQueuePut>
      break;
 8007d3a:	e06a      	b.n	8007e12 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d027      	beq.n	8007d96 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d52:	23ff      	movs	r3, #255	@ 0xff
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f9a1 	bl	800809c <USBH_Get_StringDesc>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d103      	bne.n	8007d6c <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2207      	movs	r2, #7
 8007d68:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d6a:	e054      	b.n	8007e16 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d151      	bne.n	8007e16 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2207      	movs	r2, #7
 8007d76:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2205      	movs	r2, #5
 8007d7c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f001 fbce 	bl	8009530 <osMessageQueuePut>
      break;
 8007d94:	e03f      	b.n	8007e16 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2207      	movs	r2, #7
 8007d9a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2205      	movs	r2, #5
 8007da0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007db0:	2300      	movs	r3, #0
 8007db2:	2200      	movs	r2, #0
 8007db4:	f001 fbbc 	bl	8009530 <osMessageQueuePut>
      break;
 8007db8:	e02d      	b.n	8007e16 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d017      	beq.n	8007df4 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007dd0:	23ff      	movs	r3, #255	@ 0xff
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f962 	bl	800809c <USBH_Get_StringDesc>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ddc:	7bbb      	ldrb	r3, [r7, #14]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d102      	bne.n	8007de8 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007de6:	e018      	b.n	8007e1a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d115      	bne.n	8007e1a <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]
      break;
 8007df2:	e012      	b.n	8007e1a <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73fb      	strb	r3, [r7, #15]
      break;
 8007df8:	e00f      	b.n	8007e1a <USBH_HandleEnum+0x442>

    default:
      break;
 8007dfa:	bf00      	nop
 8007dfc:	e00e      	b.n	8007e1c <USBH_HandleEnum+0x444>
      break;
 8007dfe:	bf00      	nop
 8007e00:	e00c      	b.n	8007e1c <USBH_HandleEnum+0x444>
      break;
 8007e02:	bf00      	nop
 8007e04:	e00a      	b.n	8007e1c <USBH_HandleEnum+0x444>
      break;
 8007e06:	bf00      	nop
 8007e08:	e008      	b.n	8007e1c <USBH_HandleEnum+0x444>
      break;
 8007e0a:	bf00      	nop
 8007e0c:	e006      	b.n	8007e1c <USBH_HandleEnum+0x444>
      break;
 8007e0e:	bf00      	nop
 8007e10:	e004      	b.n	8007e1c <USBH_HandleEnum+0x444>
      break;
 8007e12:	bf00      	nop
 8007e14:	e002      	b.n	8007e1c <USBH_HandleEnum+0x444>
      break;
 8007e16:	bf00      	nop
 8007e18:	e000      	b.n	8007e1c <USBH_HandleEnum+0x444>
      break;
 8007e1a:	bf00      	nop
  }
  return Status;
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop

08007e28 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f804 	bl	8007e6a <USBH_HandleSof>
}
 8007e62:	bf00      	nop
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b0b      	cmp	r3, #11
 8007e7a:	d10a      	bne.n	8007e92 <USBH_HandleSof+0x28>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	4798      	blx	r3
  }
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f001 fb35 	bl	8009530 <osMessageQueuePut>
#endif
#endif

  return;
 8007ec6:	bf00      	nop
}
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007ede:	bf00      	nop
}
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b082      	sub	sp, #8
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007f1e:	2300      	movs	r3, #0
 8007f20:	2200      	movs	r2, #0
 8007f22:	f001 fb05 	bl	8009530 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f004 fb46 	bl	800c5e2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	791b      	ldrb	r3, [r3, #4]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 f837 	bl	8008fd0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	795b      	ldrb	r3, [r3, #5]
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f001 f831 	bl	8008fd0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007f82:	2300      	movs	r3, #0
 8007f84:	2200      	movs	r2, #0
 8007f86:	f001 fad3 	bl	8009530 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fac:	2200      	movs	r2, #0
 8007fae:	f001 fb1f 	bl	80095f0 <osMessageQueueGet>
 8007fb2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1f0      	bne.n	8007f9c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff faa2 	bl	8007504 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007fc0:	e7ec      	b.n	8007f9c <USBH_Process_OS+0x8>

08007fc2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007fde:	2300      	movs	r3, #0
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f001 faa5 	bl	8009530 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007ffc:	887b      	ldrh	r3, [r7, #2]
 8007ffe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008002:	d901      	bls.n	8008008 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008004:	2303      	movs	r3, #3
 8008006:	e01b      	b.n	8008040 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800800e:	887b      	ldrh	r3, [r7, #2]
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	4613      	mov	r3, r2
 8008014:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008018:	2100      	movs	r1, #0
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f872 	bl	8008104 <USBH_GetDescriptor>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d109      	bne.n	800803e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008030:	887a      	ldrh	r2, [r7, #2]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f929 	bl	800828c <USBH_ParseDevDesc>
 800803a:	4603      	mov	r3, r0
 800803c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800803e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af02      	add	r7, sp, #8
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	331c      	adds	r3, #28
 8008058:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800805a:	887b      	ldrh	r3, [r7, #2]
 800805c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008060:	d901      	bls.n	8008066 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008062:	2303      	movs	r3, #3
 8008064:	e016      	b.n	8008094 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008066:	887b      	ldrh	r3, [r7, #2]
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008070:	2100      	movs	r1, #0
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f846 	bl	8008104 <USBH_GetDescriptor>
 8008078:	4603      	mov	r3, r0
 800807a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d107      	bne.n	8008092 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008082:	887b      	ldrh	r3, [r7, #2]
 8008084:	461a      	mov	r2, r3
 8008086:	68b9      	ldr	r1, [r7, #8]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f9af 	bl	80083ec <USBH_ParseCfgDesc>
 800808e:	4603      	mov	r3, r0
 8008090:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008092:	7bfb      	ldrb	r3, [r7, #15]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af02      	add	r7, sp, #8
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	607a      	str	r2, [r7, #4]
 80080a6:	461a      	mov	r2, r3
 80080a8:	460b      	mov	r3, r1
 80080aa:	72fb      	strb	r3, [r7, #11]
 80080ac:	4613      	mov	r3, r2
 80080ae:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80080b0:	893b      	ldrh	r3, [r7, #8]
 80080b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080b6:	d802      	bhi.n	80080be <USBH_Get_StringDesc+0x22>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80080be:	2303      	movs	r3, #3
 80080c0:	e01c      	b.n	80080fc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80080c2:	7afb      	ldrb	r3, [r7, #11]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80080ca:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80080d2:	893b      	ldrh	r3, [r7, #8]
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	460b      	mov	r3, r1
 80080d8:	2100      	movs	r1, #0
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 f812 	bl	8008104 <USBH_GetDescriptor>
 80080e0:	4603      	mov	r3, r0
 80080e2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d107      	bne.n	80080fa <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80080f0:	893a      	ldrh	r2, [r7, #8]
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fb8d 	bl	8008814 <USBH_ParseStringDesc>
  }

  return status;
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	607b      	str	r3, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	72fb      	strb	r3, [r7, #11]
 8008112:	4613      	mov	r3, r2
 8008114:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	789b      	ldrb	r3, [r3, #2]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d11c      	bne.n	8008158 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800811e:	7afb      	ldrb	r3, [r7, #11]
 8008120:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008124:	b2da      	uxtb	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2206      	movs	r2, #6
 800812e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	893a      	ldrh	r2, [r7, #8]
 8008134:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008136:	893b      	ldrh	r3, [r7, #8]
 8008138:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800813c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008140:	d104      	bne.n	800814c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f240 4209 	movw	r2, #1033	@ 0x409
 8008148:	829a      	strh	r2, [r3, #20]
 800814a:	e002      	b.n	8008152 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	8b3a      	ldrh	r2, [r7, #24]
 8008156:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008158:	8b3b      	ldrh	r3, [r7, #24]
 800815a:	461a      	mov	r2, r3
 800815c:	6879      	ldr	r1, [r7, #4]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 fba5 	bl	80088ae <USBH_CtlReq>
 8008164:	4603      	mov	r3, r0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	789b      	ldrb	r3, [r3, #2]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d10f      	bne.n	80081a2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2205      	movs	r2, #5
 800818c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	b29a      	uxth	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081a2:	2200      	movs	r2, #0
 80081a4:	2100      	movs	r1, #0
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fb81 	bl	80088ae <USBH_CtlReq>
 80081ac:	4603      	mov	r3, r0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	460b      	mov	r3, r1
 80081c0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	789b      	ldrb	r3, [r3, #2]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d10e      	bne.n	80081e8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2209      	movs	r2, #9
 80081d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	887a      	ldrh	r2, [r7, #2]
 80081da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081e8:	2200      	movs	r2, #0
 80081ea:	2100      	movs	r1, #0
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fb5e 	bl	80088ae <USBH_CtlReq>
 80081f2:	4603      	mov	r3, r0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	789b      	ldrb	r3, [r3, #2]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d10f      	bne.n	8008230 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2203      	movs	r2, #3
 800821a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800821c:	78fb      	ldrb	r3, [r7, #3]
 800821e:	b29a      	uxth	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008230:	2200      	movs	r2, #0
 8008232:	2100      	movs	r1, #0
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fb3a 	bl	80088ae <USBH_CtlReq>
 800823a:	4603      	mov	r3, r0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	789b      	ldrb	r3, [r3, #2]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d10f      	bne.n	8008278 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	b29a      	uxth	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008278:	2200      	movs	r2, #0
 800827a:	2100      	movs	r1, #0
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fb16 	bl	80088ae <USBH_CtlReq>
 8008282:	4603      	mov	r3, r0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	4613      	mov	r3, r2
 8008298:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80082a0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80082ac:	2302      	movs	r3, #2
 80082ae:	e094      	b.n	80083da <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	781a      	ldrb	r2, [r3, #0]
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	785a      	ldrb	r2, [r3, #1]
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	3302      	adds	r3, #2
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	3303      	adds	r3, #3
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	4313      	orrs	r3, r2
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	791a      	ldrb	r2, [r3, #4]
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	795a      	ldrb	r2, [r3, #5]
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	799a      	ldrb	r2, [r3, #6]
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	79da      	ldrb	r2, [r3, #7]
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008300:	2b00      	cmp	r3, #0
 8008302:	d004      	beq.n	800830e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800830a:	2b01      	cmp	r3, #1
 800830c:	d11b      	bne.n	8008346 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	79db      	ldrb	r3, [r3, #7]
 8008312:	2b20      	cmp	r3, #32
 8008314:	dc0f      	bgt.n	8008336 <USBH_ParseDevDesc+0xaa>
 8008316:	2b08      	cmp	r3, #8
 8008318:	db0f      	blt.n	800833a <USBH_ParseDevDesc+0xae>
 800831a:	3b08      	subs	r3, #8
 800831c:	4a32      	ldr	r2, [pc, #200]	@ (80083e8 <USBH_ParseDevDesc+0x15c>)
 800831e:	fa22 f303 	lsr.w	r3, r2, r3
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	bf14      	ite	ne
 800832a:	2301      	movne	r3, #1
 800832c:	2300      	moveq	r3, #0
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d106      	bne.n	8008342 <USBH_ParseDevDesc+0xb6>
 8008334:	e001      	b.n	800833a <USBH_ParseDevDesc+0xae>
 8008336:	2b40      	cmp	r3, #64	@ 0x40
 8008338:	d003      	beq.n	8008342 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2208      	movs	r2, #8
 800833e:	71da      	strb	r2, [r3, #7]
        break;
 8008340:	e000      	b.n	8008344 <USBH_ParseDevDesc+0xb8>
        break;
 8008342:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008344:	e00e      	b.n	8008364 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800834c:	2b02      	cmp	r3, #2
 800834e:	d107      	bne.n	8008360 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	79db      	ldrb	r3, [r3, #7]
 8008354:	2b08      	cmp	r3, #8
 8008356:	d005      	beq.n	8008364 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	2208      	movs	r2, #8
 800835c:	71da      	strb	r2, [r3, #7]
 800835e:	e001      	b.n	8008364 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008360:	2303      	movs	r3, #3
 8008362:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008364:	88fb      	ldrh	r3, [r7, #6]
 8008366:	2b08      	cmp	r3, #8
 8008368:	d936      	bls.n	80083d8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	3308      	adds	r3, #8
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	461a      	mov	r2, r3
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	3309      	adds	r3, #9
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	021b      	lsls	r3, r3, #8
 800837a:	b29b      	uxth	r3, r3
 800837c:	4313      	orrs	r3, r2
 800837e:	b29a      	uxth	r2, r3
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	330a      	adds	r3, #10
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	330b      	adds	r3, #11
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	021b      	lsls	r3, r3, #8
 8008394:	b29b      	uxth	r3, r3
 8008396:	4313      	orrs	r3, r2
 8008398:	b29a      	uxth	r2, r3
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	330c      	adds	r3, #12
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	461a      	mov	r2, r3
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	330d      	adds	r3, #13
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	4313      	orrs	r3, r2
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	7b9a      	ldrb	r2, [r3, #14]
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	7bda      	ldrb	r2, [r3, #15]
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	7c1a      	ldrb	r2, [r3, #16]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	7c5a      	ldrb	r2, [r3, #17]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	371c      	adds	r7, #28
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	01000101 	.word	0x01000101

080083ec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08c      	sub	sp, #48	@ 0x30
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	4613      	mov	r3, r2
 80083f8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008400:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800841a:	2302      	movs	r3, #2
 800841c:	e0da      	b.n	80085d4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b09      	cmp	r3, #9
 8008428:	d002      	beq.n	8008430 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800842a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842c:	2209      	movs	r2, #9
 800842e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	781a      	ldrb	r2, [r3, #0]
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	785a      	ldrb	r2, [r3, #1]
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	3302      	adds	r3, #2
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	461a      	mov	r2, r3
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	3303      	adds	r3, #3
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	021b      	lsls	r3, r3, #8
 8008450:	b29b      	uxth	r3, r3
 8008452:	4313      	orrs	r3, r2
 8008454:	b29b      	uxth	r3, r3
 8008456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800845a:	bf28      	it	cs
 800845c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008460:	b29a      	uxth	r2, r3
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	791a      	ldrb	r2, [r3, #4]
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	795a      	ldrb	r2, [r3, #5]
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	799a      	ldrb	r2, [r3, #6]
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	79da      	ldrb	r2, [r3, #7]
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	7a1a      	ldrb	r2, [r3, #8]
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800848e:	88fb      	ldrh	r3, [r7, #6]
 8008490:	2b09      	cmp	r3, #9
 8008492:	f240 809d 	bls.w	80085d0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008496:	2309      	movs	r3, #9
 8008498:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800849a:	2300      	movs	r3, #0
 800849c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800849e:	e081      	b.n	80085a4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084a0:	f107 0316 	add.w	r3, r7, #22
 80084a4:	4619      	mov	r1, r3
 80084a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084a8:	f000 f9e7 	bl	800887a <USBH_GetNextDesc>
 80084ac:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80084ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b0:	785b      	ldrb	r3, [r3, #1]
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	d176      	bne.n	80085a4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80084b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	2b09      	cmp	r3, #9
 80084bc:	d002      	beq.n	80084c4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80084be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c0:	2209      	movs	r2, #9
 80084c2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80084c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084c8:	221a      	movs	r2, #26
 80084ca:	fb02 f303 	mul.w	r3, r2, r3
 80084ce:	3308      	adds	r3, #8
 80084d0:	6a3a      	ldr	r2, [r7, #32]
 80084d2:	4413      	add	r3, r2
 80084d4:	3302      	adds	r3, #2
 80084d6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80084d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084da:	69f8      	ldr	r0, [r7, #28]
 80084dc:	f000 f87e 	bl	80085dc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80084e6:	2300      	movs	r3, #0
 80084e8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084ea:	e043      	b.n	8008574 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084ec:	f107 0316 	add.w	r3, r7, #22
 80084f0:	4619      	mov	r1, r3
 80084f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084f4:	f000 f9c1 	bl	800887a <USBH_GetNextDesc>
 80084f8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80084fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fc:	785b      	ldrb	r3, [r3, #1]
 80084fe:	2b05      	cmp	r3, #5
 8008500:	d138      	bne.n	8008574 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	795b      	ldrb	r3, [r3, #5]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d113      	bne.n	8008532 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800850e:	2b02      	cmp	r3, #2
 8008510:	d003      	beq.n	800851a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	799b      	ldrb	r3, [r3, #6]
 8008516:	2b03      	cmp	r3, #3
 8008518:	d10b      	bne.n	8008532 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	79db      	ldrb	r3, [r3, #7]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10b      	bne.n	800853a <USBH_ParseCfgDesc+0x14e>
 8008522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	2b09      	cmp	r3, #9
 8008528:	d007      	beq.n	800853a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800852a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852c:	2209      	movs	r2, #9
 800852e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008530:	e003      	b.n	800853a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008534:	2207      	movs	r2, #7
 8008536:	701a      	strb	r2, [r3, #0]
 8008538:	e000      	b.n	800853c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800853a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800853c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008540:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008544:	3201      	adds	r2, #1
 8008546:	00d2      	lsls	r2, r2, #3
 8008548:	211a      	movs	r1, #26
 800854a:	fb01 f303 	mul.w	r3, r1, r3
 800854e:	4413      	add	r3, r2
 8008550:	3308      	adds	r3, #8
 8008552:	6a3a      	ldr	r2, [r7, #32]
 8008554:	4413      	add	r3, r2
 8008556:	3304      	adds	r3, #4
 8008558:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800855a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800855c:	69b9      	ldr	r1, [r7, #24]
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 f870 	bl	8008644 <USBH_ParseEPDesc>
 8008564:	4603      	mov	r3, r0
 8008566:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800856a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800856e:	3301      	adds	r3, #1
 8008570:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	791b      	ldrb	r3, [r3, #4]
 8008578:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800857c:	429a      	cmp	r2, r3
 800857e:	d204      	bcs.n	800858a <USBH_ParseCfgDesc+0x19e>
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	885a      	ldrh	r2, [r3, #2]
 8008584:	8afb      	ldrh	r3, [r7, #22]
 8008586:	429a      	cmp	r2, r3
 8008588:	d8b0      	bhi.n	80084ec <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	791b      	ldrb	r3, [r3, #4]
 800858e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008592:	429a      	cmp	r2, r3
 8008594:	d201      	bcs.n	800859a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008596:	2303      	movs	r3, #3
 8008598:	e01c      	b.n	80085d4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800859a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800859e:	3301      	adds	r3, #1
 80085a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80085a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d805      	bhi.n	80085b8 <USBH_ParseCfgDesc+0x1cc>
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	885a      	ldrh	r2, [r3, #2]
 80085b0:	8afb      	ldrh	r3, [r7, #22]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	f63f af74 	bhi.w	80084a0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	791b      	ldrb	r3, [r3, #4]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	bf28      	it	cs
 80085c0:	2302      	movcs	r3, #2
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d201      	bcs.n	80085d0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80085cc:	2303      	movs	r3, #3
 80085ce:	e001      	b.n	80085d4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80085d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3730      	adds	r7, #48	@ 0x30
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781a      	ldrb	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	785a      	ldrb	r2, [r3, #1]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	789a      	ldrb	r2, [r3, #2]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	78da      	ldrb	r2, [r3, #3]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	3304      	adds	r3, #4
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	2b02      	cmp	r3, #2
 800860e:	bf28      	it	cs
 8008610:	2302      	movcs	r3, #2
 8008612:	b2da      	uxtb	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	795a      	ldrb	r2, [r3, #5]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	799a      	ldrb	r2, [r3, #6]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	79da      	ldrb	r2, [r3, #7]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	7a1a      	ldrb	r2, [r3, #8]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	721a      	strb	r2, [r3, #8]
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008644:	b480      	push	{r7}
 8008646:	b087      	sub	sp, #28
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	781a      	ldrb	r2, [r3, #0]
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	785a      	ldrb	r2, [r3, #1]
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	789a      	ldrb	r2, [r3, #2]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	78da      	ldrb	r2, [r3, #3]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3304      	adds	r3, #4
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	3305      	adds	r3, #5
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	021b      	lsls	r3, r3, #8
 8008684:	b29b      	uxth	r3, r3
 8008686:	4313      	orrs	r3, r2
 8008688:	b29a      	uxth	r2, r3
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	799a      	ldrb	r2, [r3, #6]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	889b      	ldrh	r3, [r3, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d009      	beq.n	80086b2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80086a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086a6:	d804      	bhi.n	80086b2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80086ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086b0:	d901      	bls.n	80086b6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80086b2:	2303      	movs	r3, #3
 80086b4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d136      	bne.n	800872e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	78db      	ldrb	r3, [r3, #3]
 80086c4:	f003 0303 	and.w	r3, r3, #3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d108      	bne.n	80086de <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	889b      	ldrh	r3, [r3, #4]
 80086d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086d4:	f240 8097 	bls.w	8008806 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086d8:	2303      	movs	r3, #3
 80086da:	75fb      	strb	r3, [r7, #23]
 80086dc:	e093      	b.n	8008806 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	78db      	ldrb	r3, [r3, #3]
 80086e2:	f003 0303 	and.w	r3, r3, #3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d107      	bne.n	80086fa <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	889b      	ldrh	r3, [r3, #4]
 80086ee:	2b40      	cmp	r3, #64	@ 0x40
 80086f0:	f240 8089 	bls.w	8008806 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086f4:	2303      	movs	r3, #3
 80086f6:	75fb      	strb	r3, [r7, #23]
 80086f8:	e085      	b.n	8008806 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	78db      	ldrb	r3, [r3, #3]
 80086fe:	f003 0303 	and.w	r3, r3, #3
 8008702:	2b01      	cmp	r3, #1
 8008704:	d005      	beq.n	8008712 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	78db      	ldrb	r3, [r3, #3]
 800870a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800870e:	2b03      	cmp	r3, #3
 8008710:	d10a      	bne.n	8008728 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	799b      	ldrb	r3, [r3, #6]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <USBH_ParseEPDesc+0xde>
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	799b      	ldrb	r3, [r3, #6]
 800871e:	2b10      	cmp	r3, #16
 8008720:	d970      	bls.n	8008804 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008722:	2303      	movs	r3, #3
 8008724:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008726:	e06d      	b.n	8008804 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008728:	2303      	movs	r3, #3
 800872a:	75fb      	strb	r3, [r7, #23]
 800872c:	e06b      	b.n	8008806 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008734:	2b01      	cmp	r3, #1
 8008736:	d13c      	bne.n	80087b2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	78db      	ldrb	r3, [r3, #3]
 800873c:	f003 0303 	and.w	r3, r3, #3
 8008740:	2b02      	cmp	r3, #2
 8008742:	d005      	beq.n	8008750 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	78db      	ldrb	r3, [r3, #3]
 8008748:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800874c:	2b00      	cmp	r3, #0
 800874e:	d106      	bne.n	800875e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	889b      	ldrh	r3, [r3, #4]
 8008754:	2b40      	cmp	r3, #64	@ 0x40
 8008756:	d956      	bls.n	8008806 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008758:	2303      	movs	r3, #3
 800875a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800875c:	e053      	b.n	8008806 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	78db      	ldrb	r3, [r3, #3]
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	2b01      	cmp	r3, #1
 8008768:	d10e      	bne.n	8008788 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	799b      	ldrb	r3, [r3, #6]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d007      	beq.n	8008782 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008776:	2b10      	cmp	r3, #16
 8008778:	d803      	bhi.n	8008782 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800877e:	2b40      	cmp	r3, #64	@ 0x40
 8008780:	d941      	bls.n	8008806 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008782:	2303      	movs	r3, #3
 8008784:	75fb      	strb	r3, [r7, #23]
 8008786:	e03e      	b.n	8008806 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	78db      	ldrb	r3, [r3, #3]
 800878c:	f003 0303 	and.w	r3, r3, #3
 8008790:	2b03      	cmp	r3, #3
 8008792:	d10b      	bne.n	80087ac <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	799b      	ldrb	r3, [r3, #6]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d004      	beq.n	80087a6 <USBH_ParseEPDesc+0x162>
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	889b      	ldrh	r3, [r3, #4]
 80087a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087a4:	d32f      	bcc.n	8008806 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80087a6:	2303      	movs	r3, #3
 80087a8:	75fb      	strb	r3, [r7, #23]
 80087aa:	e02c      	b.n	8008806 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80087ac:	2303      	movs	r3, #3
 80087ae:	75fb      	strb	r3, [r7, #23]
 80087b0:	e029      	b.n	8008806 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d120      	bne.n	80087fe <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	78db      	ldrb	r3, [r3, #3]
 80087c0:	f003 0303 	and.w	r3, r3, #3
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d106      	bne.n	80087d6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	889b      	ldrh	r3, [r3, #4]
 80087cc:	2b08      	cmp	r3, #8
 80087ce:	d01a      	beq.n	8008806 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80087d0:	2303      	movs	r3, #3
 80087d2:	75fb      	strb	r3, [r7, #23]
 80087d4:	e017      	b.n	8008806 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	78db      	ldrb	r3, [r3, #3]
 80087da:	f003 0303 	and.w	r3, r3, #3
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d10a      	bne.n	80087f8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	799b      	ldrb	r3, [r3, #6]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <USBH_ParseEPDesc+0x1ae>
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	889b      	ldrh	r3, [r3, #4]
 80087ee:	2b08      	cmp	r3, #8
 80087f0:	d909      	bls.n	8008806 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80087f2:	2303      	movs	r3, #3
 80087f4:	75fb      	strb	r3, [r7, #23]
 80087f6:	e006      	b.n	8008806 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80087f8:	2303      	movs	r3, #3
 80087fa:	75fb      	strb	r3, [r7, #23]
 80087fc:	e003      	b.n	8008806 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80087fe:	2303      	movs	r3, #3
 8008800:	75fb      	strb	r3, [r7, #23]
 8008802:	e000      	b.n	8008806 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008804:	bf00      	nop
  }

  return status;
 8008806:	7dfb      	ldrb	r3, [r7, #23]
}
 8008808:	4618      	mov	r0, r3
 800880a:	371c      	adds	r7, #28
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4613      	mov	r3, r2
 8008820:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3301      	adds	r3, #1
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	2b03      	cmp	r3, #3
 800882a:	d120      	bne.n	800886e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	1e9a      	subs	r2, r3, #2
 8008832:	88fb      	ldrh	r3, [r7, #6]
 8008834:	4293      	cmp	r3, r2
 8008836:	bf28      	it	cs
 8008838:	4613      	movcs	r3, r2
 800883a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3302      	adds	r3, #2
 8008840:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008842:	2300      	movs	r3, #0
 8008844:	82fb      	strh	r3, [r7, #22]
 8008846:	e00b      	b.n	8008860 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008848:	8afb      	ldrh	r3, [r7, #22]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4413      	add	r3, r2
 800884e:	781a      	ldrb	r2, [r3, #0]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	3301      	adds	r3, #1
 8008858:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800885a:	8afb      	ldrh	r3, [r7, #22]
 800885c:	3302      	adds	r3, #2
 800885e:	82fb      	strh	r3, [r7, #22]
 8008860:	8afa      	ldrh	r2, [r7, #22]
 8008862:	8abb      	ldrh	r3, [r7, #20]
 8008864:	429a      	cmp	r2, r3
 8008866:	d3ef      	bcc.n	8008848 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2200      	movs	r2, #0
 800886c:	701a      	strb	r2, [r3, #0]
  }
}
 800886e:	bf00      	nop
 8008870:	371c      	adds	r7, #28
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	7812      	ldrb	r2, [r2, #0]
 800888c:	4413      	add	r3, r2
 800888e:	b29a      	uxth	r2, r3
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4413      	add	r3, r2
 800889e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80088a0:	68fb      	ldr	r3, [r7, #12]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	4613      	mov	r3, r2
 80088ba:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80088bc:	2301      	movs	r3, #1
 80088be:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	789b      	ldrb	r3, [r3, #2]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d002      	beq.n	80088ce <USBH_CtlReq+0x20>
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d01d      	beq.n	8008908 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80088cc:	e043      	b.n	8008956 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	88fa      	ldrh	r2, [r7, #6]
 80088d8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2201      	movs	r2, #1
 80088de:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2202      	movs	r2, #2
 80088e4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80088e6:	2301      	movs	r3, #1
 80088e8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2203      	movs	r2, #3
 80088ee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80088fe:	2300      	movs	r3, #0
 8008900:	2200      	movs	r2, #0
 8008902:	f000 fe15 	bl	8009530 <osMessageQueuePut>
      break;
 8008906:	e026      	b.n	8008956 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 f829 	bl	8008960 <USBH_HandleControl>
 800890e:	4603      	mov	r3, r0
 8008910:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <USBH_CtlReq+0x70>
 8008918:	7dfb      	ldrb	r3, [r7, #23]
 800891a:	2b03      	cmp	r3, #3
 800891c:	d106      	bne.n	800892c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2201      	movs	r2, #1
 8008922:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	761a      	strb	r2, [r3, #24]
 800892a:	e005      	b.n	8008938 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800892c:	7dfb      	ldrb	r3, [r7, #23]
 800892e:	2b02      	cmp	r3, #2
 8008930:	d102      	bne.n	8008938 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2201      	movs	r2, #1
 8008936:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2203      	movs	r2, #3
 800893c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800894c:	2300      	movs	r3, #0
 800894e:	2200      	movs	r2, #0
 8008950:	f000 fdee 	bl	8009530 <osMessageQueuePut>
      break;
 8008954:	bf00      	nop
  }
  return status;
 8008956:	7dfb      	ldrb	r3, [r7, #23]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3718      	adds	r7, #24
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af02      	add	r7, sp, #8
 8008966:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008968:	2301      	movs	r3, #1
 800896a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800896c:	2300      	movs	r3, #0
 800896e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	7e1b      	ldrb	r3, [r3, #24]
 8008974:	3b01      	subs	r3, #1
 8008976:	2b0a      	cmp	r3, #10
 8008978:	f200 8229 	bhi.w	8008dce <USBH_HandleControl+0x46e>
 800897c:	a201      	add	r2, pc, #4	@ (adr r2, 8008984 <USBH_HandleControl+0x24>)
 800897e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008982:	bf00      	nop
 8008984:	080089b1 	.word	0x080089b1
 8008988:	080089cb 	.word	0x080089cb
 800898c:	08008a6d 	.word	0x08008a6d
 8008990:	08008a93 	.word	0x08008a93
 8008994:	08008b1f 	.word	0x08008b1f
 8008998:	08008b49 	.word	0x08008b49
 800899c:	08008c0b 	.word	0x08008c0b
 80089a0:	08008c2d 	.word	0x08008c2d
 80089a4:	08008cbf 	.word	0x08008cbf
 80089a8:	08008ce5 	.word	0x08008ce5
 80089ac:	08008d77 	.word	0x08008d77
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f103 0110 	add.w	r1, r3, #16
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	795b      	ldrb	r3, [r3, #5]
 80089ba:	461a      	mov	r2, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fa17 	bl	8008df0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2202      	movs	r2, #2
 80089c6:	761a      	strb	r2, [r3, #24]
      break;
 80089c8:	e20c      	b.n	8008de4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	795b      	ldrb	r3, [r3, #5]
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f003 fef5 	bl	800c7c0 <USBH_LL_GetURBState>
 80089d6:	4603      	mov	r3, r0
 80089d8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80089da:	7bbb      	ldrb	r3, [r7, #14]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d12c      	bne.n	8008a3a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	7c1b      	ldrb	r3, [r3, #16]
 80089e4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80089e8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	8adb      	ldrh	r3, [r3, #22]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00a      	beq.n	8008a08 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80089f2:	7b7b      	ldrb	r3, [r7, #13]
 80089f4:	2b80      	cmp	r3, #128	@ 0x80
 80089f6:	d103      	bne.n	8008a00 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2203      	movs	r2, #3
 80089fc:	761a      	strb	r2, [r3, #24]
 80089fe:	e00d      	b.n	8008a1c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2205      	movs	r2, #5
 8008a04:	761a      	strb	r2, [r3, #24]
 8008a06:	e009      	b.n	8008a1c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008a08:	7b7b      	ldrb	r3, [r7, #13]
 8008a0a:	2b80      	cmp	r3, #128	@ 0x80
 8008a0c:	d103      	bne.n	8008a16 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2209      	movs	r2, #9
 8008a12:	761a      	strb	r2, [r3, #24]
 8008a14:	e002      	b.n	8008a1c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2207      	movs	r2, #7
 8008a1a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2203      	movs	r2, #3
 8008a20:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a30:	2300      	movs	r3, #0
 8008a32:	2200      	movs	r2, #0
 8008a34:	f000 fd7c 	bl	8009530 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a38:	e1cb      	b.n	8008dd2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	d003      	beq.n	8008a48 <USBH_HandleControl+0xe8>
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	f040 81c5 	bne.w	8008dd2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	220b      	movs	r2, #11
 8008a4c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2203      	movs	r2, #3
 8008a52:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a62:	2300      	movs	r3, #0
 8008a64:	2200      	movs	r2, #0
 8008a66:	f000 fd63 	bl	8009530 <osMessageQueuePut>
      break;
 8008a6a:	e1b2      	b.n	8008dd2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6899      	ldr	r1, [r3, #8]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	899a      	ldrh	r2, [r3, #12]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	791b      	ldrb	r3, [r3, #4]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f9f2 	bl	8008e6e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2204      	movs	r2, #4
 8008a8e:	761a      	strb	r2, [r3, #24]
      break;
 8008a90:	e1a8      	b.n	8008de4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	791b      	ldrb	r3, [r3, #4]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f003 fe91 	bl	800c7c0 <USBH_LL_GetURBState>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d110      	bne.n	8008aca <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2209      	movs	r2, #9
 8008aac:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2203      	movs	r2, #3
 8008ab2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f000 fd33 	bl	8009530 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	2b05      	cmp	r3, #5
 8008ace:	d110      	bne.n	8008af2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ae8:	2300      	movs	r3, #0
 8008aea:	2200      	movs	r2, #0
 8008aec:	f000 fd20 	bl	8009530 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008af0:	e171      	b.n	8008dd6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	2b04      	cmp	r3, #4
 8008af6:	f040 816e 	bne.w	8008dd6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	220b      	movs	r2, #11
 8008afe:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2203      	movs	r2, #3
 8008b04:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b14:	2300      	movs	r3, #0
 8008b16:	2200      	movs	r2, #0
 8008b18:	f000 fd0a 	bl	8009530 <osMessageQueuePut>
      break;
 8008b1c:	e15b      	b.n	8008dd6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6899      	ldr	r1, [r3, #8]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	899a      	ldrh	r2, [r3, #12]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	795b      	ldrb	r3, [r3, #5]
 8008b2a:	2001      	movs	r0, #1
 8008b2c:	9000      	str	r0, [sp, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f978 	bl	8008e24 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2206      	movs	r2, #6
 8008b44:	761a      	strb	r2, [r3, #24]
      break;
 8008b46:	e14d      	b.n	8008de4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	795b      	ldrb	r3, [r3, #5]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f003 fe36 	bl	800c7c0 <USBH_LL_GetURBState>
 8008b54:	4603      	mov	r3, r0
 8008b56:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b58:	7bbb      	ldrb	r3, [r7, #14]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d111      	bne.n	8008b82 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2207      	movs	r2, #7
 8008b62:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2203      	movs	r2, #3
 8008b68:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b78:	2300      	movs	r3, #0
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f000 fcd8 	bl	8009530 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b80:	e12b      	b.n	8008dda <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
 8008b84:	2b05      	cmp	r3, #5
 8008b86:	d113      	bne.n	8008bb0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	220c      	movs	r2, #12
 8008b8c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2203      	movs	r2, #3
 8008b96:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f000 fcc1 	bl	8009530 <osMessageQueuePut>
      break;
 8008bae:	e114      	b.n	8008dda <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d111      	bne.n	8008bda <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2205      	movs	r2, #5
 8008bba:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2203      	movs	r2, #3
 8008bc0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f000 fcac 	bl	8009530 <osMessageQueuePut>
      break;
 8008bd8:	e0ff      	b.n	8008dda <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008bda:	7bbb      	ldrb	r3, [r7, #14]
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	f040 80fc 	bne.w	8008dda <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	220b      	movs	r2, #11
 8008be6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008be8:	2302      	movs	r3, #2
 8008bea:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2203      	movs	r2, #3
 8008bf0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c00:	2300      	movs	r3, #0
 8008c02:	2200      	movs	r2, #0
 8008c04:	f000 fc94 	bl	8009530 <osMessageQueuePut>
      break;
 8008c08:	e0e7      	b.n	8008dda <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	791b      	ldrb	r3, [r3, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	2100      	movs	r1, #0
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f92b 	bl	8008e6e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2208      	movs	r2, #8
 8008c28:	761a      	strb	r2, [r3, #24]

      break;
 8008c2a:	e0db      	b.n	8008de4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	791b      	ldrb	r3, [r3, #4]
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f003 fdc4 	bl	800c7c0 <USBH_LL_GetURBState>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d113      	bne.n	8008c6a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	220d      	movs	r2, #13
 8008c46:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2203      	movs	r2, #3
 8008c50:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c60:	2300      	movs	r3, #0
 8008c62:	2200      	movs	r2, #0
 8008c64:	f000 fc64 	bl	8009530 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c68:	e0b9      	b.n	8008dde <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	2b04      	cmp	r3, #4
 8008c6e:	d111      	bne.n	8008c94 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	220b      	movs	r2, #11
 8008c74:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2203      	movs	r2, #3
 8008c7a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f000 fc4f 	bl	8009530 <osMessageQueuePut>
      break;
 8008c92:	e0a4      	b.n	8008dde <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008c94:	7bbb      	ldrb	r3, [r7, #14]
 8008c96:	2b05      	cmp	r3, #5
 8008c98:	f040 80a1 	bne.w	8008dde <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2203      	movs	r2, #3
 8008ca4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f000 fc3a 	bl	8009530 <osMessageQueuePut>
      break;
 8008cbc:	e08f      	b.n	8008dde <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	795b      	ldrb	r3, [r3, #5]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	9200      	str	r2, [sp, #0]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	2100      	movs	r1, #0
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f8aa 	bl	8008e24 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	220a      	movs	r2, #10
 8008ce0:	761a      	strb	r2, [r3, #24]
      break;
 8008ce2:	e07f      	b.n	8008de4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	795b      	ldrb	r3, [r3, #5]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f003 fd68 	bl	800c7c0 <USBH_LL_GetURBState>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d113      	bne.n	8008d22 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	220d      	movs	r2, #13
 8008d02:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2203      	movs	r2, #3
 8008d08:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f000 fc08 	bl	8009530 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d20:	e05f      	b.n	8008de2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d111      	bne.n	8008d4c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2209      	movs	r2, #9
 8008d2c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2203      	movs	r2, #3
 8008d32:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008d42:	2300      	movs	r3, #0
 8008d44:	2200      	movs	r2, #0
 8008d46:	f000 fbf3 	bl	8009530 <osMessageQueuePut>
      break;
 8008d4a:	e04a      	b.n	8008de2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	2b04      	cmp	r3, #4
 8008d50:	d147      	bne.n	8008de2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	220b      	movs	r2, #11
 8008d56:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2203      	movs	r2, #3
 8008d5c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f000 fbde 	bl	8009530 <osMessageQueuePut>
      break;
 8008d74:	e035      	b.n	8008de2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	7e5b      	ldrb	r3, [r3, #25]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	765a      	strb	r2, [r3, #25]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	7e5b      	ldrb	r3, [r3, #25]
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d806      	bhi.n	8008d98 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008d96:	e025      	b.n	8008de4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d9e:	2106      	movs	r1, #6
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	795b      	ldrb	r3, [r3, #5]
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f90d 	bl	8008fd0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	791b      	ldrb	r3, [r3, #4]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f907 	bl	8008fd0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008dc8:	2302      	movs	r3, #2
 8008dca:	73fb      	strb	r3, [r7, #15]
      break;
 8008dcc:	e00a      	b.n	8008de4 <USBH_HandleControl+0x484>

    default:
      break;
 8008dce:	bf00      	nop
 8008dd0:	e008      	b.n	8008de4 <USBH_HandleControl+0x484>
      break;
 8008dd2:	bf00      	nop
 8008dd4:	e006      	b.n	8008de4 <USBH_HandleControl+0x484>
      break;
 8008dd6:	bf00      	nop
 8008dd8:	e004      	b.n	8008de4 <USBH_HandleControl+0x484>
      break;
 8008dda:	bf00      	nop
 8008ddc:	e002      	b.n	8008de4 <USBH_HandleControl+0x484>
      break;
 8008dde:	bf00      	nop
 8008de0:	e000      	b.n	8008de4 <USBH_HandleControl+0x484>
      break;
 8008de2:	bf00      	nop
  }

  return status;
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop

08008df0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af04      	add	r7, sp, #16
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dfe:	79f9      	ldrb	r1, [r7, #7]
 8008e00:	2300      	movs	r3, #0
 8008e02:	9303      	str	r3, [sp, #12]
 8008e04:	2308      	movs	r3, #8
 8008e06:	9302      	str	r3, [sp, #8]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	9301      	str	r3, [sp, #4]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	2300      	movs	r3, #0
 8008e12:	2200      	movs	r2, #0
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f003 fca2 	bl	800c75e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af04      	add	r7, sp, #16
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	4611      	mov	r1, r2
 8008e30:	461a      	mov	r2, r3
 8008e32:	460b      	mov	r3, r1
 8008e34:	80fb      	strh	r3, [r7, #6]
 8008e36:	4613      	mov	r3, r2
 8008e38:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008e44:	2300      	movs	r3, #0
 8008e46:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e48:	7979      	ldrb	r1, [r7, #5]
 8008e4a:	7e3b      	ldrb	r3, [r7, #24]
 8008e4c:	9303      	str	r3, [sp, #12]
 8008e4e:	88fb      	ldrh	r3, [r7, #6]
 8008e50:	9302      	str	r3, [sp, #8]
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	9301      	str	r3, [sp, #4]
 8008e56:	2301      	movs	r3, #1
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f003 fc7d 	bl	800c75e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b088      	sub	sp, #32
 8008e72:	af04      	add	r7, sp, #16
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	4611      	mov	r1, r2
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	80fb      	strh	r3, [r7, #6]
 8008e80:	4613      	mov	r3, r2
 8008e82:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e84:	7979      	ldrb	r1, [r7, #5]
 8008e86:	2300      	movs	r3, #0
 8008e88:	9303      	str	r3, [sp, #12]
 8008e8a:	88fb      	ldrh	r3, [r7, #6]
 8008e8c:	9302      	str	r3, [sp, #8]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	2301      	movs	r3, #1
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	2300      	movs	r3, #0
 8008e98:	2201      	movs	r2, #1
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f003 fc5f 	bl	800c75e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ea0:	2300      	movs	r3, #0

}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b088      	sub	sp, #32
 8008eae:	af04      	add	r7, sp, #16
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	460b      	mov	r3, r1
 8008eba:	80fb      	strh	r3, [r7, #6]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ece:	7979      	ldrb	r1, [r7, #5]
 8008ed0:	7e3b      	ldrb	r3, [r7, #24]
 8008ed2:	9303      	str	r3, [sp, #12]
 8008ed4:	88fb      	ldrh	r3, [r7, #6]
 8008ed6:	9302      	str	r3, [sp, #8]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	9301      	str	r3, [sp, #4]
 8008edc:	2301      	movs	r3, #1
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f003 fc3a 	bl	800c75e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b088      	sub	sp, #32
 8008ef8:	af04      	add	r7, sp, #16
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	4611      	mov	r1, r2
 8008f00:	461a      	mov	r2, r3
 8008f02:	460b      	mov	r3, r1
 8008f04:	80fb      	strh	r3, [r7, #6]
 8008f06:	4613      	mov	r3, r2
 8008f08:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f0a:	7979      	ldrb	r1, [r7, #5]
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9303      	str	r3, [sp, #12]
 8008f10:	88fb      	ldrh	r3, [r7, #6]
 8008f12:	9302      	str	r3, [sp, #8]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	2301      	movs	r3, #1
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	2201      	movs	r2, #1
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f003 fc1c 	bl	800c75e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af04      	add	r7, sp, #16
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	4608      	mov	r0, r1
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	4603      	mov	r3, r0
 8008f40:	70fb      	strb	r3, [r7, #3]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70bb      	strb	r3, [r7, #2]
 8008f46:	4613      	mov	r3, r2
 8008f48:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008f4a:	7878      	ldrb	r0, [r7, #1]
 8008f4c:	78ba      	ldrb	r2, [r7, #2]
 8008f4e:	78f9      	ldrb	r1, [r7, #3]
 8008f50:	8b3b      	ldrh	r3, [r7, #24]
 8008f52:	9302      	str	r3, [sp, #8]
 8008f54:	7d3b      	ldrb	r3, [r7, #20]
 8008f56:	9301      	str	r3, [sp, #4]
 8008f58:	7c3b      	ldrb	r3, [r7, #16]
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f003 fbaf 	bl	800c6c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	460b      	mov	r3, r1
 8008f78:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f003 fbce 	bl	800c720 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	460b      	mov	r3, r1
 8008f98:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f836 	bl	800900c <USBH_GetFreePipe>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008fa4:	89fb      	ldrh	r3, [r7, #14]
 8008fa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d00a      	beq.n	8008fc4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008fae:	78fa      	ldrb	r2, [r7, #3]
 8008fb0:	89fb      	ldrh	r3, [r7, #14]
 8008fb2:	f003 030f 	and.w	r3, r3, #15
 8008fb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008fba:	6879      	ldr	r1, [r7, #4]
 8008fbc:	33e0      	adds	r3, #224	@ 0xe0
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	440b      	add	r3, r1
 8008fc2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008fc4:	89fb      	ldrh	r3, [r7, #14]
 8008fc6:	b2db      	uxtb	r3, r3
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008fdc:	78fb      	ldrb	r3, [r7, #3]
 8008fde:	2b0f      	cmp	r3, #15
 8008fe0:	d80d      	bhi.n	8008ffe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008fe2:	78fb      	ldrb	r3, [r7, #3]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	33e0      	adds	r3, #224	@ 0xe0
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	78fb      	ldrb	r3, [r7, #3]
 8008ff0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	33e0      	adds	r3, #224	@ 0xe0
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	440b      	add	r3, r1
 8008ffc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009014:	2300      	movs	r3, #0
 8009016:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009018:	2300      	movs	r3, #0
 800901a:	73fb      	strb	r3, [r7, #15]
 800901c:	e00f      	b.n	800903e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	33e0      	adds	r3, #224	@ 0xe0
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4413      	add	r3, r2
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d102      	bne.n	8009038 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009032:	7bfb      	ldrb	r3, [r7, #15]
 8009034:	b29b      	uxth	r3, r3
 8009036:	e007      	b.n	8009048 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009038:	7bfb      	ldrb	r3, [r7, #15]
 800903a:	3301      	adds	r3, #1
 800903c:	73fb      	strb	r3, [r7, #15]
 800903e:	7bfb      	ldrb	r3, [r7, #15]
 8009040:	2b0f      	cmp	r3, #15
 8009042:	d9ec      	bls.n	800901e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009044:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009048:	4618      	mov	r0, r3
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <__NVIC_SetPriority>:
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	4603      	mov	r3, r0
 800905c:	6039      	str	r1, [r7, #0]
 800905e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009064:	2b00      	cmp	r3, #0
 8009066:	db0a      	blt.n	800907e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	b2da      	uxtb	r2, r3
 800906c:	490c      	ldr	r1, [pc, #48]	@ (80090a0 <__NVIC_SetPriority+0x4c>)
 800906e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009072:	0112      	lsls	r2, r2, #4
 8009074:	b2d2      	uxtb	r2, r2
 8009076:	440b      	add	r3, r1
 8009078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800907c:	e00a      	b.n	8009094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	b2da      	uxtb	r2, r3
 8009082:	4908      	ldr	r1, [pc, #32]	@ (80090a4 <__NVIC_SetPriority+0x50>)
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	f003 030f 	and.w	r3, r3, #15
 800908a:	3b04      	subs	r3, #4
 800908c:	0112      	lsls	r2, r2, #4
 800908e:	b2d2      	uxtb	r2, r2
 8009090:	440b      	add	r3, r1
 8009092:	761a      	strb	r2, [r3, #24]
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	e000e100 	.word	0xe000e100
 80090a4:	e000ed00 	.word	0xe000ed00

080090a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80090a8:	b580      	push	{r7, lr}
 80090aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80090ac:	4b05      	ldr	r3, [pc, #20]	@ (80090c4 <SysTick_Handler+0x1c>)
 80090ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80090b0:	f001 fff4 	bl	800b09c <xTaskGetSchedulerState>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d001      	beq.n	80090be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80090ba:	f002 fead 	bl	800be18 <xPortSysTickHandler>
  }
}
 80090be:	bf00      	nop
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	e000e010 	.word	0xe000e010

080090c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80090c8:	b580      	push	{r7, lr}
 80090ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80090cc:	2100      	movs	r1, #0
 80090ce:	f06f 0004 	mvn.w	r0, #4
 80090d2:	f7ff ffbf 	bl	8009054 <__NVIC_SetPriority>
#endif
}
 80090d6:	bf00      	nop
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090e2:	f3ef 8305 	mrs	r3, IPSR
 80090e6:	603b      	str	r3, [r7, #0]
  return(result);
 80090e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80090ee:	f06f 0305 	mvn.w	r3, #5
 80090f2:	607b      	str	r3, [r7, #4]
 80090f4:	e00c      	b.n	8009110 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80090f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009120 <osKernelInitialize+0x44>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d105      	bne.n	800910a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80090fe:	4b08      	ldr	r3, [pc, #32]	@ (8009120 <osKernelInitialize+0x44>)
 8009100:	2201      	movs	r2, #1
 8009102:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009104:	2300      	movs	r3, #0
 8009106:	607b      	str	r3, [r7, #4]
 8009108:	e002      	b.n	8009110 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800910a:	f04f 33ff 	mov.w	r3, #4294967295
 800910e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009110:	687b      	ldr	r3, [r7, #4]
}
 8009112:	4618      	mov	r0, r3
 8009114:	370c      	adds	r7, #12
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	20000264 	.word	0x20000264

08009124 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800912a:	f3ef 8305 	mrs	r3, IPSR
 800912e:	603b      	str	r3, [r7, #0]
  return(result);
 8009130:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009136:	f06f 0305 	mvn.w	r3, #5
 800913a:	607b      	str	r3, [r7, #4]
 800913c:	e010      	b.n	8009160 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800913e:	4b0b      	ldr	r3, [pc, #44]	@ (800916c <osKernelStart+0x48>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d109      	bne.n	800915a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009146:	f7ff ffbf 	bl	80090c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800914a:	4b08      	ldr	r3, [pc, #32]	@ (800916c <osKernelStart+0x48>)
 800914c:	2202      	movs	r2, #2
 800914e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009150:	f001 fb40 	bl	800a7d4 <vTaskStartScheduler>
      stat = osOK;
 8009154:	2300      	movs	r3, #0
 8009156:	607b      	str	r3, [r7, #4]
 8009158:	e002      	b.n	8009160 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800915a:	f04f 33ff 	mov.w	r3, #4294967295
 800915e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009160:	687b      	ldr	r3, [r7, #4]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	20000264 	.word	0x20000264

08009170 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009170:	b580      	push	{r7, lr}
 8009172:	b08e      	sub	sp, #56	@ 0x38
 8009174:	af04      	add	r7, sp, #16
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800917c:	2300      	movs	r3, #0
 800917e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009180:	f3ef 8305 	mrs	r3, IPSR
 8009184:	617b      	str	r3, [r7, #20]
  return(result);
 8009186:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009188:	2b00      	cmp	r3, #0
 800918a:	d17e      	bne.n	800928a <osThreadNew+0x11a>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d07b      	beq.n	800928a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009192:	2380      	movs	r3, #128	@ 0x80
 8009194:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009196:	2318      	movs	r3, #24
 8009198:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800919a:	2300      	movs	r3, #0
 800919c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800919e:	f04f 33ff 	mov.w	r3, #4294967295
 80091a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d045      	beq.n	8009236 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d002      	beq.n	80091b8 <osThreadNew+0x48>
        name = attr->name;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d002      	beq.n	80091c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d008      	beq.n	80091de <osThreadNew+0x6e>
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	2b38      	cmp	r3, #56	@ 0x38
 80091d0:	d805      	bhi.n	80091de <osThreadNew+0x6e>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <osThreadNew+0x72>
        return (NULL);
 80091de:	2300      	movs	r3, #0
 80091e0:	e054      	b.n	800928c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	089b      	lsrs	r3, r3, #2
 80091f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00e      	beq.n	8009218 <osThreadNew+0xa8>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	2ba7      	cmp	r3, #167	@ 0xa7
 8009200:	d90a      	bls.n	8009218 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009206:	2b00      	cmp	r3, #0
 8009208:	d006      	beq.n	8009218 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <osThreadNew+0xa8>
        mem = 1;
 8009212:	2301      	movs	r3, #1
 8009214:	61bb      	str	r3, [r7, #24]
 8009216:	e010      	b.n	800923a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10c      	bne.n	800923a <osThreadNew+0xca>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d108      	bne.n	800923a <osThreadNew+0xca>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d104      	bne.n	800923a <osThreadNew+0xca>
          mem = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	61bb      	str	r3, [r7, #24]
 8009234:	e001      	b.n	800923a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009236:	2300      	movs	r3, #0
 8009238:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d110      	bne.n	8009262 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009248:	9202      	str	r2, [sp, #8]
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	6a3a      	ldr	r2, [r7, #32]
 8009254:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f001 f8c8 	bl	800a3ec <xTaskCreateStatic>
 800925c:	4603      	mov	r3, r0
 800925e:	613b      	str	r3, [r7, #16]
 8009260:	e013      	b.n	800928a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d110      	bne.n	800928a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	b29a      	uxth	r2, r3
 800926c:	f107 0310 	add.w	r3, r7, #16
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f001 f916 	bl	800a4ac <xTaskCreate>
 8009280:	4603      	mov	r3, r0
 8009282:	2b01      	cmp	r3, #1
 8009284:	d001      	beq.n	800928a <osThreadNew+0x11a>
            hTask = NULL;
 8009286:	2300      	movs	r3, #0
 8009288:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800928a:	693b      	ldr	r3, [r7, #16]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3728      	adds	r7, #40	@ 0x28
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800929c:	f3ef 8305 	mrs	r3, IPSR
 80092a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80092a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <osDelay+0x1c>
    stat = osErrorISR;
 80092a8:	f06f 0305 	mvn.w	r3, #5
 80092ac:	60fb      	str	r3, [r7, #12]
 80092ae:	e007      	b.n	80092c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d002      	beq.n	80092c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f001 fa54 	bl	800a768 <vTaskDelay>
    }
  }

  return (stat);
 80092c0:	68fb      	ldr	r3, [r7, #12]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b084      	sub	sp, #16
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f002 fbbc 	bl	800ba50 <pvTimerGetTimerID>
 80092d8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d005      	beq.n	80092ec <TimerCallback+0x22>
    callb->func (callb->arg);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	6852      	ldr	r2, [r2, #4]
 80092e8:	4610      	mov	r0, r2
 80092ea:	4798      	blx	r3
  }
}
 80092ec:	bf00      	nop
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b08c      	sub	sp, #48	@ 0x30
 80092f8:	af02      	add	r7, sp, #8
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	607a      	str	r2, [r7, #4]
 80092fe:	603b      	str	r3, [r7, #0]
 8009300:	460b      	mov	r3, r1
 8009302:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8009304:	2300      	movs	r3, #0
 8009306:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009308:	f3ef 8305 	mrs	r3, IPSR
 800930c:	613b      	str	r3, [r7, #16]
  return(result);
 800930e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8009310:	2b00      	cmp	r3, #0
 8009312:	d163      	bne.n	80093dc <osTimerNew+0xe8>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d060      	beq.n	80093dc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800931a:	2008      	movs	r0, #8
 800931c:	f002 fe0e 	bl	800bf3c <pvPortMalloc>
 8009320:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d059      	beq.n	80093dc <osTimerNew+0xe8>
      callb->func = func;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8009334:	7afb      	ldrb	r3, [r7, #11]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d102      	bne.n	8009340 <osTimerNew+0x4c>
        reload = pdFALSE;
 800933a:	2300      	movs	r3, #0
 800933c:	61fb      	str	r3, [r7, #28]
 800933e:	e001      	b.n	8009344 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8009340:	2301      	movs	r3, #1
 8009342:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8009344:	f04f 33ff 	mov.w	r3, #4294967295
 8009348:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800934a:	2300      	movs	r3, #0
 800934c:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d01c      	beq.n	800938e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <osTimerNew+0x6e>
          name = attr->name;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d006      	beq.n	8009378 <osTimerNew+0x84>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009370:	d902      	bls.n	8009378 <osTimerNew+0x84>
          mem = 1;
 8009372:	2301      	movs	r3, #1
 8009374:	61bb      	str	r3, [r7, #24]
 8009376:	e00c      	b.n	8009392 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d108      	bne.n	8009392 <osTimerNew+0x9e>
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d104      	bne.n	8009392 <osTimerNew+0x9e>
            mem = 0;
 8009388:	2300      	movs	r3, #0
 800938a:	61bb      	str	r3, [r7, #24]
 800938c:	e001      	b.n	8009392 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800938e:	2300      	movs	r3, #0
 8009390:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d10c      	bne.n	80093b2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	9301      	str	r3, [sp, #4]
 800939e:	4b12      	ldr	r3, [pc, #72]	@ (80093e8 <osTimerNew+0xf4>)
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	69fa      	ldr	r2, [r7, #28]
 80093a6:	2101      	movs	r1, #1
 80093a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80093aa:	f001 ffc4 	bl	800b336 <xTimerCreateStatic>
 80093ae:	6238      	str	r0, [r7, #32]
 80093b0:	e00b      	b.n	80093ca <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d108      	bne.n	80093ca <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80093b8:	4b0b      	ldr	r3, [pc, #44]	@ (80093e8 <osTimerNew+0xf4>)
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	69fa      	ldr	r2, [r7, #28]
 80093c0:	2101      	movs	r1, #1
 80093c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80093c4:	f001 ff96 	bl	800b2f4 <xTimerCreate>
 80093c8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d105      	bne.n	80093dc <osTimerNew+0xe8>
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d002      	beq.n	80093dc <osTimerNew+0xe8>
        vPortFree (callb);
 80093d6:	6978      	ldr	r0, [r7, #20]
 80093d8:	f002 fe7e 	bl	800c0d8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80093dc:	6a3b      	ldr	r3, [r7, #32]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3728      	adds	r7, #40	@ 0x28
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	080092cb 	.word	0x080092cb

080093ec <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b088      	sub	sp, #32
 80093f0:	af02      	add	r7, sp, #8
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093fa:	f3ef 8305 	mrs	r3, IPSR
 80093fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8009400:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009402:	2b00      	cmp	r3, #0
 8009404:	d003      	beq.n	800940e <osTimerStart+0x22>
    stat = osErrorISR;
 8009406:	f06f 0305 	mvn.w	r3, #5
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	e017      	b.n	800943e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d103      	bne.n	800941c <osTimerStart+0x30>
    stat = osErrorParameter;
 8009414:	f06f 0303 	mvn.w	r3, #3
 8009418:	617b      	str	r3, [r7, #20]
 800941a:	e010      	b.n	800943e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800941c:	2300      	movs	r3, #0
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	2300      	movs	r3, #0
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	2104      	movs	r1, #4
 8009426:	6938      	ldr	r0, [r7, #16]
 8009428:	f002 f802 	bl	800b430 <xTimerGenericCommand>
 800942c:	4603      	mov	r3, r0
 800942e:	2b01      	cmp	r3, #1
 8009430:	d102      	bne.n	8009438 <osTimerStart+0x4c>
      stat = osOK;
 8009432:	2300      	movs	r3, #0
 8009434:	617b      	str	r3, [r7, #20]
 8009436:	e002      	b.n	800943e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8009438:	f06f 0302 	mvn.w	r3, #2
 800943c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800943e:	697b      	ldr	r3, [r7, #20]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009448:	b580      	push	{r7, lr}
 800944a:	b08a      	sub	sp, #40	@ 0x28
 800944c:	af02      	add	r7, sp, #8
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009454:	2300      	movs	r3, #0
 8009456:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009458:	f3ef 8305 	mrs	r3, IPSR
 800945c:	613b      	str	r3, [r7, #16]
  return(result);
 800945e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009460:	2b00      	cmp	r3, #0
 8009462:	d15f      	bne.n	8009524 <osMessageQueueNew+0xdc>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d05c      	beq.n	8009524 <osMessageQueueNew+0xdc>
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d059      	beq.n	8009524 <osMessageQueueNew+0xdc>
    mem = -1;
 8009470:	f04f 33ff 	mov.w	r3, #4294967295
 8009474:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d029      	beq.n	80094d0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d012      	beq.n	80094aa <osMessageQueueNew+0x62>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	2b4f      	cmp	r3, #79	@ 0x4f
 800948a:	d90e      	bls.n	80094aa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00a      	beq.n	80094aa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	695a      	ldr	r2, [r3, #20]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	68b9      	ldr	r1, [r7, #8]
 800949c:	fb01 f303 	mul.w	r3, r1, r3
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d302      	bcc.n	80094aa <osMessageQueueNew+0x62>
        mem = 1;
 80094a4:	2301      	movs	r3, #1
 80094a6:	61bb      	str	r3, [r7, #24]
 80094a8:	e014      	b.n	80094d4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d110      	bne.n	80094d4 <osMessageQueueNew+0x8c>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10c      	bne.n	80094d4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d108      	bne.n	80094d4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d104      	bne.n	80094d4 <osMessageQueueNew+0x8c>
          mem = 0;
 80094ca:	2300      	movs	r3, #0
 80094cc:	61bb      	str	r3, [r7, #24]
 80094ce:	e001      	b.n	80094d4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d10b      	bne.n	80094f2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	691a      	ldr	r2, [r3, #16]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	2100      	movs	r1, #0
 80094e4:	9100      	str	r1, [sp, #0]
 80094e6:	68b9      	ldr	r1, [r7, #8]
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f000 fa31 	bl	8009950 <xQueueGenericCreateStatic>
 80094ee:	61f8      	str	r0, [r7, #28]
 80094f0:	e008      	b.n	8009504 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d105      	bne.n	8009504 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80094f8:	2200      	movs	r2, #0
 80094fa:	68b9      	ldr	r1, [r7, #8]
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 faa4 	bl	8009a4a <xQueueGenericCreate>
 8009502:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00c      	beq.n	8009524 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d003      	beq.n	8009518 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	617b      	str	r3, [r7, #20]
 8009516:	e001      	b.n	800951c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009518:	2300      	movs	r3, #0
 800951a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800951c:	6979      	ldr	r1, [r7, #20]
 800951e:	69f8      	ldr	r0, [r7, #28]
 8009520:	f000 ff06 	bl	800a330 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009524:	69fb      	ldr	r3, [r7, #28]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3720      	adds	r7, #32
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009530:	b580      	push	{r7, lr}
 8009532:	b088      	sub	sp, #32
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	603b      	str	r3, [r7, #0]
 800953c:	4613      	mov	r3, r2
 800953e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009544:	2300      	movs	r3, #0
 8009546:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009548:	f3ef 8305 	mrs	r3, IPSR
 800954c:	617b      	str	r3, [r7, #20]
  return(result);
 800954e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009550:	2b00      	cmp	r3, #0
 8009552:	d028      	beq.n	80095a6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d005      	beq.n	8009566 <osMessageQueuePut+0x36>
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <osMessageQueuePut+0x36>
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d003      	beq.n	800956e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009566:	f06f 0303 	mvn.w	r3, #3
 800956a:	61fb      	str	r3, [r7, #28]
 800956c:	e038      	b.n	80095e0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800956e:	2300      	movs	r3, #0
 8009570:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009572:	f107 0210 	add.w	r2, r7, #16
 8009576:	2300      	movs	r3, #0
 8009578:	68b9      	ldr	r1, [r7, #8]
 800957a:	69b8      	ldr	r0, [r7, #24]
 800957c:	f000 fbc6 	bl	8009d0c <xQueueGenericSendFromISR>
 8009580:	4603      	mov	r3, r0
 8009582:	2b01      	cmp	r3, #1
 8009584:	d003      	beq.n	800958e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009586:	f06f 0302 	mvn.w	r3, #2
 800958a:	61fb      	str	r3, [r7, #28]
 800958c:	e028      	b.n	80095e0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d025      	beq.n	80095e0 <osMessageQueuePut+0xb0>
 8009594:	4b15      	ldr	r3, [pc, #84]	@ (80095ec <osMessageQueuePut+0xbc>)
 8009596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	f3bf 8f6f 	isb	sy
 80095a4:	e01c      	b.n	80095e0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <osMessageQueuePut+0x82>
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d103      	bne.n	80095ba <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80095b2:	f06f 0303 	mvn.w	r3, #3
 80095b6:	61fb      	str	r3, [r7, #28]
 80095b8:	e012      	b.n	80095e0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80095ba:	2300      	movs	r3, #0
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	68b9      	ldr	r1, [r7, #8]
 80095c0:	69b8      	ldr	r0, [r7, #24]
 80095c2:	f000 faa1 	bl	8009b08 <xQueueGenericSend>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d009      	beq.n	80095e0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80095d2:	f06f 0301 	mvn.w	r3, #1
 80095d6:	61fb      	str	r3, [r7, #28]
 80095d8:	e002      	b.n	80095e0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80095da:	f06f 0302 	mvn.w	r3, #2
 80095de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80095e0:	69fb      	ldr	r3, [r7, #28]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3720      	adds	r7, #32
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	e000ed04 	.word	0xe000ed04

080095f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b088      	sub	sp, #32
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
 80095fc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009602:	2300      	movs	r3, #0
 8009604:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009606:	f3ef 8305 	mrs	r3, IPSR
 800960a:	617b      	str	r3, [r7, #20]
  return(result);
 800960c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800960e:	2b00      	cmp	r3, #0
 8009610:	d028      	beq.n	8009664 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d005      	beq.n	8009624 <osMessageQueueGet+0x34>
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d002      	beq.n	8009624 <osMessageQueueGet+0x34>
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009624:	f06f 0303 	mvn.w	r3, #3
 8009628:	61fb      	str	r3, [r7, #28]
 800962a:	e037      	b.n	800969c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800962c:	2300      	movs	r3, #0
 800962e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009630:	f107 0310 	add.w	r3, r7, #16
 8009634:	461a      	mov	r2, r3
 8009636:	68b9      	ldr	r1, [r7, #8]
 8009638:	69b8      	ldr	r0, [r7, #24]
 800963a:	f000 fce7 	bl	800a00c <xQueueReceiveFromISR>
 800963e:	4603      	mov	r3, r0
 8009640:	2b01      	cmp	r3, #1
 8009642:	d003      	beq.n	800964c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009644:	f06f 0302 	mvn.w	r3, #2
 8009648:	61fb      	str	r3, [r7, #28]
 800964a:	e027      	b.n	800969c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d024      	beq.n	800969c <osMessageQueueGet+0xac>
 8009652:	4b15      	ldr	r3, [pc, #84]	@ (80096a8 <osMessageQueueGet+0xb8>)
 8009654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	e01b      	b.n	800969c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <osMessageQueueGet+0x80>
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d103      	bne.n	8009678 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009670:	f06f 0303 	mvn.w	r3, #3
 8009674:	61fb      	str	r3, [r7, #28]
 8009676:	e011      	b.n	800969c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	68b9      	ldr	r1, [r7, #8]
 800967c:	69b8      	ldr	r0, [r7, #24]
 800967e:	f000 fbe3 	bl	8009e48 <xQueueReceive>
 8009682:	4603      	mov	r3, r0
 8009684:	2b01      	cmp	r3, #1
 8009686:	d009      	beq.n	800969c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800968e:	f06f 0301 	mvn.w	r3, #1
 8009692:	61fb      	str	r3, [r7, #28]
 8009694:	e002      	b.n	800969c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009696:	f06f 0302 	mvn.w	r3, #2
 800969a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800969c:	69fb      	ldr	r3, [r7, #28]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3720      	adds	r7, #32
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	e000ed04 	.word	0xe000ed04

080096ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	4a07      	ldr	r2, [pc, #28]	@ (80096d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80096bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	4a06      	ldr	r2, [pc, #24]	@ (80096dc <vApplicationGetIdleTaskMemory+0x30>)
 80096c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2280      	movs	r2, #128	@ 0x80
 80096c8:	601a      	str	r2, [r3, #0]
}
 80096ca:	bf00      	nop
 80096cc:	3714      	adds	r7, #20
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	20000268 	.word	0x20000268
 80096dc:	20000310 	.word	0x20000310

080096e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4a07      	ldr	r2, [pc, #28]	@ (800970c <vApplicationGetTimerTaskMemory+0x2c>)
 80096f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	4a06      	ldr	r2, [pc, #24]	@ (8009710 <vApplicationGetTimerTaskMemory+0x30>)
 80096f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80096fe:	601a      	str	r2, [r3, #0]
}
 8009700:	bf00      	nop
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	20000510 	.word	0x20000510
 8009710:	200005b8 	.word	0x200005b8

08009714 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f103 0208 	add.w	r2, r3, #8
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f04f 32ff 	mov.w	r2, #4294967295
 800972c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f103 0208 	add.w	r2, r3, #8
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f103 0208 	add.w	r2, r3, #8
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009762:	bf00      	nop
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800976e:	b480      	push	{r7}
 8009770:	b085      	sub	sp, #20
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	689a      	ldr	r2, [r3, #8]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	1c5a      	adds	r2, r3, #1
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	601a      	str	r2, [r3, #0]
}
 80097aa:	bf00      	nop
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097b6:	b480      	push	{r7}
 80097b8:	b085      	sub	sp, #20
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097cc:	d103      	bne.n	80097d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	e00c      	b.n	80097f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3308      	adds	r3, #8
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	e002      	b.n	80097e4 <vListInsert+0x2e>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d2f6      	bcs.n	80097de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	1c5a      	adds	r2, r3, #1
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	601a      	str	r2, [r3, #0]
}
 800981c:	bf00      	nop
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	6892      	ldr	r2, [r2, #8]
 800983e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	6852      	ldr	r2, [r2, #4]
 8009848:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	429a      	cmp	r2, r3
 8009852:	d103      	bne.n	800985c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689a      	ldr	r2, [r3, #8]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	1e5a      	subs	r2, r3, #1
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10b      	bne.n	80098a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80098a2:	bf00      	nop
 80098a4:	bf00      	nop
 80098a6:	e7fd      	b.n	80098a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80098a8:	f002 fa26 	bl	800bcf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098b4:	68f9      	ldr	r1, [r7, #12]
 80098b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80098b8:	fb01 f303 	mul.w	r3, r1, r3
 80098bc:	441a      	add	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098d8:	3b01      	subs	r3, #1
 80098da:	68f9      	ldr	r1, [r7, #12]
 80098dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80098de:	fb01 f303 	mul.w	r3, r1, r3
 80098e2:	441a      	add	r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	22ff      	movs	r2, #255	@ 0xff
 80098ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	22ff      	movs	r2, #255	@ 0xff
 80098f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d114      	bne.n	8009928 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d01a      	beq.n	800993c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	3310      	adds	r3, #16
 800990a:	4618      	mov	r0, r3
 800990c:	f001 fa00 	bl	800ad10 <xTaskRemoveFromEventList>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d012      	beq.n	800993c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009916:	4b0d      	ldr	r3, [pc, #52]	@ (800994c <xQueueGenericReset+0xd0>)
 8009918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800991c:	601a      	str	r2, [r3, #0]
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	e009      	b.n	800993c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	3310      	adds	r3, #16
 800992c:	4618      	mov	r0, r3
 800992e:	f7ff fef1 	bl	8009714 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3324      	adds	r3, #36	@ 0x24
 8009936:	4618      	mov	r0, r3
 8009938:	f7ff feec 	bl	8009714 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800993c:	f002 fa0e 	bl	800bd5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009940:	2301      	movs	r3, #1
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	e000ed04 	.word	0xe000ed04

08009950 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08e      	sub	sp, #56	@ 0x38
 8009954:	af02      	add	r7, sp, #8
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
 800995c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10b      	bne.n	800997c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009976:	bf00      	nop
 8009978:	bf00      	nop
 800997a:	e7fd      	b.n	8009978 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10b      	bne.n	800999a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009986:	f383 8811 	msr	BASEPRI, r3
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009994:	bf00      	nop
 8009996:	bf00      	nop
 8009998:	e7fd      	b.n	8009996 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <xQueueGenericCreateStatic+0x56>
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <xQueueGenericCreateStatic+0x5a>
 80099a6:	2301      	movs	r3, #1
 80099a8:	e000      	b.n	80099ac <xQueueGenericCreateStatic+0x5c>
 80099aa:	2300      	movs	r3, #0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10b      	bne.n	80099c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	623b      	str	r3, [r7, #32]
}
 80099c2:	bf00      	nop
 80099c4:	bf00      	nop
 80099c6:	e7fd      	b.n	80099c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d102      	bne.n	80099d4 <xQueueGenericCreateStatic+0x84>
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d101      	bne.n	80099d8 <xQueueGenericCreateStatic+0x88>
 80099d4:	2301      	movs	r3, #1
 80099d6:	e000      	b.n	80099da <xQueueGenericCreateStatic+0x8a>
 80099d8:	2300      	movs	r3, #0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10b      	bne.n	80099f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	61fb      	str	r3, [r7, #28]
}
 80099f0:	bf00      	nop
 80099f2:	bf00      	nop
 80099f4:	e7fd      	b.n	80099f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80099f6:	2350      	movs	r3, #80	@ 0x50
 80099f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b50      	cmp	r3, #80	@ 0x50
 80099fe:	d00b      	beq.n	8009a18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	61bb      	str	r3, [r7, #24]
}
 8009a12:	bf00      	nop
 8009a14:	bf00      	nop
 8009a16:	e7fd      	b.n	8009a14 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00d      	beq.n	8009a40 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a2c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	4613      	mov	r3, r2
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	68b9      	ldr	r1, [r7, #8]
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f000 f840 	bl	8009ac0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3730      	adds	r7, #48	@ 0x30
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b08a      	sub	sp, #40	@ 0x28
 8009a4e:	af02      	add	r7, sp, #8
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	60b9      	str	r1, [r7, #8]
 8009a54:	4613      	mov	r3, r2
 8009a56:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10b      	bne.n	8009a76 <xQueueGenericCreate+0x2c>
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	613b      	str	r3, [r7, #16]
}
 8009a70:	bf00      	nop
 8009a72:	bf00      	nop
 8009a74:	e7fd      	b.n	8009a72 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	fb02 f303 	mul.w	r3, r2, r3
 8009a7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	3350      	adds	r3, #80	@ 0x50
 8009a84:	4618      	mov	r0, r3
 8009a86:	f002 fa59 	bl	800bf3c <pvPortMalloc>
 8009a8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d011      	beq.n	8009ab6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	3350      	adds	r3, #80	@ 0x50
 8009a9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009aa4:	79fa      	ldrb	r2, [r7, #7]
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	68b9      	ldr	r1, [r7, #8]
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f000 f805 	bl	8009ac0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ab6:	69bb      	ldr	r3, [r7, #24]
	}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3720      	adds	r7, #32
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
 8009acc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d103      	bne.n	8009adc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	e002      	b.n	8009ae2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009aee:	2101      	movs	r1, #1
 8009af0:	69b8      	ldr	r0, [r7, #24]
 8009af2:	f7ff fec3 	bl	800987c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	78fa      	ldrb	r2, [r7, #3]
 8009afa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009afe:	bf00      	nop
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
	...

08009b08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08e      	sub	sp, #56	@ 0x38
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009b16:	2300      	movs	r3, #0
 8009b18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10b      	bne.n	8009b3c <xQueueGenericSend+0x34>
	__asm volatile
 8009b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009b36:	bf00      	nop
 8009b38:	bf00      	nop
 8009b3a:	e7fd      	b.n	8009b38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d103      	bne.n	8009b4a <xQueueGenericSend+0x42>
 8009b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <xQueueGenericSend+0x46>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e000      	b.n	8009b50 <xQueueGenericSend+0x48>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10b      	bne.n	8009b6c <xQueueGenericSend+0x64>
	__asm volatile
 8009b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b66:	bf00      	nop
 8009b68:	bf00      	nop
 8009b6a:	e7fd      	b.n	8009b68 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d103      	bne.n	8009b7a <xQueueGenericSend+0x72>
 8009b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d101      	bne.n	8009b7e <xQueueGenericSend+0x76>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e000      	b.n	8009b80 <xQueueGenericSend+0x78>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10b      	bne.n	8009b9c <xQueueGenericSend+0x94>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	623b      	str	r3, [r7, #32]
}
 8009b96:	bf00      	nop
 8009b98:	bf00      	nop
 8009b9a:	e7fd      	b.n	8009b98 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b9c:	f001 fa7e 	bl	800b09c <xTaskGetSchedulerState>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d102      	bne.n	8009bac <xQueueGenericSend+0xa4>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d101      	bne.n	8009bb0 <xQueueGenericSend+0xa8>
 8009bac:	2301      	movs	r3, #1
 8009bae:	e000      	b.n	8009bb2 <xQueueGenericSend+0xaa>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10b      	bne.n	8009bce <xQueueGenericSend+0xc6>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	61fb      	str	r3, [r7, #28]
}
 8009bc8:	bf00      	nop
 8009bca:	bf00      	nop
 8009bcc:	e7fd      	b.n	8009bca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bce:	f002 f893 	bl	800bcf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d302      	bcc.n	8009be4 <xQueueGenericSend+0xdc>
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d129      	bne.n	8009c38 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009be4:	683a      	ldr	r2, [r7, #0]
 8009be6:	68b9      	ldr	r1, [r7, #8]
 8009be8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009bea:	f000 fa91 	bl	800a110 <prvCopyDataToQueue>
 8009bee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d010      	beq.n	8009c1a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfa:	3324      	adds	r3, #36	@ 0x24
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f001 f887 	bl	800ad10 <xTaskRemoveFromEventList>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d013      	beq.n	8009c30 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009c08:	4b3f      	ldr	r3, [pc, #252]	@ (8009d08 <xQueueGenericSend+0x200>)
 8009c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c0e:	601a      	str	r2, [r3, #0]
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	e00a      	b.n	8009c30 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d007      	beq.n	8009c30 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009c20:	4b39      	ldr	r3, [pc, #228]	@ (8009d08 <xQueueGenericSend+0x200>)
 8009c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009c30:	f002 f894 	bl	800bd5c <vPortExitCritical>
				return pdPASS;
 8009c34:	2301      	movs	r3, #1
 8009c36:	e063      	b.n	8009d00 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d103      	bne.n	8009c46 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c3e:	f002 f88d 	bl	800bd5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	e05c      	b.n	8009d00 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d106      	bne.n	8009c5a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c4c:	f107 0314 	add.w	r3, r7, #20
 8009c50:	4618      	mov	r0, r3
 8009c52:	f001 f8c1 	bl	800add8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c56:	2301      	movs	r3, #1
 8009c58:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c5a:	f002 f87f 	bl	800bd5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c5e:	f000 fe29 	bl	800a8b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c62:	f002 f849 	bl	800bcf8 <vPortEnterCritical>
 8009c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c6c:	b25b      	sxtb	r3, r3
 8009c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c72:	d103      	bne.n	8009c7c <xQueueGenericSend+0x174>
 8009c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c82:	b25b      	sxtb	r3, r3
 8009c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c88:	d103      	bne.n	8009c92 <xQueueGenericSend+0x18a>
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c92:	f002 f863 	bl	800bd5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c96:	1d3a      	adds	r2, r7, #4
 8009c98:	f107 0314 	add.w	r3, r7, #20
 8009c9c:	4611      	mov	r1, r2
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f001 f8b0 	bl	800ae04 <xTaskCheckForTimeOut>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d124      	bne.n	8009cf4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009caa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cac:	f000 fb28 	bl	800a300 <prvIsQueueFull>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d018      	beq.n	8009ce8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb8:	3310      	adds	r3, #16
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 ffd4 	bl	800ac6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009cc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cc6:	f000 fab3 	bl	800a230 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009cca:	f000 fe01 	bl	800a8d0 <xTaskResumeAll>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f47f af7c 	bne.w	8009bce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8009d08 <xQueueGenericSend+0x200>)
 8009cd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	e772      	b.n	8009bce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cea:	f000 faa1 	bl	800a230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cee:	f000 fdef 	bl	800a8d0 <xTaskResumeAll>
 8009cf2:	e76c      	b.n	8009bce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009cf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cf6:	f000 fa9b 	bl	800a230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cfa:	f000 fde9 	bl	800a8d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009cfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3738      	adds	r7, #56	@ 0x38
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	e000ed04 	.word	0xe000ed04

08009d0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b090      	sub	sp, #64	@ 0x40
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
 8009d18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10b      	bne.n	8009d3c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009d36:	bf00      	nop
 8009d38:	bf00      	nop
 8009d3a:	e7fd      	b.n	8009d38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d103      	bne.n	8009d4a <xQueueGenericSendFromISR+0x3e>
 8009d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d101      	bne.n	8009d4e <xQueueGenericSendFromISR+0x42>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e000      	b.n	8009d50 <xQueueGenericSendFromISR+0x44>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10b      	bne.n	8009d6c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009d66:	bf00      	nop
 8009d68:	bf00      	nop
 8009d6a:	e7fd      	b.n	8009d68 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d103      	bne.n	8009d7a <xQueueGenericSendFromISR+0x6e>
 8009d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d101      	bne.n	8009d7e <xQueueGenericSendFromISR+0x72>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e000      	b.n	8009d80 <xQueueGenericSendFromISR+0x74>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10b      	bne.n	8009d9c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	623b      	str	r3, [r7, #32]
}
 8009d96:	bf00      	nop
 8009d98:	bf00      	nop
 8009d9a:	e7fd      	b.n	8009d98 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d9c:	f002 f88c 	bl	800beb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009da0:	f3ef 8211 	mrs	r2, BASEPRI
 8009da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	61fa      	str	r2, [r7, #28]
 8009db6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009db8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d302      	bcc.n	8009dce <xQueueGenericSendFromISR+0xc2>
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d12f      	bne.n	8009e2e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	68b9      	ldr	r1, [r7, #8]
 8009de2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009de4:	f000 f994 	bl	800a110 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009de8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df0:	d112      	bne.n	8009e18 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d016      	beq.n	8009e28 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dfc:	3324      	adds	r3, #36	@ 0x24
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 ff86 	bl	800ad10 <xTaskRemoveFromEventList>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00e      	beq.n	8009e28 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00b      	beq.n	8009e28 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	e007      	b.n	8009e28 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	b25a      	sxtb	r2, r3
 8009e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009e2c:	e001      	b.n	8009e32 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e34:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009e3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3740      	adds	r7, #64	@ 0x40
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b08c      	sub	sp, #48	@ 0x30
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e54:	2300      	movs	r3, #0
 8009e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10b      	bne.n	8009e7a <xQueueReceive+0x32>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	623b      	str	r3, [r7, #32]
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop
 8009e78:	e7fd      	b.n	8009e76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d103      	bne.n	8009e88 <xQueueReceive+0x40>
 8009e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <xQueueReceive+0x44>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e000      	b.n	8009e8e <xQueueReceive+0x46>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10b      	bne.n	8009eaa <xQueueReceive+0x62>
	__asm volatile
 8009e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e96:	f383 8811 	msr	BASEPRI, r3
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	61fb      	str	r3, [r7, #28]
}
 8009ea4:	bf00      	nop
 8009ea6:	bf00      	nop
 8009ea8:	e7fd      	b.n	8009ea6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009eaa:	f001 f8f7 	bl	800b09c <xTaskGetSchedulerState>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d102      	bne.n	8009eba <xQueueReceive+0x72>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d101      	bne.n	8009ebe <xQueueReceive+0x76>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e000      	b.n	8009ec0 <xQueueReceive+0x78>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10b      	bne.n	8009edc <xQueueReceive+0x94>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	61bb      	str	r3, [r7, #24]
}
 8009ed6:	bf00      	nop
 8009ed8:	bf00      	nop
 8009eda:	e7fd      	b.n	8009ed8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009edc:	f001 ff0c 	bl	800bcf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d01f      	beq.n	8009f2c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009eec:	68b9      	ldr	r1, [r7, #8]
 8009eee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ef0:	f000 f978 	bl	800a1e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef6:	1e5a      	subs	r2, r3, #1
 8009ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00f      	beq.n	8009f24 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f06:	3310      	adds	r3, #16
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 ff01 	bl	800ad10 <xTaskRemoveFromEventList>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d007      	beq.n	8009f24 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f14:	4b3c      	ldr	r3, [pc, #240]	@ (800a008 <xQueueReceive+0x1c0>)
 8009f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f24:	f001 ff1a 	bl	800bd5c <vPortExitCritical>
				return pdPASS;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e069      	b.n	800a000 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d103      	bne.n	8009f3a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f32:	f001 ff13 	bl	800bd5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f36:	2300      	movs	r3, #0
 8009f38:	e062      	b.n	800a000 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d106      	bne.n	8009f4e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f40:	f107 0310 	add.w	r3, r7, #16
 8009f44:	4618      	mov	r0, r3
 8009f46:	f000 ff47 	bl	800add8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f4e:	f001 ff05 	bl	800bd5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f52:	f000 fcaf 	bl	800a8b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f56:	f001 fecf 	bl	800bcf8 <vPortEnterCritical>
 8009f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f60:	b25b      	sxtb	r3, r3
 8009f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f66:	d103      	bne.n	8009f70 <xQueueReceive+0x128>
 8009f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f76:	b25b      	sxtb	r3, r3
 8009f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7c:	d103      	bne.n	8009f86 <xQueueReceive+0x13e>
 8009f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f86:	f001 fee9 	bl	800bd5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f8a:	1d3a      	adds	r2, r7, #4
 8009f8c:	f107 0310 	add.w	r3, r7, #16
 8009f90:	4611      	mov	r1, r2
 8009f92:	4618      	mov	r0, r3
 8009f94:	f000 ff36 	bl	800ae04 <xTaskCheckForTimeOut>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d123      	bne.n	8009fe6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fa0:	f000 f998 	bl	800a2d4 <prvIsQueueEmpty>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d017      	beq.n	8009fda <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fac:	3324      	adds	r3, #36	@ 0x24
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 fe5a 	bl	800ac6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009fb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fba:	f000 f939 	bl	800a230 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009fbe:	f000 fc87 	bl	800a8d0 <xTaskResumeAll>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d189      	bne.n	8009edc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009fc8:	4b0f      	ldr	r3, [pc, #60]	@ (800a008 <xQueueReceive+0x1c0>)
 8009fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fce:	601a      	str	r2, [r3, #0]
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	e780      	b.n	8009edc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fdc:	f000 f928 	bl	800a230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fe0:	f000 fc76 	bl	800a8d0 <xTaskResumeAll>
 8009fe4:	e77a      	b.n	8009edc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009fe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fe8:	f000 f922 	bl	800a230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fec:	f000 fc70 	bl	800a8d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ff0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ff2:	f000 f96f 	bl	800a2d4 <prvIsQueueEmpty>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f43f af6f 	beq.w	8009edc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ffe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a000:	4618      	mov	r0, r3
 800a002:	3730      	adds	r7, #48	@ 0x30
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	e000ed04 	.word	0xe000ed04

0800a00c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08e      	sub	sp, #56	@ 0x38
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10b      	bne.n	800a03a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	623b      	str	r3, [r7, #32]
}
 800a034:	bf00      	nop
 800a036:	bf00      	nop
 800a038:	e7fd      	b.n	800a036 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d103      	bne.n	800a048 <xQueueReceiveFromISR+0x3c>
 800a040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a044:	2b00      	cmp	r3, #0
 800a046:	d101      	bne.n	800a04c <xQueueReceiveFromISR+0x40>
 800a048:	2301      	movs	r3, #1
 800a04a:	e000      	b.n	800a04e <xQueueReceiveFromISR+0x42>
 800a04c:	2300      	movs	r3, #0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10b      	bne.n	800a06a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	61fb      	str	r3, [r7, #28]
}
 800a064:	bf00      	nop
 800a066:	bf00      	nop
 800a068:	e7fd      	b.n	800a066 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a06a:	f001 ff25 	bl	800beb8 <vPortValidateInterruptPriority>
	__asm volatile
 800a06e:	f3ef 8211 	mrs	r2, BASEPRI
 800a072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	61ba      	str	r2, [r7, #24]
 800a084:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a086:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a088:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a08e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a092:	2b00      	cmp	r3, #0
 800a094:	d02f      	beq.n	800a0f6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a098:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a09c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0a0:	68b9      	ldr	r1, [r7, #8]
 800a0a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0a4:	f000 f89e 	bl	800a1e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0aa:	1e5a      	subs	r2, r3, #1
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a0b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b8:	d112      	bne.n	800a0e0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d016      	beq.n	800a0f0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c4:	3310      	adds	r3, #16
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fe22 	bl	800ad10 <xTaskRemoveFromEventList>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00e      	beq.n	800a0f0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00b      	beq.n	800a0f0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	e007      	b.n	800a0f0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	b25a      	sxtb	r2, r3
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0f4:	e001      	b.n	800a0fa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	f383 8811 	msr	BASEPRI, r3
}
 800a104:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3738      	adds	r7, #56	@ 0x38
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a11c:	2300      	movs	r3, #0
 800a11e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a124:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10d      	bne.n	800a14a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d14d      	bne.n	800a1d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f000 ffcc 	bl	800b0d8 <xTaskPriorityDisinherit>
 800a140:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	609a      	str	r2, [r3, #8]
 800a148:	e043      	b.n	800a1d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d119      	bne.n	800a184 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6858      	ldr	r0, [r3, #4]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a158:	461a      	mov	r2, r3
 800a15a:	68b9      	ldr	r1, [r7, #8]
 800a15c:	f002 fd38 	bl	800cbd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a168:	441a      	add	r2, r3
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	685a      	ldr	r2, [r3, #4]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	429a      	cmp	r2, r3
 800a178:	d32b      	bcc.n	800a1d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	605a      	str	r2, [r3, #4]
 800a182:	e026      	b.n	800a1d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	68d8      	ldr	r0, [r3, #12]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a18c:	461a      	mov	r2, r3
 800a18e:	68b9      	ldr	r1, [r7, #8]
 800a190:	f002 fd1e 	bl	800cbd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	68da      	ldr	r2, [r3, #12]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a19c:	425b      	negs	r3, r3
 800a19e:	441a      	add	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	68da      	ldr	r2, [r3, #12]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d207      	bcs.n	800a1c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	689a      	ldr	r2, [r3, #8]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1b8:	425b      	negs	r3, r3
 800a1ba:	441a      	add	r2, r3
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d105      	bne.n	800a1d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d002      	beq.n	800a1d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a1da:	697b      	ldr	r3, [r7, #20]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3718      	adds	r7, #24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d018      	beq.n	800a228 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68da      	ldr	r2, [r3, #12]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1fe:	441a      	add	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	68da      	ldr	r2, [r3, #12]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d303      	bcc.n	800a218 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	68d9      	ldr	r1, [r3, #12]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a220:	461a      	mov	r2, r3
 800a222:	6838      	ldr	r0, [r7, #0]
 800a224:	f002 fcd4 	bl	800cbd0 <memcpy>
	}
}
 800a228:	bf00      	nop
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a238:	f001 fd5e 	bl	800bcf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a242:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a244:	e011      	b.n	800a26a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d012      	beq.n	800a274 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	3324      	adds	r3, #36	@ 0x24
 800a252:	4618      	mov	r0, r3
 800a254:	f000 fd5c 	bl	800ad10 <xTaskRemoveFromEventList>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a25e:	f000 fe35 	bl	800aecc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a262:	7bfb      	ldrb	r3, [r7, #15]
 800a264:	3b01      	subs	r3, #1
 800a266:	b2db      	uxtb	r3, r3
 800a268:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	dce9      	bgt.n	800a246 <prvUnlockQueue+0x16>
 800a272:	e000      	b.n	800a276 <prvUnlockQueue+0x46>
					break;
 800a274:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	22ff      	movs	r2, #255	@ 0xff
 800a27a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a27e:	f001 fd6d 	bl	800bd5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a282:	f001 fd39 	bl	800bcf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a28c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a28e:	e011      	b.n	800a2b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d012      	beq.n	800a2be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3310      	adds	r3, #16
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 fd37 	bl	800ad10 <xTaskRemoveFromEventList>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2a8:	f000 fe10 	bl	800aecc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2ac:	7bbb      	ldrb	r3, [r7, #14]
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	dce9      	bgt.n	800a290 <prvUnlockQueue+0x60>
 800a2bc:	e000      	b.n	800a2c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	22ff      	movs	r2, #255	@ 0xff
 800a2c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a2c8:	f001 fd48 	bl	800bd5c <vPortExitCritical>
}
 800a2cc:	bf00      	nop
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2dc:	f001 fd0c 	bl	800bcf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d102      	bne.n	800a2ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	60fb      	str	r3, [r7, #12]
 800a2ec:	e001      	b.n	800a2f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2f2:	f001 fd33 	bl	800bd5c <vPortExitCritical>

	return xReturn;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a308:	f001 fcf6 	bl	800bcf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a314:	429a      	cmp	r2, r3
 800a316:	d102      	bne.n	800a31e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a318:	2301      	movs	r3, #1
 800a31a:	60fb      	str	r3, [r7, #12]
 800a31c:	e001      	b.n	800a322 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a31e:	2300      	movs	r3, #0
 800a320:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a322:	f001 fd1b 	bl	800bd5c <vPortExitCritical>

	return xReturn;
 800a326:	68fb      	ldr	r3, [r7, #12]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a33a:	2300      	movs	r3, #0
 800a33c:	60fb      	str	r3, [r7, #12]
 800a33e:	e014      	b.n	800a36a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a340:	4a0f      	ldr	r2, [pc, #60]	@ (800a380 <vQueueAddToRegistry+0x50>)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10b      	bne.n	800a364 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a34c:	490c      	ldr	r1, [pc, #48]	@ (800a380 <vQueueAddToRegistry+0x50>)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a356:	4a0a      	ldr	r2, [pc, #40]	@ (800a380 <vQueueAddToRegistry+0x50>)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	00db      	lsls	r3, r3, #3
 800a35c:	4413      	add	r3, r2
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a362:	e006      	b.n	800a372 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	3301      	adds	r3, #1
 800a368:	60fb      	str	r3, [r7, #12]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b07      	cmp	r3, #7
 800a36e:	d9e7      	bls.n	800a340 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a370:	bf00      	nop
 800a372:	bf00      	nop
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	200009b8 	.word	0x200009b8

0800a384 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a394:	f001 fcb0 	bl	800bcf8 <vPortEnterCritical>
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a39e:	b25b      	sxtb	r3, r3
 800a3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a4:	d103      	bne.n	800a3ae <vQueueWaitForMessageRestricted+0x2a>
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3b4:	b25b      	sxtb	r3, r3
 800a3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ba:	d103      	bne.n	800a3c4 <vQueueWaitForMessageRestricted+0x40>
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3c4:	f001 fcca 	bl	800bd5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d106      	bne.n	800a3de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	3324      	adds	r3, #36	@ 0x24
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	68b9      	ldr	r1, [r7, #8]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 fc6d 	bl	800acb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a3de:	6978      	ldr	r0, [r7, #20]
 800a3e0:	f7ff ff26 	bl	800a230 <prvUnlockQueue>
	}
 800a3e4:	bf00      	nop
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b08e      	sub	sp, #56	@ 0x38
 800a3f0:	af04      	add	r7, sp, #16
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
 800a3f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a3fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10b      	bne.n	800a418 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	623b      	str	r3, [r7, #32]
}
 800a412:	bf00      	nop
 800a414:	bf00      	nop
 800a416:	e7fd      	b.n	800a414 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10b      	bne.n	800a436 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	61fb      	str	r3, [r7, #28]
}
 800a430:	bf00      	nop
 800a432:	bf00      	nop
 800a434:	e7fd      	b.n	800a432 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a436:	23a8      	movs	r3, #168	@ 0xa8
 800a438:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	2ba8      	cmp	r3, #168	@ 0xa8
 800a43e:	d00b      	beq.n	800a458 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	61bb      	str	r3, [r7, #24]
}
 800a452:	bf00      	nop
 800a454:	bf00      	nop
 800a456:	e7fd      	b.n	800a454 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a458:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d01e      	beq.n	800a49e <xTaskCreateStatic+0xb2>
 800a460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a462:	2b00      	cmp	r3, #0
 800a464:	d01b      	beq.n	800a49e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a468:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a46e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a472:	2202      	movs	r2, #2
 800a474:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a478:	2300      	movs	r3, #0
 800a47a:	9303      	str	r3, [sp, #12]
 800a47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47e:	9302      	str	r3, [sp, #8]
 800a480:	f107 0314 	add.w	r3, r7, #20
 800a484:	9301      	str	r3, [sp, #4]
 800a486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	68b9      	ldr	r1, [r7, #8]
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f000 f851 	bl	800a538 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a496:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a498:	f000 f8f6 	bl	800a688 <prvAddNewTaskToReadyList>
 800a49c:	e001      	b.n	800a4a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4a2:	697b      	ldr	r3, [r7, #20]
	}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3728      	adds	r7, #40	@ 0x28
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b08c      	sub	sp, #48	@ 0x30
 800a4b0:	af04      	add	r7, sp, #16
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	603b      	str	r3, [r7, #0]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a4bc:	88fb      	ldrh	r3, [r7, #6]
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f001 fd3b 	bl	800bf3c <pvPortMalloc>
 800a4c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00e      	beq.n	800a4ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a4ce:	20a8      	movs	r0, #168	@ 0xa8
 800a4d0:	f001 fd34 	bl	800bf3c <pvPortMalloc>
 800a4d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d003      	beq.n	800a4e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	631a      	str	r2, [r3, #48]	@ 0x30
 800a4e2:	e005      	b.n	800a4f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a4e4:	6978      	ldr	r0, [r7, #20]
 800a4e6:	f001 fdf7 	bl	800c0d8 <vPortFree>
 800a4ea:	e001      	b.n	800a4f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d017      	beq.n	800a526 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a4fe:	88fa      	ldrh	r2, [r7, #6]
 800a500:	2300      	movs	r3, #0
 800a502:	9303      	str	r3, [sp, #12]
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	9302      	str	r3, [sp, #8]
 800a508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 f80f 	bl	800a538 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a51a:	69f8      	ldr	r0, [r7, #28]
 800a51c:	f000 f8b4 	bl	800a688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a520:	2301      	movs	r3, #1
 800a522:	61bb      	str	r3, [r7, #24]
 800a524:	e002      	b.n	800a52c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a526:	f04f 33ff 	mov.w	r3, #4294967295
 800a52a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a52c:	69bb      	ldr	r3, [r7, #24]
	}
 800a52e:	4618      	mov	r0, r3
 800a530:	3720      	adds	r7, #32
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
	...

0800a538 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b088      	sub	sp, #32
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
 800a544:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a548:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	461a      	mov	r2, r3
 800a550:	21a5      	movs	r1, #165	@ 0xa5
 800a552:	f002 faa3 	bl	800ca9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a560:	3b01      	subs	r3, #1
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	f023 0307 	bic.w	r3, r3, #7
 800a56e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00b      	beq.n	800a592 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a57e:	f383 8811 	msr	BASEPRI, r3
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	617b      	str	r3, [r7, #20]
}
 800a58c:	bf00      	nop
 800a58e:	bf00      	nop
 800a590:	e7fd      	b.n	800a58e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d01f      	beq.n	800a5d8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a598:	2300      	movs	r3, #0
 800a59a:	61fb      	str	r3, [r7, #28]
 800a59c:	e012      	b.n	800a5c4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	7819      	ldrb	r1, [r3, #0]
 800a5a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	3334      	adds	r3, #52	@ 0x34
 800a5ae:	460a      	mov	r2, r1
 800a5b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d006      	beq.n	800a5cc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	61fb      	str	r3, [r7, #28]
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	2b0f      	cmp	r3, #15
 800a5c8:	d9e9      	bls.n	800a59e <prvInitialiseNewTask+0x66>
 800a5ca:	e000      	b.n	800a5ce <prvInitialiseNewTask+0x96>
			{
				break;
 800a5cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a5d6:	e003      	b.n	800a5e0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e2:	2b37      	cmp	r3, #55	@ 0x37
 800a5e4:	d901      	bls.n	800a5ea <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a5e6:	2337      	movs	r3, #55	@ 0x37
 800a5e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5f4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fe:	3304      	adds	r3, #4
 800a600:	4618      	mov	r0, r3
 800a602:	f7ff f8a7 	bl	8009754 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a608:	3318      	adds	r3, #24
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff f8a2 	bl	8009754 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a614:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a618:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a624:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a628:	2200      	movs	r2, #0
 800a62a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a630:	2200      	movs	r2, #0
 800a632:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a638:	3354      	adds	r3, #84	@ 0x54
 800a63a:	224c      	movs	r2, #76	@ 0x4c
 800a63c:	2100      	movs	r1, #0
 800a63e:	4618      	mov	r0, r3
 800a640:	f002 fa2c 	bl	800ca9c <memset>
 800a644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a646:	4a0d      	ldr	r2, [pc, #52]	@ (800a67c <prvInitialiseNewTask+0x144>)
 800a648:	659a      	str	r2, [r3, #88]	@ 0x58
 800a64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64c:	4a0c      	ldr	r2, [pc, #48]	@ (800a680 <prvInitialiseNewTask+0x148>)
 800a64e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a652:	4a0c      	ldr	r2, [pc, #48]	@ (800a684 <prvInitialiseNewTask+0x14c>)
 800a654:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	68f9      	ldr	r1, [r7, #12]
 800a65a:	69b8      	ldr	r0, [r7, #24]
 800a65c:	f001 fa1a 	bl	800ba94 <pxPortInitialiseStack>
 800a660:	4602      	mov	r2, r0
 800a662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a664:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a66e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a670:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a672:	bf00      	nop
 800a674:	3720      	adds	r7, #32
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	2000541c 	.word	0x2000541c
 800a680:	20005484 	.word	0x20005484
 800a684:	200054ec 	.word	0x200054ec

0800a688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a690:	f001 fb32 	bl	800bcf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a694:	4b2d      	ldr	r3, [pc, #180]	@ (800a74c <prvAddNewTaskToReadyList+0xc4>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	3301      	adds	r3, #1
 800a69a:	4a2c      	ldr	r2, [pc, #176]	@ (800a74c <prvAddNewTaskToReadyList+0xc4>)
 800a69c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a69e:	4b2c      	ldr	r3, [pc, #176]	@ (800a750 <prvAddNewTaskToReadyList+0xc8>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d109      	bne.n	800a6ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6a6:	4a2a      	ldr	r2, [pc, #168]	@ (800a750 <prvAddNewTaskToReadyList+0xc8>)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6ac:	4b27      	ldr	r3, [pc, #156]	@ (800a74c <prvAddNewTaskToReadyList+0xc4>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d110      	bne.n	800a6d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6b4:	f000 fc2e 	bl	800af14 <prvInitialiseTaskLists>
 800a6b8:	e00d      	b.n	800a6d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6ba:	4b26      	ldr	r3, [pc, #152]	@ (800a754 <prvAddNewTaskToReadyList+0xcc>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d109      	bne.n	800a6d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6c2:	4b23      	ldr	r3, [pc, #140]	@ (800a750 <prvAddNewTaskToReadyList+0xc8>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d802      	bhi.n	800a6d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6d0:	4a1f      	ldr	r2, [pc, #124]	@ (800a750 <prvAddNewTaskToReadyList+0xc8>)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6d6:	4b20      	ldr	r3, [pc, #128]	@ (800a758 <prvAddNewTaskToReadyList+0xd0>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	4a1e      	ldr	r2, [pc, #120]	@ (800a758 <prvAddNewTaskToReadyList+0xd0>)
 800a6de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a6e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a758 <prvAddNewTaskToReadyList+0xd0>)
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6ec:	4b1b      	ldr	r3, [pc, #108]	@ (800a75c <prvAddNewTaskToReadyList+0xd4>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d903      	bls.n	800a6fc <prvAddNewTaskToReadyList+0x74>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f8:	4a18      	ldr	r2, [pc, #96]	@ (800a75c <prvAddNewTaskToReadyList+0xd4>)
 800a6fa:	6013      	str	r3, [r2, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a700:	4613      	mov	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4413      	add	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4a15      	ldr	r2, [pc, #84]	@ (800a760 <prvAddNewTaskToReadyList+0xd8>)
 800a70a:	441a      	add	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	3304      	adds	r3, #4
 800a710:	4619      	mov	r1, r3
 800a712:	4610      	mov	r0, r2
 800a714:	f7ff f82b 	bl	800976e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a718:	f001 fb20 	bl	800bd5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a71c:	4b0d      	ldr	r3, [pc, #52]	@ (800a754 <prvAddNewTaskToReadyList+0xcc>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00e      	beq.n	800a742 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a724:	4b0a      	ldr	r3, [pc, #40]	@ (800a750 <prvAddNewTaskToReadyList+0xc8>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a72e:	429a      	cmp	r2, r3
 800a730:	d207      	bcs.n	800a742 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a732:	4b0c      	ldr	r3, [pc, #48]	@ (800a764 <prvAddNewTaskToReadyList+0xdc>)
 800a734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a742:	bf00      	nop
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	20000ecc 	.word	0x20000ecc
 800a750:	200009f8 	.word	0x200009f8
 800a754:	20000ed8 	.word	0x20000ed8
 800a758:	20000ee8 	.word	0x20000ee8
 800a75c:	20000ed4 	.word	0x20000ed4
 800a760:	200009fc 	.word	0x200009fc
 800a764:	e000ed04 	.word	0xe000ed04

0800a768 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a770:	2300      	movs	r3, #0
 800a772:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d018      	beq.n	800a7ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a77a:	4b14      	ldr	r3, [pc, #80]	@ (800a7cc <vTaskDelay+0x64>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00b      	beq.n	800a79a <vTaskDelay+0x32>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	60bb      	str	r3, [r7, #8]
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop
 800a798:	e7fd      	b.n	800a796 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a79a:	f000 f88b 	bl	800a8b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a79e:	2100      	movs	r1, #0
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fd09 	bl	800b1b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7a6:	f000 f893 	bl	800a8d0 <xTaskResumeAll>
 800a7aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d107      	bne.n	800a7c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a7b2:	4b07      	ldr	r3, [pc, #28]	@ (800a7d0 <vTaskDelay+0x68>)
 800a7b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7b8:	601a      	str	r2, [r3, #0]
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7c2:	bf00      	nop
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000ef4 	.word	0x20000ef4
 800a7d0:	e000ed04 	.word	0xe000ed04

0800a7d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08a      	sub	sp, #40	@ 0x28
 800a7d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a7e2:	463a      	mov	r2, r7
 800a7e4:	1d39      	adds	r1, r7, #4
 800a7e6:	f107 0308 	add.w	r3, r7, #8
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fe ff5e 	bl	80096ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	9202      	str	r2, [sp, #8]
 800a7f8:	9301      	str	r3, [sp, #4]
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	2300      	movs	r3, #0
 800a800:	460a      	mov	r2, r1
 800a802:	4924      	ldr	r1, [pc, #144]	@ (800a894 <vTaskStartScheduler+0xc0>)
 800a804:	4824      	ldr	r0, [pc, #144]	@ (800a898 <vTaskStartScheduler+0xc4>)
 800a806:	f7ff fdf1 	bl	800a3ec <xTaskCreateStatic>
 800a80a:	4603      	mov	r3, r0
 800a80c:	4a23      	ldr	r2, [pc, #140]	@ (800a89c <vTaskStartScheduler+0xc8>)
 800a80e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a810:	4b22      	ldr	r3, [pc, #136]	@ (800a89c <vTaskStartScheduler+0xc8>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d002      	beq.n	800a81e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a818:	2301      	movs	r3, #1
 800a81a:	617b      	str	r3, [r7, #20]
 800a81c:	e001      	b.n	800a822 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a81e:	2300      	movs	r3, #0
 800a820:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d102      	bne.n	800a82e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a828:	f000 fd1a 	bl	800b260 <xTimerCreateTimerTask>
 800a82c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	2b01      	cmp	r3, #1
 800a832:	d11b      	bne.n	800a86c <vTaskStartScheduler+0x98>
	__asm volatile
 800a834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	613b      	str	r3, [r7, #16]
}
 800a846:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a848:	4b15      	ldr	r3, [pc, #84]	@ (800a8a0 <vTaskStartScheduler+0xcc>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	3354      	adds	r3, #84	@ 0x54
 800a84e:	4a15      	ldr	r2, [pc, #84]	@ (800a8a4 <vTaskStartScheduler+0xd0>)
 800a850:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a852:	4b15      	ldr	r3, [pc, #84]	@ (800a8a8 <vTaskStartScheduler+0xd4>)
 800a854:	f04f 32ff 	mov.w	r2, #4294967295
 800a858:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a85a:	4b14      	ldr	r3, [pc, #80]	@ (800a8ac <vTaskStartScheduler+0xd8>)
 800a85c:	2201      	movs	r2, #1
 800a85e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a860:	4b13      	ldr	r3, [pc, #76]	@ (800a8b0 <vTaskStartScheduler+0xdc>)
 800a862:	2200      	movs	r2, #0
 800a864:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a866:	f001 f9a3 	bl	800bbb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a86a:	e00f      	b.n	800a88c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a872:	d10b      	bne.n	800a88c <vTaskStartScheduler+0xb8>
	__asm volatile
 800a874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a878:	f383 8811 	msr	BASEPRI, r3
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	60fb      	str	r3, [r7, #12]
}
 800a886:	bf00      	nop
 800a888:	bf00      	nop
 800a88a:	e7fd      	b.n	800a888 <vTaskStartScheduler+0xb4>
}
 800a88c:	bf00      	nop
 800a88e:	3718      	adds	r7, #24
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	0800ccf0 	.word	0x0800ccf0
 800a898:	0800aee5 	.word	0x0800aee5
 800a89c:	20000ef0 	.word	0x20000ef0
 800a8a0:	200009f8 	.word	0x200009f8
 800a8a4:	20000030 	.word	0x20000030
 800a8a8:	20000eec 	.word	0x20000eec
 800a8ac:	20000ed8 	.word	0x20000ed8
 800a8b0:	20000ed0 	.word	0x20000ed0

0800a8b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8b8:	4b04      	ldr	r3, [pc, #16]	@ (800a8cc <vTaskSuspendAll+0x18>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	4a03      	ldr	r2, [pc, #12]	@ (800a8cc <vTaskSuspendAll+0x18>)
 800a8c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a8c2:	bf00      	nop
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	20000ef4 	.word	0x20000ef4

0800a8d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a8de:	4b42      	ldr	r3, [pc, #264]	@ (800a9e8 <xTaskResumeAll+0x118>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10b      	bne.n	800a8fe <xTaskResumeAll+0x2e>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	603b      	str	r3, [r7, #0]
}
 800a8f8:	bf00      	nop
 800a8fa:	bf00      	nop
 800a8fc:	e7fd      	b.n	800a8fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a8fe:	f001 f9fb 	bl	800bcf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a902:	4b39      	ldr	r3, [pc, #228]	@ (800a9e8 <xTaskResumeAll+0x118>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	3b01      	subs	r3, #1
 800a908:	4a37      	ldr	r2, [pc, #220]	@ (800a9e8 <xTaskResumeAll+0x118>)
 800a90a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a90c:	4b36      	ldr	r3, [pc, #216]	@ (800a9e8 <xTaskResumeAll+0x118>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d162      	bne.n	800a9da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a914:	4b35      	ldr	r3, [pc, #212]	@ (800a9ec <xTaskResumeAll+0x11c>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d05e      	beq.n	800a9da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a91c:	e02f      	b.n	800a97e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a91e:	4b34      	ldr	r3, [pc, #208]	@ (800a9f0 <xTaskResumeAll+0x120>)
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	3318      	adds	r3, #24
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fe ff7c 	bl	8009828 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	3304      	adds	r3, #4
 800a934:	4618      	mov	r0, r3
 800a936:	f7fe ff77 	bl	8009828 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a93e:	4b2d      	ldr	r3, [pc, #180]	@ (800a9f4 <xTaskResumeAll+0x124>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	429a      	cmp	r2, r3
 800a944:	d903      	bls.n	800a94e <xTaskResumeAll+0x7e>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a94a:	4a2a      	ldr	r2, [pc, #168]	@ (800a9f4 <xTaskResumeAll+0x124>)
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a952:	4613      	mov	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	4413      	add	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4a27      	ldr	r2, [pc, #156]	@ (800a9f8 <xTaskResumeAll+0x128>)
 800a95c:	441a      	add	r2, r3
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3304      	adds	r3, #4
 800a962:	4619      	mov	r1, r3
 800a964:	4610      	mov	r0, r2
 800a966:	f7fe ff02 	bl	800976e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a96e:	4b23      	ldr	r3, [pc, #140]	@ (800a9fc <xTaskResumeAll+0x12c>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a974:	429a      	cmp	r2, r3
 800a976:	d302      	bcc.n	800a97e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a978:	4b21      	ldr	r3, [pc, #132]	@ (800aa00 <xTaskResumeAll+0x130>)
 800a97a:	2201      	movs	r2, #1
 800a97c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a97e:	4b1c      	ldr	r3, [pc, #112]	@ (800a9f0 <xTaskResumeAll+0x120>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1cb      	bne.n	800a91e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d001      	beq.n	800a990 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a98c:	f000 fb66 	bl	800b05c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a990:	4b1c      	ldr	r3, [pc, #112]	@ (800aa04 <xTaskResumeAll+0x134>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d010      	beq.n	800a9be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a99c:	f000 f846 	bl	800aa2c <xTaskIncrementTick>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d002      	beq.n	800a9ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a9a6:	4b16      	ldr	r3, [pc, #88]	@ (800aa00 <xTaskResumeAll+0x130>)
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1f1      	bne.n	800a99c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a9b8:	4b12      	ldr	r3, [pc, #72]	@ (800aa04 <xTaskResumeAll+0x134>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9be:	4b10      	ldr	r3, [pc, #64]	@ (800aa00 <xTaskResumeAll+0x130>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d009      	beq.n	800a9da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9ca:	4b0f      	ldr	r3, [pc, #60]	@ (800aa08 <xTaskResumeAll+0x138>)
 800a9cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9d0:	601a      	str	r2, [r3, #0]
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9da:	f001 f9bf 	bl	800bd5c <vPortExitCritical>

	return xAlreadyYielded;
 800a9de:	68bb      	ldr	r3, [r7, #8]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	20000ef4 	.word	0x20000ef4
 800a9ec:	20000ecc 	.word	0x20000ecc
 800a9f0:	20000e8c 	.word	0x20000e8c
 800a9f4:	20000ed4 	.word	0x20000ed4
 800a9f8:	200009fc 	.word	0x200009fc
 800a9fc:	200009f8 	.word	0x200009f8
 800aa00:	20000ee0 	.word	0x20000ee0
 800aa04:	20000edc 	.word	0x20000edc
 800aa08:	e000ed04 	.word	0xe000ed04

0800aa0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa12:	4b05      	ldr	r3, [pc, #20]	@ (800aa28 <xTaskGetTickCount+0x1c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa18:	687b      	ldr	r3, [r7, #4]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop
 800aa28:	20000ed0 	.word	0x20000ed0

0800aa2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa32:	2300      	movs	r3, #0
 800aa34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa36:	4b4f      	ldr	r3, [pc, #316]	@ (800ab74 <xTaskIncrementTick+0x148>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f040 8090 	bne.w	800ab60 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa40:	4b4d      	ldr	r3, [pc, #308]	@ (800ab78 <xTaskIncrementTick+0x14c>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	3301      	adds	r3, #1
 800aa46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa48:	4a4b      	ldr	r2, [pc, #300]	@ (800ab78 <xTaskIncrementTick+0x14c>)
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d121      	bne.n	800aa98 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa54:	4b49      	ldr	r3, [pc, #292]	@ (800ab7c <xTaskIncrementTick+0x150>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00b      	beq.n	800aa76 <xTaskIncrementTick+0x4a>
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	603b      	str	r3, [r7, #0]
}
 800aa70:	bf00      	nop
 800aa72:	bf00      	nop
 800aa74:	e7fd      	b.n	800aa72 <xTaskIncrementTick+0x46>
 800aa76:	4b41      	ldr	r3, [pc, #260]	@ (800ab7c <xTaskIncrementTick+0x150>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	60fb      	str	r3, [r7, #12]
 800aa7c:	4b40      	ldr	r3, [pc, #256]	@ (800ab80 <xTaskIncrementTick+0x154>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a3e      	ldr	r2, [pc, #248]	@ (800ab7c <xTaskIncrementTick+0x150>)
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	4a3e      	ldr	r2, [pc, #248]	@ (800ab80 <xTaskIncrementTick+0x154>)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	4b3e      	ldr	r3, [pc, #248]	@ (800ab84 <xTaskIncrementTick+0x158>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	4a3c      	ldr	r2, [pc, #240]	@ (800ab84 <xTaskIncrementTick+0x158>)
 800aa92:	6013      	str	r3, [r2, #0]
 800aa94:	f000 fae2 	bl	800b05c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa98:	4b3b      	ldr	r3, [pc, #236]	@ (800ab88 <xTaskIncrementTick+0x15c>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d349      	bcc.n	800ab36 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aaa2:	4b36      	ldr	r3, [pc, #216]	@ (800ab7c <xTaskIncrementTick+0x150>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d104      	bne.n	800aab6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaac:	4b36      	ldr	r3, [pc, #216]	@ (800ab88 <xTaskIncrementTick+0x15c>)
 800aaae:	f04f 32ff 	mov.w	r2, #4294967295
 800aab2:	601a      	str	r2, [r3, #0]
					break;
 800aab4:	e03f      	b.n	800ab36 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aab6:	4b31      	ldr	r3, [pc, #196]	@ (800ab7c <xTaskIncrementTick+0x150>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d203      	bcs.n	800aad6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aace:	4a2e      	ldr	r2, [pc, #184]	@ (800ab88 <xTaskIncrementTick+0x15c>)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aad4:	e02f      	b.n	800ab36 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	3304      	adds	r3, #4
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fe fea4 	bl	8009828 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d004      	beq.n	800aaf2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	3318      	adds	r3, #24
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fe fe9b 	bl	8009828 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaf6:	4b25      	ldr	r3, [pc, #148]	@ (800ab8c <xTaskIncrementTick+0x160>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d903      	bls.n	800ab06 <xTaskIncrementTick+0xda>
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab02:	4a22      	ldr	r2, [pc, #136]	@ (800ab8c <xTaskIncrementTick+0x160>)
 800ab04:	6013      	str	r3, [r2, #0]
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	4413      	add	r3, r2
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	4a1f      	ldr	r2, [pc, #124]	@ (800ab90 <xTaskIncrementTick+0x164>)
 800ab14:	441a      	add	r2, r3
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	3304      	adds	r3, #4
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	f7fe fe26 	bl	800976e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab26:	4b1b      	ldr	r3, [pc, #108]	@ (800ab94 <xTaskIncrementTick+0x168>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d3b8      	bcc.n	800aaa2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ab30:	2301      	movs	r3, #1
 800ab32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab34:	e7b5      	b.n	800aaa2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab36:	4b17      	ldr	r3, [pc, #92]	@ (800ab94 <xTaskIncrementTick+0x168>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab3c:	4914      	ldr	r1, [pc, #80]	@ (800ab90 <xTaskIncrementTick+0x164>)
 800ab3e:	4613      	mov	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4413      	add	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	440b      	add	r3, r1
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d901      	bls.n	800ab52 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab52:	4b11      	ldr	r3, [pc, #68]	@ (800ab98 <xTaskIncrementTick+0x16c>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d007      	beq.n	800ab6a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	617b      	str	r3, [r7, #20]
 800ab5e:	e004      	b.n	800ab6a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab60:	4b0e      	ldr	r3, [pc, #56]	@ (800ab9c <xTaskIncrementTick+0x170>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	3301      	adds	r3, #1
 800ab66:	4a0d      	ldr	r2, [pc, #52]	@ (800ab9c <xTaskIncrementTick+0x170>)
 800ab68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab6a:	697b      	ldr	r3, [r7, #20]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3718      	adds	r7, #24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	20000ef4 	.word	0x20000ef4
 800ab78:	20000ed0 	.word	0x20000ed0
 800ab7c:	20000e84 	.word	0x20000e84
 800ab80:	20000e88 	.word	0x20000e88
 800ab84:	20000ee4 	.word	0x20000ee4
 800ab88:	20000eec 	.word	0x20000eec
 800ab8c:	20000ed4 	.word	0x20000ed4
 800ab90:	200009fc 	.word	0x200009fc
 800ab94:	200009f8 	.word	0x200009f8
 800ab98:	20000ee0 	.word	0x20000ee0
 800ab9c:	20000edc 	.word	0x20000edc

0800aba0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aba6:	4b2b      	ldr	r3, [pc, #172]	@ (800ac54 <vTaskSwitchContext+0xb4>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d003      	beq.n	800abb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abae:	4b2a      	ldr	r3, [pc, #168]	@ (800ac58 <vTaskSwitchContext+0xb8>)
 800abb0:	2201      	movs	r2, #1
 800abb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abb4:	e047      	b.n	800ac46 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800abb6:	4b28      	ldr	r3, [pc, #160]	@ (800ac58 <vTaskSwitchContext+0xb8>)
 800abb8:	2200      	movs	r2, #0
 800abba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abbc:	4b27      	ldr	r3, [pc, #156]	@ (800ac5c <vTaskSwitchContext+0xbc>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	60fb      	str	r3, [r7, #12]
 800abc2:	e011      	b.n	800abe8 <vTaskSwitchContext+0x48>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d10b      	bne.n	800abe2 <vTaskSwitchContext+0x42>
	__asm volatile
 800abca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	607b      	str	r3, [r7, #4]
}
 800abdc:	bf00      	nop
 800abde:	bf00      	nop
 800abe0:	e7fd      	b.n	800abde <vTaskSwitchContext+0x3e>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	3b01      	subs	r3, #1
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	491d      	ldr	r1, [pc, #116]	@ (800ac60 <vTaskSwitchContext+0xc0>)
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4613      	mov	r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4413      	add	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	440b      	add	r3, r1
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d0e3      	beq.n	800abc4 <vTaskSwitchContext+0x24>
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	4613      	mov	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4413      	add	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4a16      	ldr	r2, [pc, #88]	@ (800ac60 <vTaskSwitchContext+0xc0>)
 800ac08:	4413      	add	r3, r2
 800ac0a:	60bb      	str	r3, [r7, #8]
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	605a      	str	r2, [r3, #4]
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	3308      	adds	r3, #8
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d104      	bne.n	800ac2c <vTaskSwitchContext+0x8c>
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	685a      	ldr	r2, [r3, #4]
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	605a      	str	r2, [r3, #4]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	4a0c      	ldr	r2, [pc, #48]	@ (800ac64 <vTaskSwitchContext+0xc4>)
 800ac34:	6013      	str	r3, [r2, #0]
 800ac36:	4a09      	ldr	r2, [pc, #36]	@ (800ac5c <vTaskSwitchContext+0xbc>)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac3c:	4b09      	ldr	r3, [pc, #36]	@ (800ac64 <vTaskSwitchContext+0xc4>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	3354      	adds	r3, #84	@ 0x54
 800ac42:	4a09      	ldr	r2, [pc, #36]	@ (800ac68 <vTaskSwitchContext+0xc8>)
 800ac44:	6013      	str	r3, [r2, #0]
}
 800ac46:	bf00      	nop
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	20000ef4 	.word	0x20000ef4
 800ac58:	20000ee0 	.word	0x20000ee0
 800ac5c:	20000ed4 	.word	0x20000ed4
 800ac60:	200009fc 	.word	0x200009fc
 800ac64:	200009f8 	.word	0x200009f8
 800ac68:	20000030 	.word	0x20000030

0800ac6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10b      	bne.n	800ac94 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	60fb      	str	r3, [r7, #12]
}
 800ac8e:	bf00      	nop
 800ac90:	bf00      	nop
 800ac92:	e7fd      	b.n	800ac90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac94:	4b07      	ldr	r3, [pc, #28]	@ (800acb4 <vTaskPlaceOnEventList+0x48>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	3318      	adds	r3, #24
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7fe fd8a 	bl	80097b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aca2:	2101      	movs	r1, #1
 800aca4:	6838      	ldr	r0, [r7, #0]
 800aca6:	f000 fa87 	bl	800b1b8 <prvAddCurrentTaskToDelayedList>
}
 800acaa:	bf00      	nop
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	200009f8 	.word	0x200009f8

0800acb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10b      	bne.n	800ace2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	617b      	str	r3, [r7, #20]
}
 800acdc:	bf00      	nop
 800acde:	bf00      	nop
 800ace0:	e7fd      	b.n	800acde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ace2:	4b0a      	ldr	r3, [pc, #40]	@ (800ad0c <vTaskPlaceOnEventListRestricted+0x54>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3318      	adds	r3, #24
 800ace8:	4619      	mov	r1, r3
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f7fe fd3f 	bl	800976e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d002      	beq.n	800acfc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800acf6:	f04f 33ff 	mov.w	r3, #4294967295
 800acfa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800acfc:	6879      	ldr	r1, [r7, #4]
 800acfe:	68b8      	ldr	r0, [r7, #8]
 800ad00:	f000 fa5a 	bl	800b1b8 <prvAddCurrentTaskToDelayedList>
	}
 800ad04:	bf00      	nop
 800ad06:	3718      	adds	r7, #24
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	200009f8 	.word	0x200009f8

0800ad10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10b      	bne.n	800ad3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ad26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	60fb      	str	r3, [r7, #12]
}
 800ad38:	bf00      	nop
 800ad3a:	bf00      	nop
 800ad3c:	e7fd      	b.n	800ad3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	3318      	adds	r3, #24
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fe fd70 	bl	8009828 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad48:	4b1d      	ldr	r3, [pc, #116]	@ (800adc0 <xTaskRemoveFromEventList+0xb0>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d11d      	bne.n	800ad8c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	3304      	adds	r3, #4
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7fe fd67 	bl	8009828 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad5e:	4b19      	ldr	r3, [pc, #100]	@ (800adc4 <xTaskRemoveFromEventList+0xb4>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d903      	bls.n	800ad6e <xTaskRemoveFromEventList+0x5e>
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6a:	4a16      	ldr	r2, [pc, #88]	@ (800adc4 <xTaskRemoveFromEventList+0xb4>)
 800ad6c:	6013      	str	r3, [r2, #0]
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad72:	4613      	mov	r3, r2
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	4413      	add	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4a13      	ldr	r2, [pc, #76]	@ (800adc8 <xTaskRemoveFromEventList+0xb8>)
 800ad7c:	441a      	add	r2, r3
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	3304      	adds	r3, #4
 800ad82:	4619      	mov	r1, r3
 800ad84:	4610      	mov	r0, r2
 800ad86:	f7fe fcf2 	bl	800976e <vListInsertEnd>
 800ad8a:	e005      	b.n	800ad98 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	3318      	adds	r3, #24
 800ad90:	4619      	mov	r1, r3
 800ad92:	480e      	ldr	r0, [pc, #56]	@ (800adcc <xTaskRemoveFromEventList+0xbc>)
 800ad94:	f7fe fceb 	bl	800976e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad9c:	4b0c      	ldr	r3, [pc, #48]	@ (800add0 <xTaskRemoveFromEventList+0xc0>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d905      	bls.n	800adb2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ada6:	2301      	movs	r3, #1
 800ada8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800adaa:	4b0a      	ldr	r3, [pc, #40]	@ (800add4 <xTaskRemoveFromEventList+0xc4>)
 800adac:	2201      	movs	r2, #1
 800adae:	601a      	str	r2, [r3, #0]
 800adb0:	e001      	b.n	800adb6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800adb2:	2300      	movs	r3, #0
 800adb4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800adb6:	697b      	ldr	r3, [r7, #20]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3718      	adds	r7, #24
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	20000ef4 	.word	0x20000ef4
 800adc4:	20000ed4 	.word	0x20000ed4
 800adc8:	200009fc 	.word	0x200009fc
 800adcc:	20000e8c 	.word	0x20000e8c
 800add0:	200009f8 	.word	0x200009f8
 800add4:	20000ee0 	.word	0x20000ee0

0800add8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ade0:	4b06      	ldr	r3, [pc, #24]	@ (800adfc <vTaskInternalSetTimeOutState+0x24>)
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ade8:	4b05      	ldr	r3, [pc, #20]	@ (800ae00 <vTaskInternalSetTimeOutState+0x28>)
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	605a      	str	r2, [r3, #4]
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr
 800adfc:	20000ee4 	.word	0x20000ee4
 800ae00:	20000ed0 	.word	0x20000ed0

0800ae04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b088      	sub	sp, #32
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10b      	bne.n	800ae2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	613b      	str	r3, [r7, #16]
}
 800ae26:	bf00      	nop
 800ae28:	bf00      	nop
 800ae2a:	e7fd      	b.n	800ae28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10b      	bne.n	800ae4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ae32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae36:	f383 8811 	msr	BASEPRI, r3
 800ae3a:	f3bf 8f6f 	isb	sy
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	60fb      	str	r3, [r7, #12]
}
 800ae44:	bf00      	nop
 800ae46:	bf00      	nop
 800ae48:	e7fd      	b.n	800ae46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ae4a:	f000 ff55 	bl	800bcf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae4e:	4b1d      	ldr	r3, [pc, #116]	@ (800aec4 <xTaskCheckForTimeOut+0xc0>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	69ba      	ldr	r2, [r7, #24]
 800ae5a:	1ad3      	subs	r3, r2, r3
 800ae5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae66:	d102      	bne.n	800ae6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	61fb      	str	r3, [r7, #28]
 800ae6c:	e023      	b.n	800aeb6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	4b15      	ldr	r3, [pc, #84]	@ (800aec8 <xTaskCheckForTimeOut+0xc4>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d007      	beq.n	800ae8a <xTaskCheckForTimeOut+0x86>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	69ba      	ldr	r2, [r7, #24]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d302      	bcc.n	800ae8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae84:	2301      	movs	r3, #1
 800ae86:	61fb      	str	r3, [r7, #28]
 800ae88:	e015      	b.n	800aeb6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	697a      	ldr	r2, [r7, #20]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d20b      	bcs.n	800aeac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	1ad2      	subs	r2, r2, r3
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f7ff ff99 	bl	800add8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aea6:	2300      	movs	r3, #0
 800aea8:	61fb      	str	r3, [r7, #28]
 800aeaa:	e004      	b.n	800aeb6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aeb6:	f000 ff51 	bl	800bd5c <vPortExitCritical>

	return xReturn;
 800aeba:	69fb      	ldr	r3, [r7, #28]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3720      	adds	r7, #32
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	20000ed0 	.word	0x20000ed0
 800aec8:	20000ee4 	.word	0x20000ee4

0800aecc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aecc:	b480      	push	{r7}
 800aece:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aed0:	4b03      	ldr	r3, [pc, #12]	@ (800aee0 <vTaskMissedYield+0x14>)
 800aed2:	2201      	movs	r2, #1
 800aed4:	601a      	str	r2, [r3, #0]
}
 800aed6:	bf00      	nop
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr
 800aee0:	20000ee0 	.word	0x20000ee0

0800aee4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aeec:	f000 f852 	bl	800af94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aef0:	4b06      	ldr	r3, [pc, #24]	@ (800af0c <prvIdleTask+0x28>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d9f9      	bls.n	800aeec <prvIdleTask+0x8>
			{
				taskYIELD();
 800aef8:	4b05      	ldr	r3, [pc, #20]	@ (800af10 <prvIdleTask+0x2c>)
 800aefa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aefe:	601a      	str	r2, [r3, #0]
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af08:	e7f0      	b.n	800aeec <prvIdleTask+0x8>
 800af0a:	bf00      	nop
 800af0c:	200009fc 	.word	0x200009fc
 800af10:	e000ed04 	.word	0xe000ed04

0800af14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af1a:	2300      	movs	r3, #0
 800af1c:	607b      	str	r3, [r7, #4]
 800af1e:	e00c      	b.n	800af3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	4613      	mov	r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	4413      	add	r3, r2
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	4a12      	ldr	r2, [pc, #72]	@ (800af74 <prvInitialiseTaskLists+0x60>)
 800af2c:	4413      	add	r3, r2
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fe fbf0 	bl	8009714 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	3301      	adds	r3, #1
 800af38:	607b      	str	r3, [r7, #4]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b37      	cmp	r3, #55	@ 0x37
 800af3e:	d9ef      	bls.n	800af20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af40:	480d      	ldr	r0, [pc, #52]	@ (800af78 <prvInitialiseTaskLists+0x64>)
 800af42:	f7fe fbe7 	bl	8009714 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af46:	480d      	ldr	r0, [pc, #52]	@ (800af7c <prvInitialiseTaskLists+0x68>)
 800af48:	f7fe fbe4 	bl	8009714 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af4c:	480c      	ldr	r0, [pc, #48]	@ (800af80 <prvInitialiseTaskLists+0x6c>)
 800af4e:	f7fe fbe1 	bl	8009714 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af52:	480c      	ldr	r0, [pc, #48]	@ (800af84 <prvInitialiseTaskLists+0x70>)
 800af54:	f7fe fbde 	bl	8009714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af58:	480b      	ldr	r0, [pc, #44]	@ (800af88 <prvInitialiseTaskLists+0x74>)
 800af5a:	f7fe fbdb 	bl	8009714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af5e:	4b0b      	ldr	r3, [pc, #44]	@ (800af8c <prvInitialiseTaskLists+0x78>)
 800af60:	4a05      	ldr	r2, [pc, #20]	@ (800af78 <prvInitialiseTaskLists+0x64>)
 800af62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af64:	4b0a      	ldr	r3, [pc, #40]	@ (800af90 <prvInitialiseTaskLists+0x7c>)
 800af66:	4a05      	ldr	r2, [pc, #20]	@ (800af7c <prvInitialiseTaskLists+0x68>)
 800af68:	601a      	str	r2, [r3, #0]
}
 800af6a:	bf00      	nop
 800af6c:	3708      	adds	r7, #8
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	200009fc 	.word	0x200009fc
 800af78:	20000e5c 	.word	0x20000e5c
 800af7c:	20000e70 	.word	0x20000e70
 800af80:	20000e8c 	.word	0x20000e8c
 800af84:	20000ea0 	.word	0x20000ea0
 800af88:	20000eb8 	.word	0x20000eb8
 800af8c:	20000e84 	.word	0x20000e84
 800af90:	20000e88 	.word	0x20000e88

0800af94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */

	while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af9a:	e019      	b.n	800afd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800af9c:	f000 feac 	bl	800bcf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afa0:	4b10      	ldr	r3, [pc, #64]	@ (800afe4 <prvCheckTasksWaitingTermination+0x50>)
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	3304      	adds	r3, #4
 800afac:	4618      	mov	r0, r3
 800afae:	f7fe fc3b 	bl	8009828 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800afb2:	4b0d      	ldr	r3, [pc, #52]	@ (800afe8 <prvCheckTasksWaitingTermination+0x54>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	3b01      	subs	r3, #1
 800afb8:	4a0b      	ldr	r2, [pc, #44]	@ (800afe8 <prvCheckTasksWaitingTermination+0x54>)
 800afba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800afbc:	4b0b      	ldr	r3, [pc, #44]	@ (800afec <prvCheckTasksWaitingTermination+0x58>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	3b01      	subs	r3, #1
 800afc2:	4a0a      	ldr	r2, [pc, #40]	@ (800afec <prvCheckTasksWaitingTermination+0x58>)
 800afc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800afc6:	f000 fec9 	bl	800bd5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 f810 	bl	800aff0 <prvDeleteTCB>
	while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afd0:	4b06      	ldr	r3, [pc, #24]	@ (800afec <prvCheckTasksWaitingTermination+0x58>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d1e1      	bne.n	800af9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800afd8:	bf00      	nop
 800afda:	bf00      	nop
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	20000ea0 	.word	0x20000ea0
 800afe8:	20000ecc 	.word	0x20000ecc
 800afec:	20000eb4 	.word	0x20000eb4

0800aff0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	3354      	adds	r3, #84	@ 0x54
 800affc:	4618      	mov	r0, r3
 800affe:	f001 fd55 	bl	800caac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d108      	bne.n	800b01e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b010:	4618      	mov	r0, r3
 800b012:	f001 f861 	bl	800c0d8 <vPortFree>
				vPortFree( pxTCB );
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f001 f85e 	bl	800c0d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b01c:	e019      	b.n	800b052 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b024:	2b01      	cmp	r3, #1
 800b026:	d103      	bne.n	800b030 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f001 f855 	bl	800c0d8 <vPortFree>
	}
 800b02e:	e010      	b.n	800b052 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b036:	2b02      	cmp	r3, #2
 800b038:	d00b      	beq.n	800b052 <prvDeleteTCB+0x62>
	__asm volatile
 800b03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b03e:	f383 8811 	msr	BASEPRI, r3
 800b042:	f3bf 8f6f 	isb	sy
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	60fb      	str	r3, [r7, #12]
}
 800b04c:	bf00      	nop
 800b04e:	bf00      	nop
 800b050:	e7fd      	b.n	800b04e <prvDeleteTCB+0x5e>
	}
 800b052:	bf00      	nop
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
	...

0800b05c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b062:	4b0c      	ldr	r3, [pc, #48]	@ (800b094 <prvResetNextTaskUnblockTime+0x38>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d104      	bne.n	800b076 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b06c:	4b0a      	ldr	r3, [pc, #40]	@ (800b098 <prvResetNextTaskUnblockTime+0x3c>)
 800b06e:	f04f 32ff 	mov.w	r2, #4294967295
 800b072:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b074:	e008      	b.n	800b088 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b076:	4b07      	ldr	r3, [pc, #28]	@ (800b094 <prvResetNextTaskUnblockTime+0x38>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	4a04      	ldr	r2, [pc, #16]	@ (800b098 <prvResetNextTaskUnblockTime+0x3c>)
 800b086:	6013      	str	r3, [r2, #0]
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr
 800b094:	20000e84 	.word	0x20000e84
 800b098:	20000eec 	.word	0x20000eec

0800b09c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0a2:	4b0b      	ldr	r3, [pc, #44]	@ (800b0d0 <xTaskGetSchedulerState+0x34>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d102      	bne.n	800b0b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	607b      	str	r3, [r7, #4]
 800b0ae:	e008      	b.n	800b0c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0b0:	4b08      	ldr	r3, [pc, #32]	@ (800b0d4 <xTaskGetSchedulerState+0x38>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d102      	bne.n	800b0be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	607b      	str	r3, [r7, #4]
 800b0bc:	e001      	b.n	800b0c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b0c2:	687b      	ldr	r3, [r7, #4]
	}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr
 800b0d0:	20000ed8 	.word	0x20000ed8
 800b0d4:	20000ef4 	.word	0x20000ef4

0800b0d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d058      	beq.n	800b1a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0ee:	4b2f      	ldr	r3, [pc, #188]	@ (800b1ac <xTaskPriorityDisinherit+0xd4>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d00b      	beq.n	800b110 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0fc:	f383 8811 	msr	BASEPRI, r3
 800b100:	f3bf 8f6f 	isb	sy
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	60fb      	str	r3, [r7, #12]
}
 800b10a:	bf00      	nop
 800b10c:	bf00      	nop
 800b10e:	e7fd      	b.n	800b10c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b114:	2b00      	cmp	r3, #0
 800b116:	d10b      	bne.n	800b130 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b11c:	f383 8811 	msr	BASEPRI, r3
 800b120:	f3bf 8f6f 	isb	sy
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	60bb      	str	r3, [r7, #8]
}
 800b12a:	bf00      	nop
 800b12c:	bf00      	nop
 800b12e:	e7fd      	b.n	800b12c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b134:	1e5a      	subs	r2, r3, #1
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b142:	429a      	cmp	r2, r3
 800b144:	d02c      	beq.n	800b1a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d128      	bne.n	800b1a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	3304      	adds	r3, #4
 800b152:	4618      	mov	r0, r3
 800b154:	f7fe fb68 	bl	8009828 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b164:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b170:	4b0f      	ldr	r3, [pc, #60]	@ (800b1b0 <xTaskPriorityDisinherit+0xd8>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	429a      	cmp	r2, r3
 800b176:	d903      	bls.n	800b180 <xTaskPriorityDisinherit+0xa8>
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b17c:	4a0c      	ldr	r2, [pc, #48]	@ (800b1b0 <xTaskPriorityDisinherit+0xd8>)
 800b17e:	6013      	str	r3, [r2, #0]
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b184:	4613      	mov	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4413      	add	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4a09      	ldr	r2, [pc, #36]	@ (800b1b4 <xTaskPriorityDisinherit+0xdc>)
 800b18e:	441a      	add	r2, r3
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	3304      	adds	r3, #4
 800b194:	4619      	mov	r1, r3
 800b196:	4610      	mov	r0, r2
 800b198:	f7fe fae9 	bl	800976e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b19c:	2301      	movs	r3, #1
 800b19e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1a0:	697b      	ldr	r3, [r7, #20]
	}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3718      	adds	r7, #24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	200009f8 	.word	0x200009f8
 800b1b0:	20000ed4 	.word	0x20000ed4
 800b1b4:	200009fc 	.word	0x200009fc

0800b1b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b1c2:	4b21      	ldr	r3, [pc, #132]	@ (800b248 <prvAddCurrentTaskToDelayedList+0x90>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1c8:	4b20      	ldr	r3, [pc, #128]	@ (800b24c <prvAddCurrentTaskToDelayedList+0x94>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7fe fb2a 	bl	8009828 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1da:	d10a      	bne.n	800b1f2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d007      	beq.n	800b1f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1e2:	4b1a      	ldr	r3, [pc, #104]	@ (800b24c <prvAddCurrentTaskToDelayedList+0x94>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	4819      	ldr	r0, [pc, #100]	@ (800b250 <prvAddCurrentTaskToDelayedList+0x98>)
 800b1ec:	f7fe fabf 	bl	800976e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1f0:	e026      	b.n	800b240 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1fa:	4b14      	ldr	r3, [pc, #80]	@ (800b24c <prvAddCurrentTaskToDelayedList+0x94>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	429a      	cmp	r2, r3
 800b208:	d209      	bcs.n	800b21e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b20a:	4b12      	ldr	r3, [pc, #72]	@ (800b254 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	4b0f      	ldr	r3, [pc, #60]	@ (800b24c <prvAddCurrentTaskToDelayedList+0x94>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	3304      	adds	r3, #4
 800b214:	4619      	mov	r1, r3
 800b216:	4610      	mov	r0, r2
 800b218:	f7fe facd 	bl	80097b6 <vListInsert>
}
 800b21c:	e010      	b.n	800b240 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b21e:	4b0e      	ldr	r3, [pc, #56]	@ (800b258 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	4b0a      	ldr	r3, [pc, #40]	@ (800b24c <prvAddCurrentTaskToDelayedList+0x94>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	3304      	adds	r3, #4
 800b228:	4619      	mov	r1, r3
 800b22a:	4610      	mov	r0, r2
 800b22c:	f7fe fac3 	bl	80097b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b230:	4b0a      	ldr	r3, [pc, #40]	@ (800b25c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	429a      	cmp	r2, r3
 800b238:	d202      	bcs.n	800b240 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b23a:	4a08      	ldr	r2, [pc, #32]	@ (800b25c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	6013      	str	r3, [r2, #0]
}
 800b240:	bf00      	nop
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	20000ed0 	.word	0x20000ed0
 800b24c:	200009f8 	.word	0x200009f8
 800b250:	20000eb8 	.word	0x20000eb8
 800b254:	20000e88 	.word	0x20000e88
 800b258:	20000e84 	.word	0x20000e84
 800b25c:	20000eec 	.word	0x20000eec

0800b260 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b08a      	sub	sp, #40	@ 0x28
 800b264:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b266:	2300      	movs	r3, #0
 800b268:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b26a:	f000 fbb1 	bl	800b9d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b26e:	4b1d      	ldr	r3, [pc, #116]	@ (800b2e4 <xTimerCreateTimerTask+0x84>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d021      	beq.n	800b2ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b276:	2300      	movs	r3, #0
 800b278:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b27a:	2300      	movs	r3, #0
 800b27c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b27e:	1d3a      	adds	r2, r7, #4
 800b280:	f107 0108 	add.w	r1, r7, #8
 800b284:	f107 030c 	add.w	r3, r7, #12
 800b288:	4618      	mov	r0, r3
 800b28a:	f7fe fa29 	bl	80096e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	9202      	str	r2, [sp, #8]
 800b296:	9301      	str	r3, [sp, #4]
 800b298:	2302      	movs	r3, #2
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	2300      	movs	r3, #0
 800b29e:	460a      	mov	r2, r1
 800b2a0:	4911      	ldr	r1, [pc, #68]	@ (800b2e8 <xTimerCreateTimerTask+0x88>)
 800b2a2:	4812      	ldr	r0, [pc, #72]	@ (800b2ec <xTimerCreateTimerTask+0x8c>)
 800b2a4:	f7ff f8a2 	bl	800a3ec <xTaskCreateStatic>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	4a11      	ldr	r2, [pc, #68]	@ (800b2f0 <xTimerCreateTimerTask+0x90>)
 800b2ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b2ae:	4b10      	ldr	r3, [pc, #64]	@ (800b2f0 <xTimerCreateTimerTask+0x90>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10b      	bne.n	800b2d8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	613b      	str	r3, [r7, #16]
}
 800b2d2:	bf00      	nop
 800b2d4:	bf00      	nop
 800b2d6:	e7fd      	b.n	800b2d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b2d8:	697b      	ldr	r3, [r7, #20]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3718      	adds	r7, #24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20000f28 	.word	0x20000f28
 800b2e8:	0800ccf8 	.word	0x0800ccf8
 800b2ec:	0800b569 	.word	0x0800b569
 800b2f0:	20000f2c 	.word	0x20000f2c

0800b2f4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b088      	sub	sp, #32
 800b2f8:	af02      	add	r7, sp, #8
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
 800b300:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b302:	202c      	movs	r0, #44	@ 0x2c
 800b304:	f000 fe1a 	bl	800bf3c <pvPortMalloc>
 800b308:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d00d      	beq.n	800b32c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2200      	movs	r2, #0
 800b314:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	9301      	str	r3, [sp, #4]
 800b31c:	6a3b      	ldr	r3, [r7, #32]
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	68b9      	ldr	r1, [r7, #8]
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f000 f845 	bl	800b3b6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b32c:	697b      	ldr	r3, [r7, #20]
	}
 800b32e:	4618      	mov	r0, r3
 800b330:	3718      	adds	r7, #24
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b336:	b580      	push	{r7, lr}
 800b338:	b08a      	sub	sp, #40	@ 0x28
 800b33a:	af02      	add	r7, sp, #8
 800b33c:	60f8      	str	r0, [r7, #12]
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	607a      	str	r2, [r7, #4]
 800b342:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b344:	232c      	movs	r3, #44	@ 0x2c
 800b346:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	2b2c      	cmp	r3, #44	@ 0x2c
 800b34c:	d00b      	beq.n	800b366 <xTimerCreateStatic+0x30>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	61bb      	str	r3, [r7, #24]
}
 800b360:	bf00      	nop
 800b362:	bf00      	nop
 800b364:	e7fd      	b.n	800b362 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b366:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d10b      	bne.n	800b386 <xTimerCreateStatic+0x50>
	__asm volatile
 800b36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b372:	f383 8811 	msr	BASEPRI, r3
 800b376:	f3bf 8f6f 	isb	sy
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	617b      	str	r3, [r7, #20]
}
 800b380:	bf00      	nop
 800b382:	bf00      	nop
 800b384:	e7fd      	b.n	800b382 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b388:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00d      	beq.n	800b3ac <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	2202      	movs	r2, #2
 800b394:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	9301      	str	r3, [sp, #4]
 800b39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	68b9      	ldr	r1, [r7, #8]
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f000 f805 	bl	800b3b6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b3ac:	69fb      	ldr	r3, [r7, #28]
	}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3720      	adds	r7, #32
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b086      	sub	sp, #24
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	60f8      	str	r0, [r7, #12]
 800b3be:	60b9      	str	r1, [r7, #8]
 800b3c0:	607a      	str	r2, [r7, #4]
 800b3c2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d10b      	bne.n	800b3e2 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	617b      	str	r3, [r7, #20]
}
 800b3dc:	bf00      	nop
 800b3de:	bf00      	nop
 800b3e0:	e7fd      	b.n	800b3de <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d01e      	beq.n	800b426 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b3e8:	f000 faf2 	bl	800b9d0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fa:	683a      	ldr	r2, [r7, #0]
 800b3fc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b400:	6a3a      	ldr	r2, [r7, #32]
 800b402:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b406:	3304      	adds	r3, #4
 800b408:	4618      	mov	r0, r3
 800b40a:	f7fe f9a3 	bl	8009754 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d008      	beq.n	800b426 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b41a:	f043 0304 	orr.w	r3, r3, #4
 800b41e:	b2da      	uxtb	r2, r3
 800b420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b422:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b426:	bf00      	nop
 800b428:	3718      	adds	r7, #24
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
	...

0800b430 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b08a      	sub	sp, #40	@ 0x28
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
 800b43c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b43e:	2300      	movs	r3, #0
 800b440:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d10b      	bne.n	800b460 <xTimerGenericCommand+0x30>
	__asm volatile
 800b448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b44c:	f383 8811 	msr	BASEPRI, r3
 800b450:	f3bf 8f6f 	isb	sy
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	623b      	str	r3, [r7, #32]
}
 800b45a:	bf00      	nop
 800b45c:	bf00      	nop
 800b45e:	e7fd      	b.n	800b45c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b460:	4b19      	ldr	r3, [pc, #100]	@ (800b4c8 <xTimerGenericCommand+0x98>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d02a      	beq.n	800b4be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	2b05      	cmp	r3, #5
 800b478:	dc18      	bgt.n	800b4ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b47a:	f7ff fe0f 	bl	800b09c <xTaskGetSchedulerState>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b02      	cmp	r3, #2
 800b482:	d109      	bne.n	800b498 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b484:	4b10      	ldr	r3, [pc, #64]	@ (800b4c8 <xTimerGenericCommand+0x98>)
 800b486:	6818      	ldr	r0, [r3, #0]
 800b488:	f107 0110 	add.w	r1, r7, #16
 800b48c:	2300      	movs	r3, #0
 800b48e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b490:	f7fe fb3a 	bl	8009b08 <xQueueGenericSend>
 800b494:	6278      	str	r0, [r7, #36]	@ 0x24
 800b496:	e012      	b.n	800b4be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b498:	4b0b      	ldr	r3, [pc, #44]	@ (800b4c8 <xTimerGenericCommand+0x98>)
 800b49a:	6818      	ldr	r0, [r3, #0]
 800b49c:	f107 0110 	add.w	r1, r7, #16
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f7fe fb30 	bl	8009b08 <xQueueGenericSend>
 800b4a8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b4aa:	e008      	b.n	800b4be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b4ac:	4b06      	ldr	r3, [pc, #24]	@ (800b4c8 <xTimerGenericCommand+0x98>)
 800b4ae:	6818      	ldr	r0, [r3, #0]
 800b4b0:	f107 0110 	add.w	r1, r7, #16
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	f7fe fc28 	bl	8009d0c <xQueueGenericSendFromISR>
 800b4bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3728      	adds	r7, #40	@ 0x28
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	20000f28 	.word	0x20000f28

0800b4cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b088      	sub	sp, #32
 800b4d0:	af02      	add	r7, sp, #8
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4d6:	4b23      	ldr	r3, [pc, #140]	@ (800b564 <prvProcessExpiredTimer+0x98>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	3304      	adds	r3, #4
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7fe f99f 	bl	8009828 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4f0:	f003 0304 	and.w	r3, r3, #4
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d023      	beq.n	800b540 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	699a      	ldr	r2, [r3, #24]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	18d1      	adds	r1, r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	683a      	ldr	r2, [r7, #0]
 800b504:	6978      	ldr	r0, [r7, #20]
 800b506:	f000 f8d5 	bl	800b6b4 <prvInsertTimerInActiveList>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d020      	beq.n	800b552 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b510:	2300      	movs	r3, #0
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	2300      	movs	r3, #0
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	2100      	movs	r1, #0
 800b51a:	6978      	ldr	r0, [r7, #20]
 800b51c:	f7ff ff88 	bl	800b430 <xTimerGenericCommand>
 800b520:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d114      	bne.n	800b552 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b52c:	f383 8811 	msr	BASEPRI, r3
 800b530:	f3bf 8f6f 	isb	sy
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	60fb      	str	r3, [r7, #12]
}
 800b53a:	bf00      	nop
 800b53c:	bf00      	nop
 800b53e:	e7fd      	b.n	800b53c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b546:	f023 0301 	bic.w	r3, r3, #1
 800b54a:	b2da      	uxtb	r2, r3
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	6978      	ldr	r0, [r7, #20]
 800b558:	4798      	blx	r3
}
 800b55a:	bf00      	nop
 800b55c:	3718      	adds	r7, #24
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20000f20 	.word	0x20000f20

0800b568 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b570:	f107 0308 	add.w	r3, r7, #8
 800b574:	4618      	mov	r0, r3
 800b576:	f000 f859 	bl	800b62c <prvGetNextExpireTime>
 800b57a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	4619      	mov	r1, r3
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f000 f805 	bl	800b590 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b586:	f000 f8d7 	bl	800b738 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b58a:	bf00      	nop
 800b58c:	e7f0      	b.n	800b570 <prvTimerTask+0x8>
	...

0800b590 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b59a:	f7ff f98b 	bl	800a8b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b59e:	f107 0308 	add.w	r3, r7, #8
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f000 f866 	bl	800b674 <prvSampleTimeNow>
 800b5a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d130      	bne.n	800b612 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10a      	bne.n	800b5cc <prvProcessTimerOrBlockTask+0x3c>
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d806      	bhi.n	800b5cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b5be:	f7ff f987 	bl	800a8d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b5c2:	68f9      	ldr	r1, [r7, #12]
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7ff ff81 	bl	800b4cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b5ca:	e024      	b.n	800b616 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d008      	beq.n	800b5e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b5d2:	4b13      	ldr	r3, [pc, #76]	@ (800b620 <prvProcessTimerOrBlockTask+0x90>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d101      	bne.n	800b5e0 <prvProcessTimerOrBlockTask+0x50>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e000      	b.n	800b5e2 <prvProcessTimerOrBlockTask+0x52>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b5e4:	4b0f      	ldr	r3, [pc, #60]	@ (800b624 <prvProcessTimerOrBlockTask+0x94>)
 800b5e6:	6818      	ldr	r0, [r3, #0]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	f7fe fec7 	bl	800a384 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b5f6:	f7ff f96b 	bl	800a8d0 <xTaskResumeAll>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10a      	bne.n	800b616 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b600:	4b09      	ldr	r3, [pc, #36]	@ (800b628 <prvProcessTimerOrBlockTask+0x98>)
 800b602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b606:	601a      	str	r2, [r3, #0]
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	f3bf 8f6f 	isb	sy
}
 800b610:	e001      	b.n	800b616 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b612:	f7ff f95d 	bl	800a8d0 <xTaskResumeAll>
}
 800b616:	bf00      	nop
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	20000f24 	.word	0x20000f24
 800b624:	20000f28 	.word	0x20000f28
 800b628:	e000ed04 	.word	0xe000ed04

0800b62c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b634:	4b0e      	ldr	r3, [pc, #56]	@ (800b670 <prvGetNextExpireTime+0x44>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <prvGetNextExpireTime+0x16>
 800b63e:	2201      	movs	r2, #1
 800b640:	e000      	b.n	800b644 <prvGetNextExpireTime+0x18>
 800b642:	2200      	movs	r2, #0
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d105      	bne.n	800b65c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b650:	4b07      	ldr	r3, [pc, #28]	@ (800b670 <prvGetNextExpireTime+0x44>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	60fb      	str	r3, [r7, #12]
 800b65a:	e001      	b.n	800b660 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b65c:	2300      	movs	r3, #0
 800b65e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b660:	68fb      	ldr	r3, [r7, #12]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	20000f20 	.word	0x20000f20

0800b674 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b67c:	f7ff f9c6 	bl	800aa0c <xTaskGetTickCount>
 800b680:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b682:	4b0b      	ldr	r3, [pc, #44]	@ (800b6b0 <prvSampleTimeNow+0x3c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d205      	bcs.n	800b698 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b68c:	f000 f93a 	bl	800b904 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2201      	movs	r2, #1
 800b694:	601a      	str	r2, [r3, #0]
 800b696:	e002      	b.n	800b69e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b69e:	4a04      	ldr	r2, [pc, #16]	@ (800b6b0 <prvSampleTimeNow+0x3c>)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20000f30 	.word	0x20000f30

0800b6b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b6d2:	68ba      	ldr	r2, [r7, #8]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d812      	bhi.n	800b700 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	1ad2      	subs	r2, r2, r3
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d302      	bcc.n	800b6ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	617b      	str	r3, [r7, #20]
 800b6ec:	e01b      	b.n	800b726 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b6ee:	4b10      	ldr	r3, [pc, #64]	@ (800b730 <prvInsertTimerInActiveList+0x7c>)
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	3304      	adds	r3, #4
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	4610      	mov	r0, r2
 800b6fa:	f7fe f85c 	bl	80097b6 <vListInsert>
 800b6fe:	e012      	b.n	800b726 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	429a      	cmp	r2, r3
 800b706:	d206      	bcs.n	800b716 <prvInsertTimerInActiveList+0x62>
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d302      	bcc.n	800b716 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b710:	2301      	movs	r3, #1
 800b712:	617b      	str	r3, [r7, #20]
 800b714:	e007      	b.n	800b726 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b716:	4b07      	ldr	r3, [pc, #28]	@ (800b734 <prvInsertTimerInActiveList+0x80>)
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	3304      	adds	r3, #4
 800b71e:	4619      	mov	r1, r3
 800b720:	4610      	mov	r0, r2
 800b722:	f7fe f848 	bl	80097b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b726:	697b      	ldr	r3, [r7, #20]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3718      	adds	r7, #24
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	20000f24 	.word	0x20000f24
 800b734:	20000f20 	.word	0x20000f20

0800b738 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08e      	sub	sp, #56	@ 0x38
 800b73c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b73e:	e0ce      	b.n	800b8de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	da19      	bge.n	800b77a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b746:	1d3b      	adds	r3, r7, #4
 800b748:	3304      	adds	r3, #4
 800b74a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10b      	bne.n	800b76a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	61fb      	str	r3, [r7, #28]
}
 800b764:	bf00      	nop
 800b766:	bf00      	nop
 800b768:	e7fd      	b.n	800b766 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b770:	6850      	ldr	r0, [r2, #4]
 800b772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b774:	6892      	ldr	r2, [r2, #8]
 800b776:	4611      	mov	r1, r2
 800b778:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f2c0 80ae 	blt.w	800b8de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b788:	695b      	ldr	r3, [r3, #20]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d004      	beq.n	800b798 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b790:	3304      	adds	r3, #4
 800b792:	4618      	mov	r0, r3
 800b794:	f7fe f848 	bl	8009828 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b798:	463b      	mov	r3, r7
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff ff6a 	bl	800b674 <prvSampleTimeNow>
 800b7a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2b09      	cmp	r3, #9
 800b7a6:	f200 8097 	bhi.w	800b8d8 <prvProcessReceivedCommands+0x1a0>
 800b7aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b7b0 <prvProcessReceivedCommands+0x78>)
 800b7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b0:	0800b7d9 	.word	0x0800b7d9
 800b7b4:	0800b7d9 	.word	0x0800b7d9
 800b7b8:	0800b7d9 	.word	0x0800b7d9
 800b7bc:	0800b84f 	.word	0x0800b84f
 800b7c0:	0800b863 	.word	0x0800b863
 800b7c4:	0800b8af 	.word	0x0800b8af
 800b7c8:	0800b7d9 	.word	0x0800b7d9
 800b7cc:	0800b7d9 	.word	0x0800b7d9
 800b7d0:	0800b84f 	.word	0x0800b84f
 800b7d4:	0800b863 	.word	0x0800b863
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b7de:	f043 0301 	orr.w	r3, r3, #1
 800b7e2:	b2da      	uxtb	r2, r3
 800b7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ee:	699b      	ldr	r3, [r3, #24]
 800b7f0:	18d1      	adds	r1, r2, r3
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7f8:	f7ff ff5c 	bl	800b6b4 <prvInsertTimerInActiveList>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d06c      	beq.n	800b8dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b808:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b80c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b810:	f003 0304 	and.w	r3, r3, #4
 800b814:	2b00      	cmp	r3, #0
 800b816:	d061      	beq.n	800b8dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	441a      	add	r2, r3
 800b820:	2300      	movs	r3, #0
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	2300      	movs	r3, #0
 800b826:	2100      	movs	r1, #0
 800b828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b82a:	f7ff fe01 	bl	800b430 <xTimerGenericCommand>
 800b82e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b830:	6a3b      	ldr	r3, [r7, #32]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d152      	bne.n	800b8dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b83a:	f383 8811 	msr	BASEPRI, r3
 800b83e:	f3bf 8f6f 	isb	sy
 800b842:	f3bf 8f4f 	dsb	sy
 800b846:	61bb      	str	r3, [r7, #24]
}
 800b848:	bf00      	nop
 800b84a:	bf00      	nop
 800b84c:	e7fd      	b.n	800b84a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b854:	f023 0301 	bic.w	r3, r3, #1
 800b858:	b2da      	uxtb	r2, r3
 800b85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b85c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b860:	e03d      	b.n	800b8de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b864:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b868:	f043 0301 	orr.w	r3, r3, #1
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b870:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b878:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10b      	bne.n	800b89a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b886:	f383 8811 	msr	BASEPRI, r3
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	617b      	str	r3, [r7, #20]
}
 800b894:	bf00      	nop
 800b896:	bf00      	nop
 800b898:	e7fd      	b.n	800b896 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89c:	699a      	ldr	r2, [r3, #24]
 800b89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a0:	18d1      	adds	r1, r2, r3
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8a8:	f7ff ff04 	bl	800b6b4 <prvInsertTimerInActiveList>
					break;
 800b8ac:	e017      	b.n	800b8de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8b4:	f003 0302 	and.w	r3, r3, #2
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d103      	bne.n	800b8c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b8bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8be:	f000 fc0b 	bl	800c0d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b8c2:	e00c      	b.n	800b8de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8ca:	f023 0301 	bic.w	r3, r3, #1
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b8d6:	e002      	b.n	800b8de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b8d8:	bf00      	nop
 800b8da:	e000      	b.n	800b8de <prvProcessReceivedCommands+0x1a6>
					break;
 800b8dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8de:	4b08      	ldr	r3, [pc, #32]	@ (800b900 <prvProcessReceivedCommands+0x1c8>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	1d39      	adds	r1, r7, #4
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fe faae 	bl	8009e48 <xQueueReceive>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f47f af26 	bne.w	800b740 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b8f4:	bf00      	nop
 800b8f6:	bf00      	nop
 800b8f8:	3730      	adds	r7, #48	@ 0x30
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	20000f28 	.word	0x20000f28

0800b904 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b088      	sub	sp, #32
 800b908:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b90a:	e049      	b.n	800b9a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b90c:	4b2e      	ldr	r3, [pc, #184]	@ (800b9c8 <prvSwitchTimerLists+0xc4>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b916:	4b2c      	ldr	r3, [pc, #176]	@ (800b9c8 <prvSwitchTimerLists+0xc4>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	3304      	adds	r3, #4
 800b924:	4618      	mov	r0, r3
 800b926:	f7fd ff7f 	bl	8009828 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6a1b      	ldr	r3, [r3, #32]
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b938:	f003 0304 	and.w	r3, r3, #4
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d02f      	beq.n	800b9a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	4413      	add	r3, r2
 800b948:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d90e      	bls.n	800b970 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b95e:	4b1a      	ldr	r3, [pc, #104]	@ (800b9c8 <prvSwitchTimerLists+0xc4>)
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	3304      	adds	r3, #4
 800b966:	4619      	mov	r1, r3
 800b968:	4610      	mov	r0, r2
 800b96a:	f7fd ff24 	bl	80097b6 <vListInsert>
 800b96e:	e017      	b.n	800b9a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b970:	2300      	movs	r3, #0
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	2300      	movs	r3, #0
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	2100      	movs	r1, #0
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f7ff fd58 	bl	800b430 <xTimerGenericCommand>
 800b980:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10b      	bne.n	800b9a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	603b      	str	r3, [r7, #0]
}
 800b99a:	bf00      	nop
 800b99c:	bf00      	nop
 800b99e:	e7fd      	b.n	800b99c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9a0:	4b09      	ldr	r3, [pc, #36]	@ (800b9c8 <prvSwitchTimerLists+0xc4>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1b0      	bne.n	800b90c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b9aa:	4b07      	ldr	r3, [pc, #28]	@ (800b9c8 <prvSwitchTimerLists+0xc4>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b9b0:	4b06      	ldr	r3, [pc, #24]	@ (800b9cc <prvSwitchTimerLists+0xc8>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a04      	ldr	r2, [pc, #16]	@ (800b9c8 <prvSwitchTimerLists+0xc4>)
 800b9b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b9b8:	4a04      	ldr	r2, [pc, #16]	@ (800b9cc <prvSwitchTimerLists+0xc8>)
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	6013      	str	r3, [r2, #0]
}
 800b9be:	bf00      	nop
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20000f20 	.word	0x20000f20
 800b9cc:	20000f24 	.word	0x20000f24

0800b9d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b9d6:	f000 f98f 	bl	800bcf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b9da:	4b15      	ldr	r3, [pc, #84]	@ (800ba30 <prvCheckForValidListAndQueue+0x60>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d120      	bne.n	800ba24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b9e2:	4814      	ldr	r0, [pc, #80]	@ (800ba34 <prvCheckForValidListAndQueue+0x64>)
 800b9e4:	f7fd fe96 	bl	8009714 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b9e8:	4813      	ldr	r0, [pc, #76]	@ (800ba38 <prvCheckForValidListAndQueue+0x68>)
 800b9ea:	f7fd fe93 	bl	8009714 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b9ee:	4b13      	ldr	r3, [pc, #76]	@ (800ba3c <prvCheckForValidListAndQueue+0x6c>)
 800b9f0:	4a10      	ldr	r2, [pc, #64]	@ (800ba34 <prvCheckForValidListAndQueue+0x64>)
 800b9f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b9f4:	4b12      	ldr	r3, [pc, #72]	@ (800ba40 <prvCheckForValidListAndQueue+0x70>)
 800b9f6:	4a10      	ldr	r2, [pc, #64]	@ (800ba38 <prvCheckForValidListAndQueue+0x68>)
 800b9f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	4b11      	ldr	r3, [pc, #68]	@ (800ba44 <prvCheckForValidListAndQueue+0x74>)
 800ba00:	4a11      	ldr	r2, [pc, #68]	@ (800ba48 <prvCheckForValidListAndQueue+0x78>)
 800ba02:	2110      	movs	r1, #16
 800ba04:	200a      	movs	r0, #10
 800ba06:	f7fd ffa3 	bl	8009950 <xQueueGenericCreateStatic>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	4a08      	ldr	r2, [pc, #32]	@ (800ba30 <prvCheckForValidListAndQueue+0x60>)
 800ba0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba10:	4b07      	ldr	r3, [pc, #28]	@ (800ba30 <prvCheckForValidListAndQueue+0x60>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d005      	beq.n	800ba24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba18:	4b05      	ldr	r3, [pc, #20]	@ (800ba30 <prvCheckForValidListAndQueue+0x60>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	490b      	ldr	r1, [pc, #44]	@ (800ba4c <prvCheckForValidListAndQueue+0x7c>)
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7fe fc86 	bl	800a330 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba24:	f000 f99a 	bl	800bd5c <vPortExitCritical>
}
 800ba28:	bf00      	nop
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	20000f28 	.word	0x20000f28
 800ba34:	20000ef8 	.word	0x20000ef8
 800ba38:	20000f0c 	.word	0x20000f0c
 800ba3c:	20000f20 	.word	0x20000f20
 800ba40:	20000f24 	.word	0x20000f24
 800ba44:	20000fd4 	.word	0x20000fd4
 800ba48:	20000f34 	.word	0x20000f34
 800ba4c:	0800cd00 	.word	0x0800cd00

0800ba50 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d10b      	bne.n	800ba7a <pvTimerGetTimerID+0x2a>
	__asm volatile
 800ba62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba66:	f383 8811 	msr	BASEPRI, r3
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	60fb      	str	r3, [r7, #12]
}
 800ba74:	bf00      	nop
 800ba76:	bf00      	nop
 800ba78:	e7fd      	b.n	800ba76 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800ba7a:	f000 f93d 	bl	800bcf8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	69db      	ldr	r3, [r3, #28]
 800ba82:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ba84:	f000 f96a 	bl	800bd5c <vPortExitCritical>

	return pvReturn;
 800ba88:	693b      	ldr	r3, [r7, #16]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3718      	adds	r7, #24
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
	...

0800ba94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	3b04      	subs	r3, #4
 800baa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800baac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	3b04      	subs	r3, #4
 800bab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	f023 0201 	bic.w	r2, r3, #1
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	3b04      	subs	r3, #4
 800bac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bac4:	4a0c      	ldr	r2, [pc, #48]	@ (800baf8 <pxPortInitialiseStack+0x64>)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	3b14      	subs	r3, #20
 800bace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	3b04      	subs	r3, #4
 800bada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f06f 0202 	mvn.w	r2, #2
 800bae2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	3b20      	subs	r3, #32
 800bae8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800baea:	68fb      	ldr	r3, [r7, #12]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3714      	adds	r7, #20
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	0800bafd 	.word	0x0800bafd

0800bafc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb02:	2300      	movs	r3, #0
 800bb04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb06:	4b13      	ldr	r3, [pc, #76]	@ (800bb54 <prvTaskExitError+0x58>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0e:	d00b      	beq.n	800bb28 <prvTaskExitError+0x2c>
	__asm volatile
 800bb10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb14:	f383 8811 	msr	BASEPRI, r3
 800bb18:	f3bf 8f6f 	isb	sy
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	60fb      	str	r3, [r7, #12]
}
 800bb22:	bf00      	nop
 800bb24:	bf00      	nop
 800bb26:	e7fd      	b.n	800bb24 <prvTaskExitError+0x28>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	60bb      	str	r3, [r7, #8]
}
 800bb3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb3c:	bf00      	nop
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d0fc      	beq.n	800bb3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb44:	bf00      	nop
 800bb46:	bf00      	nop
 800bb48:	3714      	adds	r7, #20
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	2000002c 	.word	0x2000002c
	...

0800bb60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb60:	4b07      	ldr	r3, [pc, #28]	@ (800bb80 <pxCurrentTCBConst2>)
 800bb62:	6819      	ldr	r1, [r3, #0]
 800bb64:	6808      	ldr	r0, [r1, #0]
 800bb66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6a:	f380 8809 	msr	PSP, r0
 800bb6e:	f3bf 8f6f 	isb	sy
 800bb72:	f04f 0000 	mov.w	r0, #0
 800bb76:	f380 8811 	msr	BASEPRI, r0
 800bb7a:	4770      	bx	lr
 800bb7c:	f3af 8000 	nop.w

0800bb80 <pxCurrentTCBConst2>:
 800bb80:	200009f8 	.word	0x200009f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb84:	bf00      	nop
 800bb86:	bf00      	nop

0800bb88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb88:	4808      	ldr	r0, [pc, #32]	@ (800bbac <prvPortStartFirstTask+0x24>)
 800bb8a:	6800      	ldr	r0, [r0, #0]
 800bb8c:	6800      	ldr	r0, [r0, #0]
 800bb8e:	f380 8808 	msr	MSP, r0
 800bb92:	f04f 0000 	mov.w	r0, #0
 800bb96:	f380 8814 	msr	CONTROL, r0
 800bb9a:	b662      	cpsie	i
 800bb9c:	b661      	cpsie	f
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	df00      	svc	0
 800bba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bbaa:	bf00      	nop
 800bbac:	e000ed08 	.word	0xe000ed08

0800bbb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bbb6:	4b47      	ldr	r3, [pc, #284]	@ (800bcd4 <xPortStartScheduler+0x124>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a47      	ldr	r2, [pc, #284]	@ (800bcd8 <xPortStartScheduler+0x128>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d10b      	bne.n	800bbd8 <xPortStartScheduler+0x28>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	613b      	str	r3, [r7, #16]
}
 800bbd2:	bf00      	nop
 800bbd4:	bf00      	nop
 800bbd6:	e7fd      	b.n	800bbd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bbd8:	4b3e      	ldr	r3, [pc, #248]	@ (800bcd4 <xPortStartScheduler+0x124>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a3f      	ldr	r2, [pc, #252]	@ (800bcdc <xPortStartScheduler+0x12c>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d10b      	bne.n	800bbfa <xPortStartScheduler+0x4a>
	__asm volatile
 800bbe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	60fb      	str	r3, [r7, #12]
}
 800bbf4:	bf00      	nop
 800bbf6:	bf00      	nop
 800bbf8:	e7fd      	b.n	800bbf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bbfa:	4b39      	ldr	r3, [pc, #228]	@ (800bce0 <xPortStartScheduler+0x130>)
 800bbfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	22ff      	movs	r2, #255	@ 0xff
 800bc0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc14:	78fb      	ldrb	r3, [r7, #3]
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bc1c:	b2da      	uxtb	r2, r3
 800bc1e:	4b31      	ldr	r3, [pc, #196]	@ (800bce4 <xPortStartScheduler+0x134>)
 800bc20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc22:	4b31      	ldr	r3, [pc, #196]	@ (800bce8 <xPortStartScheduler+0x138>)
 800bc24:	2207      	movs	r2, #7
 800bc26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc28:	e009      	b.n	800bc3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bc2a:	4b2f      	ldr	r3, [pc, #188]	@ (800bce8 <xPortStartScheduler+0x138>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	4a2d      	ldr	r2, [pc, #180]	@ (800bce8 <xPortStartScheduler+0x138>)
 800bc32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc34:	78fb      	ldrb	r3, [r7, #3]
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	005b      	lsls	r3, r3, #1
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc3e:	78fb      	ldrb	r3, [r7, #3]
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc46:	2b80      	cmp	r3, #128	@ 0x80
 800bc48:	d0ef      	beq.n	800bc2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc4a:	4b27      	ldr	r3, [pc, #156]	@ (800bce8 <xPortStartScheduler+0x138>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f1c3 0307 	rsb	r3, r3, #7
 800bc52:	2b04      	cmp	r3, #4
 800bc54:	d00b      	beq.n	800bc6e <xPortStartScheduler+0xbe>
	__asm volatile
 800bc56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc5a:	f383 8811 	msr	BASEPRI, r3
 800bc5e:	f3bf 8f6f 	isb	sy
 800bc62:	f3bf 8f4f 	dsb	sy
 800bc66:	60bb      	str	r3, [r7, #8]
}
 800bc68:	bf00      	nop
 800bc6a:	bf00      	nop
 800bc6c:	e7fd      	b.n	800bc6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc6e:	4b1e      	ldr	r3, [pc, #120]	@ (800bce8 <xPortStartScheduler+0x138>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	021b      	lsls	r3, r3, #8
 800bc74:	4a1c      	ldr	r2, [pc, #112]	@ (800bce8 <xPortStartScheduler+0x138>)
 800bc76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc78:	4b1b      	ldr	r3, [pc, #108]	@ (800bce8 <xPortStartScheduler+0x138>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bc80:	4a19      	ldr	r2, [pc, #100]	@ (800bce8 <xPortStartScheduler+0x138>)
 800bc82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	b2da      	uxtb	r2, r3
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc8c:	4b17      	ldr	r3, [pc, #92]	@ (800bcec <xPortStartScheduler+0x13c>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a16      	ldr	r2, [pc, #88]	@ (800bcec <xPortStartScheduler+0x13c>)
 800bc92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bc96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc98:	4b14      	ldr	r3, [pc, #80]	@ (800bcec <xPortStartScheduler+0x13c>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a13      	ldr	r2, [pc, #76]	@ (800bcec <xPortStartScheduler+0x13c>)
 800bc9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bca2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bca4:	f000 f8da 	bl	800be5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bca8:	4b11      	ldr	r3, [pc, #68]	@ (800bcf0 <xPortStartScheduler+0x140>)
 800bcaa:	2200      	movs	r2, #0
 800bcac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bcae:	f000 f8f9 	bl	800bea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bcb2:	4b10      	ldr	r3, [pc, #64]	@ (800bcf4 <xPortStartScheduler+0x144>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a0f      	ldr	r2, [pc, #60]	@ (800bcf4 <xPortStartScheduler+0x144>)
 800bcb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bcbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bcbe:	f7ff ff63 	bl	800bb88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bcc2:	f7fe ff6d 	bl	800aba0 <vTaskSwitchContext>
	prvTaskExitError();
 800bcc6:	f7ff ff19 	bl	800bafc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bcca:	2300      	movs	r3, #0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3718      	adds	r7, #24
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	e000ed00 	.word	0xe000ed00
 800bcd8:	410fc271 	.word	0x410fc271
 800bcdc:	410fc270 	.word	0x410fc270
 800bce0:	e000e400 	.word	0xe000e400
 800bce4:	20001024 	.word	0x20001024
 800bce8:	20001028 	.word	0x20001028
 800bcec:	e000ed20 	.word	0xe000ed20
 800bcf0:	2000002c 	.word	0x2000002c
 800bcf4:	e000ef34 	.word	0xe000ef34

0800bcf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
	__asm volatile
 800bcfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd02:	f383 8811 	msr	BASEPRI, r3
 800bd06:	f3bf 8f6f 	isb	sy
 800bd0a:	f3bf 8f4f 	dsb	sy
 800bd0e:	607b      	str	r3, [r7, #4]
}
 800bd10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd12:	4b10      	ldr	r3, [pc, #64]	@ (800bd54 <vPortEnterCritical+0x5c>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	3301      	adds	r3, #1
 800bd18:	4a0e      	ldr	r2, [pc, #56]	@ (800bd54 <vPortEnterCritical+0x5c>)
 800bd1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd1c:	4b0d      	ldr	r3, [pc, #52]	@ (800bd54 <vPortEnterCritical+0x5c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d110      	bne.n	800bd46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd24:	4b0c      	ldr	r3, [pc, #48]	@ (800bd58 <vPortEnterCritical+0x60>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	b2db      	uxtb	r3, r3
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00b      	beq.n	800bd46 <vPortEnterCritical+0x4e>
	__asm volatile
 800bd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd32:	f383 8811 	msr	BASEPRI, r3
 800bd36:	f3bf 8f6f 	isb	sy
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	603b      	str	r3, [r7, #0]
}
 800bd40:	bf00      	nop
 800bd42:	bf00      	nop
 800bd44:	e7fd      	b.n	800bd42 <vPortEnterCritical+0x4a>
	}
}
 800bd46:	bf00      	nop
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	2000002c 	.word	0x2000002c
 800bd58:	e000ed04 	.word	0xe000ed04

0800bd5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd62:	4b12      	ldr	r3, [pc, #72]	@ (800bdac <vPortExitCritical+0x50>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10b      	bne.n	800bd82 <vPortExitCritical+0x26>
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	607b      	str	r3, [r7, #4]
}
 800bd7c:	bf00      	nop
 800bd7e:	bf00      	nop
 800bd80:	e7fd      	b.n	800bd7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bd82:	4b0a      	ldr	r3, [pc, #40]	@ (800bdac <vPortExitCritical+0x50>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	4a08      	ldr	r2, [pc, #32]	@ (800bdac <vPortExitCritical+0x50>)
 800bd8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd8c:	4b07      	ldr	r3, [pc, #28]	@ (800bdac <vPortExitCritical+0x50>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d105      	bne.n	800bda0 <vPortExitCritical+0x44>
 800bd94:	2300      	movs	r3, #0
 800bd96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	f383 8811 	msr	BASEPRI, r3
}
 800bd9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr
 800bdac:	2000002c 	.word	0x2000002c

0800bdb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bdb0:	f3ef 8009 	mrs	r0, PSP
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	4b15      	ldr	r3, [pc, #84]	@ (800be10 <pxCurrentTCBConst>)
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	f01e 0f10 	tst.w	lr, #16
 800bdc0:	bf08      	it	eq
 800bdc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bdc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdca:	6010      	str	r0, [r2, #0]
 800bdcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bdd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bdd4:	f380 8811 	msr	BASEPRI, r0
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	f7fe fede 	bl	800aba0 <vTaskSwitchContext>
 800bde4:	f04f 0000 	mov.w	r0, #0
 800bde8:	f380 8811 	msr	BASEPRI, r0
 800bdec:	bc09      	pop	{r0, r3}
 800bdee:	6819      	ldr	r1, [r3, #0]
 800bdf0:	6808      	ldr	r0, [r1, #0]
 800bdf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf6:	f01e 0f10 	tst.w	lr, #16
 800bdfa:	bf08      	it	eq
 800bdfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be00:	f380 8809 	msr	PSP, r0
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	4770      	bx	lr
 800be0a:	bf00      	nop
 800be0c:	f3af 8000 	nop.w

0800be10 <pxCurrentTCBConst>:
 800be10:	200009f8 	.word	0x200009f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be14:	bf00      	nop
 800be16:	bf00      	nop

0800be18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
	__asm volatile
 800be1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	607b      	str	r3, [r7, #4]
}
 800be30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be32:	f7fe fdfb 	bl	800aa2c <xTaskIncrementTick>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d003      	beq.n	800be44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be3c:	4b06      	ldr	r3, [pc, #24]	@ (800be58 <xPortSysTickHandler+0x40>)
 800be3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be42:	601a      	str	r2, [r3, #0]
 800be44:	2300      	movs	r3, #0
 800be46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	f383 8811 	msr	BASEPRI, r3
}
 800be4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be50:	bf00      	nop
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	e000ed04 	.word	0xe000ed04

0800be5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be5c:	b480      	push	{r7}
 800be5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be60:	4b0b      	ldr	r3, [pc, #44]	@ (800be90 <vPortSetupTimerInterrupt+0x34>)
 800be62:	2200      	movs	r2, #0
 800be64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be66:	4b0b      	ldr	r3, [pc, #44]	@ (800be94 <vPortSetupTimerInterrupt+0x38>)
 800be68:	2200      	movs	r2, #0
 800be6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be6c:	4b0a      	ldr	r3, [pc, #40]	@ (800be98 <vPortSetupTimerInterrupt+0x3c>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a0a      	ldr	r2, [pc, #40]	@ (800be9c <vPortSetupTimerInterrupt+0x40>)
 800be72:	fba2 2303 	umull	r2, r3, r2, r3
 800be76:	099b      	lsrs	r3, r3, #6
 800be78:	4a09      	ldr	r2, [pc, #36]	@ (800bea0 <vPortSetupTimerInterrupt+0x44>)
 800be7a:	3b01      	subs	r3, #1
 800be7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be7e:	4b04      	ldr	r3, [pc, #16]	@ (800be90 <vPortSetupTimerInterrupt+0x34>)
 800be80:	2207      	movs	r2, #7
 800be82:	601a      	str	r2, [r3, #0]
}
 800be84:	bf00      	nop
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	e000e010 	.word	0xe000e010
 800be94:	e000e018 	.word	0xe000e018
 800be98:	20000000 	.word	0x20000000
 800be9c:	10624dd3 	.word	0x10624dd3
 800bea0:	e000e014 	.word	0xe000e014

0800bea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bea4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800beb4 <vPortEnableVFP+0x10>
 800bea8:	6801      	ldr	r1, [r0, #0]
 800beaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800beae:	6001      	str	r1, [r0, #0]
 800beb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800beb2:	bf00      	nop
 800beb4:	e000ed88 	.word	0xe000ed88

0800beb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800beb8:	b480      	push	{r7}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bebe:	f3ef 8305 	mrs	r3, IPSR
 800bec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2b0f      	cmp	r3, #15
 800bec8:	d915      	bls.n	800bef6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800beca:	4a18      	ldr	r2, [pc, #96]	@ (800bf2c <vPortValidateInterruptPriority+0x74>)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	4413      	add	r3, r2
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bed4:	4b16      	ldr	r3, [pc, #88]	@ (800bf30 <vPortValidateInterruptPriority+0x78>)
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	7afa      	ldrb	r2, [r7, #11]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d20b      	bcs.n	800bef6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	607b      	str	r3, [r7, #4]
}
 800bef0:	bf00      	nop
 800bef2:	bf00      	nop
 800bef4:	e7fd      	b.n	800bef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bef6:	4b0f      	ldr	r3, [pc, #60]	@ (800bf34 <vPortValidateInterruptPriority+0x7c>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800befe:	4b0e      	ldr	r3, [pc, #56]	@ (800bf38 <vPortValidateInterruptPriority+0x80>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d90b      	bls.n	800bf1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bf06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf0a:	f383 8811 	msr	BASEPRI, r3
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	603b      	str	r3, [r7, #0]
}
 800bf18:	bf00      	nop
 800bf1a:	bf00      	nop
 800bf1c:	e7fd      	b.n	800bf1a <vPortValidateInterruptPriority+0x62>
	}
 800bf1e:	bf00      	nop
 800bf20:	3714      	adds	r7, #20
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	e000e3f0 	.word	0xe000e3f0
 800bf30:	20001024 	.word	0x20001024
 800bf34:	e000ed0c 	.word	0xe000ed0c
 800bf38:	20001028 	.word	0x20001028

0800bf3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b08a      	sub	sp, #40	@ 0x28
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf44:	2300      	movs	r3, #0
 800bf46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf48:	f7fe fcb4 	bl	800a8b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf4c:	4b5c      	ldr	r3, [pc, #368]	@ (800c0c0 <pvPortMalloc+0x184>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d101      	bne.n	800bf58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf54:	f000 f924 	bl	800c1a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf58:	4b5a      	ldr	r3, [pc, #360]	@ (800c0c4 <pvPortMalloc+0x188>)
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4013      	ands	r3, r2
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f040 8095 	bne.w	800c090 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d01e      	beq.n	800bfaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bf6c:	2208      	movs	r2, #8
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4413      	add	r3, r2
 800bf72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f003 0307 	and.w	r3, r3, #7
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d015      	beq.n	800bfaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f023 0307 	bic.w	r3, r3, #7
 800bf84:	3308      	adds	r3, #8
 800bf86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f003 0307 	and.w	r3, r3, #7
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00b      	beq.n	800bfaa <pvPortMalloc+0x6e>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	617b      	str	r3, [r7, #20]
}
 800bfa4:	bf00      	nop
 800bfa6:	bf00      	nop
 800bfa8:	e7fd      	b.n	800bfa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d06f      	beq.n	800c090 <pvPortMalloc+0x154>
 800bfb0:	4b45      	ldr	r3, [pc, #276]	@ (800c0c8 <pvPortMalloc+0x18c>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d86a      	bhi.n	800c090 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bfba:	4b44      	ldr	r3, [pc, #272]	@ (800c0cc <pvPortMalloc+0x190>)
 800bfbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bfbe:	4b43      	ldr	r3, [pc, #268]	@ (800c0cc <pvPortMalloc+0x190>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfc4:	e004      	b.n	800bfd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d903      	bls.n	800bfe2 <pvPortMalloc+0xa6>
 800bfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d1f1      	bne.n	800bfc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bfe2:	4b37      	ldr	r3, [pc, #220]	@ (800c0c0 <pvPortMalloc+0x184>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d051      	beq.n	800c090 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bfec:	6a3b      	ldr	r3, [r7, #32]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2208      	movs	r2, #8
 800bff2:	4413      	add	r3, r2
 800bff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	6a3b      	ldr	r3, [r7, #32]
 800bffc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c000:	685a      	ldr	r2, [r3, #4]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	1ad2      	subs	r2, r2, r3
 800c006:	2308      	movs	r3, #8
 800c008:	005b      	lsls	r3, r3, #1
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d920      	bls.n	800c050 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c00e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	4413      	add	r3, r2
 800c014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	f003 0307 	and.w	r3, r3, #7
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00b      	beq.n	800c038 <pvPortMalloc+0xfc>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	613b      	str	r3, [r7, #16]
}
 800c032:	bf00      	nop
 800c034:	bf00      	nop
 800c036:	e7fd      	b.n	800c034 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03a:	685a      	ldr	r2, [r3, #4]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	1ad2      	subs	r2, r2, r3
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c04a:	69b8      	ldr	r0, [r7, #24]
 800c04c:	f000 f90a 	bl	800c264 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c050:	4b1d      	ldr	r3, [pc, #116]	@ (800c0c8 <pvPortMalloc+0x18c>)
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	1ad3      	subs	r3, r2, r3
 800c05a:	4a1b      	ldr	r2, [pc, #108]	@ (800c0c8 <pvPortMalloc+0x18c>)
 800c05c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c05e:	4b1a      	ldr	r3, [pc, #104]	@ (800c0c8 <pvPortMalloc+0x18c>)
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	4b1b      	ldr	r3, [pc, #108]	@ (800c0d0 <pvPortMalloc+0x194>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	429a      	cmp	r2, r3
 800c068:	d203      	bcs.n	800c072 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c06a:	4b17      	ldr	r3, [pc, #92]	@ (800c0c8 <pvPortMalloc+0x18c>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a18      	ldr	r2, [pc, #96]	@ (800c0d0 <pvPortMalloc+0x194>)
 800c070:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c074:	685a      	ldr	r2, [r3, #4]
 800c076:	4b13      	ldr	r3, [pc, #76]	@ (800c0c4 <pvPortMalloc+0x188>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	431a      	orrs	r2, r3
 800c07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c07e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c082:	2200      	movs	r2, #0
 800c084:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c086:	4b13      	ldr	r3, [pc, #76]	@ (800c0d4 <pvPortMalloc+0x198>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	3301      	adds	r3, #1
 800c08c:	4a11      	ldr	r2, [pc, #68]	@ (800c0d4 <pvPortMalloc+0x198>)
 800c08e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c090:	f7fe fc1e 	bl	800a8d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	f003 0307 	and.w	r3, r3, #7
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00b      	beq.n	800c0b6 <pvPortMalloc+0x17a>
	__asm volatile
 800c09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	60fb      	str	r3, [r7, #12]
}
 800c0b0:	bf00      	nop
 800c0b2:	bf00      	nop
 800c0b4:	e7fd      	b.n	800c0b2 <pvPortMalloc+0x176>
	return pvReturn;
 800c0b6:	69fb      	ldr	r3, [r7, #28]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3728      	adds	r7, #40	@ 0x28
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	20004c34 	.word	0x20004c34
 800c0c4:	20004c48 	.word	0x20004c48
 800c0c8:	20004c38 	.word	0x20004c38
 800c0cc:	20004c2c 	.word	0x20004c2c
 800c0d0:	20004c3c 	.word	0x20004c3c
 800c0d4:	20004c40 	.word	0x20004c40

0800c0d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d04f      	beq.n	800c18a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c0ea:	2308      	movs	r3, #8
 800c0ec:	425b      	negs	r3, r3
 800c0ee:	697a      	ldr	r2, [r7, #20]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	685a      	ldr	r2, [r3, #4]
 800c0fc:	4b25      	ldr	r3, [pc, #148]	@ (800c194 <vPortFree+0xbc>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4013      	ands	r3, r2
 800c102:	2b00      	cmp	r3, #0
 800c104:	d10b      	bne.n	800c11e <vPortFree+0x46>
	__asm volatile
 800c106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c10a:	f383 8811 	msr	BASEPRI, r3
 800c10e:	f3bf 8f6f 	isb	sy
 800c112:	f3bf 8f4f 	dsb	sy
 800c116:	60fb      	str	r3, [r7, #12]
}
 800c118:	bf00      	nop
 800c11a:	bf00      	nop
 800c11c:	e7fd      	b.n	800c11a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d00b      	beq.n	800c13e <vPortFree+0x66>
	__asm volatile
 800c126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f3bf 8f4f 	dsb	sy
 800c136:	60bb      	str	r3, [r7, #8]
}
 800c138:	bf00      	nop
 800c13a:	bf00      	nop
 800c13c:	e7fd      	b.n	800c13a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	685a      	ldr	r2, [r3, #4]
 800c142:	4b14      	ldr	r3, [pc, #80]	@ (800c194 <vPortFree+0xbc>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4013      	ands	r3, r2
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d01e      	beq.n	800c18a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d11a      	bne.n	800c18a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	685a      	ldr	r2, [r3, #4]
 800c158:	4b0e      	ldr	r3, [pc, #56]	@ (800c194 <vPortFree+0xbc>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	43db      	mvns	r3, r3
 800c15e:	401a      	ands	r2, r3
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c164:	f7fe fba6 	bl	800a8b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	685a      	ldr	r2, [r3, #4]
 800c16c:	4b0a      	ldr	r3, [pc, #40]	@ (800c198 <vPortFree+0xc0>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4413      	add	r3, r2
 800c172:	4a09      	ldr	r2, [pc, #36]	@ (800c198 <vPortFree+0xc0>)
 800c174:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c176:	6938      	ldr	r0, [r7, #16]
 800c178:	f000 f874 	bl	800c264 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c17c:	4b07      	ldr	r3, [pc, #28]	@ (800c19c <vPortFree+0xc4>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	3301      	adds	r3, #1
 800c182:	4a06      	ldr	r2, [pc, #24]	@ (800c19c <vPortFree+0xc4>)
 800c184:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c186:	f7fe fba3 	bl	800a8d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c18a:	bf00      	nop
 800c18c:	3718      	adds	r7, #24
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20004c48 	.word	0x20004c48
 800c198:	20004c38 	.word	0x20004c38
 800c19c:	20004c44 	.word	0x20004c44

0800c1a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b085      	sub	sp, #20
 800c1a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c1a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c1aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c1ac:	4b27      	ldr	r3, [pc, #156]	@ (800c24c <prvHeapInit+0xac>)
 800c1ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f003 0307 	and.w	r3, r3, #7
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00c      	beq.n	800c1d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	3307      	adds	r3, #7
 800c1be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f023 0307 	bic.w	r3, r3, #7
 800c1c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	1ad3      	subs	r3, r2, r3
 800c1ce:	4a1f      	ldr	r2, [pc, #124]	@ (800c24c <prvHeapInit+0xac>)
 800c1d0:	4413      	add	r3, r2
 800c1d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c1d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c250 <prvHeapInit+0xb0>)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c1de:	4b1c      	ldr	r3, [pc, #112]	@ (800c250 <prvHeapInit+0xb0>)
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c1ec:	2208      	movs	r2, #8
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	1a9b      	subs	r3, r3, r2
 800c1f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f023 0307 	bic.w	r3, r3, #7
 800c1fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	4a15      	ldr	r2, [pc, #84]	@ (800c254 <prvHeapInit+0xb4>)
 800c200:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c202:	4b14      	ldr	r3, [pc, #80]	@ (800c254 <prvHeapInit+0xb4>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	2200      	movs	r2, #0
 800c208:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c20a:	4b12      	ldr	r3, [pc, #72]	@ (800c254 <prvHeapInit+0xb4>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2200      	movs	r2, #0
 800c210:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	1ad2      	subs	r2, r2, r3
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c220:	4b0c      	ldr	r3, [pc, #48]	@ (800c254 <prvHeapInit+0xb4>)
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	4a0a      	ldr	r2, [pc, #40]	@ (800c258 <prvHeapInit+0xb8>)
 800c22e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	4a09      	ldr	r2, [pc, #36]	@ (800c25c <prvHeapInit+0xbc>)
 800c236:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c238:	4b09      	ldr	r3, [pc, #36]	@ (800c260 <prvHeapInit+0xc0>)
 800c23a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c23e:	601a      	str	r2, [r3, #0]
}
 800c240:	bf00      	nop
 800c242:	3714      	adds	r7, #20
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr
 800c24c:	2000102c 	.word	0x2000102c
 800c250:	20004c2c 	.word	0x20004c2c
 800c254:	20004c34 	.word	0x20004c34
 800c258:	20004c3c 	.word	0x20004c3c
 800c25c:	20004c38 	.word	0x20004c38
 800c260:	20004c48 	.word	0x20004c48

0800c264 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c26c:	4b28      	ldr	r3, [pc, #160]	@ (800c310 <prvInsertBlockIntoFreeList+0xac>)
 800c26e:	60fb      	str	r3, [r7, #12]
 800c270:	e002      	b.n	800c278 <prvInsertBlockIntoFreeList+0x14>
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	60fb      	str	r3, [r7, #12]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d8f7      	bhi.n	800c272 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	4413      	add	r3, r2
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	429a      	cmp	r2, r3
 800c292:	d108      	bne.n	800c2a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	685a      	ldr	r2, [r3, #4]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	441a      	add	r2, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	68ba      	ldr	r2, [r7, #8]
 800c2b0:	441a      	add	r2, r3
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d118      	bne.n	800c2ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	4b15      	ldr	r3, [pc, #84]	@ (800c314 <prvInsertBlockIntoFreeList+0xb0>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d00d      	beq.n	800c2e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	685a      	ldr	r2, [r3, #4]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	441a      	add	r2, r3
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	601a      	str	r2, [r3, #0]
 800c2e0:	e008      	b.n	800c2f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800c314 <prvInsertBlockIntoFreeList+0xb0>)
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	601a      	str	r2, [r3, #0]
 800c2ea:	e003      	b.n	800c2f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d002      	beq.n	800c302 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c302:	bf00      	nop
 800c304:	3714      	adds	r7, #20
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	20004c2c 	.word	0x20004c2c
 800c314:	20004c34 	.word	0x20004c34

0800c318 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c31c:	2201      	movs	r2, #1
 800c31e:	490e      	ldr	r1, [pc, #56]	@ (800c358 <MX_USB_HOST_Init+0x40>)
 800c320:	480e      	ldr	r0, [pc, #56]	@ (800c35c <MX_USB_HOST_Init+0x44>)
 800c322:	f7fa ff83 	bl	800722c <USBH_Init>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d001      	beq.n	800c330 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c32c:	f7f4 fbdc 	bl	8000ae8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c330:	490b      	ldr	r1, [pc, #44]	@ (800c360 <MX_USB_HOST_Init+0x48>)
 800c332:	480a      	ldr	r0, [pc, #40]	@ (800c35c <MX_USB_HOST_Init+0x44>)
 800c334:	f7fb f849 	bl	80073ca <USBH_RegisterClass>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d001      	beq.n	800c342 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c33e:	f7f4 fbd3 	bl	8000ae8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c342:	4806      	ldr	r0, [pc, #24]	@ (800c35c <MX_USB_HOST_Init+0x44>)
 800c344:	f7fb f8cd 	bl	80074e2 <USBH_Start>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d001      	beq.n	800c352 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c34e:	f7f4 fbcb 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c352:	bf00      	nop
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	0800c365 	.word	0x0800c365
 800c35c:	20004c4c 	.word	0x20004c4c
 800c360:	2000000c 	.word	0x2000000c

0800c364 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	460b      	mov	r3, r1
 800c36e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c370:	78fb      	ldrb	r3, [r7, #3]
 800c372:	3b01      	subs	r3, #1
 800c374:	2b04      	cmp	r3, #4
 800c376:	d819      	bhi.n	800c3ac <USBH_UserProcess+0x48>
 800c378:	a201      	add	r2, pc, #4	@ (adr r2, 800c380 <USBH_UserProcess+0x1c>)
 800c37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37e:	bf00      	nop
 800c380:	0800c3ad 	.word	0x0800c3ad
 800c384:	0800c39d 	.word	0x0800c39d
 800c388:	0800c3ad 	.word	0x0800c3ad
 800c38c:	0800c3a5 	.word	0x0800c3a5
 800c390:	0800c395 	.word	0x0800c395
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c394:	4b09      	ldr	r3, [pc, #36]	@ (800c3bc <USBH_UserProcess+0x58>)
 800c396:	2203      	movs	r2, #3
 800c398:	701a      	strb	r2, [r3, #0]
  break;
 800c39a:	e008      	b.n	800c3ae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c39c:	4b07      	ldr	r3, [pc, #28]	@ (800c3bc <USBH_UserProcess+0x58>)
 800c39e:	2202      	movs	r2, #2
 800c3a0:	701a      	strb	r2, [r3, #0]
  break;
 800c3a2:	e004      	b.n	800c3ae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c3a4:	4b05      	ldr	r3, [pc, #20]	@ (800c3bc <USBH_UserProcess+0x58>)
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	701a      	strb	r2, [r3, #0]
  break;
 800c3aa:	e000      	b.n	800c3ae <USBH_UserProcess+0x4a>

  default:
  break;
 800c3ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c3ae:	bf00      	nop
 800c3b0:	370c      	adds	r7, #12
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	20005030 	.word	0x20005030

0800c3c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b08a      	sub	sp, #40	@ 0x28
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3c8:	f107 0314 	add.w	r3, r7, #20
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	601a      	str	r2, [r3, #0]
 800c3d0:	605a      	str	r2, [r3, #4]
 800c3d2:	609a      	str	r2, [r3, #8]
 800c3d4:	60da      	str	r2, [r3, #12]
 800c3d6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c3e0:	d147      	bne.n	800c472 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	613b      	str	r3, [r7, #16]
 800c3e6:	4b25      	ldr	r3, [pc, #148]	@ (800c47c <HAL_HCD_MspInit+0xbc>)
 800c3e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3ea:	4a24      	ldr	r2, [pc, #144]	@ (800c47c <HAL_HCD_MspInit+0xbc>)
 800c3ec:	f043 0301 	orr.w	r3, r3, #1
 800c3f0:	6313      	str	r3, [r2, #48]	@ 0x30
 800c3f2:	4b22      	ldr	r3, [pc, #136]	@ (800c47c <HAL_HCD_MspInit+0xbc>)
 800c3f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3f6:	f003 0301 	and.w	r3, r3, #1
 800c3fa:	613b      	str	r3, [r7, #16]
 800c3fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c3fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c404:	2300      	movs	r3, #0
 800c406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c408:	2300      	movs	r3, #0
 800c40a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c40c:	f107 0314 	add.w	r3, r7, #20
 800c410:	4619      	mov	r1, r3
 800c412:	481b      	ldr	r0, [pc, #108]	@ (800c480 <HAL_HCD_MspInit+0xc0>)
 800c414:	f7f4 ff42 	bl	800129c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c418:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800c41c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c41e:	2302      	movs	r3, #2
 800c420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c422:	2300      	movs	r3, #0
 800c424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c426:	2300      	movs	r3, #0
 800c428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c42a:	230a      	movs	r3, #10
 800c42c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c42e:	f107 0314 	add.w	r3, r7, #20
 800c432:	4619      	mov	r1, r3
 800c434:	4812      	ldr	r0, [pc, #72]	@ (800c480 <HAL_HCD_MspInit+0xc0>)
 800c436:	f7f4 ff31 	bl	800129c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c43a:	4b10      	ldr	r3, [pc, #64]	@ (800c47c <HAL_HCD_MspInit+0xbc>)
 800c43c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c43e:	4a0f      	ldr	r2, [pc, #60]	@ (800c47c <HAL_HCD_MspInit+0xbc>)
 800c440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c444:	6353      	str	r3, [r2, #52]	@ 0x34
 800c446:	2300      	movs	r3, #0
 800c448:	60fb      	str	r3, [r7, #12]
 800c44a:	4b0c      	ldr	r3, [pc, #48]	@ (800c47c <HAL_HCD_MspInit+0xbc>)
 800c44c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c44e:	4a0b      	ldr	r2, [pc, #44]	@ (800c47c <HAL_HCD_MspInit+0xbc>)
 800c450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c454:	6453      	str	r3, [r2, #68]	@ 0x44
 800c456:	4b09      	ldr	r3, [pc, #36]	@ (800c47c <HAL_HCD_MspInit+0xbc>)
 800c458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c45a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c45e:	60fb      	str	r3, [r7, #12]
 800c460:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c462:	2200      	movs	r2, #0
 800c464:	2105      	movs	r1, #5
 800c466:	2043      	movs	r0, #67	@ 0x43
 800c468:	f7f4 feee 	bl	8001248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c46c:	2043      	movs	r0, #67	@ 0x43
 800c46e:	f7f4 ff07 	bl	8001280 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c472:	bf00      	nop
 800c474:	3728      	adds	r7, #40	@ 0x28
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	40023800 	.word	0x40023800
 800c480:	40020000 	.word	0x40020000

0800c484 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c492:	4618      	mov	r0, r3
 800c494:	f7fb fcd7 	bl	8007e46 <USBH_LL_IncTimer>
}
 800c498:	bf00      	nop
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7fb fd1b 	bl	8007eea <USBH_LL_Connect>
}
 800c4b4:	bf00      	nop
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fb fd30 	bl	8007f30 <USBH_LL_Disconnect>
}
 800c4d0:	bf00      	nop
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	70fb      	strb	r3, [r7, #3]
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7fb fd67 	bl	8007fc2 <USBH_LL_NotifyURBChange>
#endif
}
 800c4f4:	bf00      	nop
 800c4f6:	3708      	adds	r7, #8
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7fb fcc5 	bl	8007e9a <USBH_LL_PortEnabled>
}
 800c510:	bf00      	nop
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c526:	4618      	mov	r0, r3
 800c528:	f7fb fcd1 	bl	8007ece <USBH_LL_PortDisabled>
}
 800c52c:	bf00      	nop
 800c52e:	3708      	adds	r7, #8
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c542:	2b01      	cmp	r3, #1
 800c544:	d12a      	bne.n	800c59c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c546:	4a18      	ldr	r2, [pc, #96]	@ (800c5a8 <USBH_LL_Init+0x74>)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a15      	ldr	r2, [pc, #84]	@ (800c5a8 <USBH_LL_Init+0x74>)
 800c552:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c556:	4b14      	ldr	r3, [pc, #80]	@ (800c5a8 <USBH_LL_Init+0x74>)
 800c558:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c55c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c55e:	4b12      	ldr	r3, [pc, #72]	@ (800c5a8 <USBH_LL_Init+0x74>)
 800c560:	2208      	movs	r2, #8
 800c562:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c564:	4b10      	ldr	r3, [pc, #64]	@ (800c5a8 <USBH_LL_Init+0x74>)
 800c566:	2201      	movs	r2, #1
 800c568:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c56a:	4b0f      	ldr	r3, [pc, #60]	@ (800c5a8 <USBH_LL_Init+0x74>)
 800c56c:	2200      	movs	r2, #0
 800c56e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c570:	4b0d      	ldr	r3, [pc, #52]	@ (800c5a8 <USBH_LL_Init+0x74>)
 800c572:	2202      	movs	r2, #2
 800c574:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c576:	4b0c      	ldr	r3, [pc, #48]	@ (800c5a8 <USBH_LL_Init+0x74>)
 800c578:	2200      	movs	r2, #0
 800c57a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c57c:	480a      	ldr	r0, [pc, #40]	@ (800c5a8 <USBH_LL_Init+0x74>)
 800c57e:	f7f5 f874 	bl	800166a <HAL_HCD_Init>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d001      	beq.n	800c58c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c588:	f7f4 faae 	bl	8000ae8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c58c:	4806      	ldr	r0, [pc, #24]	@ (800c5a8 <USBH_LL_Init+0x74>)
 800c58e:	f7f5 fcd5 	bl	8001f3c <HAL_HCD_GetCurrentFrame>
 800c592:	4603      	mov	r3, r0
 800c594:	4619      	mov	r1, r3
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7fb fc46 	bl	8007e28 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	20005034 	.word	0x20005034

0800c5ac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7f5 fc42 	bl	8001e4c <HAL_HCD_Start>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 f95e 	bl	800c890 <USBH_Get_USB_Status>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b084      	sub	sp, #16
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7f5 fc4a 	bl	8001e92 <HAL_HCD_Stop>
 800c5fe:	4603      	mov	r3, r0
 800c600:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c602:	7bfb      	ldrb	r3, [r7, #15]
 800c604:	4618      	mov	r0, r3
 800c606:	f000 f943 	bl	800c890 <USBH_Get_USB_Status>
 800c60a:	4603      	mov	r3, r0
 800c60c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c60e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c610:	4618      	mov	r0, r3
 800c612:	3710      	adds	r7, #16
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c620:	2301      	movs	r3, #1
 800c622:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7f5 fc94 	bl	8001f58 <HAL_HCD_GetCurrentSpeed>
 800c630:	4603      	mov	r3, r0
 800c632:	2b02      	cmp	r3, #2
 800c634:	d00c      	beq.n	800c650 <USBH_LL_GetSpeed+0x38>
 800c636:	2b02      	cmp	r3, #2
 800c638:	d80d      	bhi.n	800c656 <USBH_LL_GetSpeed+0x3e>
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d002      	beq.n	800c644 <USBH_LL_GetSpeed+0x2c>
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d003      	beq.n	800c64a <USBH_LL_GetSpeed+0x32>
 800c642:	e008      	b.n	800c656 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c644:	2300      	movs	r3, #0
 800c646:	73fb      	strb	r3, [r7, #15]
    break;
 800c648:	e008      	b.n	800c65c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c64a:	2301      	movs	r3, #1
 800c64c:	73fb      	strb	r3, [r7, #15]
    break;
 800c64e:	e005      	b.n	800c65c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c650:	2302      	movs	r3, #2
 800c652:	73fb      	strb	r3, [r7, #15]
    break;
 800c654:	e002      	b.n	800c65c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c656:	2301      	movs	r3, #1
 800c658:	73fb      	strb	r3, [r7, #15]
    break;
 800c65a:	bf00      	nop
  }
  return  speed;
 800c65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b084      	sub	sp, #16
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c66e:	2300      	movs	r3, #0
 800c670:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c672:	2300      	movs	r3, #0
 800c674:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7f5 fc25 	bl	8001ecc <HAL_HCD_ResetPort>
 800c682:	4603      	mov	r3, r0
 800c684:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c686:	7bfb      	ldrb	r3, [r7, #15]
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 f901 	bl	800c890 <USBH_Get_USB_Status>
 800c68e:	4603      	mov	r3, r0
 800c690:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c692:	7bbb      	ldrb	r3, [r7, #14]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c6ae:	78fa      	ldrb	r2, [r7, #3]
 800c6b0:	4611      	mov	r1, r2
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7f5 fc2d 	bl	8001f12 <HAL_HCD_HC_GetXferCount>
 800c6b8:	4603      	mov	r3, r0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c6c2:	b590      	push	{r4, r7, lr}
 800c6c4:	b089      	sub	sp, #36	@ 0x24
 800c6c6:	af04      	add	r7, sp, #16
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	4608      	mov	r0, r1
 800c6cc:	4611      	mov	r1, r2
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	70fb      	strb	r3, [r7, #3]
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	70bb      	strb	r3, [r7, #2]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c6ea:	787c      	ldrb	r4, [r7, #1]
 800c6ec:	78ba      	ldrb	r2, [r7, #2]
 800c6ee:	78f9      	ldrb	r1, [r7, #3]
 800c6f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c6f2:	9302      	str	r3, [sp, #8]
 800c6f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c6f8:	9301      	str	r3, [sp, #4]
 800c6fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	4623      	mov	r3, r4
 800c702:	f7f5 f819 	bl	8001738 <HAL_HCD_HC_Init>
 800c706:	4603      	mov	r3, r0
 800c708:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 f8bf 	bl	800c890 <USBH_Get_USB_Status>
 800c712:	4603      	mov	r3, r0
 800c714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c716:	7bbb      	ldrb	r3, [r7, #14]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3714      	adds	r7, #20
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd90      	pop	{r4, r7, pc}

0800c720 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	460b      	mov	r3, r1
 800c72a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c72c:	2300      	movs	r3, #0
 800c72e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c730:	2300      	movs	r3, #0
 800c732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c73a:	78fa      	ldrb	r2, [r7, #3]
 800c73c:	4611      	mov	r1, r2
 800c73e:	4618      	mov	r0, r3
 800c740:	f7f5 f8b2 	bl	80018a8 <HAL_HCD_HC_Halt>
 800c744:	4603      	mov	r3, r0
 800c746:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c748:	7bfb      	ldrb	r3, [r7, #15]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 f8a0 	bl	800c890 <USBH_Get_USB_Status>
 800c750:	4603      	mov	r3, r0
 800c752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c754:	7bbb      	ldrb	r3, [r7, #14]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c75e:	b590      	push	{r4, r7, lr}
 800c760:	b089      	sub	sp, #36	@ 0x24
 800c762:	af04      	add	r7, sp, #16
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	4608      	mov	r0, r1
 800c768:	4611      	mov	r1, r2
 800c76a:	461a      	mov	r2, r3
 800c76c:	4603      	mov	r3, r0
 800c76e:	70fb      	strb	r3, [r7, #3]
 800c770:	460b      	mov	r3, r1
 800c772:	70bb      	strb	r3, [r7, #2]
 800c774:	4613      	mov	r3, r2
 800c776:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c778:	2300      	movs	r3, #0
 800c77a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c77c:	2300      	movs	r3, #0
 800c77e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c786:	787c      	ldrb	r4, [r7, #1]
 800c788:	78ba      	ldrb	r2, [r7, #2]
 800c78a:	78f9      	ldrb	r1, [r7, #3]
 800c78c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c790:	9303      	str	r3, [sp, #12]
 800c792:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c794:	9302      	str	r3, [sp, #8]
 800c796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c798:	9301      	str	r3, [sp, #4]
 800c79a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	4623      	mov	r3, r4
 800c7a2:	f7f5 f8a5 	bl	80018f0 <HAL_HCD_HC_SubmitRequest>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c7aa:	7bfb      	ldrb	r3, [r7, #15]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 f86f 	bl	800c890 <USBH_Get_USB_Status>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd90      	pop	{r4, r7, pc}

0800c7c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c7d2:	78fa      	ldrb	r2, [r7, #3]
 800c7d4:	4611      	mov	r1, r2
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7f5 fb86 	bl	8001ee8 <HAL_HCD_HC_GetURBState>
 800c7dc:	4603      	mov	r3, r0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b082      	sub	sp, #8
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d103      	bne.n	800c804 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c7fc:	78fb      	ldrb	r3, [r7, #3]
 800c7fe:	4618      	mov	r0, r3
 800c800:	f000 f872 	bl	800c8e8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c804:	20c8      	movs	r0, #200	@ 0xc8
 800c806:	f7f4 fc43 	bl	8001090 <HAL_Delay>
  return USBH_OK;
 800c80a:	2300      	movs	r3, #0
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3708      	adds	r7, #8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c814:	b480      	push	{r7}
 800c816:	b085      	sub	sp, #20
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	460b      	mov	r3, r1
 800c81e:	70fb      	strb	r3, [r7, #3]
 800c820:	4613      	mov	r3, r2
 800c822:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c82a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c82c:	78fa      	ldrb	r2, [r7, #3]
 800c82e:	68f9      	ldr	r1, [r7, #12]
 800c830:	4613      	mov	r3, r2
 800c832:	011b      	lsls	r3, r3, #4
 800c834:	1a9b      	subs	r3, r3, r2
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	440b      	add	r3, r1
 800c83a:	3317      	adds	r3, #23
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00a      	beq.n	800c858 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c842:	78fa      	ldrb	r2, [r7, #3]
 800c844:	68f9      	ldr	r1, [r7, #12]
 800c846:	4613      	mov	r3, r2
 800c848:	011b      	lsls	r3, r3, #4
 800c84a:	1a9b      	subs	r3, r3, r2
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	440b      	add	r3, r1
 800c850:	333c      	adds	r3, #60	@ 0x3c
 800c852:	78ba      	ldrb	r2, [r7, #2]
 800c854:	701a      	strb	r2, [r3, #0]
 800c856:	e009      	b.n	800c86c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c858:	78fa      	ldrb	r2, [r7, #3]
 800c85a:	68f9      	ldr	r1, [r7, #12]
 800c85c:	4613      	mov	r3, r2
 800c85e:	011b      	lsls	r3, r3, #4
 800c860:	1a9b      	subs	r3, r3, r2
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	440b      	add	r3, r1
 800c866:	333d      	adds	r3, #61	@ 0x3d
 800c868:	78ba      	ldrb	r2, [r7, #2]
 800c86a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3714      	adds	r7, #20
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr

0800c87a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b082      	sub	sp, #8
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f7f4 fc04 	bl	8001090 <HAL_Delay>
}
 800c888:	bf00      	nop
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	4603      	mov	r3, r0
 800c898:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c89a:	2300      	movs	r3, #0
 800c89c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c89e:	79fb      	ldrb	r3, [r7, #7]
 800c8a0:	2b03      	cmp	r3, #3
 800c8a2:	d817      	bhi.n	800c8d4 <USBH_Get_USB_Status+0x44>
 800c8a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c8ac <USBH_Get_USB_Status+0x1c>)
 800c8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8aa:	bf00      	nop
 800c8ac:	0800c8bd 	.word	0x0800c8bd
 800c8b0:	0800c8c3 	.word	0x0800c8c3
 800c8b4:	0800c8c9 	.word	0x0800c8c9
 800c8b8:	0800c8cf 	.word	0x0800c8cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c0:	e00b      	b.n	800c8da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c8c2:	2302      	movs	r3, #2
 800c8c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c6:	e008      	b.n	800c8da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c8cc:	e005      	b.n	800c8da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c8ce:	2302      	movs	r3, #2
 800c8d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c8d2:	e002      	b.n	800c8da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c8d4:	2302      	movs	r3, #2
 800c8d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c8d8:	bf00      	nop
  }
  return usb_status;
 800c8da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3714      	adds	r7, #20
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c8f2:	79fb      	ldrb	r3, [r7, #7]
 800c8f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c8f6:	79fb      	ldrb	r3, [r7, #7]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d102      	bne.n	800c902 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	73fb      	strb	r3, [r7, #15]
 800c900:	e001      	b.n	800c906 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c902:	2301      	movs	r3, #1
 800c904:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c906:	7bfb      	ldrb	r3, [r7, #15]
 800c908:	461a      	mov	r2, r3
 800c90a:	2101      	movs	r1, #1
 800c90c:	4803      	ldr	r0, [pc, #12]	@ (800c91c <MX_DriverVbusFS+0x34>)
 800c90e:	f7f4 fe79 	bl	8001604 <HAL_GPIO_WritePin>
}
 800c912:	bf00      	nop
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	40020800 	.word	0x40020800

0800c920 <malloc>:
 800c920:	4b02      	ldr	r3, [pc, #8]	@ (800c92c <malloc+0xc>)
 800c922:	4601      	mov	r1, r0
 800c924:	6818      	ldr	r0, [r3, #0]
 800c926:	f000 b82d 	b.w	800c984 <_malloc_r>
 800c92a:	bf00      	nop
 800c92c:	20000030 	.word	0x20000030

0800c930 <free>:
 800c930:	4b02      	ldr	r3, [pc, #8]	@ (800c93c <free+0xc>)
 800c932:	4601      	mov	r1, r0
 800c934:	6818      	ldr	r0, [r3, #0]
 800c936:	f000 b959 	b.w	800cbec <_free_r>
 800c93a:	bf00      	nop
 800c93c:	20000030 	.word	0x20000030

0800c940 <sbrk_aligned>:
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	4e0f      	ldr	r6, [pc, #60]	@ (800c980 <sbrk_aligned+0x40>)
 800c944:	460c      	mov	r4, r1
 800c946:	6831      	ldr	r1, [r6, #0]
 800c948:	4605      	mov	r5, r0
 800c94a:	b911      	cbnz	r1, 800c952 <sbrk_aligned+0x12>
 800c94c:	f000 f904 	bl	800cb58 <_sbrk_r>
 800c950:	6030      	str	r0, [r6, #0]
 800c952:	4621      	mov	r1, r4
 800c954:	4628      	mov	r0, r5
 800c956:	f000 f8ff 	bl	800cb58 <_sbrk_r>
 800c95a:	1c43      	adds	r3, r0, #1
 800c95c:	d103      	bne.n	800c966 <sbrk_aligned+0x26>
 800c95e:	f04f 34ff 	mov.w	r4, #4294967295
 800c962:	4620      	mov	r0, r4
 800c964:	bd70      	pop	{r4, r5, r6, pc}
 800c966:	1cc4      	adds	r4, r0, #3
 800c968:	f024 0403 	bic.w	r4, r4, #3
 800c96c:	42a0      	cmp	r0, r4
 800c96e:	d0f8      	beq.n	800c962 <sbrk_aligned+0x22>
 800c970:	1a21      	subs	r1, r4, r0
 800c972:	4628      	mov	r0, r5
 800c974:	f000 f8f0 	bl	800cb58 <_sbrk_r>
 800c978:	3001      	adds	r0, #1
 800c97a:	d1f2      	bne.n	800c962 <sbrk_aligned+0x22>
 800c97c:	e7ef      	b.n	800c95e <sbrk_aligned+0x1e>
 800c97e:	bf00      	nop
 800c980:	20005414 	.word	0x20005414

0800c984 <_malloc_r>:
 800c984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c988:	1ccd      	adds	r5, r1, #3
 800c98a:	f025 0503 	bic.w	r5, r5, #3
 800c98e:	3508      	adds	r5, #8
 800c990:	2d0c      	cmp	r5, #12
 800c992:	bf38      	it	cc
 800c994:	250c      	movcc	r5, #12
 800c996:	2d00      	cmp	r5, #0
 800c998:	4606      	mov	r6, r0
 800c99a:	db01      	blt.n	800c9a0 <_malloc_r+0x1c>
 800c99c:	42a9      	cmp	r1, r5
 800c99e:	d904      	bls.n	800c9aa <_malloc_r+0x26>
 800c9a0:	230c      	movs	r3, #12
 800c9a2:	6033      	str	r3, [r6, #0]
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca80 <_malloc_r+0xfc>
 800c9ae:	f000 f869 	bl	800ca84 <__malloc_lock>
 800c9b2:	f8d8 3000 	ldr.w	r3, [r8]
 800c9b6:	461c      	mov	r4, r3
 800c9b8:	bb44      	cbnz	r4, 800ca0c <_malloc_r+0x88>
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f7ff ffbf 	bl	800c940 <sbrk_aligned>
 800c9c2:	1c43      	adds	r3, r0, #1
 800c9c4:	4604      	mov	r4, r0
 800c9c6:	d158      	bne.n	800ca7a <_malloc_r+0xf6>
 800c9c8:	f8d8 4000 	ldr.w	r4, [r8]
 800c9cc:	4627      	mov	r7, r4
 800c9ce:	2f00      	cmp	r7, #0
 800c9d0:	d143      	bne.n	800ca5a <_malloc_r+0xd6>
 800c9d2:	2c00      	cmp	r4, #0
 800c9d4:	d04b      	beq.n	800ca6e <_malloc_r+0xea>
 800c9d6:	6823      	ldr	r3, [r4, #0]
 800c9d8:	4639      	mov	r1, r7
 800c9da:	4630      	mov	r0, r6
 800c9dc:	eb04 0903 	add.w	r9, r4, r3
 800c9e0:	f000 f8ba 	bl	800cb58 <_sbrk_r>
 800c9e4:	4581      	cmp	r9, r0
 800c9e6:	d142      	bne.n	800ca6e <_malloc_r+0xea>
 800c9e8:	6821      	ldr	r1, [r4, #0]
 800c9ea:	1a6d      	subs	r5, r5, r1
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	f7ff ffa6 	bl	800c940 <sbrk_aligned>
 800c9f4:	3001      	adds	r0, #1
 800c9f6:	d03a      	beq.n	800ca6e <_malloc_r+0xea>
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	442b      	add	r3, r5
 800c9fc:	6023      	str	r3, [r4, #0]
 800c9fe:	f8d8 3000 	ldr.w	r3, [r8]
 800ca02:	685a      	ldr	r2, [r3, #4]
 800ca04:	bb62      	cbnz	r2, 800ca60 <_malloc_r+0xdc>
 800ca06:	f8c8 7000 	str.w	r7, [r8]
 800ca0a:	e00f      	b.n	800ca2c <_malloc_r+0xa8>
 800ca0c:	6822      	ldr	r2, [r4, #0]
 800ca0e:	1b52      	subs	r2, r2, r5
 800ca10:	d420      	bmi.n	800ca54 <_malloc_r+0xd0>
 800ca12:	2a0b      	cmp	r2, #11
 800ca14:	d917      	bls.n	800ca46 <_malloc_r+0xc2>
 800ca16:	1961      	adds	r1, r4, r5
 800ca18:	42a3      	cmp	r3, r4
 800ca1a:	6025      	str	r5, [r4, #0]
 800ca1c:	bf18      	it	ne
 800ca1e:	6059      	strne	r1, [r3, #4]
 800ca20:	6863      	ldr	r3, [r4, #4]
 800ca22:	bf08      	it	eq
 800ca24:	f8c8 1000 	streq.w	r1, [r8]
 800ca28:	5162      	str	r2, [r4, r5]
 800ca2a:	604b      	str	r3, [r1, #4]
 800ca2c:	4630      	mov	r0, r6
 800ca2e:	f000 f82f 	bl	800ca90 <__malloc_unlock>
 800ca32:	f104 000b 	add.w	r0, r4, #11
 800ca36:	1d23      	adds	r3, r4, #4
 800ca38:	f020 0007 	bic.w	r0, r0, #7
 800ca3c:	1ac2      	subs	r2, r0, r3
 800ca3e:	bf1c      	itt	ne
 800ca40:	1a1b      	subne	r3, r3, r0
 800ca42:	50a3      	strne	r3, [r4, r2]
 800ca44:	e7af      	b.n	800c9a6 <_malloc_r+0x22>
 800ca46:	6862      	ldr	r2, [r4, #4]
 800ca48:	42a3      	cmp	r3, r4
 800ca4a:	bf0c      	ite	eq
 800ca4c:	f8c8 2000 	streq.w	r2, [r8]
 800ca50:	605a      	strne	r2, [r3, #4]
 800ca52:	e7eb      	b.n	800ca2c <_malloc_r+0xa8>
 800ca54:	4623      	mov	r3, r4
 800ca56:	6864      	ldr	r4, [r4, #4]
 800ca58:	e7ae      	b.n	800c9b8 <_malloc_r+0x34>
 800ca5a:	463c      	mov	r4, r7
 800ca5c:	687f      	ldr	r7, [r7, #4]
 800ca5e:	e7b6      	b.n	800c9ce <_malloc_r+0x4a>
 800ca60:	461a      	mov	r2, r3
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	42a3      	cmp	r3, r4
 800ca66:	d1fb      	bne.n	800ca60 <_malloc_r+0xdc>
 800ca68:	2300      	movs	r3, #0
 800ca6a:	6053      	str	r3, [r2, #4]
 800ca6c:	e7de      	b.n	800ca2c <_malloc_r+0xa8>
 800ca6e:	230c      	movs	r3, #12
 800ca70:	6033      	str	r3, [r6, #0]
 800ca72:	4630      	mov	r0, r6
 800ca74:	f000 f80c 	bl	800ca90 <__malloc_unlock>
 800ca78:	e794      	b.n	800c9a4 <_malloc_r+0x20>
 800ca7a:	6005      	str	r5, [r0, #0]
 800ca7c:	e7d6      	b.n	800ca2c <_malloc_r+0xa8>
 800ca7e:	bf00      	nop
 800ca80:	20005418 	.word	0x20005418

0800ca84 <__malloc_lock>:
 800ca84:	4801      	ldr	r0, [pc, #4]	@ (800ca8c <__malloc_lock+0x8>)
 800ca86:	f000 b8a1 	b.w	800cbcc <__retarget_lock_acquire_recursive>
 800ca8a:	bf00      	nop
 800ca8c:	20005558 	.word	0x20005558

0800ca90 <__malloc_unlock>:
 800ca90:	4801      	ldr	r0, [pc, #4]	@ (800ca98 <__malloc_unlock+0x8>)
 800ca92:	f000 b89c 	b.w	800cbce <__retarget_lock_release_recursive>
 800ca96:	bf00      	nop
 800ca98:	20005558 	.word	0x20005558

0800ca9c <memset>:
 800ca9c:	4402      	add	r2, r0
 800ca9e:	4603      	mov	r3, r0
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d100      	bne.n	800caa6 <memset+0xa>
 800caa4:	4770      	bx	lr
 800caa6:	f803 1b01 	strb.w	r1, [r3], #1
 800caaa:	e7f9      	b.n	800caa0 <memset+0x4>

0800caac <_reclaim_reent>:
 800caac:	4b29      	ldr	r3, [pc, #164]	@ (800cb54 <_reclaim_reent+0xa8>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4283      	cmp	r3, r0
 800cab2:	b570      	push	{r4, r5, r6, lr}
 800cab4:	4604      	mov	r4, r0
 800cab6:	d04b      	beq.n	800cb50 <_reclaim_reent+0xa4>
 800cab8:	69c3      	ldr	r3, [r0, #28]
 800caba:	b1ab      	cbz	r3, 800cae8 <_reclaim_reent+0x3c>
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	b16b      	cbz	r3, 800cadc <_reclaim_reent+0x30>
 800cac0:	2500      	movs	r5, #0
 800cac2:	69e3      	ldr	r3, [r4, #28]
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	5959      	ldr	r1, [r3, r5]
 800cac8:	2900      	cmp	r1, #0
 800caca:	d13b      	bne.n	800cb44 <_reclaim_reent+0x98>
 800cacc:	3504      	adds	r5, #4
 800cace:	2d80      	cmp	r5, #128	@ 0x80
 800cad0:	d1f7      	bne.n	800cac2 <_reclaim_reent+0x16>
 800cad2:	69e3      	ldr	r3, [r4, #28]
 800cad4:	4620      	mov	r0, r4
 800cad6:	68d9      	ldr	r1, [r3, #12]
 800cad8:	f000 f888 	bl	800cbec <_free_r>
 800cadc:	69e3      	ldr	r3, [r4, #28]
 800cade:	6819      	ldr	r1, [r3, #0]
 800cae0:	b111      	cbz	r1, 800cae8 <_reclaim_reent+0x3c>
 800cae2:	4620      	mov	r0, r4
 800cae4:	f000 f882 	bl	800cbec <_free_r>
 800cae8:	6961      	ldr	r1, [r4, #20]
 800caea:	b111      	cbz	r1, 800caf2 <_reclaim_reent+0x46>
 800caec:	4620      	mov	r0, r4
 800caee:	f000 f87d 	bl	800cbec <_free_r>
 800caf2:	69e1      	ldr	r1, [r4, #28]
 800caf4:	b111      	cbz	r1, 800cafc <_reclaim_reent+0x50>
 800caf6:	4620      	mov	r0, r4
 800caf8:	f000 f878 	bl	800cbec <_free_r>
 800cafc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cafe:	b111      	cbz	r1, 800cb06 <_reclaim_reent+0x5a>
 800cb00:	4620      	mov	r0, r4
 800cb02:	f000 f873 	bl	800cbec <_free_r>
 800cb06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb08:	b111      	cbz	r1, 800cb10 <_reclaim_reent+0x64>
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f000 f86e 	bl	800cbec <_free_r>
 800cb10:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cb12:	b111      	cbz	r1, 800cb1a <_reclaim_reent+0x6e>
 800cb14:	4620      	mov	r0, r4
 800cb16:	f000 f869 	bl	800cbec <_free_r>
 800cb1a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cb1c:	b111      	cbz	r1, 800cb24 <_reclaim_reent+0x78>
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f000 f864 	bl	800cbec <_free_r>
 800cb24:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cb26:	b111      	cbz	r1, 800cb2e <_reclaim_reent+0x82>
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f000 f85f 	bl	800cbec <_free_r>
 800cb2e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cb30:	b111      	cbz	r1, 800cb38 <_reclaim_reent+0x8c>
 800cb32:	4620      	mov	r0, r4
 800cb34:	f000 f85a 	bl	800cbec <_free_r>
 800cb38:	6a23      	ldr	r3, [r4, #32]
 800cb3a:	b14b      	cbz	r3, 800cb50 <_reclaim_reent+0xa4>
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb42:	4718      	bx	r3
 800cb44:	680e      	ldr	r6, [r1, #0]
 800cb46:	4620      	mov	r0, r4
 800cb48:	f000 f850 	bl	800cbec <_free_r>
 800cb4c:	4631      	mov	r1, r6
 800cb4e:	e7bb      	b.n	800cac8 <_reclaim_reent+0x1c>
 800cb50:	bd70      	pop	{r4, r5, r6, pc}
 800cb52:	bf00      	nop
 800cb54:	20000030 	.word	0x20000030

0800cb58 <_sbrk_r>:
 800cb58:	b538      	push	{r3, r4, r5, lr}
 800cb5a:	4d06      	ldr	r5, [pc, #24]	@ (800cb74 <_sbrk_r+0x1c>)
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	4604      	mov	r4, r0
 800cb60:	4608      	mov	r0, r1
 800cb62:	602b      	str	r3, [r5, #0]
 800cb64:	f7f4 f9e0 	bl	8000f28 <_sbrk>
 800cb68:	1c43      	adds	r3, r0, #1
 800cb6a:	d102      	bne.n	800cb72 <_sbrk_r+0x1a>
 800cb6c:	682b      	ldr	r3, [r5, #0]
 800cb6e:	b103      	cbz	r3, 800cb72 <_sbrk_r+0x1a>
 800cb70:	6023      	str	r3, [r4, #0]
 800cb72:	bd38      	pop	{r3, r4, r5, pc}
 800cb74:	20005554 	.word	0x20005554

0800cb78 <__errno>:
 800cb78:	4b01      	ldr	r3, [pc, #4]	@ (800cb80 <__errno+0x8>)
 800cb7a:	6818      	ldr	r0, [r3, #0]
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	20000030 	.word	0x20000030

0800cb84 <__libc_init_array>:
 800cb84:	b570      	push	{r4, r5, r6, lr}
 800cb86:	4d0d      	ldr	r5, [pc, #52]	@ (800cbbc <__libc_init_array+0x38>)
 800cb88:	4c0d      	ldr	r4, [pc, #52]	@ (800cbc0 <__libc_init_array+0x3c>)
 800cb8a:	1b64      	subs	r4, r4, r5
 800cb8c:	10a4      	asrs	r4, r4, #2
 800cb8e:	2600      	movs	r6, #0
 800cb90:	42a6      	cmp	r6, r4
 800cb92:	d109      	bne.n	800cba8 <__libc_init_array+0x24>
 800cb94:	4d0b      	ldr	r5, [pc, #44]	@ (800cbc4 <__libc_init_array+0x40>)
 800cb96:	4c0c      	ldr	r4, [pc, #48]	@ (800cbc8 <__libc_init_array+0x44>)
 800cb98:	f000 f872 	bl	800cc80 <_init>
 800cb9c:	1b64      	subs	r4, r4, r5
 800cb9e:	10a4      	asrs	r4, r4, #2
 800cba0:	2600      	movs	r6, #0
 800cba2:	42a6      	cmp	r6, r4
 800cba4:	d105      	bne.n	800cbb2 <__libc_init_array+0x2e>
 800cba6:	bd70      	pop	{r4, r5, r6, pc}
 800cba8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbac:	4798      	blx	r3
 800cbae:	3601      	adds	r6, #1
 800cbb0:	e7ee      	b.n	800cb90 <__libc_init_array+0xc>
 800cbb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbb6:	4798      	blx	r3
 800cbb8:	3601      	adds	r6, #1
 800cbba:	e7f2      	b.n	800cba2 <__libc_init_array+0x1e>
 800cbbc:	0800cdd4 	.word	0x0800cdd4
 800cbc0:	0800cdd4 	.word	0x0800cdd4
 800cbc4:	0800cdd4 	.word	0x0800cdd4
 800cbc8:	0800cdd8 	.word	0x0800cdd8

0800cbcc <__retarget_lock_acquire_recursive>:
 800cbcc:	4770      	bx	lr

0800cbce <__retarget_lock_release_recursive>:
 800cbce:	4770      	bx	lr

0800cbd0 <memcpy>:
 800cbd0:	440a      	add	r2, r1
 800cbd2:	4291      	cmp	r1, r2
 800cbd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbd8:	d100      	bne.n	800cbdc <memcpy+0xc>
 800cbda:	4770      	bx	lr
 800cbdc:	b510      	push	{r4, lr}
 800cbde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbe6:	4291      	cmp	r1, r2
 800cbe8:	d1f9      	bne.n	800cbde <memcpy+0xe>
 800cbea:	bd10      	pop	{r4, pc}

0800cbec <_free_r>:
 800cbec:	b538      	push	{r3, r4, r5, lr}
 800cbee:	4605      	mov	r5, r0
 800cbf0:	2900      	cmp	r1, #0
 800cbf2:	d041      	beq.n	800cc78 <_free_r+0x8c>
 800cbf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbf8:	1f0c      	subs	r4, r1, #4
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	bfb8      	it	lt
 800cbfe:	18e4      	addlt	r4, r4, r3
 800cc00:	f7ff ff40 	bl	800ca84 <__malloc_lock>
 800cc04:	4a1d      	ldr	r2, [pc, #116]	@ (800cc7c <_free_r+0x90>)
 800cc06:	6813      	ldr	r3, [r2, #0]
 800cc08:	b933      	cbnz	r3, 800cc18 <_free_r+0x2c>
 800cc0a:	6063      	str	r3, [r4, #4]
 800cc0c:	6014      	str	r4, [r2, #0]
 800cc0e:	4628      	mov	r0, r5
 800cc10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc14:	f7ff bf3c 	b.w	800ca90 <__malloc_unlock>
 800cc18:	42a3      	cmp	r3, r4
 800cc1a:	d908      	bls.n	800cc2e <_free_r+0x42>
 800cc1c:	6820      	ldr	r0, [r4, #0]
 800cc1e:	1821      	adds	r1, r4, r0
 800cc20:	428b      	cmp	r3, r1
 800cc22:	bf01      	itttt	eq
 800cc24:	6819      	ldreq	r1, [r3, #0]
 800cc26:	685b      	ldreq	r3, [r3, #4]
 800cc28:	1809      	addeq	r1, r1, r0
 800cc2a:	6021      	streq	r1, [r4, #0]
 800cc2c:	e7ed      	b.n	800cc0a <_free_r+0x1e>
 800cc2e:	461a      	mov	r2, r3
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	b10b      	cbz	r3, 800cc38 <_free_r+0x4c>
 800cc34:	42a3      	cmp	r3, r4
 800cc36:	d9fa      	bls.n	800cc2e <_free_r+0x42>
 800cc38:	6811      	ldr	r1, [r2, #0]
 800cc3a:	1850      	adds	r0, r2, r1
 800cc3c:	42a0      	cmp	r0, r4
 800cc3e:	d10b      	bne.n	800cc58 <_free_r+0x6c>
 800cc40:	6820      	ldr	r0, [r4, #0]
 800cc42:	4401      	add	r1, r0
 800cc44:	1850      	adds	r0, r2, r1
 800cc46:	4283      	cmp	r3, r0
 800cc48:	6011      	str	r1, [r2, #0]
 800cc4a:	d1e0      	bne.n	800cc0e <_free_r+0x22>
 800cc4c:	6818      	ldr	r0, [r3, #0]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	6053      	str	r3, [r2, #4]
 800cc52:	4408      	add	r0, r1
 800cc54:	6010      	str	r0, [r2, #0]
 800cc56:	e7da      	b.n	800cc0e <_free_r+0x22>
 800cc58:	d902      	bls.n	800cc60 <_free_r+0x74>
 800cc5a:	230c      	movs	r3, #12
 800cc5c:	602b      	str	r3, [r5, #0]
 800cc5e:	e7d6      	b.n	800cc0e <_free_r+0x22>
 800cc60:	6820      	ldr	r0, [r4, #0]
 800cc62:	1821      	adds	r1, r4, r0
 800cc64:	428b      	cmp	r3, r1
 800cc66:	bf04      	itt	eq
 800cc68:	6819      	ldreq	r1, [r3, #0]
 800cc6a:	685b      	ldreq	r3, [r3, #4]
 800cc6c:	6063      	str	r3, [r4, #4]
 800cc6e:	bf04      	itt	eq
 800cc70:	1809      	addeq	r1, r1, r0
 800cc72:	6021      	streq	r1, [r4, #0]
 800cc74:	6054      	str	r4, [r2, #4]
 800cc76:	e7ca      	b.n	800cc0e <_free_r+0x22>
 800cc78:	bd38      	pop	{r3, r4, r5, pc}
 800cc7a:	bf00      	nop
 800cc7c:	20005418 	.word	0x20005418

0800cc80 <_init>:
 800cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc82:	bf00      	nop
 800cc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc86:	bc08      	pop	{r3}
 800cc88:	469e      	mov	lr, r3
 800cc8a:	4770      	bx	lr

0800cc8c <_fini>:
 800cc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc8e:	bf00      	nop
 800cc90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc92:	bc08      	pop	{r3}
 800cc94:	469e      	mov	lr, r3
 800cc96:	4770      	bx	lr
