
INTP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5ac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800c73c  0800c73c  0000d73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c870  0800c870  0000e080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c870  0800c870  0000d870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c878  0800c878  0000e080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c878  0800c878  0000d878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c87c  0800c87c  0000d87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800c880  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e080  2**0
                  CONTENTS
 10 .bss          000053fc  20000080  20000080  0000e080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000547c  2000547c  0000e080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002386a  00000000  00000000  0000e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053ef  00000000  00000000  0003191a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001eb8  00000000  00000000  00036d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017bc  00000000  00000000  00038bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006a19  00000000  00000000  0003a384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026c39  00000000  00000000  00040d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de813  00000000  00000000  000679d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001461e9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085fc  00000000  00000000  0014622c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  0014e828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c724 	.word	0x0800c724

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800c724 	.word	0x0800c724

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fcfa 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f868 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f99a 	bl	8000804 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f8ce 	bl	8000670 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f8fa 	bl	80006cc <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f928 	bl	800072c <MX_SPI1_Init>
  MX_TIM7_Init();
 80004dc:	f000 f95c 	bl	8000798 <MX_TIM7_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e0:	f008 fbd6 	bl	8008c90 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 80004e4:	4b1d      	ldr	r3, [pc, #116]	@ (800055c <main+0x9c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	2101      	movs	r1, #1
 80004ea:	481d      	ldr	r0, [pc, #116]	@ (8000560 <main+0xa0>)
 80004ec:	f008 fcdc 	bl	8008ea8 <osTimerNew>
 80004f0:	4603      	mov	r3, r0
 80004f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000564 <main+0xa4>)
 80004f4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(myTimer01Handle, pdMS_TO_TICKS(100));
 80004f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000564 <main+0xa4>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2164      	movs	r1, #100	@ 0x64
 80004fc:	4618      	mov	r0, r3
 80004fe:	f008 fd4f 	bl	8008fa0 <osTimerStart>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000502:	4a19      	ldr	r2, [pc, #100]	@ (8000568 <main+0xa8>)
 8000504:	2102      	movs	r1, #2
 8000506:	2010      	movs	r0, #16
 8000508:	f008 fd78 	bl	8008ffc <osMessageQueueNew>
 800050c:	4603      	mov	r3, r0
 800050e:	4a17      	ldr	r2, [pc, #92]	@ (800056c <main+0xac>)
 8000510:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue02_attributes);
 8000512:	4a17      	ldr	r2, [pc, #92]	@ (8000570 <main+0xb0>)
 8000514:	2102      	movs	r1, #2
 8000516:	2010      	movs	r0, #16
 8000518:	f008 fd70 	bl	8008ffc <osMessageQueueNew>
 800051c:	4603      	mov	r3, r0
 800051e:	4a15      	ldr	r2, [pc, #84]	@ (8000574 <main+0xb4>)
 8000520:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000522:	4a15      	ldr	r2, [pc, #84]	@ (8000578 <main+0xb8>)
 8000524:	2100      	movs	r1, #0
 8000526:	4815      	ldr	r0, [pc, #84]	@ (800057c <main+0xbc>)
 8000528:	f008 fbfc 	bl	8008d24 <osThreadNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a14      	ldr	r2, [pc, #80]	@ (8000580 <main+0xc0>)
 8000530:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000532:	4a14      	ldr	r2, [pc, #80]	@ (8000584 <main+0xc4>)
 8000534:	2100      	movs	r1, #0
 8000536:	4814      	ldr	r0, [pc, #80]	@ (8000588 <main+0xc8>)
 8000538:	f008 fbf4 	bl	8008d24 <osThreadNew>
 800053c:	4603      	mov	r3, r0
 800053e:	4a13      	ldr	r2, [pc, #76]	@ (800058c <main+0xcc>)
 8000540:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000542:	4a13      	ldr	r2, [pc, #76]	@ (8000590 <main+0xd0>)
 8000544:	2100      	movs	r1, #0
 8000546:	4813      	ldr	r0, [pc, #76]	@ (8000594 <main+0xd4>)
 8000548:	f008 fbec 	bl	8008d24 <osThreadNew>
 800054c:	4603      	mov	r3, r0
 800054e:	4a12      	ldr	r2, [pc, #72]	@ (8000598 <main+0xd8>)
 8000550:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000552:	f008 fbc1 	bl	8008cd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	bf00      	nop
 8000558:	e7fd      	b.n	8000556 <main+0x96>
 800055a:	bf00      	nop
 800055c:	0800c848 	.word	0x0800c848
 8000560:	08000a71 	.word	0x08000a71
 8000564:	200001ec 	.word	0x200001ec
 8000568:	0800c818 	.word	0x0800c818
 800056c:	200001e4 	.word	0x200001e4
 8000570:	0800c830 	.word	0x0800c830
 8000574:	200001e8 	.word	0x200001e8
 8000578:	0800c7ac 	.word	0x0800c7ac
 800057c:	08000a01 	.word	0x08000a01
 8000580:	200001d8 	.word	0x200001d8
 8000584:	0800c7d0 	.word	0x0800c7d0
 8000588:	08000a19 	.word	0x08000a19
 800058c:	200001dc 	.word	0x200001dc
 8000590:	0800c7f4 	.word	0x0800c7f4
 8000594:	08000a61 	.word	0x08000a61
 8000598:	200001e0 	.word	0x200001e0

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	@ 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	@ 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f00c f81e 	bl	800c5ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b28      	ldr	r3, [pc, #160]	@ (8000668 <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	4a27      	ldr	r2, [pc, #156]	@ (8000668 <SystemClock_Config+0xcc>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d0:	4b25      	ldr	r3, [pc, #148]	@ (8000668 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b22      	ldr	r3, [pc, #136]	@ (800066c <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a21      	ldr	r2, [pc, #132]	@ (800066c <SystemClock_Config+0xd0>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1f      	ldr	r3, [pc, #124]	@ (800066c <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000600:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800060c:	2308      	movs	r3, #8
 800060e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000610:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000614:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061a:	2307      	movs	r3, #7
 800061c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fef2 	bl	800440c <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062e:	f000 fa3d 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000648:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2105      	movs	r1, #5
 8000650:	4618      	mov	r0, r3
 8000652:	f004 f953 	bl	80048fc <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800065c:	f000 fa26 	bl	8000aac <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3750      	adds	r7, #80	@ 0x50
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000676:	4a13      	ldr	r2, [pc, #76]	@ (80006c4 <MX_I2C1_Init+0x54>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_I2C1_Init+0x50>)
 800067c:	4a12      	ldr	r2, [pc, #72]	@ (80006c8 <MX_I2C1_Init+0x58>)
 800067e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_I2C1_Init+0x50>)
 800068e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000692:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_I2C1_Init+0x50>)
 80006ae:	f003 f8c9 	bl	8003844 <HAL_I2C_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b8:	f000 f9f8 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000009c 	.word	0x2000009c
 80006c4:	40005400 	.word	0x40005400
 80006c8:	000186a0 	.word	0x000186a0

080006cc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006d2:	4a14      	ldr	r2, [pc, #80]	@ (8000724 <MX_I2S3_Init+0x58>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000728 <MX_I2S3_Init+0x5c>)
 80006f6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_I2S3_Init+0x54>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_I2S3_Init+0x54>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_I2S3_Init+0x54>)
 800070c:	f003 f9de 	bl	8003acc <HAL_I2S_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000716:	f000 f9c9 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000f0 	.word	0x200000f0
 8000724:	40003c00 	.word	0x40003c00
 8000728:	00017700 	.word	0x00017700

0800072c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000730:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000732:	4a18      	ldr	r2, [pc, #96]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000738:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800073c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_SPI1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800075c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000778:	220a      	movs	r2, #10
 800077a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_SPI1_Init+0x64>)
 800077e:	f004 fc0b 	bl	8004f98 <HAL_SPI_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000788:	f000 f990 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000138 	.word	0x20000138
 8000794:	40013000 	.word	0x40013000

08000798 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <MX_TIM7_Init+0x64>)
 80007a8:	4a15      	ldr	r2, [pc, #84]	@ (8000800 <MX_TIM7_Init+0x68>)
 80007aa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80007ac:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <MX_TIM7_Init+0x64>)
 80007ae:	2253      	movs	r2, #83	@ 0x53
 80007b0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <MX_TIM7_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80007b8:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <MX_TIM7_Init+0x64>)
 80007ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007be:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_TIM7_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007c6:	480d      	ldr	r0, [pc, #52]	@ (80007fc <MX_TIM7_Init+0x64>)
 80007c8:	f004 fc6f 	bl	80050aa <HAL_TIM_Base_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80007d2:	f000 f96b 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	@ (80007fc <MX_TIM7_Init+0x64>)
 80007e4:	f004 fd5c 	bl	80052a0 <HAL_TIMEx_MasterConfigSynchronization>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80007ee:	f000 f95d 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000190 	.word	0x20000190
 8000800:	40001400 	.word	0x40001400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	@ 0x30
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	4b72      	ldr	r3, [pc, #456]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a71      	ldr	r2, [pc, #452]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 8000824:	f043 0310 	orr.w	r3, r3, #16
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b6f      	ldr	r3, [pc, #444]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0310 	and.w	r3, r3, #16
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	4b6b      	ldr	r3, [pc, #428]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a6a      	ldr	r2, [pc, #424]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b68      	ldr	r3, [pc, #416]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b64      	ldr	r3, [pc, #400]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a63      	ldr	r2, [pc, #396]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b61      	ldr	r3, [pc, #388]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b5d      	ldr	r3, [pc, #372]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a5c      	ldr	r2, [pc, #368]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b5a      	ldr	r3, [pc, #360]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b56      	ldr	r3, [pc, #344]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a55      	ldr	r2, [pc, #340]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b53      	ldr	r3, [pc, #332]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b4f      	ldr	r3, [pc, #316]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a4e      	ldr	r2, [pc, #312]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b4c      	ldr	r3, [pc, #304]	@ (80009e8 <MX_GPIO_Init+0x1e4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2108      	movs	r1, #8
 80008c6:	4849      	ldr	r0, [pc, #292]	@ (80009ec <MX_GPIO_Init+0x1e8>)
 80008c8:	f000 fe54 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	4847      	ldr	r0, [pc, #284]	@ (80009f0 <MX_GPIO_Init+0x1ec>)
 80008d2:	f000 fe4f 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008d6:	2200      	movs	r2, #0
 80008d8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008dc:	4845      	ldr	r0, [pc, #276]	@ (80009f4 <MX_GPIO_Init+0x1f0>)
 80008de:	f000 fe49 	bl	8001574 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008e2:	2308      	movs	r3, #8
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	483c      	ldr	r0, [pc, #240]	@ (80009ec <MX_GPIO_Init+0x1e8>)
 80008fa:	f000 fc87 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4836      	ldr	r0, [pc, #216]	@ (80009f0 <MX_GPIO_Init+0x1ec>)
 8000916:	f000 fc79 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800091a:	2308      	movs	r3, #8
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092a:	2305      	movs	r3, #5
 800092c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	482e      	ldr	r0, [pc, #184]	@ (80009f0 <MX_GPIO_Init+0x1ec>)
 8000936:	f000 fc69 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093a:	2301      	movs	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800093e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	482a      	ldr	r0, [pc, #168]	@ (80009f8 <MX_GPIO_Init+0x1f4>)
 8000950:	f000 fc5c 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000954:	2304      	movs	r3, #4
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4825      	ldr	r0, [pc, #148]	@ (80009fc <MX_GPIO_Init+0x1f8>)
 8000968:	f000 fc50 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800096c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800097e:	2305      	movs	r3, #5
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	481c      	ldr	r0, [pc, #112]	@ (80009fc <MX_GPIO_Init+0x1f8>)
 800098a:	f000 fc3f 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800098e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000992:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4813      	ldr	r0, [pc, #76]	@ (80009f4 <MX_GPIO_Init+0x1f0>)
 80009a8:	f000 fc30 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ac:	2320      	movs	r3, #32
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	480d      	ldr	r0, [pc, #52]	@ (80009f4 <MX_GPIO_Init+0x1f0>)
 80009c0:	f000 fc24 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_GPIO_Init+0x1e8>)
 80009da:	f000 fc17 	bl	800120c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009de:	bf00      	nop
 80009e0:	3730      	adds	r7, #48	@ 0x30
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020400 	.word	0x40020400

08000a00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000a08:	f00b fa2e 	bl	800be68 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  int counter = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
	  } else {
		  if (counter > 2) {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
		  }
	  }*/
    osDelay(200);
 8000a10:	20c8      	movs	r0, #200	@ 0xc8
 8000a12:	f008 fa19 	bl	8008e48 <osDelay>
 8000a16:	e7fb      	b.n	8000a10 <StartDefaultTask+0x10>

08000a18 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

	int counter = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	int buf = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
	osMessageQueueGet(myQueue01Handle, &buf, NULL, 10);
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <StartTask02+0x40>)
 8000a2a:	6818      	ldr	r0, [r3, #0]
 8000a2c:	f107 0108 	add.w	r1, r7, #8
 8000a30:	230a      	movs	r3, #10
 8000a32:	2200      	movs	r2, #0
 8000a34:	f008 fbb6 	bl	80091a4 <osMessageQueueGet>
	counter = counter + buf;
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]
	osMessageQueuePut(myQueue02Handle, counter, NULL, 10);
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <StartTask02+0x44>)
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	68f9      	ldr	r1, [r7, #12]
 8000a46:	230a      	movs	r3, #10
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f008 fb4b 	bl	80090e4 <osMessageQueuePut>
    osDelay(1);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f008 f9fa 	bl	8008e48 <osDelay>
  {
 8000a54:	bf00      	nop
 8000a56:	e7e5      	b.n	8000a24 <StartTask02+0xc>
 8000a58:	200001e4 	.word	0x200001e4
 8000a5c:	200001e8 	.word	0x200001e8

08000a60 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f008 f9ed 	bl	8008e48 <osDelay>
 8000a6e:	e7fb      	b.n	8000a68 <StartTask03+0x8>

08000a70 <Callback01>:
  /* USER CODE END StartTask03 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000a78:	2101      	movs	r1, #1
 8000a7a:	480a      	ldr	r0, [pc, #40]	@ (8000aa4 <Callback01+0x34>)
 8000a7c:	f000 fd62 	bl	8001544 <HAL_GPIO_ReadPin>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d009      	beq.n	8000a9a <Callback01+0x2a>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a8a:	4807      	ldr	r0, [pc, #28]	@ (8000aa8 <Callback01+0x38>)
 8000a8c:	f000 fd8b 	bl	80015a6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <Callback01+0x38>)
 8000a96:	f000 fd86 	bl	80015a6 <HAL_GPIO_TogglePin>
		  }
  /* USER CODE END Callback01 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020c00 	.word	0x40020c00

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <HAL_MspInit+0x54>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac6:	4a11      	ldr	r2, [pc, #68]	@ (8000b0c <HAL_MspInit+0x54>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ace:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <HAL_MspInit+0x54>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <HAL_MspInit+0x54>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b0c <HAL_MspInit+0x54>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <HAL_MspInit+0x54>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	210f      	movs	r1, #15
 8000afa:	f06f 0001 	mvn.w	r0, #1
 8000afe:	f000 fb4e 	bl	800119e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	@ 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	@ (8000b94 <HAL_I2C_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12c      	bne.n	8000b8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a17      	ldr	r2, [pc, #92]	@ (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b4e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b54:	2312      	movs	r3, #18
 8000b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b60:	2304      	movs	r3, #4
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <HAL_I2C_MspInit+0x8c>)
 8000b6c:	f000 fb4e 	bl	800120c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	4a07      	ldr	r2, [pc, #28]	@ (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	@ 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40005400 	.word	0x40005400
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	@ 0x38
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a31      	ldr	r2, [pc, #196]	@ (8000c90 <HAL_I2S_MspInit+0xf0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d15a      	bne.n	8000c86 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bd4:	23c0      	movs	r3, #192	@ 0xc0
 8000bd6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4618      	mov	r0, r3
 8000be2:	f004 f897 	bl	8004d14 <HAL_RCCEx_PeriphCLKConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bec:	f7ff ff5e 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	4b27      	ldr	r3, [pc, #156]	@ (8000c94 <HAL_I2S_MspInit+0xf4>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf8:	4a26      	ldr	r2, [pc, #152]	@ (8000c94 <HAL_I2S_MspInit+0xf4>)
 8000bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c00:	4b24      	ldr	r3, [pc, #144]	@ (8000c94 <HAL_I2S_MspInit+0xf4>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	4b20      	ldr	r3, [pc, #128]	@ (8000c94 <HAL_I2S_MspInit+0xf4>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c14:	4a1f      	ldr	r2, [pc, #124]	@ (8000c94 <HAL_I2S_MspInit+0xf4>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c94 <HAL_I2S_MspInit+0xf4>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <HAL_I2S_MspInit+0xf4>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c30:	4a18      	ldr	r2, [pc, #96]	@ (8000c94 <HAL_I2S_MspInit+0xf4>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c38:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <HAL_I2S_MspInit+0xf4>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c44:	2310      	movs	r3, #16
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c54:	2306      	movs	r3, #6
 8000c56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480e      	ldr	r0, [pc, #56]	@ (8000c98 <HAL_I2S_MspInit+0xf8>)
 8000c60:	f000 fad4 	bl	800120c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c64:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c76:	2306      	movs	r3, #6
 8000c78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4806      	ldr	r0, [pc, #24]	@ (8000c9c <HAL_I2S_MspInit+0xfc>)
 8000c82:	f000 fac3 	bl	800120c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000c86:	bf00      	nop
 8000c88:	3738      	adds	r7, #56	@ 0x38
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40003c00 	.word	0x40003c00
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	40020800 	.word	0x40020800

08000ca0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a19      	ldr	r2, [pc, #100]	@ (8000d24 <HAL_SPI_MspInit+0x84>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12b      	bne.n	8000d1a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <HAL_SPI_MspInit+0x88>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cca:	4a17      	ldr	r2, [pc, #92]	@ (8000d28 <HAL_SPI_MspInit+0x88>)
 8000ccc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <HAL_SPI_MspInit+0x88>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <HAL_SPI_MspInit+0x88>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a10      	ldr	r2, [pc, #64]	@ (8000d28 <HAL_SPI_MspInit+0x88>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <HAL_SPI_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cfa:	23e0      	movs	r3, #224	@ 0xe0
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <HAL_SPI_MspInit+0x8c>)
 8000d16:	f000 fa79 	bl	800120c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	@ 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40013000 	.word	0x40013000
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000

08000d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d6c <HAL_TIM_Base_MspInit+0x3c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d10d      	bne.n	8000d5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_TIM_Base_MspInit+0x40>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	4a09      	ldr	r2, [pc, #36]	@ (8000d70 <HAL_TIM_Base_MspInit+0x40>)
 8000d4c:	f043 0320 	orr.w	r3, r3, #32
 8000d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d52:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <HAL_TIM_Base_MspInit+0x40>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	f003 0320 	and.w	r3, r3, #32
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40001400 	.word	0x40001400
 8000d70:	40023800 	.word	0x40023800

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <NMI_Handler+0x4>

08000d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f8d7 	bl	8000f60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000db2:	f009 ff1f 	bl	800abf4 <xTaskGetSchedulerState>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d001      	beq.n	8000dc0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dbc:	f00a fdd4 	bl	800b968 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dc8:	4802      	ldr	r0, [pc, #8]	@ (8000dd4 <OTG_FS_IRQHandler+0x10>)
 8000dca:	f000 fee7 	bl	8001b9c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20004f54 	.word	0x20004f54

08000dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de0:	4a14      	ldr	r2, [pc, #80]	@ (8000e34 <_sbrk+0x5c>)
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <_sbrk+0x60>)
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dec:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df4:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <_sbrk+0x64>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	@ (8000e40 <_sbrk+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d207      	bcs.n	8000e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e08:	f00b fc08 	bl	800c61c <__errno>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	220c      	movs	r2, #12
 8000e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	e009      	b.n	8000e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a05      	ldr	r2, [pc, #20]	@ (8000e3c <_sbrk+0x64>)
 8000e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20020000 	.word	0x20020000
 8000e38:	00000400 	.word	0x00000400
 8000e3c:	200001f0 	.word	0x200001f0
 8000e40:	20005480 	.word	0x20005480

08000e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	@ (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e6c:	f7ff ffea 	bl	8000e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e70:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e72:	490d      	ldr	r1, [pc, #52]	@ (8000ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e74:	4a0d      	ldr	r2, [pc, #52]	@ (8000eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e88:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e96:	f00b fbc7 	bl	800c628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9a:	f7ff fb11 	bl	80004c0 <main>
  bx  lr    
 8000e9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000eac:	0800c880 	.word	0x0800c880
  ldr r2, =_sbss
 8000eb0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000eb4:	2000547c 	.word	0x2000547c

08000eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <HAL_Init+0x40>)
 8000ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <HAL_Init+0x40>)
 8000ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	@ (8000efc <HAL_Init+0x40>)
 8000ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f94f 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	200f      	movs	r0, #15
 8000eec:	f000 f808 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f7ff fde2 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023c00 	.word	0x40023c00

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_InitTick+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <HAL_InitTick+0x58>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f967 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 f92f 	bl	800119e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <HAL_InitTick+0x5c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	200001f4 	.word	0x200001f4

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200001f4 	.word	0x200001f4

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	@ (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	@ (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	@ (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	@ 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	@ 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f7ff ff8e 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff29 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b0:	f7ff ff3e 	bl	8001030 <__NVIC_GetPriorityGrouping>
 80011b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f7ff ff8e 	bl	80010dc <NVIC_EncodePriority>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <__NVIC_SetPriority>
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff31 	bl	800104c <__NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffa2 	bl	8001144 <SysTick_Config>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	@ 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e16b      	b.n	8001500 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	429a      	cmp	r2, r3
 8001242:	f040 815a 	bne.w	80014fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d005      	beq.n	800125e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125a:	2b02      	cmp	r3, #2
 800125c:	d130      	bne.n	80012c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 0201 	and.w	r2, r3, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d017      	beq.n	80012fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d123      	bne.n	8001350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	08da      	lsrs	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3208      	adds	r2, #8
 8001310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	69b9      	ldr	r1, [r7, #24]
 800134c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0203 	and.w	r2, r3, #3
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80b4 	beq.w	80014fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b60      	ldr	r3, [pc, #384]	@ (8001518 <HAL_GPIO_Init+0x30c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	4a5f      	ldr	r2, [pc, #380]	@ (8001518 <HAL_GPIO_Init+0x30c>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001518 <HAL_GPIO_Init+0x30c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ae:	4a5b      	ldr	r2, [pc, #364]	@ (800151c <HAL_GPIO_Init+0x310>)
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	220f      	movs	r2, #15
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a52      	ldr	r2, [pc, #328]	@ (8001520 <HAL_GPIO_Init+0x314>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d02b      	beq.n	8001432 <HAL_GPIO_Init+0x226>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a51      	ldr	r2, [pc, #324]	@ (8001524 <HAL_GPIO_Init+0x318>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d025      	beq.n	800142e <HAL_GPIO_Init+0x222>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a50      	ldr	r2, [pc, #320]	@ (8001528 <HAL_GPIO_Init+0x31c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d01f      	beq.n	800142a <HAL_GPIO_Init+0x21e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4f      	ldr	r2, [pc, #316]	@ (800152c <HAL_GPIO_Init+0x320>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d019      	beq.n	8001426 <HAL_GPIO_Init+0x21a>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001530 <HAL_GPIO_Init+0x324>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d013      	beq.n	8001422 <HAL_GPIO_Init+0x216>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001534 <HAL_GPIO_Init+0x328>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d00d      	beq.n	800141e <HAL_GPIO_Init+0x212>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4c      	ldr	r2, [pc, #304]	@ (8001538 <HAL_GPIO_Init+0x32c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d007      	beq.n	800141a <HAL_GPIO_Init+0x20e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4b      	ldr	r2, [pc, #300]	@ (800153c <HAL_GPIO_Init+0x330>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d101      	bne.n	8001416 <HAL_GPIO_Init+0x20a>
 8001412:	2307      	movs	r3, #7
 8001414:	e00e      	b.n	8001434 <HAL_GPIO_Init+0x228>
 8001416:	2308      	movs	r3, #8
 8001418:	e00c      	b.n	8001434 <HAL_GPIO_Init+0x228>
 800141a:	2306      	movs	r3, #6
 800141c:	e00a      	b.n	8001434 <HAL_GPIO_Init+0x228>
 800141e:	2305      	movs	r3, #5
 8001420:	e008      	b.n	8001434 <HAL_GPIO_Init+0x228>
 8001422:	2304      	movs	r3, #4
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x228>
 8001426:	2303      	movs	r3, #3
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x228>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x228>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x228>
 8001432:	2300      	movs	r3, #0
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001444:	4935      	ldr	r1, [pc, #212]	@ (800151c <HAL_GPIO_Init+0x310>)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001452:	4b3b      	ldr	r3, [pc, #236]	@ (8001540 <HAL_GPIO_Init+0x334>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001476:	4a32      	ldr	r2, [pc, #200]	@ (8001540 <HAL_GPIO_Init+0x334>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800147c:	4b30      	ldr	r3, [pc, #192]	@ (8001540 <HAL_GPIO_Init+0x334>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a0:	4a27      	ldr	r2, [pc, #156]	@ (8001540 <HAL_GPIO_Init+0x334>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014a6:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <HAL_GPIO_Init+0x334>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001540 <HAL_GPIO_Init+0x334>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <HAL_GPIO_Init+0x334>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f4:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <HAL_GPIO_Init+0x334>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	f67f ae90 	bls.w	8001228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3724      	adds	r7, #36	@ 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40013800 	.word	0x40013800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020400 	.word	0x40020400
 8001528:	40020800 	.word	0x40020800
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40021000 	.word	0x40021000
 8001534:	40021400 	.word	0x40021400
 8001538:	40021800 	.word	0x40021800
 800153c:	40021c00 	.word	0x40021c00
 8001540:	40013c00 	.word	0x40013c00

08001544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	460b      	mov	r3, r1
 80015b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015b8:	887a      	ldrh	r2, [r7, #2]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4013      	ands	r3, r2
 80015be:	041a      	lsls	r2, r3, #16
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	43d9      	mvns	r1, r3
 80015c4:	887b      	ldrh	r3, [r7, #2]
 80015c6:	400b      	ands	r3, r1
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	619a      	str	r2, [r3, #24]
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af02      	add	r7, sp, #8
 80015e0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e059      	b.n	80016a0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d106      	bne.n	800160c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f00a fc82 	bl	800bf10 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2203      	movs	r2, #3
 8001610:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800161a:	d102      	bne.n	8001622 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f003 ff2b 	bl	8005482 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7c1a      	ldrb	r2, [r3, #16]
 8001634:	f88d 2000 	strb.w	r2, [sp]
 8001638:	3304      	adds	r3, #4
 800163a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163c:	f003 feac 	bl	8005398 <USB_CoreInit>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d005      	beq.n	8001652 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2202      	movs	r2, #2
 800164a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e026      	b.n	80016a0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2101      	movs	r1, #1
 8001658:	4618      	mov	r0, r3
 800165a:	f003 ff23 	bl	80054a4 <USB_SetCurrentMode>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e017      	b.n	80016a0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7c1a      	ldrb	r2, [r3, #16]
 8001678:	f88d 2000 	strb.w	r2, [sp]
 800167c:	3304      	adds	r3, #4
 800167e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001680:	f004 f8c6 	bl	8005810 <USB_HostInit>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d005      	beq.n	8001696 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2202      	movs	r2, #2
 800168e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e004      	b.n	80016a0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b08b      	sub	sp, #44	@ 0x2c
 80016ac:	af04      	add	r7, sp, #16
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	4608      	mov	r0, r1
 80016b2:	4611      	mov	r1, r2
 80016b4:	461a      	mov	r2, r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	70fb      	strb	r3, [r7, #3]
 80016ba:	460b      	mov	r3, r1
 80016bc:	70bb      	strb	r3, [r7, #2]
 80016be:	4613      	mov	r3, r2
 80016c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80016c2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80016c4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <HAL_HCD_HC_Init+0x2c>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e09d      	b.n	8001810 <HAL_HCD_HC_Init+0x168>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	3319      	adds	r3, #25
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016f0:	78fa      	ldrb	r2, [r7, #3]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	1a9b      	subs	r3, r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	3314      	adds	r3, #20
 8001700:	787a      	ldrb	r2, [r7, #1]
 8001702:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	3315      	adds	r3, #21
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	1a9b      	subs	r3, r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	3326      	adds	r3, #38	@ 0x26
 8001728:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800172c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	78bb      	ldrb	r3, [r7, #2]
 8001732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001736:	b2d8      	uxtb	r0, r3
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	1a9b      	subs	r3, r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	3316      	adds	r3, #22
 8001746:	4602      	mov	r2, r0
 8001748:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	4619      	mov	r1, r3
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 fbc8 	bl	8001ee4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001754:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001758:	2b00      	cmp	r3, #0
 800175a:	da0a      	bge.n	8001772 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	1a9b      	subs	r3, r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	3317      	adds	r3, #23
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
 8001770:	e009      	b.n	8001786 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	1a9b      	subs	r3, r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	3317      	adds	r3, #23
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f004 f9a4 	bl	8005ad8 <USB_GetHostSpeed>
 8001790:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001792:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001796:	2b01      	cmp	r3, #1
 8001798:	d10b      	bne.n	80017b2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800179a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d107      	bne.n	80017b2 <HAL_HCD_HC_Init+0x10a>
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d104      	bne.n	80017b2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2bbc      	cmp	r3, #188	@ 0xbc
 80017ac:	d901      	bls.n	80017b2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80017ae:	23bc      	movs	r3, #188	@ 0xbc
 80017b0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	1a9b      	subs	r3, r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	3318      	adds	r3, #24
 80017c2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80017c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	b298      	uxth	r0, r3
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	1a9b      	subs	r3, r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	3328      	adds	r3, #40	@ 0x28
 80017dc:	4602      	mov	r2, r0
 80017de:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	787c      	ldrb	r4, [r7, #1]
 80017ea:	78ba      	ldrb	r2, [r7, #2]
 80017ec:	78f9      	ldrb	r1, [r7, #3]
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	4623      	mov	r3, r4
 80017fe:	f004 f993 	bl	8005b28 <USB_HC_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001810:	4618      	mov	r0, r3
 8001812:	371c      	adds	r7, #28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}

08001818 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_HCD_HC_Halt+0x1e>
 8001832:	2302      	movs	r3, #2
 8001834:	e00f      	b.n	8001856 <HAL_HCD_HC_Halt+0x3e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	78fa      	ldrb	r2, [r7, #3]
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f004 fd25 	bl	8006296 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	4608      	mov	r0, r1
 800186a:	4611      	mov	r1, r2
 800186c:	461a      	mov	r2, r3
 800186e:	4603      	mov	r3, r0
 8001870:	70fb      	strb	r3, [r7, #3]
 8001872:	460b      	mov	r3, r1
 8001874:	70bb      	strb	r3, [r7, #2]
 8001876:	4613      	mov	r3, r2
 8001878:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800187a:	78fa      	ldrb	r2, [r7, #3]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	1a9b      	subs	r3, r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	3317      	adds	r3, #23
 800188a:	78ba      	ldrb	r2, [r7, #2]
 800188c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800188e:	78fa      	ldrb	r2, [r7, #3]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	011b      	lsls	r3, r3, #4
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	3326      	adds	r3, #38	@ 0x26
 800189e:	787a      	ldrb	r2, [r7, #1]
 80018a0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018a2:	7c3b      	ldrb	r3, [r7, #16]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d114      	bne.n	80018d2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	332a      	adds	r3, #42	@ 0x2a
 80018b8:	2203      	movs	r2, #3
 80018ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	3319      	adds	r3, #25
 80018cc:	7f3a      	ldrb	r2, [r7, #28]
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e009      	b.n	80018e6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	332a      	adds	r3, #42	@ 0x2a
 80018e2:	2202      	movs	r2, #2
 80018e4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018e6:	787b      	ldrb	r3, [r7, #1]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	f200 8102 	bhi.w	8001af2 <HAL_HCD_HC_SubmitRequest+0x292>
 80018ee:	a201      	add	r2, pc, #4	@ (adr r2, 80018f4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80018f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f4:	08001905 	.word	0x08001905
 80018f8:	08001add 	.word	0x08001add
 80018fc:	080019c9 	.word	0x080019c9
 8001900:	08001a53 	.word	0x08001a53
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001904:	7c3b      	ldrb	r3, [r7, #16]
 8001906:	2b01      	cmp	r3, #1
 8001908:	f040 80f5 	bne.w	8001af6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800190c:	78bb      	ldrb	r3, [r7, #2]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d12d      	bne.n	800196e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001912:	8b3b      	ldrh	r3, [r7, #24]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d109      	bne.n	800192c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	333d      	adds	r3, #61	@ 0x3d
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800192c:	78fa      	ldrb	r2, [r7, #3]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	333d      	adds	r3, #61	@ 0x3d
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10a      	bne.n	8001958 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	1a9b      	subs	r3, r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	332a      	adds	r3, #42	@ 0x2a
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001956:	e0ce      	b.n	8001af6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	332a      	adds	r3, #42	@ 0x2a
 8001968:	2202      	movs	r2, #2
 800196a:	701a      	strb	r2, [r3, #0]
      break;
 800196c:	e0c3      	b.n	8001af6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	331a      	adds	r3, #26
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	f040 80b8 	bne.w	8001af6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	1a9b      	subs	r3, r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	333c      	adds	r3, #60	@ 0x3c
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10a      	bne.n	80019b2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	332a      	adds	r3, #42	@ 0x2a
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
      break;
 80019b0:	e0a1      	b.n	8001af6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b2:	78fa      	ldrb	r2, [r7, #3]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	1a9b      	subs	r3, r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	332a      	adds	r3, #42	@ 0x2a
 80019c2:	2202      	movs	r2, #2
 80019c4:	701a      	strb	r2, [r3, #0]
      break;
 80019c6:	e096      	b.n	8001af6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80019c8:	78bb      	ldrb	r3, [r7, #2]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d120      	bne.n	8001a10 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	333d      	adds	r3, #61	@ 0x3d
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10a      	bne.n	80019fa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	332a      	adds	r3, #42	@ 0x2a
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019f8:	e07e      	b.n	8001af8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019fa:	78fa      	ldrb	r2, [r7, #3]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	1a9b      	subs	r3, r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	332a      	adds	r3, #42	@ 0x2a
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	701a      	strb	r2, [r3, #0]
      break;
 8001a0e:	e073      	b.n	8001af8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	333c      	adds	r3, #60	@ 0x3c
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10a      	bne.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a26:	78fa      	ldrb	r2, [r7, #3]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	332a      	adds	r3, #42	@ 0x2a
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
      break;
 8001a3a:	e05d      	b.n	8001af8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	1a9b      	subs	r3, r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	332a      	adds	r3, #42	@ 0x2a
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	701a      	strb	r2, [r3, #0]
      break;
 8001a50:	e052      	b.n	8001af8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a52:	78bb      	ldrb	r3, [r7, #2]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d120      	bne.n	8001a9a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	333d      	adds	r3, #61	@ 0x3d
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10a      	bne.n	8001a84 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	1a9b      	subs	r3, r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	332a      	adds	r3, #42	@ 0x2a
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a82:	e039      	b.n	8001af8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	332a      	adds	r3, #42	@ 0x2a
 8001a94:	2202      	movs	r2, #2
 8001a96:	701a      	strb	r2, [r3, #0]
      break;
 8001a98:	e02e      	b.n	8001af8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a9a:	78fa      	ldrb	r2, [r7, #3]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	333c      	adds	r3, #60	@ 0x3c
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10a      	bne.n	8001ac6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	1a9b      	subs	r3, r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	332a      	adds	r3, #42	@ 0x2a
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
      break;
 8001ac4:	e018      	b.n	8001af8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ac6:	78fa      	ldrb	r2, [r7, #3]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	1a9b      	subs	r3, r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	332a      	adds	r3, #42	@ 0x2a
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	701a      	strb	r2, [r3, #0]
      break;
 8001ada:	e00d      	b.n	8001af8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	332a      	adds	r3, #42	@ 0x2a
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
      break;
 8001af0:	e002      	b.n	8001af8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001af2:	bf00      	nop
 8001af4:	e000      	b.n	8001af8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001af6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001af8:	78fa      	ldrb	r2, [r7, #3]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	332c      	adds	r3, #44	@ 0x2c
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b0c:	78fa      	ldrb	r2, [r7, #3]
 8001b0e:	8b39      	ldrh	r1, [r7, #24]
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4403      	add	r3, r0
 8001b1c:	3334      	adds	r3, #52	@ 0x34
 8001b1e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	1a9b      	subs	r3, r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	334c      	adds	r3, #76	@ 0x4c
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b34:	78fa      	ldrb	r2, [r7, #3]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	3338      	adds	r3, #56	@ 0x38
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b48:	78fa      	ldrb	r2, [r7, #3]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	3315      	adds	r3, #21
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b5c:	78fa      	ldrb	r2, [r7, #3]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	334d      	adds	r3, #77	@ 0x4d
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	4613      	mov	r3, r2
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	1a9b      	subs	r3, r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	3310      	adds	r3, #16
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	4413      	add	r3, r2
 8001b84:	1d19      	adds	r1, r3, #4
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	799b      	ldrb	r3, [r3, #6]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f004 f8f8 	bl	8005d80 <USB_HC_StartXfer>
 8001b90:	4603      	mov	r3, r0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop

08001b9c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fdec 	bl	8005790 <USB_GetMode>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	f040 80fb 	bne.w	8001db6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 fdaf 	bl	8005728 <USB_ReadInterrupts>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80f1 	beq.w	8001db4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 fda6 	bl	8005728 <USB_ReadInterrupts>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001be6:	d104      	bne.n	8001bf2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001bf0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fd96 	bl	8005728 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c06:	d104      	bne.n	8001c12 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001c10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fd86 	bl	8005728 <USB_ReadInterrupts>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001c26:	d104      	bne.n	8001c32 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 fd76 	bl	8005728 <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d103      	bne.n	8001c4e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f003 fd68 	bl	8005728 <USB_ReadInterrupts>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c62:	d120      	bne.n	8001ca6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001c6c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d113      	bne.n	8001ca6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c7e:	2110      	movs	r1, #16
 8001c80:	6938      	ldr	r0, [r7, #16]
 8001c82:	f003 fc5b 	bl	800553c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c86:	6938      	ldr	r0, [r7, #16]
 8001c88:	f003 fc8a 	bl	80055a0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7a5b      	ldrb	r3, [r3, #9]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d105      	bne.n	8001ca0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 fe7c 	bl	8005998 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f00a f9b3 	bl	800c00c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 fd3c 	bl	8005728 <USB_ReadInterrupts>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cba:	d102      	bne.n	8001cc2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f001 fd4d 	bl	800375c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fd2e 	bl	8005728 <USB_ReadInterrupts>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d106      	bne.n	8001ce4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f00a f97c 	bl	800bfd4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2208      	movs	r2, #8
 8001ce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f003 fd1d 	bl	8005728 <USB_ReadInterrupts>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cf8:	d139      	bne.n	8001d6e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f004 fab8 	bl	8006274 <USB_HC_ReadInterrupt>
 8001d04:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e025      	b.n	8001d58 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d018      	beq.n	8001d52 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d36:	d106      	bne.n	8001d46 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f905 	bl	8001f4e <HCD_HC_IN_IRQHandler>
 8001d44:	e005      	b.n	8001d52 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 ff67 	bl	8002c20 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	795b      	ldrb	r3, [r3, #5]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d3d3      	bcc.n	8001d0c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 fcd8 	bl	8005728 <USB_ReadInterrupts>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d101      	bne.n	8001d86 <HAL_HCD_IRQHandler+0x1ea>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_HCD_IRQHandler+0x1ec>
 8001d86:	2300      	movs	r3, #0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d014      	beq.n	8001db6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	699a      	ldr	r2, [r3, #24]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0210 	bic.w	r2, r2, #16
 8001d9a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f001 fbfe 	bl	800359e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699a      	ldr	r2, [r3, #24]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0210 	orr.w	r2, r2, #16
 8001db0:	619a      	str	r2, [r3, #24]
 8001db2:	e000      	b.n	8001db6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001db4:	bf00      	nop
    }
  }
}
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_HCD_Start+0x16>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e013      	b.n	8001dfa <HAL_HCD_Start+0x3e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2101      	movs	r1, #1
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 fe40 	bl	8005a66 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f003 fb38 	bl	8005460 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_HCD_Stop+0x16>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e00d      	b.n	8001e34 <HAL_HCD_Stop+0x32>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f004 fb93 	bl	8006550 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 fde2 	bl	8005a12 <USB_ResetPort>
 8001e4e:	4603      	mov	r3, r0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	334c      	adds	r3, #76	@ 0x4c
 8001e74:	781b      	ldrb	r3, [r3, #0]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3338      	adds	r3, #56	@ 0x38
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 fe24 	bl	8005b06 <USB_GetCurrentFrame>
 8001ebe:	4603      	mov	r3, r0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f003 fdff 	bl	8005ad8 <USB_GetHostSpeed>
 8001eda:	4603      	mov	r3, r0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001ef0:	78fa      	ldrb	r2, [r7, #3]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	331a      	adds	r3, #26
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	331b      	adds	r3, #27
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	3325      	adds	r3, #37	@ 0x25
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	3324      	adds	r3, #36	@ 0x24
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	78fa      	ldrb	r2, [r7, #3]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 fbee 	bl	800574e <USB_ReadChInterrupts>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d11a      	bne.n	8001fb2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f8e:	78fa      	ldrb	r2, [r7, #3]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	334d      	adds	r3, #77	@ 0x4d
 8001f9e:	2207      	movs	r2, #7
 8001fa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f004 f973 	bl	8006296 <USB_HC_Halt>
 8001fb0:	e09e      	b.n	80020f0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 fbc7 	bl	800574e <USB_ReadChInterrupts>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fca:	d11b      	bne.n	8002004 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	015a      	lsls	r2, r3, #5
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fde:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	1a9b      	subs	r3, r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	334d      	adds	r3, #77	@ 0x4d
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 f94a 	bl	8006296 <USB_HC_Halt>
 8002002:	e075      	b.n	80020f0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f003 fb9e 	bl	800574e <USB_ReadChInterrupts>
 8002012:	4603      	mov	r3, r0
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b08      	cmp	r3, #8
 800201a:	d11a      	bne.n	8002052 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	015a      	lsls	r2, r3, #5
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4413      	add	r3, r2
 8002024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002028:	461a      	mov	r2, r3
 800202a:	2308      	movs	r3, #8
 800202c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	334d      	adds	r3, #77	@ 0x4d
 800203e:	2206      	movs	r2, #6
 8002040:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f004 f923 	bl	8006296 <USB_HC_Halt>
 8002050:	e04e      	b.n	80020f0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f003 fb77 	bl	800574e <USB_ReadChInterrupts>
 8002060:	4603      	mov	r3, r0
 8002062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800206a:	d11b      	bne.n	80020a4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002078:	461a      	mov	r2, r3
 800207a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800207e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	334d      	adds	r3, #77	@ 0x4d
 8002090:	2209      	movs	r2, #9
 8002092:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f004 f8fa 	bl	8006296 <USB_HC_Halt>
 80020a2:	e025      	b.n	80020f0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 fb4e 	bl	800574e <USB_ReadChInterrupts>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b8:	2b80      	cmp	r3, #128	@ 0x80
 80020ba:	d119      	bne.n	80020f0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020c8:	461a      	mov	r2, r3
 80020ca:	2380      	movs	r3, #128	@ 0x80
 80020cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	1a9b      	subs	r3, r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	334d      	adds	r3, #77	@ 0x4d
 80020de:	2207      	movs	r2, #7
 80020e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f004 f8d3 	bl	8006296 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f003 fb28 	bl	800574e <USB_ReadChInterrupts>
 80020fe:	4603      	mov	r3, r0
 8002100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002108:	d112      	bne.n	8002130 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f004 f8bf 	bl	8006296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4413      	add	r3, r2
 8002120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002124:	461a      	mov	r2, r3
 8002126:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800212a:	6093      	str	r3, [r2, #8]
 800212c:	f000 bd75 	b.w	8002c1a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f003 fb08 	bl	800574e <USB_ReadChInterrupts>
 800213e:	4603      	mov	r3, r0
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	f040 8128 	bne.w	800239a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002156:	461a      	mov	r2, r3
 8002158:	2320      	movs	r3, #32
 800215a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	331b      	adds	r3, #27
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d119      	bne.n	80021a6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	331b      	adds	r3, #27
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	0151      	lsls	r1, r2, #5
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	440a      	add	r2, r1
 800219c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	799b      	ldrb	r3, [r3, #6]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d01b      	beq.n	80021e6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	3330      	adds	r3, #48	@ 0x30
 80021be:	6819      	ldr	r1, [r3, #0]
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	1ac9      	subs	r1, r1, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4403      	add	r3, r0
 80021e2:	3338      	adds	r3, #56	@ 0x38
 80021e4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	334d      	adds	r3, #77	@ 0x4d
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80021fa:	78fa      	ldrb	r2, [r7, #3]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	3344      	adds	r3, #68	@ 0x44
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4413      	add	r3, r2
 8002216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800221a:	461a      	mov	r2, r3
 800221c:	2301      	movs	r3, #1
 800221e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	3326      	adds	r3, #38	@ 0x26
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	3326      	adds	r3, #38	@ 0x26
 8002246:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002248:	2b02      	cmp	r3, #2
 800224a:	d110      	bne.n	800226e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f004 f81e 	bl	8006296 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002266:	461a      	mov	r2, r3
 8002268:	2310      	movs	r3, #16
 800226a:	6093      	str	r3, [r2, #8]
 800226c:	e03d      	b.n	80022ea <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	3326      	adds	r3, #38	@ 0x26
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d00a      	beq.n	800229a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	3326      	adds	r3, #38	@ 0x26
 8002294:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002296:	2b01      	cmp	r3, #1
 8002298:	d127      	bne.n	80022ea <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	0151      	lsls	r1, r2, #5
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	440a      	add	r2, r1
 80022b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80022b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80022b8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	334c      	adds	r3, #76	@ 0x4c
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	334c      	adds	r3, #76	@ 0x4c
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	4619      	mov	r1, r3
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f009 fe9f 	bl	800c028 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	799b      	ldrb	r3, [r3, #6]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d13b      	bne.n	800236a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	3338      	adds	r3, #56	@ 0x38
 8002302:	6819      	ldr	r1, [r3, #0]
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4403      	add	r3, r0
 8002312:	3328      	adds	r3, #40	@ 0x28
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	440b      	add	r3, r1
 8002318:	1e59      	subs	r1, r3, #1
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4403      	add	r3, r0
 8002328:	3328      	adds	r3, #40	@ 0x28
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8470 	beq.w	8002c1a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	333c      	adds	r3, #60	@ 0x3c
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	f083 0301 	eor.w	r3, r3, #1
 8002352:	b2d8      	uxtb	r0, r3
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	333c      	adds	r3, #60	@ 0x3c
 8002362:	4602      	mov	r2, r0
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	f000 bc58 	b.w	8002c1a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	333c      	adds	r3, #60	@ 0x3c
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	f083 0301 	eor.w	r3, r3, #1
 8002382:	b2d8      	uxtb	r0, r3
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	333c      	adds	r3, #60	@ 0x3c
 8002392:	4602      	mov	r2, r0
 8002394:	701a      	strb	r2, [r3, #0]
 8002396:	f000 bc40 	b.w	8002c1a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 f9d3 	bl	800574e <USB_ReadChInterrupts>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d131      	bne.n	8002416 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023be:	461a      	mov	r2, r3
 80023c0:	2320      	movs	r3, #32
 80023c2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	331a      	adds	r3, #26
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	f040 841f 	bne.w	8002c1a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	331b      	adds	r3, #27
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	334d      	adds	r3, #77	@ 0x4d
 8002400:	2203      	movs	r2, #3
 8002402:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f003 ff42 	bl	8006296 <USB_HC_Halt>
 8002412:	f000 bc02 	b.w	8002c1a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f003 f995 	bl	800574e <USB_ReadChInterrupts>
 8002424:	4603      	mov	r3, r0
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b02      	cmp	r3, #2
 800242c:	f040 8305 	bne.w	8002a3a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4413      	add	r3, r2
 8002438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800243c:	461a      	mov	r2, r3
 800243e:	2302      	movs	r3, #2
 8002440:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	334d      	adds	r3, #77	@ 0x4d
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d114      	bne.n	8002482 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	334d      	adds	r3, #77	@ 0x4d
 8002468:	2202      	movs	r2, #2
 800246a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	334c      	adds	r3, #76	@ 0x4c
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	e2cc      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	334d      	adds	r3, #77	@ 0x4d
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b06      	cmp	r3, #6
 8002496:	d114      	bne.n	80024c2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	334d      	adds	r3, #77	@ 0x4d
 80024a8:	2202      	movs	r2, #2
 80024aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	334c      	adds	r3, #76	@ 0x4c
 80024bc:	2205      	movs	r2, #5
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e2ac      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	334d      	adds	r3, #77	@ 0x4d
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b07      	cmp	r3, #7
 80024d6:	d00b      	beq.n	80024f0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	334d      	adds	r3, #77	@ 0x4d
 80024e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	f040 80a6 	bne.w	800263c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	334d      	adds	r3, #77	@ 0x4d
 8002500:	2202      	movs	r2, #2
 8002502:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	3344      	adds	r3, #68	@ 0x44
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	1c59      	adds	r1, r3, #1
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4403      	add	r3, r0
 8002524:	3344      	adds	r3, #68	@ 0x44
 8002526:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	3344      	adds	r3, #68	@ 0x44
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d943      	bls.n	80025c6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	3344      	adds	r3, #68	@ 0x44
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	331a      	adds	r3, #26
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d123      	bne.n	80025b0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	331b      	adds	r3, #27
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	331c      	adds	r3, #28
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4413      	add	r3, r2
 8002598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	0151      	lsls	r1, r2, #5
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	440a      	add	r2, r1
 80025a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ae:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	334c      	adds	r3, #76	@ 0x4c
 80025c0:	2204      	movs	r2, #4
 80025c2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025c4:	e229      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025c6:	78fa      	ldrb	r2, [r7, #3]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	334c      	adds	r3, #76	@ 0x4c
 80025d6:	2202      	movs	r2, #2
 80025d8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025da:	78fa      	ldrb	r2, [r7, #3]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	3326      	adds	r3, #38	@ 0x26
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00b      	beq.n	8002608 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	3326      	adds	r3, #38	@ 0x26
 8002600:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002602:	2b02      	cmp	r3, #2
 8002604:	f040 8209 	bne.w	8002a1a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800261e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002626:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002634:	461a      	mov	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800263a:	e1ee      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	334d      	adds	r3, #77	@ 0x4d
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b05      	cmp	r3, #5
 8002650:	f040 80c8 	bne.w	80027e4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	334d      	adds	r3, #77	@ 0x4d
 8002664:	2202      	movs	r2, #2
 8002666:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	331b      	adds	r3, #27
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b01      	cmp	r3, #1
 800267c:	f040 81ce 	bne.w	8002a1c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3326      	adds	r3, #38	@ 0x26
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d16b      	bne.n	800276e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	3348      	adds	r3, #72	@ 0x48
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	1c59      	adds	r1, r3, #1
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4403      	add	r3, r0
 80026b6:	3348      	adds	r3, #72	@ 0x48
 80026b8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	3348      	adds	r3, #72	@ 0x48
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d943      	bls.n	8002758 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	3348      	adds	r3, #72	@ 0x48
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	331b      	adds	r3, #27
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	3344      	adds	r3, #68	@ 0x44
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d809      	bhi.n	8002722 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	331c      	adds	r3, #28
 800271e:	2201      	movs	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	0151      	lsls	r1, r2, #5
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	440a      	add	r2, r1
 8002738:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800273c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002740:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	334c      	adds	r3, #76	@ 0x4c
 8002752:	2204      	movs	r2, #4
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	e014      	b.n	8002782 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	334c      	adds	r3, #76	@ 0x4c
 8002768:	2202      	movs	r2, #2
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	e009      	b.n	8002782 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	334c      	adds	r3, #76	@ 0x4c
 800277e:	2202      	movs	r2, #2
 8002780:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	3326      	adds	r3, #38	@ 0x26
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00b      	beq.n	80027b0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	3326      	adds	r3, #38	@ 0x26
 80027a8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	f040 8136 	bne.w	8002a1c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027c6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027ce:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027dc:	461a      	mov	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e11b      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	334d      	adds	r3, #77	@ 0x4d
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	f040 8081 	bne.w	80028fe <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	334d      	adds	r3, #77	@ 0x4d
 800280c:	2202      	movs	r2, #2
 800280e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	331b      	adds	r3, #27
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b01      	cmp	r3, #1
 8002824:	f040 80fa 	bne.w	8002a1c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	334c      	adds	r3, #76	@ 0x4c
 8002838:	2202      	movs	r2, #2
 800283a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	78fa      	ldrb	r2, [r7, #3]
 800284c:	0151      	lsls	r1, r2, #5
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	440a      	add	r2, r1
 8002852:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800285a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	0151      	lsls	r1, r2, #5
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	440a      	add	r2, r1
 8002872:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800287a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	78fa      	ldrb	r2, [r7, #3]
 800288c:	0151      	lsls	r1, r2, #5
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	440a      	add	r2, r1
 8002892:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002896:	f023 0320 	bic.w	r3, r3, #32
 800289a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	3326      	adds	r3, #38	@ 0x26
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00b      	beq.n	80028ca <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	1a9b      	subs	r3, r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3326      	adds	r3, #38	@ 0x26
 80028c2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	f040 80a9 	bne.w	8002a1c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028e0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028e8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	e08e      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	334d      	adds	r3, #77	@ 0x4d
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b04      	cmp	r3, #4
 8002912:	d143      	bne.n	800299c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334d      	adds	r3, #77	@ 0x4d
 8002924:	2202      	movs	r2, #2
 8002926:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	334c      	adds	r3, #76	@ 0x4c
 8002938:	2202      	movs	r2, #2
 800293a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3326      	adds	r3, #38	@ 0x26
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	1a9b      	subs	r3, r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	3326      	adds	r3, #38	@ 0x26
 8002962:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002964:	2b02      	cmp	r3, #2
 8002966:	d159      	bne.n	8002a1c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800297e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002986:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002994:	461a      	mov	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e03f      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	334d      	adds	r3, #77	@ 0x4d
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d126      	bne.n	8002a00 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	334d      	adds	r3, #77	@ 0x4d
 80029c2:	2202      	movs	r2, #2
 80029c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	3344      	adds	r3, #68	@ 0x44
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	1c59      	adds	r1, r3, #1
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4403      	add	r3, r0
 80029e6:	3344      	adds	r3, #68	@ 0x44
 80029e8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	334c      	adds	r3, #76	@ 0x4c
 80029fa:	2204      	movs	r2, #4
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	e00d      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	334d      	adds	r3, #77	@ 0x4d
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	f000 8100 	beq.w	8002c18 <HCD_HC_IN_IRQHandler+0xcca>
 8002a18:	e000      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a1a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	334c      	adds	r3, #76	@ 0x4c
 8002a2c:	781a      	ldrb	r2, [r3, #0]
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	4619      	mov	r1, r3
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f009 faf8 	bl	800c028 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a38:	e0ef      	b.n	8002c1a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f002 fe83 	bl	800574e <USB_ReadChInterrupts>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4e:	2b40      	cmp	r3, #64	@ 0x40
 8002a50:	d12f      	bne.n	8002ab2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a5e:	461a      	mov	r2, r3
 8002a60:	2340      	movs	r3, #64	@ 0x40
 8002a62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	334d      	adds	r3, #77	@ 0x4d
 8002a74:	2205      	movs	r2, #5
 8002a76:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	331a      	adds	r3, #26
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3344      	adds	r3, #68	@ 0x44
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 fbf3 	bl	8006296 <USB_HC_Halt>
 8002ab0:	e0b3      	b.n	8002c1a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f002 fe47 	bl	800574e <USB_ReadChInterrupts>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b10      	cmp	r3, #16
 8002ac8:	f040 80a7 	bne.w	8002c1a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	3326      	adds	r3, #38	@ 0x26
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d11b      	bne.n	8002b1a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	3344      	adds	r3, #68	@ 0x44
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	334d      	adds	r3, #77	@ 0x4d
 8002b06:	2204      	movs	r2, #4
 8002b08:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 fbbf 	bl	8006296 <USB_HC_Halt>
 8002b18:	e03f      	b.n	8002b9a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3326      	adds	r3, #38	@ 0x26
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3326      	adds	r3, #38	@ 0x26
 8002b40:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d129      	bne.n	8002b9a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	3344      	adds	r3, #68	@ 0x44
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	799b      	ldrb	r3, [r3, #6]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HCD_HC_IN_IRQHandler+0xc2a>
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	331b      	adds	r3, #27
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d110      	bne.n	8002b9a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	334d      	adds	r3, #77	@ 0x4d
 8002b88:	2204      	movs	r2, #4
 8002b8a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f003 fb7e 	bl	8006296 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	331b      	adds	r3, #27
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d129      	bne.n	8002c04 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	331b      	adds	r3, #27
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	0151      	lsls	r1, r2, #5
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	440a      	add	r2, r1
 8002bda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	0151      	lsls	r1, r2, #5
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	440a      	add	r2, r1
 8002bfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bfe:	f043 0320 	orr.w	r3, r3, #32
 8002c02:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c10:	461a      	mov	r2, r3
 8002c12:	2310      	movs	r3, #16
 8002c14:	6093      	str	r3, [r2, #8]
 8002c16:	e000      	b.n	8002c1a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002c18:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f002 fd85 	bl	800574e <USB_ReadChInterrupts>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d11b      	bne.n	8002c86 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	334d      	adds	r3, #77	@ 0x4d
 8002c70:	2207      	movs	r2, #7
 8002c72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f003 fb0a 	bl	8006296 <USB_HC_Halt>
 8002c82:	f000 bc89 	b.w	8003598 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f002 fd5d 	bl	800574e <USB_ReadChInterrupts>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	f040 8082 	bne.w	8002da4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cac:	461a      	mov	r2, r3
 8002cae:	2320      	movs	r3, #32
 8002cb0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3319      	adds	r3, #25
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d124      	bne.n	8002d12 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3319      	adds	r3, #25
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	334c      	adds	r3, #76	@ 0x4c
 8002cec:	2202      	movs	r2, #2
 8002cee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	334d      	adds	r3, #77	@ 0x4d
 8002d00:	2203      	movs	r2, #3
 8002d02:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 fac2 	bl	8006296 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	331a      	adds	r3, #26
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	f040 8437 	bne.w	8003598 <HCD_HC_OUT_IRQHandler+0x978>
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	331b      	adds	r3, #27
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f040 842b 	bne.w	8003598 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	3326      	adds	r3, #38	@ 0x26
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d009      	beq.n	8002d6c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	331b      	adds	r3, #27
 8002d68:	2201      	movs	r2, #1
 8002d6a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	334d      	adds	r3, #77	@ 0x4d
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fa84 	bl	8006296 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d8e:	78fa      	ldrb	r2, [r7, #3]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	3344      	adds	r3, #68	@ 0x44
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e3f9      	b.n	8003598 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f002 fcce 	bl	800574e <USB_ReadChInterrupts>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dbc:	d111      	bne.n	8002de2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dd0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 fa5b 	bl	8006296 <USB_HC_Halt>
 8002de0:	e3da      	b.n	8003598 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	4611      	mov	r1, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f002 fcaf 	bl	800574e <USB_ReadChInterrupts>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d168      	bne.n	8002ecc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	3344      	adds	r3, #68	@ 0x44
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f002 fc99 	bl	800574e <USB_ReadChInterrupts>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e22:	2b40      	cmp	r3, #64	@ 0x40
 8002e24:	d112      	bne.n	8002e4c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	3319      	adds	r3, #25
 8002e36:	2201      	movs	r2, #1
 8002e38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e46:	461a      	mov	r2, r3
 8002e48:	2340      	movs	r3, #64	@ 0x40
 8002e4a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	331b      	adds	r3, #27
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d019      	beq.n	8002e96 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	331b      	adds	r3, #27
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	0151      	lsls	r1, r2, #5
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	440a      	add	r2, r1
 8002e8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e94:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	334d      	adds	r3, #77	@ 0x4d
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f003 f9e6 	bl	8006296 <USB_HC_Halt>
 8002eca:	e365      	b.n	8003598 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f002 fc3a 	bl	800574e <USB_ReadChInterrupts>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee0:	2b40      	cmp	r3, #64	@ 0x40
 8002ee2:	d139      	bne.n	8002f58 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	334d      	adds	r3, #77	@ 0x4d
 8002ef4:	2205      	movs	r2, #5
 8002ef6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	331a      	adds	r3, #26
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3319      	adds	r3, #25
 8002f1e:	2201      	movs	r2, #1
 8002f20:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	3344      	adds	r3, #68	@ 0x44
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f003 f9a9 	bl	8006296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f50:	461a      	mov	r2, r3
 8002f52:	2340      	movs	r3, #64	@ 0x40
 8002f54:	6093      	str	r3, [r2, #8]
 8002f56:	e31f      	b.n	8003598 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f002 fbf4 	bl	800574e <USB_ReadChInterrupts>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d11a      	bne.n	8002fa6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2308      	movs	r3, #8
 8002f80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	334d      	adds	r3, #77	@ 0x4d
 8002f92:	2206      	movs	r2, #6
 8002f94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f003 f979 	bl	8006296 <USB_HC_Halt>
 8002fa4:	e2f8      	b.n	8003598 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 fbcd 	bl	800574e <USB_ReadChInterrupts>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	d144      	bne.n	8003048 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3344      	adds	r3, #68	@ 0x44
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	334d      	adds	r3, #77	@ 0x4d
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3319      	adds	r3, #25
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d114      	bne.n	8003026 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3318      	adds	r3, #24
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	3319      	adds	r3, #25
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f003 f931 	bl	8006296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	2310      	movs	r3, #16
 8003044:	6093      	str	r3, [r2, #8]
 8003046:	e2a7      	b.n	8003598 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f002 fb7c 	bl	800574e <USB_ReadChInterrupts>
 8003056:	4603      	mov	r3, r0
 8003058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305c:	2b80      	cmp	r3, #128	@ 0x80
 800305e:	f040 8083 	bne.w	8003168 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	799b      	ldrb	r3, [r3, #6]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d111      	bne.n	800308e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	334d      	adds	r3, #77	@ 0x4d
 800307a:	2207      	movs	r2, #7
 800307c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f003 f905 	bl	8006296 <USB_HC_Halt>
 800308c:	e062      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	3344      	adds	r3, #68	@ 0x44
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	1c59      	adds	r1, r3, #1
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4403      	add	r3, r0
 80030ae:	3344      	adds	r3, #68	@ 0x44
 80030b0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3344      	adds	r3, #68	@ 0x44
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d922      	bls.n	800310e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	3344      	adds	r3, #68	@ 0x44
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	334c      	adds	r3, #76	@ 0x4c
 80030ec:	2204      	movs	r2, #4
 80030ee:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	334c      	adds	r3, #76	@ 0x4c
 8003100:	781a      	ldrb	r2, [r3, #0]
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	4619      	mov	r1, r3
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f008 ff8e 	bl	800c028 <HAL_HCD_HC_NotifyURBChange_Callback>
 800310c:	e022      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	334c      	adds	r3, #76	@ 0x4c
 800311e:	2202      	movs	r2, #2
 8003120:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4413      	add	r3, r2
 800312a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003138:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003140:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4413      	add	r3, r2
 800314a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4413      	add	r3, r2
 800315c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003160:	461a      	mov	r2, r3
 8003162:	2380      	movs	r3, #128	@ 0x80
 8003164:	6093      	str	r3, [r2, #8]
 8003166:	e217      	b.n	8003598 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f002 faec 	bl	800574e <USB_ReadChInterrupts>
 8003176:	4603      	mov	r3, r0
 8003178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003180:	d11b      	bne.n	80031ba <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	334d      	adds	r3, #77	@ 0x4d
 8003192:	2209      	movs	r2, #9
 8003194:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f003 f879 	bl	8006296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b0:	461a      	mov	r2, r3
 80031b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031b6:	6093      	str	r3, [r2, #8]
 80031b8:	e1ee      	b.n	8003598 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	4611      	mov	r1, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f002 fac3 	bl	800574e <USB_ReadChInterrupts>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	f040 81df 	bne.w	8003592 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e0:	461a      	mov	r2, r3
 80031e2:	2302      	movs	r3, #2
 80031e4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	334d      	adds	r3, #77	@ 0x4d
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	f040 8093 	bne.w	8003324 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	334d      	adds	r3, #77	@ 0x4d
 800320e:	2202      	movs	r2, #2
 8003210:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	334c      	adds	r3, #76	@ 0x4c
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	3326      	adds	r3, #38	@ 0x26
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d00b      	beq.n	8003254 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	3326      	adds	r3, #38	@ 0x26
 800324c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800324e:	2b03      	cmp	r3, #3
 8003250:	f040 8190 	bne.w	8003574 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	799b      	ldrb	r3, [r3, #6]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d115      	bne.n	8003288 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	333d      	adds	r3, #61	@ 0x3d
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	f083 0301 	eor.w	r3, r3, #1
 8003274:	b2d8      	uxtb	r0, r3
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	333d      	adds	r3, #61	@ 0x3d
 8003284:	4602      	mov	r2, r0
 8003286:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	799b      	ldrb	r3, [r3, #6]
 800328c:	2b01      	cmp	r3, #1
 800328e:	f040 8171 	bne.w	8003574 <HCD_HC_OUT_IRQHandler+0x954>
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	3334      	adds	r3, #52	@ 0x34
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8165 	beq.w	8003574 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	3334      	adds	r3, #52	@ 0x34
 80032ba:	6819      	ldr	r1, [r3, #0]
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4403      	add	r3, r0
 80032ca:	3328      	adds	r3, #40	@ 0x28
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	440b      	add	r3, r1
 80032d0:	1e59      	subs	r1, r3, #1
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4403      	add	r3, r0
 80032e0:	3328      	adds	r3, #40	@ 0x28
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 813f 	beq.w	8003574 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	333d      	adds	r3, #61	@ 0x3d
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	f083 0301 	eor.w	r3, r3, #1
 800330e:	b2d8      	uxtb	r0, r3
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	333d      	adds	r3, #61	@ 0x3d
 800331e:	4602      	mov	r2, r0
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	e127      	b.n	8003574 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	334d      	adds	r3, #77	@ 0x4d
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b03      	cmp	r3, #3
 8003338:	d120      	bne.n	800337c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	334d      	adds	r3, #77	@ 0x4d
 800334a:	2202      	movs	r2, #2
 800334c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	331b      	adds	r3, #27
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	f040 8107 	bne.w	8003574 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	334c      	adds	r3, #76	@ 0x4c
 8003376:	2202      	movs	r2, #2
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	e0fb      	b.n	8003574 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	334d      	adds	r3, #77	@ 0x4d
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b04      	cmp	r3, #4
 8003390:	d13a      	bne.n	8003408 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	334d      	adds	r3, #77	@ 0x4d
 80033a2:	2202      	movs	r2, #2
 80033a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	334c      	adds	r3, #76	@ 0x4c
 80033b6:	2202      	movs	r2, #2
 80033b8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	331b      	adds	r3, #27
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	f040 80d1 	bne.w	8003574 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	331b      	adds	r3, #27
 80033e2:	2200      	movs	r2, #0
 80033e4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	0151      	lsls	r1, r2, #5
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	440a      	add	r2, r1
 80033fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003404:	6053      	str	r3, [r2, #4]
 8003406:	e0b5      	b.n	8003574 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	334d      	adds	r3, #77	@ 0x4d
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b05      	cmp	r3, #5
 800341c:	d114      	bne.n	8003448 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	334d      	adds	r3, #77	@ 0x4d
 800342e:	2202      	movs	r2, #2
 8003430:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	334c      	adds	r3, #76	@ 0x4c
 8003442:	2202      	movs	r2, #2
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	e095      	b.n	8003574 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	334d      	adds	r3, #77	@ 0x4d
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b06      	cmp	r3, #6
 800345c:	d114      	bne.n	8003488 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	334d      	adds	r3, #77	@ 0x4d
 800346e:	2202      	movs	r2, #2
 8003470:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	334c      	adds	r3, #76	@ 0x4c
 8003482:	2205      	movs	r2, #5
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	e075      	b.n	8003574 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	334d      	adds	r3, #77	@ 0x4d
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b07      	cmp	r3, #7
 800349c:	d00a      	beq.n	80034b4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	334d      	adds	r3, #77	@ 0x4d
 80034ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80034b0:	2b09      	cmp	r3, #9
 80034b2:	d170      	bne.n	8003596 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	334d      	adds	r3, #77	@ 0x4d
 80034c4:	2202      	movs	r2, #2
 80034c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	3344      	adds	r3, #68	@ 0x44
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	1c59      	adds	r1, r3, #1
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4403      	add	r3, r0
 80034e8:	3344      	adds	r3, #68	@ 0x44
 80034ea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	3344      	adds	r3, #68	@ 0x44
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d914      	bls.n	800352c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	3344      	adds	r3, #68	@ 0x44
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	334c      	adds	r3, #76	@ 0x4c
 8003526:	2204      	movs	r2, #4
 8003528:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800352a:	e022      	b.n	8003572 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	334c      	adds	r3, #76	@ 0x4c
 800353c:	2202      	movs	r2, #2
 800353e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003556:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800355e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800356c:	461a      	mov	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003572:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	334c      	adds	r3, #76	@ 0x4c
 8003584:	781a      	ldrb	r2, [r3, #0]
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f008 fd4c 	bl	800c028 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003590:	e002      	b.n	8003598 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003596:	bf00      	nop
  }
}
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b08a      	sub	sp, #40	@ 0x28
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ae:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	0c5b      	lsrs	r3, r3, #17
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035d2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d004      	beq.n	80035e4 <HCD_RXQLVL_IRQHandler+0x46>
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b05      	cmp	r3, #5
 80035de:	f000 80b6 	beq.w	800374e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035e2:	e0b7      	b.n	8003754 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80b3 	beq.w	8003752 <HCD_RXQLVL_IRQHandler+0x1b4>
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	332c      	adds	r3, #44	@ 0x2c
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80a7 	beq.w	8003752 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4613      	mov	r3, r2
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	3338      	adds	r3, #56	@ 0x38
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	18d1      	adds	r1, r2, r3
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4613      	mov	r3, r2
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4403      	add	r3, r0
 8003628:	3334      	adds	r3, #52	@ 0x34
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4299      	cmp	r1, r3
 800362e:	f200 8083 	bhi.w	8003738 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4613      	mov	r3, r2
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	332c      	adds	r3, #44	@ 0x2c
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	b292      	uxth	r2, r2
 800364c:	4619      	mov	r1, r3
 800364e:	f002 f813 	bl	8005678 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	332c      	adds	r3, #44	@ 0x2c
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	18d1      	adds	r1, r2, r3
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4403      	add	r3, r0
 8003676:	332c      	adds	r3, #44	@ 0x2c
 8003678:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	3338      	adds	r3, #56	@ 0x38
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	18d1      	adds	r1, r2, r3
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4403      	add	r3, r0
 800369e:	3338      	adds	r3, #56	@ 0x38
 80036a0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	0cdb      	lsrs	r3, r3, #19
 80036b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	3328      	adds	r3, #40	@ 0x28
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d13f      	bne.n	8003752 <HCD_RXQLVL_IRQHandler+0x1b4>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d03c      	beq.n	8003752 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036ee:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036f6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003704:	461a      	mov	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	333c      	adds	r3, #60	@ 0x3c
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	f083 0301 	eor.w	r3, r3, #1
 8003720:	b2d8      	uxtb	r0, r3
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4613      	mov	r3, r2
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	333c      	adds	r3, #60	@ 0x3c
 8003732:	4602      	mov	r2, r0
 8003734:	701a      	strb	r2, [r3, #0]
      break;
 8003736:	e00c      	b.n	8003752 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	334c      	adds	r3, #76	@ 0x4c
 8003748:	2204      	movs	r2, #4
 800374a:	701a      	strb	r2, [r3, #0]
      break;
 800374c:	e001      	b.n	8003752 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800374e:	bf00      	nop
 8003750:	e000      	b.n	8003754 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003752:	bf00      	nop
  }
}
 8003754:	bf00      	nop
 8003756:	3728      	adds	r7, #40	@ 0x28
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003788:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b02      	cmp	r3, #2
 8003792:	d10b      	bne.n	80037ac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b01      	cmp	r3, #1
 800379c:	d102      	bne.n	80037a4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f008 fc26 	bl	800bff0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f043 0302 	orr.w	r3, r3, #2
 80037aa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d132      	bne.n	800381c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f043 0308 	orr.w	r3, r3, #8
 80037bc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d126      	bne.n	8003816 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7a5b      	ldrb	r3, [r3, #9]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d113      	bne.n	80037f8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80037d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037da:	d106      	bne.n	80037ea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2102      	movs	r1, #2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f002 f8d8 	bl	8005998 <USB_InitFSLSPClkSel>
 80037e8:	e011      	b.n	800380e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2101      	movs	r1, #1
 80037f0:	4618      	mov	r0, r3
 80037f2:	f002 f8d1 	bl	8005998 <USB_InitFSLSPClkSel>
 80037f6:	e00a      	b.n	800380e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	79db      	ldrb	r3, [r3, #7]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d106      	bne.n	800380e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003806:	461a      	mov	r2, r3
 8003808:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800380c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f008 fc1c 	bl	800c04c <HAL_HCD_PortEnabled_Callback>
 8003814:	e002      	b.n	800381c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f008 fc26 	bl	800c068 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b20      	cmp	r3, #32
 8003824:	d103      	bne.n	800382e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f043 0320 	orr.w	r3, r3, #32
 800382c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003834:	461a      	mov	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	6013      	str	r3, [r2, #0]
}
 800383a:	bf00      	nop
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e12b      	b.n	8003aae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fd f950 	bl	8000b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2224      	movs	r2, #36	@ 0x24
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0201 	bic.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003896:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038a8:	f001 fa20 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 80038ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	4a81      	ldr	r2, [pc, #516]	@ (8003ab8 <HAL_I2C_Init+0x274>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d807      	bhi.n	80038c8 <HAL_I2C_Init+0x84>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a80      	ldr	r2, [pc, #512]	@ (8003abc <HAL_I2C_Init+0x278>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	bf94      	ite	ls
 80038c0:	2301      	movls	r3, #1
 80038c2:	2300      	movhi	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	e006      	b.n	80038d6 <HAL_I2C_Init+0x92>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a7d      	ldr	r2, [pc, #500]	@ (8003ac0 <HAL_I2C_Init+0x27c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	bf94      	ite	ls
 80038d0:	2301      	movls	r3, #1
 80038d2:	2300      	movhi	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0e7      	b.n	8003aae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4a78      	ldr	r2, [pc, #480]	@ (8003ac4 <HAL_I2C_Init+0x280>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	0c9b      	lsrs	r3, r3, #18
 80038e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ab8 <HAL_I2C_Init+0x274>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d802      	bhi.n	8003918 <HAL_I2C_Init+0xd4>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	3301      	adds	r3, #1
 8003916:	e009      	b.n	800392c <HAL_I2C_Init+0xe8>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	4a69      	ldr	r2, [pc, #420]	@ (8003ac8 <HAL_I2C_Init+0x284>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	099b      	lsrs	r3, r3, #6
 800392a:	3301      	adds	r3, #1
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	430b      	orrs	r3, r1
 8003932:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800393e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	495c      	ldr	r1, [pc, #368]	@ (8003ab8 <HAL_I2C_Init+0x274>)
 8003948:	428b      	cmp	r3, r1
 800394a:	d819      	bhi.n	8003980 <HAL_I2C_Init+0x13c>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1e59      	subs	r1, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	fbb1 f3f3 	udiv	r3, r1, r3
 800395a:	1c59      	adds	r1, r3, #1
 800395c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003960:	400b      	ands	r3, r1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_I2C_Init+0x138>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1e59      	subs	r1, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fbb1 f3f3 	udiv	r3, r1, r3
 8003974:	3301      	adds	r3, #1
 8003976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397a:	e051      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 800397c:	2304      	movs	r3, #4
 800397e:	e04f      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d111      	bne.n	80039ac <HAL_I2C_Init+0x168>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e58      	subs	r0, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	440b      	add	r3, r1
 8003996:	fbb0 f3f3 	udiv	r3, r0, r3
 800399a:	3301      	adds	r3, #1
 800399c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	e012      	b.n	80039d2 <HAL_I2C_Init+0x18e>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1e58      	subs	r0, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6859      	ldr	r1, [r3, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	0099      	lsls	r1, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_I2C_Init+0x196>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e022      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10e      	bne.n	8003a00 <HAL_I2C_Init+0x1bc>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1e58      	subs	r0, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6859      	ldr	r1, [r3, #4]
 80039ea:	460b      	mov	r3, r1
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	440b      	add	r3, r1
 80039f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039fe:	e00f      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e58      	subs	r0, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	0099      	lsls	r1, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a16:	3301      	adds	r3, #1
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	6809      	ldr	r1, [r1, #0]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6911      	ldr	r1, [r2, #16]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68d2      	ldr	r2, [r2, #12]
 8003a5a:	4311      	orrs	r1, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	000186a0 	.word	0x000186a0
 8003abc:	001e847f 	.word	0x001e847f
 8003ac0:	003d08ff 	.word	0x003d08ff
 8003ac4:	431bde83 	.word	0x431bde83
 8003ac8:	10624dd3 	.word	0x10624dd3

08003acc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e128      	b.n	8003d30 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a90      	ldr	r2, [pc, #576]	@ (8003d38 <HAL_I2S_Init+0x26c>)
 8003af6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7fd f851 	bl	8000ba0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b14:	f023 030f 	bic.w	r3, r3, #15
 8003b18:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d060      	beq.n	8003bec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b32:	2310      	movs	r3, #16
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	e001      	b.n	8003b3c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003b38:	2320      	movs	r3, #32
 8003b3a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d802      	bhi.n	8003b4a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	f001 f9c4 	bl	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b50:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b5a:	d125      	bne.n	8003ba8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d010      	beq.n	8003b86 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	461a      	mov	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	3305      	adds	r3, #5
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	e01f      	b.n	8003bc6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	461a      	mov	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba2:	3305      	adds	r3, #5
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	e00e      	b.n	8003bc6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	461a      	mov	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc2:	3305      	adds	r3, #5
 8003bc4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4a5c      	ldr	r2, [pc, #368]	@ (8003d3c <HAL_I2S_Init+0x270>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	08db      	lsrs	r3, r3, #3
 8003bd0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e003      	b.n	8003bf4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003bec:	2302      	movs	r3, #2
 8003bee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d902      	bls.n	8003c00 <HAL_I2S_Init+0x134>
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	2bff      	cmp	r3, #255	@ 0xff
 8003bfe:	d907      	bls.n	8003c10 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c04:	f043 0210 	orr.w	r2, r3, #16
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e08f      	b.n	8003d30 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	ea42 0103 	orr.w	r1, r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c2e:	f023 030f 	bic.w	r3, r3, #15
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6851      	ldr	r1, [r2, #4]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6892      	ldr	r2, [r2, #8]
 8003c3a:	4311      	orrs	r1, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68d2      	ldr	r2, [r2, #12]
 8003c40:	4311      	orrs	r1, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6992      	ldr	r2, [r2, #24]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c52:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d161      	bne.n	8003d20 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a38      	ldr	r2, [pc, #224]	@ (8003d40 <HAL_I2S_Init+0x274>)
 8003c60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a37      	ldr	r2, [pc, #220]	@ (8003d44 <HAL_I2S_Init+0x278>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d101      	bne.n	8003c70 <HAL_I2S_Init+0x1a4>
 8003c6c:	4b36      	ldr	r3, [pc, #216]	@ (8003d48 <HAL_I2S_Init+0x27c>)
 8003c6e:	e001      	b.n	8003c74 <HAL_I2S_Init+0x1a8>
 8003c70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	4932      	ldr	r1, [pc, #200]	@ (8003d44 <HAL_I2S_Init+0x278>)
 8003c7c:	428a      	cmp	r2, r1
 8003c7e:	d101      	bne.n	8003c84 <HAL_I2S_Init+0x1b8>
 8003c80:	4a31      	ldr	r2, [pc, #196]	@ (8003d48 <HAL_I2S_Init+0x27c>)
 8003c82:	e001      	b.n	8003c88 <HAL_I2S_Init+0x1bc>
 8003c84:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003c88:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c8c:	f023 030f 	bic.w	r3, r3, #15
 8003c90:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2b      	ldr	r2, [pc, #172]	@ (8003d44 <HAL_I2S_Init+0x278>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d101      	bne.n	8003ca0 <HAL_I2S_Init+0x1d4>
 8003c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003d48 <HAL_I2S_Init+0x27c>)
 8003c9e:	e001      	b.n	8003ca4 <HAL_I2S_Init+0x1d8>
 8003ca0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a25      	ldr	r2, [pc, #148]	@ (8003d44 <HAL_I2S_Init+0x278>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d101      	bne.n	8003cb6 <HAL_I2S_Init+0x1ea>
 8003cb2:	4b25      	ldr	r3, [pc, #148]	@ (8003d48 <HAL_I2S_Init+0x27c>)
 8003cb4:	e001      	b.n	8003cba <HAL_I2S_Init+0x1ee>
 8003cb6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cc6:	d003      	beq.n	8003cd0 <HAL_I2S_Init+0x204>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d103      	bne.n	8003cd8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003cd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	e001      	b.n	8003cdc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	897b      	ldrh	r3, [r7, #10]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d08:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d44 <HAL_I2S_Init+0x278>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d101      	bne.n	8003d18 <HAL_I2S_Init+0x24c>
 8003d14:	4b0c      	ldr	r3, [pc, #48]	@ (8003d48 <HAL_I2S_Init+0x27c>)
 8003d16:	e001      	b.n	8003d1c <HAL_I2S_Init+0x250>
 8003d18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d1c:	897a      	ldrh	r2, [r7, #10]
 8003d1e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	08003e43 	.word	0x08003e43
 8003d3c:	cccccccd 	.word	0xcccccccd
 8003d40:	08003f59 	.word	0x08003f59
 8003d44:	40003800 	.word	0x40003800
 8003d48:	40003400 	.word	0x40003400

08003d4c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d94:	881a      	ldrh	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	1c9a      	adds	r2, r3, #2
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10e      	bne.n	8003ddc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dcc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff ffb8 	bl	8003d4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ddc:	bf00      	nop
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df6:	b292      	uxth	r2, r2
 8003df8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	1c9a      	adds	r2, r3, #2
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10e      	bne.n	8003e3a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e2a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff ff93 	bl	8003d60 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b086      	sub	sp, #24
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d13a      	bne.n	8003ed4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d109      	bne.n	8003e7c <I2S_IRQHandler+0x3a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e72:	2b40      	cmp	r3, #64	@ 0x40
 8003e74:	d102      	bne.n	8003e7c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff ffb4 	bl	8003de4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e82:	2b40      	cmp	r3, #64	@ 0x40
 8003e84:	d126      	bne.n	8003ed4 <I2S_IRQHandler+0x92>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d11f      	bne.n	8003ed4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ea2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	f043 0202 	orr.w	r2, r3, #2
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff ff50 	bl	8003d74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d136      	bne.n	8003f4e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d109      	bne.n	8003efe <I2S_IRQHandler+0xbc>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef4:	2b80      	cmp	r3, #128	@ 0x80
 8003ef6:	d102      	bne.n	8003efe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff ff45 	bl	8003d88 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d122      	bne.n	8003f4e <I2S_IRQHandler+0x10c>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d11b      	bne.n	8003f4e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f24:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f40:	f043 0204 	orr.w	r2, r3, #4
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff13 	bl	8003d74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f4e:	bf00      	nop
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a92      	ldr	r2, [pc, #584]	@ (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d101      	bne.n	8003f76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003f72:	4b92      	ldr	r3, [pc, #584]	@ (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f74:	e001      	b.n	8003f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003f76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a8b      	ldr	r2, [pc, #556]	@ (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d101      	bne.n	8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f90:	4b8a      	ldr	r3, [pc, #552]	@ (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f92:	e001      	b.n	8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fa4:	d004      	beq.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f040 8099 	bne.w	80040e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d107      	bne.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f925 	bl	8004214 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d107      	bne.n	8003fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f9c8 	bl	8004374 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fea:	2b40      	cmp	r3, #64	@ 0x40
 8003fec:	d13a      	bne.n	8004064 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d035      	beq.n	8004064 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a6e      	ldr	r2, [pc, #440]	@ (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d101      	bne.n	8004006 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004002:	4b6e      	ldr	r3, [pc, #440]	@ (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004004:	e001      	b.n	800400a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004006:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4969      	ldr	r1, [pc, #420]	@ (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004012:	428b      	cmp	r3, r1
 8004014:	d101      	bne.n	800401a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004016:	4b69      	ldr	r3, [pc, #420]	@ (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004018:	e001      	b.n	800401e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800401a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800401e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004022:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004032:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004056:	f043 0202 	orr.w	r2, r3, #2
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff fe88 	bl	8003d74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b08      	cmp	r3, #8
 800406c:	f040 80c3 	bne.w	80041f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80bd 	beq.w	80041f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800408a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a49      	ldr	r2, [pc, #292]	@ (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d101      	bne.n	800409a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004096:	4b49      	ldr	r3, [pc, #292]	@ (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004098:	e001      	b.n	800409e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800409a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4944      	ldr	r1, [pc, #272]	@ (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040a6:	428b      	cmp	r3, r1
 80040a8:	d101      	bne.n	80040ae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80040aa:	4b44      	ldr	r3, [pc, #272]	@ (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040ac:	e001      	b.n	80040b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80040ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040b6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80040b8:	2300      	movs	r3, #0
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	f043 0204 	orr.w	r2, r3, #4
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff fe4a 	bl	8003d74 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040e0:	e089      	b.n	80041f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d107      	bne.n	80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f8be 	bl	8004278 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b01      	cmp	r3, #1
 8004104:	d107      	bne.n	8004116 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f8fd 	bl	8004310 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411c:	2b40      	cmp	r3, #64	@ 0x40
 800411e:	d12f      	bne.n	8004180 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d02a      	beq.n	8004180 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004138:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1e      	ldr	r2, [pc, #120]	@ (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d101      	bne.n	8004148 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004144:	4b1d      	ldr	r3, [pc, #116]	@ (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004146:	e001      	b.n	800414c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004148:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4919      	ldr	r1, [pc, #100]	@ (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004154:	428b      	cmp	r3, r1
 8004156:	d101      	bne.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004158:	4b18      	ldr	r3, [pc, #96]	@ (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800415a:	e001      	b.n	8004160 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800415c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004160:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004164:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004172:	f043 0202 	orr.w	r2, r3, #2
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff fdfa 	bl	8003d74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b08      	cmp	r3, #8
 8004188:	d136      	bne.n	80041f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d031      	beq.n	80041f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a07      	ldr	r2, [pc, #28]	@ (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d101      	bne.n	80041a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800419e:	4b07      	ldr	r3, [pc, #28]	@ (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041a0:	e001      	b.n	80041a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80041a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4902      	ldr	r1, [pc, #8]	@ (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041ae:	428b      	cmp	r3, r1
 80041b0:	d106      	bne.n	80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80041b2:	4b02      	ldr	r3, [pc, #8]	@ (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041b4:	e006      	b.n	80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80041b6:	bf00      	nop
 80041b8:	40003800 	.word	0x40003800
 80041bc:	40003400 	.word	0x40003400
 80041c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041c8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041d8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e6:	f043 0204 	orr.w	r2, r3, #4
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff fdc0 	bl	8003d74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041f4:	e000      	b.n	80041f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041f6:	bf00      	nop
}
 80041f8:	bf00      	nop
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	1c99      	adds	r1, r3, #2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6251      	str	r1, [r2, #36]	@ 0x24
 8004226:	881a      	ldrh	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d113      	bne.n	800426e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004254:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff ffc9 	bl	8004200 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	1c99      	adds	r1, r3, #2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6251      	str	r1, [r2, #36]	@ 0x24
 800428a:	8819      	ldrh	r1, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1d      	ldr	r2, [pc, #116]	@ (8004308 <I2SEx_TxISR_I2SExt+0x90>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d101      	bne.n	800429a <I2SEx_TxISR_I2SExt+0x22>
 8004296:	4b1d      	ldr	r3, [pc, #116]	@ (800430c <I2SEx_TxISR_I2SExt+0x94>)
 8004298:	e001      	b.n	800429e <I2SEx_TxISR_I2SExt+0x26>
 800429a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800429e:	460a      	mov	r2, r1
 80042a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d121      	bne.n	80042fe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a12      	ldr	r2, [pc, #72]	@ (8004308 <I2SEx_TxISR_I2SExt+0x90>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d101      	bne.n	80042c8 <I2SEx_TxISR_I2SExt+0x50>
 80042c4:	4b11      	ldr	r3, [pc, #68]	@ (800430c <I2SEx_TxISR_I2SExt+0x94>)
 80042c6:	e001      	b.n	80042cc <I2SEx_TxISR_I2SExt+0x54>
 80042c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	490d      	ldr	r1, [pc, #52]	@ (8004308 <I2SEx_TxISR_I2SExt+0x90>)
 80042d4:	428b      	cmp	r3, r1
 80042d6:	d101      	bne.n	80042dc <I2SEx_TxISR_I2SExt+0x64>
 80042d8:	4b0c      	ldr	r3, [pc, #48]	@ (800430c <I2SEx_TxISR_I2SExt+0x94>)
 80042da:	e001      	b.n	80042e0 <I2SEx_TxISR_I2SExt+0x68>
 80042dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ff81 	bl	8004200 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40003800 	.word	0x40003800
 800430c:	40003400 	.word	0x40003400

08004310 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68d8      	ldr	r0, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004322:	1c99      	adds	r1, r3, #2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004328:	b282      	uxth	r2, r0
 800432a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d113      	bne.n	800436c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004352:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff ff4a 	bl	8004200 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a20      	ldr	r2, [pc, #128]	@ (8004404 <I2SEx_RxISR_I2SExt+0x90>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d101      	bne.n	800438a <I2SEx_RxISR_I2SExt+0x16>
 8004386:	4b20      	ldr	r3, [pc, #128]	@ (8004408 <I2SEx_RxISR_I2SExt+0x94>)
 8004388:	e001      	b.n	800438e <I2SEx_RxISR_I2SExt+0x1a>
 800438a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800438e:	68d8      	ldr	r0, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004394:	1c99      	adds	r1, r3, #2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800439a:	b282      	uxth	r2, r0
 800439c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d121      	bne.n	80043fa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a12      	ldr	r2, [pc, #72]	@ (8004404 <I2SEx_RxISR_I2SExt+0x90>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d101      	bne.n	80043c4 <I2SEx_RxISR_I2SExt+0x50>
 80043c0:	4b11      	ldr	r3, [pc, #68]	@ (8004408 <I2SEx_RxISR_I2SExt+0x94>)
 80043c2:	e001      	b.n	80043c8 <I2SEx_RxISR_I2SExt+0x54>
 80043c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	490d      	ldr	r1, [pc, #52]	@ (8004404 <I2SEx_RxISR_I2SExt+0x90>)
 80043d0:	428b      	cmp	r3, r1
 80043d2:	d101      	bne.n	80043d8 <I2SEx_RxISR_I2SExt+0x64>
 80043d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004408 <I2SEx_RxISR_I2SExt+0x94>)
 80043d6:	e001      	b.n	80043dc <I2SEx_RxISR_I2SExt+0x68>
 80043d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043e0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d106      	bne.n	80043fa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff ff03 	bl	8004200 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40003800 	.word	0x40003800
 8004408:	40003400 	.word	0x40003400

0800440c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e267      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d075      	beq.n	8004516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800442a:	4b88      	ldr	r3, [pc, #544]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b04      	cmp	r3, #4
 8004434:	d00c      	beq.n	8004450 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004436:	4b85      	ldr	r3, [pc, #532]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800443e:	2b08      	cmp	r3, #8
 8004440:	d112      	bne.n	8004468 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004442:	4b82      	ldr	r3, [pc, #520]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800444a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800444e:	d10b      	bne.n	8004468 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004450:	4b7e      	ldr	r3, [pc, #504]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d05b      	beq.n	8004514 <HAL_RCC_OscConfig+0x108>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d157      	bne.n	8004514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e242      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004470:	d106      	bne.n	8004480 <HAL_RCC_OscConfig+0x74>
 8004472:	4b76      	ldr	r3, [pc, #472]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a75      	ldr	r2, [pc, #468]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e01d      	b.n	80044bc <HAL_RCC_OscConfig+0xb0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004488:	d10c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x98>
 800448a:	4b70      	ldr	r3, [pc, #448]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a6f      	ldr	r2, [pc, #444]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	4b6d      	ldr	r3, [pc, #436]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a6c      	ldr	r2, [pc, #432]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e00b      	b.n	80044bc <HAL_RCC_OscConfig+0xb0>
 80044a4:	4b69      	ldr	r3, [pc, #420]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a68      	ldr	r2, [pc, #416]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80044aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4b66      	ldr	r3, [pc, #408]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a65      	ldr	r2, [pc, #404]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80044b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d013      	beq.n	80044ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fc fd60 	bl	8000f88 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fc fd5c 	bl	8000f88 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	@ 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e207      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044de:	4b5b      	ldr	r3, [pc, #364]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0xc0>
 80044ea:	e014      	b.n	8004516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fc fd4c 	bl	8000f88 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f4:	f7fc fd48 	bl	8000f88 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	@ 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e1f3      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004506:	4b51      	ldr	r3, [pc, #324]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0xe8>
 8004512:	e000      	b.n	8004516 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d063      	beq.n	80045ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004522:	4b4a      	ldr	r3, [pc, #296]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00b      	beq.n	8004546 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800452e:	4b47      	ldr	r3, [pc, #284]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004536:	2b08      	cmp	r3, #8
 8004538:	d11c      	bne.n	8004574 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453a:	4b44      	ldr	r3, [pc, #272]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d116      	bne.n	8004574 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004546:	4b41      	ldr	r3, [pc, #260]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <HAL_RCC_OscConfig+0x152>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d001      	beq.n	800455e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e1c7      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455e:	4b3b      	ldr	r3, [pc, #236]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	4937      	ldr	r1, [pc, #220]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 800456e:	4313      	orrs	r3, r2
 8004570:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004572:	e03a      	b.n	80045ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d020      	beq.n	80045be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800457c:	4b34      	ldr	r3, [pc, #208]	@ (8004650 <HAL_RCC_OscConfig+0x244>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fc fd01 	bl	8000f88 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800458a:	f7fc fcfd 	bl	8000f88 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e1a8      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459c:	4b2b      	ldr	r3, [pc, #172]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a8:	4b28      	ldr	r3, [pc, #160]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	4925      	ldr	r1, [pc, #148]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	600b      	str	r3, [r1, #0]
 80045bc:	e015      	b.n	80045ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045be:	4b24      	ldr	r3, [pc, #144]	@ (8004650 <HAL_RCC_OscConfig+0x244>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fc fce0 	bl	8000f88 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045cc:	f7fc fcdc 	bl	8000f88 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e187      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045de:	4b1b      	ldr	r3, [pc, #108]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d036      	beq.n	8004664 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d016      	beq.n	800462c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045fe:	4b15      	ldr	r3, [pc, #84]	@ (8004654 <HAL_RCC_OscConfig+0x248>)
 8004600:	2201      	movs	r2, #1
 8004602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004604:	f7fc fcc0 	bl	8000f88 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800460c:	f7fc fcbc 	bl	8000f88 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e167      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461e:	4b0b      	ldr	r3, [pc, #44]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0x200>
 800462a:	e01b      	b.n	8004664 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800462c:	4b09      	ldr	r3, [pc, #36]	@ (8004654 <HAL_RCC_OscConfig+0x248>)
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004632:	f7fc fca9 	bl	8000f88 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004638:	e00e      	b.n	8004658 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463a:	f7fc fca5 	bl	8000f88 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d907      	bls.n	8004658 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e150      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
 800464c:	40023800 	.word	0x40023800
 8004650:	42470000 	.word	0x42470000
 8004654:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004658:	4b88      	ldr	r3, [pc, #544]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 800465a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1ea      	bne.n	800463a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8097 	beq.w	80047a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004672:	2300      	movs	r3, #0
 8004674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004676:	4b81      	ldr	r3, [pc, #516]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10f      	bne.n	80046a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	4b7d      	ldr	r3, [pc, #500]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	4a7c      	ldr	r2, [pc, #496]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 800468c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004690:	6413      	str	r3, [r2, #64]	@ 0x40
 8004692:	4b7a      	ldr	r3, [pc, #488]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800469e:	2301      	movs	r3, #1
 80046a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a2:	4b77      	ldr	r3, [pc, #476]	@ (8004880 <HAL_RCC_OscConfig+0x474>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d118      	bne.n	80046e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ae:	4b74      	ldr	r3, [pc, #464]	@ (8004880 <HAL_RCC_OscConfig+0x474>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a73      	ldr	r2, [pc, #460]	@ (8004880 <HAL_RCC_OscConfig+0x474>)
 80046b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ba:	f7fc fc65 	bl	8000f88 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c2:	f7fc fc61 	bl	8000f88 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e10c      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004880 <HAL_RCC_OscConfig+0x474>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d106      	bne.n	80046f6 <HAL_RCC_OscConfig+0x2ea>
 80046e8:	4b64      	ldr	r3, [pc, #400]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ec:	4a63      	ldr	r2, [pc, #396]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80046f4:	e01c      	b.n	8004730 <HAL_RCC_OscConfig+0x324>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b05      	cmp	r3, #5
 80046fc:	d10c      	bne.n	8004718 <HAL_RCC_OscConfig+0x30c>
 80046fe:	4b5f      	ldr	r3, [pc, #380]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004702:	4a5e      	ldr	r2, [pc, #376]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004704:	f043 0304 	orr.w	r3, r3, #4
 8004708:	6713      	str	r3, [r2, #112]	@ 0x70
 800470a:	4b5c      	ldr	r3, [pc, #368]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470e:	4a5b      	ldr	r2, [pc, #364]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	6713      	str	r3, [r2, #112]	@ 0x70
 8004716:	e00b      	b.n	8004730 <HAL_RCC_OscConfig+0x324>
 8004718:	4b58      	ldr	r3, [pc, #352]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471c:	4a57      	ldr	r2, [pc, #348]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	6713      	str	r3, [r2, #112]	@ 0x70
 8004724:	4b55      	ldr	r3, [pc, #340]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004728:	4a54      	ldr	r2, [pc, #336]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 800472a:	f023 0304 	bic.w	r3, r3, #4
 800472e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d015      	beq.n	8004764 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004738:	f7fc fc26 	bl	8000f88 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473e:	e00a      	b.n	8004756 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004740:	f7fc fc22 	bl	8000f88 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e0cb      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004756:	4b49      	ldr	r3, [pc, #292]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0ee      	beq.n	8004740 <HAL_RCC_OscConfig+0x334>
 8004762:	e014      	b.n	800478e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004764:	f7fc fc10 	bl	8000f88 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476a:	e00a      	b.n	8004782 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476c:	f7fc fc0c 	bl	8000f88 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e0b5      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004782:	4b3e      	ldr	r3, [pc, #248]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1ee      	bne.n	800476c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800478e:	7dfb      	ldrb	r3, [r7, #23]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d105      	bne.n	80047a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004794:	4b39      	ldr	r3, [pc, #228]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004798:	4a38      	ldr	r2, [pc, #224]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 800479a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800479e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80a1 	beq.w	80048ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047aa:	4b34      	ldr	r3, [pc, #208]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d05c      	beq.n	8004870 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d141      	bne.n	8004842 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047be:	4b31      	ldr	r3, [pc, #196]	@ (8004884 <HAL_RCC_OscConfig+0x478>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c4:	f7fc fbe0 	bl	8000f88 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047cc:	f7fc fbdc 	bl	8000f88 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e087      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047de:	4b27      	ldr	r3, [pc, #156]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69da      	ldr	r2, [r3, #28]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f8:	019b      	lsls	r3, r3, #6
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	3b01      	subs	r3, #1
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480c:	061b      	lsls	r3, r3, #24
 800480e:	491b      	ldr	r1, [pc, #108]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004810:	4313      	orrs	r3, r2
 8004812:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004814:	4b1b      	ldr	r3, [pc, #108]	@ (8004884 <HAL_RCC_OscConfig+0x478>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481a:	f7fc fbb5 	bl	8000f88 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004822:	f7fc fbb1 	bl	8000f88 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e05c      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004834:	4b11      	ldr	r3, [pc, #68]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x416>
 8004840:	e054      	b.n	80048ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004842:	4b10      	ldr	r3, [pc, #64]	@ (8004884 <HAL_RCC_OscConfig+0x478>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fc fb9e 	bl	8000f88 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004850:	f7fc fb9a 	bl	8000f88 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e045      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	4b06      	ldr	r3, [pc, #24]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x444>
 800486e:	e03d      	b.n	80048ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d107      	bne.n	8004888 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e038      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
 800487c:	40023800 	.word	0x40023800
 8004880:	40007000 	.word	0x40007000
 8004884:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004888:	4b1b      	ldr	r3, [pc, #108]	@ (80048f8 <HAL_RCC_OscConfig+0x4ec>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d028      	beq.n	80048e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d121      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d11a      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048b8:	4013      	ands	r3, r2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d111      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	3b01      	subs	r3, #1
 80048d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800

080048fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0cc      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004910:	4b68      	ldr	r3, [pc, #416]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d90c      	bls.n	8004938 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491e:	4b65      	ldr	r3, [pc, #404]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004926:	4b63      	ldr	r3, [pc, #396]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d001      	beq.n	8004938 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0b8      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d020      	beq.n	8004986 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004950:	4b59      	ldr	r3, [pc, #356]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	4a58      	ldr	r2, [pc, #352]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800495a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004968:	4b53      	ldr	r3, [pc, #332]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	4a52      	ldr	r2, [pc, #328]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004972:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004974:	4b50      	ldr	r3, [pc, #320]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	494d      	ldr	r1, [pc, #308]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	4313      	orrs	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d044      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d107      	bne.n	80049aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499a:	4b47      	ldr	r3, [pc, #284]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d119      	bne.n	80049da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e07f      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d003      	beq.n	80049ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ba:	4b3f      	ldr	r3, [pc, #252]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e06f      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ca:	4b3b      	ldr	r3, [pc, #236]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e067      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049da:	4b37      	ldr	r3, [pc, #220]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f023 0203 	bic.w	r2, r3, #3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	4934      	ldr	r1, [pc, #208]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049ec:	f7fc facc 	bl	8000f88 <HAL_GetTick>
 80049f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f2:	e00a      	b.n	8004a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f4:	f7fc fac8 	bl	8000f88 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e04f      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 020c 	and.w	r2, r3, #12
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d1eb      	bne.n	80049f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a1c:	4b25      	ldr	r3, [pc, #148]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d20c      	bcs.n	8004a44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2a:	4b22      	ldr	r3, [pc, #136]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a32:	4b20      	ldr	r3, [pc, #128]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e032      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a50:	4b19      	ldr	r3, [pc, #100]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	4916      	ldr	r1, [pc, #88]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a6e:	4b12      	ldr	r3, [pc, #72]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	490e      	ldr	r1, [pc, #56]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a82:	f000 f821 	bl	8004ac8 <HAL_RCC_GetSysClockFreq>
 8004a86:	4602      	mov	r2, r0
 8004a88:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	091b      	lsrs	r3, r3, #4
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	490a      	ldr	r1, [pc, #40]	@ (8004abc <HAL_RCC_ClockConfig+0x1c0>)
 8004a94:	5ccb      	ldrb	r3, [r1, r3]
 8004a96:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9a:	4a09      	ldr	r2, [pc, #36]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a9e:	4b09      	ldr	r3, [pc, #36]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fc fa2c 	bl	8000f00 <HAL_InitTick>

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40023c00 	.word	0x40023c00
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	0800c858 	.word	0x0800c858
 8004ac0:	20000000 	.word	0x20000000
 8004ac4:	20000004 	.word	0x20000004

08004ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004acc:	b094      	sub	sp, #80	@ 0x50
 8004ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ae0:	4b79      	ldr	r3, [pc, #484]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 030c 	and.w	r3, r3, #12
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d00d      	beq.n	8004b08 <HAL_RCC_GetSysClockFreq+0x40>
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	f200 80e1 	bhi.w	8004cb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <HAL_RCC_GetSysClockFreq+0x34>
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d003      	beq.n	8004b02 <HAL_RCC_GetSysClockFreq+0x3a>
 8004afa:	e0db      	b.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004afc:	4b73      	ldr	r3, [pc, #460]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x204>)
 8004afe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b00:	e0db      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b02:	4b73      	ldr	r3, [pc, #460]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b06:	e0d8      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b08:	4b6f      	ldr	r3, [pc, #444]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b12:	4b6d      	ldr	r3, [pc, #436]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d063      	beq.n	8004be6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b1e:	4b6a      	ldr	r3, [pc, #424]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	099b      	lsrs	r3, r3, #6
 8004b24:	2200      	movs	r2, #0
 8004b26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b30:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b32:	2300      	movs	r3, #0
 8004b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	462b      	mov	r3, r5
 8004b3e:	f04f 0000 	mov.w	r0, #0
 8004b42:	f04f 0100 	mov.w	r1, #0
 8004b46:	0159      	lsls	r1, r3, #5
 8004b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b4c:	0150      	lsls	r0, r2, #5
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4621      	mov	r1, r4
 8004b54:	1a51      	subs	r1, r2, r1
 8004b56:	6139      	str	r1, [r7, #16]
 8004b58:	4629      	mov	r1, r5
 8004b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b6c:	4659      	mov	r1, fp
 8004b6e:	018b      	lsls	r3, r1, #6
 8004b70:	4651      	mov	r1, sl
 8004b72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b76:	4651      	mov	r1, sl
 8004b78:	018a      	lsls	r2, r1, #6
 8004b7a:	4651      	mov	r1, sl
 8004b7c:	ebb2 0801 	subs.w	r8, r2, r1
 8004b80:	4659      	mov	r1, fp
 8004b82:	eb63 0901 	sbc.w	r9, r3, r1
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b9a:	4690      	mov	r8, r2
 8004b9c:	4699      	mov	r9, r3
 8004b9e:	4623      	mov	r3, r4
 8004ba0:	eb18 0303 	adds.w	r3, r8, r3
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	462b      	mov	r3, r5
 8004ba8:	eb49 0303 	adc.w	r3, r9, r3
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bba:	4629      	mov	r1, r5
 8004bbc:	024b      	lsls	r3, r1, #9
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	024a      	lsls	r2, r1, #9
 8004bc8:	4610      	mov	r0, r2
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bce:	2200      	movs	r2, #0
 8004bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bd8:	f7fb fafa 	bl	80001d0 <__aeabi_uldivmod>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4613      	mov	r3, r2
 8004be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004be4:	e058      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be6:	4b38      	ldr	r3, [pc, #224]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	099b      	lsrs	r3, r3, #6
 8004bec:	2200      	movs	r2, #0
 8004bee:	4618      	mov	r0, r3
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bf6:	623b      	str	r3, [r7, #32]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c00:	4642      	mov	r2, r8
 8004c02:	464b      	mov	r3, r9
 8004c04:	f04f 0000 	mov.w	r0, #0
 8004c08:	f04f 0100 	mov.w	r1, #0
 8004c0c:	0159      	lsls	r1, r3, #5
 8004c0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c12:	0150      	lsls	r0, r2, #5
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4641      	mov	r1, r8
 8004c1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c1e:	4649      	mov	r1, r9
 8004c20:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c38:	ebb2 040a 	subs.w	r4, r2, sl
 8004c3c:	eb63 050b 	sbc.w	r5, r3, fp
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	00eb      	lsls	r3, r5, #3
 8004c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c4e:	00e2      	lsls	r2, r4, #3
 8004c50:	4614      	mov	r4, r2
 8004c52:	461d      	mov	r5, r3
 8004c54:	4643      	mov	r3, r8
 8004c56:	18e3      	adds	r3, r4, r3
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	eb45 0303 	adc.w	r3, r5, r3
 8004c60:	607b      	str	r3, [r7, #4]
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c6e:	4629      	mov	r1, r5
 8004c70:	028b      	lsls	r3, r1, #10
 8004c72:	4621      	mov	r1, r4
 8004c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c78:	4621      	mov	r1, r4
 8004c7a:	028a      	lsls	r2, r1, #10
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c82:	2200      	movs	r2, #0
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	61fa      	str	r2, [r7, #28]
 8004c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c8c:	f7fb faa0 	bl	80001d0 <__aeabi_uldivmod>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4613      	mov	r3, r2
 8004c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c98:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004ca8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cb2:	e002      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x204>)
 8004cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3750      	adds	r7, #80	@ 0x50
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	00f42400 	.word	0x00f42400
 8004cd0:	007a1200 	.word	0x007a1200

08004cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd8:	4b03      	ldr	r3, [pc, #12]	@ (8004ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cda:	681b      	ldr	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20000000 	.word	0x20000000

08004cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cf0:	f7ff fff0 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	4b05      	ldr	r3, [pc, #20]	@ (8004d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	0a9b      	lsrs	r3, r3, #10
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	4903      	ldr	r1, [pc, #12]	@ (8004d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d02:	5ccb      	ldrb	r3, [r1, r3]
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	0800c868 	.word	0x0800c868

08004d14 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d105      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d035      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d3c:	4b62      	ldr	r3, [pc, #392]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d42:	f7fc f921 	bl	8000f88 <HAL_GetTick>
 8004d46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d48:	e008      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d4a:	f7fc f91d 	bl	8000f88 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e0b0      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d5c:	4b5b      	ldr	r3, [pc, #364]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1f0      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	019a      	lsls	r2, r3, #6
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	071b      	lsls	r3, r3, #28
 8004d74:	4955      	ldr	r1, [pc, #340]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d7c:	4b52      	ldr	r3, [pc, #328]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d82:	f7fc f901 	bl	8000f88 <HAL_GetTick>
 8004d86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d88:	e008      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d8a:	f7fc f8fd 	bl	8000f88 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e090      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 8083 	beq.w	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	4b44      	ldr	r3, [pc, #272]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbe:	4a43      	ldr	r2, [pc, #268]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dc6:	4b41      	ldr	r3, [pc, #260]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ddc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dde:	f7fc f8d3 	bl	8000f88 <HAL_GetTick>
 8004de2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004de4:	e008      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de6:	f7fc f8cf 	bl	8000f88 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e062      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004df8:	4b35      	ldr	r3, [pc, #212]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e04:	4b31      	ldr	r3, [pc, #196]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e0c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d02f      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d028      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e22:	4b2a      	ldr	r3, [pc, #168]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e2a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e2c:	4b29      	ldr	r3, [pc, #164]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e32:	4b28      	ldr	r3, [pc, #160]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e38:	4a24      	ldr	r2, [pc, #144]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e3e:	4b23      	ldr	r3, [pc, #140]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d114      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e4a:	f7fc f89d 	bl	8000f88 <HAL_GetTick>
 8004e4e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e52:	f7fc f899 	bl	8000f88 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e02a      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e68:	4b18      	ldr	r3, [pc, #96]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0ee      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e80:	d10d      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e82:	4b12      	ldr	r3, [pc, #72]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e96:	490d      	ldr	r1, [pc, #52]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	608b      	str	r3, [r1, #8]
 8004e9c:	e005      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ea4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004ea8:	6093      	str	r3, [r2, #8]
 8004eaa:	4b08      	ldr	r3, [pc, #32]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb6:	4905      	ldr	r1, [pc, #20]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	42470068 	.word	0x42470068
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40007000 	.word	0x40007000
 8004ed4:	42470e40 	.word	0x42470e40

08004ed8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d13f      	bne.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ef6:	4b24      	ldr	r3, [pc, #144]	@ (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d006      	beq.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f0c:	d12f      	bne.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f10:	617b      	str	r3, [r7, #20]
          break;
 8004f12:	e02f      	b.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f14:	4b1c      	ldr	r3, [pc, #112]	@ (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f20:	d108      	bne.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f22:	4b19      	ldr	r3, [pc, #100]	@ (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f2a:	4a19      	ldr	r2, [pc, #100]	@ (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	e007      	b.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f34:	4b14      	ldr	r3, [pc, #80]	@ (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f3c:	4a15      	ldr	r2, [pc, #84]	@ (8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f42:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f44:	4b10      	ldr	r3, [pc, #64]	@ (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f4a:	099b      	lsrs	r3, r3, #6
 8004f4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	fb02 f303 	mul.w	r3, r2, r3
 8004f56:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f58:	4b0b      	ldr	r3, [pc, #44]	@ (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f5e:	0f1b      	lsrs	r3, r3, #28
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6a:	617b      	str	r3, [r7, #20]
          break;
 8004f6c:	e002      	b.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
          break;
 8004f72:	bf00      	nop
        }
      }
      break;
 8004f74:	e000      	b.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004f76:	bf00      	nop
    }
  }
  return frequency;
 8004f78:	697b      	ldr	r3, [r7, #20]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	00bb8000 	.word	0x00bb8000
 8004f90:	007a1200 	.word	0x007a1200
 8004f94:	00f42400 	.word	0x00f42400

08004f98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e07b      	b.n	80050a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d108      	bne.n	8004fc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fba:	d009      	beq.n	8004fd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	61da      	str	r2, [r3, #28]
 8004fc2:	e005      	b.n	8004fd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fb fe58 	bl	8000ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005006:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005054:	ea42 0103 	orr.w	r1, r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	0c1b      	lsrs	r3, r3, #16
 800506e:	f003 0104 	and.w	r1, r3, #4
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005076:	f003 0210 	and.w	r2, r3, #16
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005090:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e041      	b.n	8005140 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d106      	bne.n	80050d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7fb fe2d 	bl	8000d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2202      	movs	r2, #2
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3304      	adds	r3, #4
 80050e6:	4619      	mov	r1, r3
 80050e8:	4610      	mov	r0, r2
 80050ea:	f000 f82d 	bl	8005148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a46      	ldr	r2, [pc, #280]	@ (8005274 <TIM_Base_SetConfig+0x12c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d013      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005166:	d00f      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a43      	ldr	r2, [pc, #268]	@ (8005278 <TIM_Base_SetConfig+0x130>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00b      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a42      	ldr	r2, [pc, #264]	@ (800527c <TIM_Base_SetConfig+0x134>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d007      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a41      	ldr	r2, [pc, #260]	@ (8005280 <TIM_Base_SetConfig+0x138>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d003      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a40      	ldr	r2, [pc, #256]	@ (8005284 <TIM_Base_SetConfig+0x13c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d108      	bne.n	800519a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800518e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a35      	ldr	r2, [pc, #212]	@ (8005274 <TIM_Base_SetConfig+0x12c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d02b      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a8:	d027      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a32      	ldr	r2, [pc, #200]	@ (8005278 <TIM_Base_SetConfig+0x130>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d023      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a31      	ldr	r2, [pc, #196]	@ (800527c <TIM_Base_SetConfig+0x134>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d01f      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a30      	ldr	r2, [pc, #192]	@ (8005280 <TIM_Base_SetConfig+0x138>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d01b      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a2f      	ldr	r2, [pc, #188]	@ (8005284 <TIM_Base_SetConfig+0x13c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d017      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005288 <TIM_Base_SetConfig+0x140>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a2d      	ldr	r2, [pc, #180]	@ (800528c <TIM_Base_SetConfig+0x144>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00f      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005290 <TIM_Base_SetConfig+0x148>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00b      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005294 <TIM_Base_SetConfig+0x14c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d007      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005298 <TIM_Base_SetConfig+0x150>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d003      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a29      	ldr	r2, [pc, #164]	@ (800529c <TIM_Base_SetConfig+0x154>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d108      	bne.n	800520c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a10      	ldr	r2, [pc, #64]	@ (8005274 <TIM_Base_SetConfig+0x12c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_Base_SetConfig+0xf8>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a12      	ldr	r2, [pc, #72]	@ (8005284 <TIM_Base_SetConfig+0x13c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d103      	bne.n	8005248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b01      	cmp	r3, #1
 8005258:	d105      	bne.n	8005266 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f023 0201 	bic.w	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	611a      	str	r2, [r3, #16]
  }
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40010000 	.word	0x40010000
 8005278:	40000400 	.word	0x40000400
 800527c:	40000800 	.word	0x40000800
 8005280:	40000c00 	.word	0x40000c00
 8005284:	40010400 	.word	0x40010400
 8005288:	40014000 	.word	0x40014000
 800528c:	40014400 	.word	0x40014400
 8005290:	40014800 	.word	0x40014800
 8005294:	40001800 	.word	0x40001800
 8005298:	40001c00 	.word	0x40001c00
 800529c:	40002000 	.word	0x40002000

080052a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e05a      	b.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a21      	ldr	r2, [pc, #132]	@ (800537c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d022      	beq.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005304:	d01d      	beq.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1d      	ldr	r2, [pc, #116]	@ (8005380 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d018      	beq.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1b      	ldr	r2, [pc, #108]	@ (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d013      	beq.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1a      	ldr	r2, [pc, #104]	@ (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00e      	beq.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a18      	ldr	r2, [pc, #96]	@ (800538c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d009      	beq.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a17      	ldr	r2, [pc, #92]	@ (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d004      	beq.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a15      	ldr	r2, [pc, #84]	@ (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d10c      	bne.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	4313      	orrs	r3, r2
 8005352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40010000 	.word	0x40010000
 8005380:	40000400 	.word	0x40000400
 8005384:	40000800 	.word	0x40000800
 8005388:	40000c00 	.word	0x40000c00
 800538c:	40010400 	.word	0x40010400
 8005390:	40014000 	.word	0x40014000
 8005394:	40001800 	.word	0x40001800

08005398 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005398:	b084      	sub	sp, #16
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	f107 001c 	add.w	r0, r7, #28
 80053a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d123      	bne.n	80053fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80053c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d105      	bne.n	80053ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f9dc 	bl	80057ac <USB_CoreReset>
 80053f4:	4603      	mov	r3, r0
 80053f6:	73fb      	strb	r3, [r7, #15]
 80053f8:	e01b      	b.n	8005432 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f9d0 	bl	80057ac <USB_CoreReset>
 800540c:	4603      	mov	r3, r0
 800540e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005410:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005414:	2b00      	cmp	r3, #0
 8005416:	d106      	bne.n	8005426 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	639a      	str	r2, [r3, #56]	@ 0x38
 8005424:	e005      	b.n	8005432 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005432:	7fbb      	ldrb	r3, [r7, #30]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d10b      	bne.n	8005450 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f043 0206 	orr.w	r2, r3, #6
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800545c:	b004      	add	sp, #16
 800545e:	4770      	bx	lr

08005460 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f043 0201 	orr.w	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f023 0201 	bic.w	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054c0:	78fb      	ldrb	r3, [r7, #3]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d115      	bne.n	80054f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80054d2:	200a      	movs	r0, #10
 80054d4:	f7fb fd64 	bl	8000fa0 <HAL_Delay>
      ms += 10U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	330a      	adds	r3, #10
 80054dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f956 	bl	8005790 <USB_GetMode>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d01e      	beq.n	8005528 <USB_SetCurrentMode+0x84>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80054ee:	d9f0      	bls.n	80054d2 <USB_SetCurrentMode+0x2e>
 80054f0:	e01a      	b.n	8005528 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054f2:	78fb      	ldrb	r3, [r7, #3]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d115      	bne.n	8005524 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005504:	200a      	movs	r0, #10
 8005506:	f7fb fd4b 	bl	8000fa0 <HAL_Delay>
      ms += 10U;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	330a      	adds	r3, #10
 800550e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f93d 	bl	8005790 <USB_GetMode>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <USB_SetCurrentMode+0x84>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005520:	d9f0      	bls.n	8005504 <USB_SetCurrentMode+0x60>
 8005522:	e001      	b.n	8005528 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e005      	b.n	8005534 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2bc8      	cmp	r3, #200	@ 0xc8
 800552c:	d101      	bne.n	8005532 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3301      	adds	r3, #1
 800554e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005556:	d901      	bls.n	800555c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e01b      	b.n	8005594 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	daf2      	bge.n	800554a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	019b      	lsls	r3, r3, #6
 800556c:	f043 0220 	orr.w	r2, r3, #32
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	3301      	adds	r3, #1
 8005578:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005580:	d901      	bls.n	8005586 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e006      	b.n	8005594 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b20      	cmp	r3, #32
 8005590:	d0f0      	beq.n	8005574 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3301      	adds	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055b8:	d901      	bls.n	80055be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e018      	b.n	80055f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	daf2      	bge.n	80055ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2210      	movs	r2, #16
 80055ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3301      	adds	r3, #1
 80055d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055dc:	d901      	bls.n	80055e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e006      	b.n	80055f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0310 	and.w	r3, r3, #16
 80055ea:	2b10      	cmp	r3, #16
 80055ec:	d0f0      	beq.n	80055d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b089      	sub	sp, #36	@ 0x24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	4611      	mov	r1, r2
 8005608:	461a      	mov	r2, r3
 800560a:	460b      	mov	r3, r1
 800560c:	71fb      	strb	r3, [r7, #7]
 800560e:	4613      	mov	r3, r2
 8005610:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800561a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800561e:	2b00      	cmp	r3, #0
 8005620:	d123      	bne.n	800566a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005622:	88bb      	ldrh	r3, [r7, #4]
 8005624:	3303      	adds	r3, #3
 8005626:	089b      	lsrs	r3, r3, #2
 8005628:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800562a:	2300      	movs	r3, #0
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	e018      	b.n	8005662 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	031a      	lsls	r2, r3, #12
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	4413      	add	r3, r2
 8005638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800563c:	461a      	mov	r2, r3
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	3301      	adds	r3, #1
 8005648:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	3301      	adds	r3, #1
 800564e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	3301      	adds	r3, #1
 8005654:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	3301      	adds	r3, #1
 800565a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	3301      	adds	r3, #1
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	429a      	cmp	r2, r3
 8005668:	d3e2      	bcc.n	8005630 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3724      	adds	r7, #36	@ 0x24
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005678:	b480      	push	{r7}
 800567a:	b08b      	sub	sp, #44	@ 0x2c
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	4613      	mov	r3, r2
 8005684:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	089b      	lsrs	r3, r3, #2
 8005692:	b29b      	uxth	r3, r3
 8005694:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	f003 0303 	and.w	r3, r3, #3
 800569c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800569e:	2300      	movs	r3, #0
 80056a0:	623b      	str	r3, [r7, #32]
 80056a2:	e014      	b.n	80056ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	3301      	adds	r3, #1
 80056b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	3301      	adds	r3, #1
 80056ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	3301      	adds	r3, #1
 80056c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	3301      	adds	r3, #1
 80056c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	3301      	adds	r3, #1
 80056cc:	623b      	str	r3, [r7, #32]
 80056ce:	6a3a      	ldr	r2, [r7, #32]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d3e6      	bcc.n	80056a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056d6:	8bfb      	ldrh	r3, [r7, #30]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01e      	beq.n	800571a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056e6:	461a      	mov	r2, r3
 80056e8:	f107 0310 	add.w	r3, r7, #16
 80056ec:	6812      	ldr	r2, [r2, #0]
 80056ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	fa22 f303 	lsr.w	r3, r2, r3
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	701a      	strb	r2, [r3, #0]
      i++;
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	3301      	adds	r3, #1
 8005706:	623b      	str	r3, [r7, #32]
      pDest++;
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	3301      	adds	r3, #1
 800570c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800570e:	8bfb      	ldrh	r3, [r7, #30]
 8005710:	3b01      	subs	r3, #1
 8005712:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005714:	8bfb      	ldrh	r3, [r7, #30]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1ea      	bne.n	80056f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800571c:	4618      	mov	r0, r3
 800571e:	372c      	adds	r7, #44	@ 0x2c
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4013      	ands	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005740:	68fb      	ldr	r3, [r7, #12]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800574e:	b480      	push	{r7}
 8005750:	b085      	sub	sp, #20
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	460b      	mov	r3, r1
 8005758:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4413      	add	r3, r2
 8005776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	4013      	ands	r3, r2
 8005780:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005782:	68bb      	ldr	r3, [r7, #8]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	f003 0301 	and.w	r3, r3, #1
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3301      	adds	r3, #1
 80057bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057c4:	d901      	bls.n	80057ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e01b      	b.n	8005802 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	daf2      	bge.n	80057b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f043 0201 	orr.w	r2, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057ee:	d901      	bls.n	80057f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e006      	b.n	8005802 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d0f0      	beq.n	80057e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005810:	b084      	sub	sp, #16
 8005812:	b580      	push	{r7, lr}
 8005814:	b086      	sub	sp, #24
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800581e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005830:	461a      	mov	r2, r3
 8005832:	2300      	movs	r3, #0
 8005834:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005846:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005852:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d119      	bne.n	800589a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005866:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800586a:	2b01      	cmp	r3, #1
 800586c:	d10a      	bne.n	8005884 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800587c:	f043 0304 	orr.w	r3, r3, #4
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	e014      	b.n	80058ae <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005892:	f023 0304 	bic.w	r3, r3, #4
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	e009      	b.n	80058ae <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80058a8:	f023 0304 	bic.w	r3, r3, #4
 80058ac:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058ae:	2110      	movs	r1, #16
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff fe43 	bl	800553c <USB_FlushTxFifo>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff fe6d 	bl	80055a0 <USB_FlushRxFifo>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80058d0:	2300      	movs	r3, #0
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	e015      	b.n	8005902 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058e2:	461a      	mov	r2, r3
 80058e4:	f04f 33ff 	mov.w	r3, #4294967295
 80058e8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058f6:	461a      	mov	r2, r3
 80058f8:	2300      	movs	r3, #0
 80058fa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	3301      	adds	r3, #1
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005906:	461a      	mov	r2, r3
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	4293      	cmp	r3, r2
 800590c:	d3e3      	bcc.n	80058d6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f04f 32ff 	mov.w	r2, #4294967295
 800591a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a18      	ldr	r2, [pc, #96]	@ (8005980 <USB_HostInit+0x170>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d10b      	bne.n	800593c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800592a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a15      	ldr	r2, [pc, #84]	@ (8005984 <USB_HostInit+0x174>)
 8005930:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a14      	ldr	r2, [pc, #80]	@ (8005988 <USB_HostInit+0x178>)
 8005936:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800593a:	e009      	b.n	8005950 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2280      	movs	r2, #128	@ 0x80
 8005940:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a11      	ldr	r2, [pc, #68]	@ (800598c <USB_HostInit+0x17c>)
 8005946:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a11      	ldr	r2, [pc, #68]	@ (8005990 <USB_HostInit+0x180>)
 800594c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005950:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005954:	2b00      	cmp	r3, #0
 8005956:	d105      	bne.n	8005964 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	f043 0210 	orr.w	r2, r3, #16
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699a      	ldr	r2, [r3, #24]
 8005968:	4b0a      	ldr	r3, [pc, #40]	@ (8005994 <USB_HostInit+0x184>)
 800596a:	4313      	orrs	r3, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005970:	7dfb      	ldrb	r3, [r7, #23]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800597c:	b004      	add	sp, #16
 800597e:	4770      	bx	lr
 8005980:	40040000 	.word	0x40040000
 8005984:	01000200 	.word	0x01000200
 8005988:	00e00300 	.word	0x00e00300
 800598c:	00600080 	.word	0x00600080
 8005990:	004000e0 	.word	0x004000e0
 8005994:	a3200008 	.word	0xa3200008

08005998 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80059b6:	f023 0303 	bic.w	r3, r3, #3
 80059ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	68f9      	ldr	r1, [r7, #12]
 80059cc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80059d0:	4313      	orrs	r3, r2
 80059d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d107      	bne.n	80059ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059e0:	461a      	mov	r2, r3
 80059e2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80059e6:	6053      	str	r3, [r2, #4]
 80059e8:	e00c      	b.n	8005a04 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d107      	bne.n	8005a00 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059f6:	461a      	mov	r2, r3
 80059f8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80059fc:	6053      	str	r3, [r2, #4]
 80059fe:	e001      	b.n	8005a04 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e000      	b.n	8005a06 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005a32:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a40:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005a42:	2064      	movs	r0, #100	@ 0x64
 8005a44:	f7fb faac 	bl	8000fa0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a54:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005a56:	200a      	movs	r0, #10
 8005a58:	f7fb faa2 	bl	8000fa0 <HAL_Delay>

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b085      	sub	sp, #20
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005a8a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d109      	bne.n	8005aaa <USB_DriveVbus+0x44>
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d106      	bne.n	8005aaa <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005aa4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005aa8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab4:	d109      	bne.n	8005aca <USB_DriveVbus+0x64>
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d106      	bne.n	8005aca <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ac4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ac8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	0c5b      	lsrs	r3, r3, #17
 8005af6:	f003 0303 	and.w	r3, r3, #3
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b085      	sub	sp, #20
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	b29b      	uxth	r3, r3
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	4608      	mov	r0, r1
 8005b32:	4611      	mov	r1, r2
 8005b34:	461a      	mov	r2, r3
 8005b36:	4603      	mov	r3, r0
 8005b38:	70fb      	strb	r3, [r7, #3]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	70bb      	strb	r3, [r7, #2]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005b4a:	78fb      	ldrb	r3, [r7, #3]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b56:	461a      	mov	r2, r3
 8005b58:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005b5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d87c      	bhi.n	8005c60 <USB_HC_Init+0x138>
 8005b66:	a201      	add	r2, pc, #4	@ (adr r2, 8005b6c <USB_HC_Init+0x44>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005b7d 	.word	0x08005b7d
 8005b70:	08005c23 	.word	0x08005c23
 8005b74:	08005b7d 	.word	0x08005b7d
 8005b78:	08005be5 	.word	0x08005be5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b88:	461a      	mov	r2, r3
 8005b8a:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005b8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005b90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	da10      	bge.n	8005bba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	78fa      	ldrb	r2, [r7, #3]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005bb8:	e055      	b.n	8005c66 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a6f      	ldr	r2, [pc, #444]	@ (8005d7c <USB_HC_Init+0x254>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d151      	bne.n	8005c66 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	78fa      	ldrb	r2, [r7, #3]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bdc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005be0:	60d3      	str	r3, [r2, #12]
      break;
 8005be2:	e040      	b.n	8005c66 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005bf6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005bf8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	da34      	bge.n	8005c6a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	78fa      	ldrb	r2, [r7, #3]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c1e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005c20:	e023      	b.n	8005c6a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c22:	78fb      	ldrb	r3, [r7, #3]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f240 2325 	movw	r3, #549	@ 0x225
 8005c34:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	da17      	bge.n	8005c6e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005c3e:	78fb      	ldrb	r3, [r7, #3]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	78fa      	ldrb	r2, [r7, #3]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c58:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005c5c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005c5e:	e006      	b.n	8005c6e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	77fb      	strb	r3, [r7, #31]
      break;
 8005c64:	e004      	b.n	8005c70 <USB_HC_Init+0x148>
      break;
 8005c66:	bf00      	nop
 8005c68:	e002      	b.n	8005c70 <USB_HC_Init+0x148>
      break;
 8005c6a:	bf00      	nop
 8005c6c:	e000      	b.n	8005c70 <USB_HC_Init+0x148>
      break;
 8005c6e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	2300      	movs	r3, #0
 8005c80:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	78fa      	ldrb	r2, [r7, #3]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c9c:	f043 0302 	orr.w	r3, r3, #2
 8005ca0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	78fb      	ldrb	r3, [r7, #3]
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb6:	6939      	ldr	r1, [r7, #16]
 8005cb8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005ccc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	da03      	bge.n	8005cdc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005cd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cd8:	61bb      	str	r3, [r7, #24]
 8005cda:	e001      	b.n	8005ce0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff fef9 	bl	8005ad8 <USB_GetHostSpeed>
 8005ce6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005ce8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d106      	bne.n	8005cfe <USB_HC_Init+0x1d6>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d003      	beq.n	8005cfe <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005cf6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e001      	b.n	8005d02 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d02:	787b      	ldrb	r3, [r7, #1]
 8005d04:	059b      	lsls	r3, r3, #22
 8005d06:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d0a:	78bb      	ldrb	r3, [r7, #2]
 8005d0c:	02db      	lsls	r3, r3, #11
 8005d0e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d12:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d14:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d18:	049b      	lsls	r3, r3, #18
 8005d1a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d1e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005d20:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d26:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d30:	78fa      	ldrb	r2, [r7, #3]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005d3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d40:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005d42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d003      	beq.n	8005d52 <USB_HC_Init+0x22a>
 8005d4a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d10f      	bne.n	8005d72 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005d52:	78fb      	ldrb	r3, [r7, #3]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	78fa      	ldrb	r2, [r7, #3]
 8005d62:	0151      	lsls	r1, r2, #5
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	440a      	add	r2, r1
 8005d68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d70:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005d72:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3720      	adds	r7, #32
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40040000 	.word	0x40040000

08005d80 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08c      	sub	sp, #48	@ 0x30
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	785b      	ldrb	r3, [r3, #1]
 8005d96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005d98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005d9c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a5d      	ldr	r2, [pc, #372]	@ (8005f18 <USB_HC_StartXfer+0x198>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d12f      	bne.n	8005e06 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d11c      	bne.n	8005de6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	7c9b      	ldrb	r3, [r3, #18]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <USB_HC_StartXfer+0x3c>
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	7c9b      	ldrb	r3, [r3, #18]
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d124      	bne.n	8005e06 <USB_HC_StartXfer+0x86>
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	799b      	ldrb	r3, [r3, #6]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d120      	bne.n	8005e06 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	0151      	lsls	r1, r2, #5
 8005dd6:	6a3a      	ldr	r2, [r7, #32]
 8005dd8:	440a      	add	r2, r1
 8005dda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de2:	60d3      	str	r3, [r2, #12]
 8005de4:	e00f      	b.n	8005e06 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	791b      	ldrb	r3, [r3, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10b      	bne.n	8005e06 <USB_HC_StartXfer+0x86>
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	795b      	ldrb	r3, [r3, #5]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d107      	bne.n	8005e06 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 fb6b 	bl	80064d8 <USB_DoPing>
        return HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	e232      	b.n	800626c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	799b      	ldrb	r3, [r3, #6]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d158      	bne.n	8005ec0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	78db      	ldrb	r3, [r3, #3]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d007      	beq.n	8005e2a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	8a92      	ldrh	r2, [r2, #20]
 8005e20:	fb03 f202 	mul.w	r2, r3, r2
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	61da      	str	r2, [r3, #28]
 8005e28:	e07c      	b.n	8005f24 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	7c9b      	ldrb	r3, [r3, #18]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d130      	bne.n	8005e94 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	2bbc      	cmp	r3, #188	@ 0xbc
 8005e38:	d918      	bls.n	8005e6c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	8a9b      	ldrh	r3, [r3, #20]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d003      	beq.n	8005e5c <USB_HC_StartXfer+0xdc>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d103      	bne.n	8005e64 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	60da      	str	r2, [r3, #12]
 8005e62:	e05f      	b.n	8005f24 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2201      	movs	r2, #1
 8005e68:	60da      	str	r2, [r3, #12]
 8005e6a:	e05b      	b.n	8005f24 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	6a1a      	ldr	r2, [r3, #32]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d007      	beq.n	8005e8c <USB_HC_StartXfer+0x10c>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d003      	beq.n	8005e8c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2204      	movs	r2, #4
 8005e88:	60da      	str	r2, [r3, #12]
 8005e8a:	e04b      	b.n	8005f24 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2203      	movs	r2, #3
 8005e90:	60da      	str	r2, [r3, #12]
 8005e92:	e047      	b.n	8005f24 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d10d      	bne.n	8005eb6 <USB_HC_StartXfer+0x136>
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	8a92      	ldrh	r2, [r2, #20]
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d907      	bls.n	8005eb6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ea6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	8a92      	ldrh	r2, [r2, #20]
 8005eac:	fb03 f202 	mul.w	r2, r3, r2
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	61da      	str	r2, [r3, #28]
 8005eb4:	e036      	b.n	8005f24 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	6a1a      	ldr	r2, [r3, #32]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	61da      	str	r2, [r3, #28]
 8005ebe:	e031      	b.n	8005f24 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d018      	beq.n	8005efa <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	8a92      	ldrh	r2, [r2, #20]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	8a92      	ldrh	r2, [r2, #20]
 8005ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005edc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005ede:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005ee0:	8b7b      	ldrh	r3, [r7, #26]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d90b      	bls.n	8005efe <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005ee6:	8b7b      	ldrh	r3, [r7, #26]
 8005ee8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005eea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	8a92      	ldrh	r2, [r2, #20]
 8005ef0:	fb03 f202 	mul.w	r2, r3, r2
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	61da      	str	r2, [r3, #28]
 8005ef8:	e001      	b.n	8005efe <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005efa:	2301      	movs	r3, #1
 8005efc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	78db      	ldrb	r3, [r3, #3]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	8a92      	ldrh	r2, [r2, #20]
 8005f0c:	fb03 f202 	mul.w	r2, r3, r2
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	61da      	str	r2, [r3, #28]
 8005f14:	e006      	b.n	8005f24 <USB_HC_StartXfer+0x1a4>
 8005f16:	bf00      	nop
 8005f18:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	6a1a      	ldr	r2, [r3, #32]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f2c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f2e:	04d9      	lsls	r1, r3, #19
 8005f30:	4ba3      	ldr	r3, [pc, #652]	@ (80061c0 <USB_HC_StartXfer+0x440>)
 8005f32:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f34:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	7d9b      	ldrb	r3, [r3, #22]
 8005f3a:	075b      	lsls	r3, r3, #29
 8005f3c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f40:	69f9      	ldr	r1, [r7, #28]
 8005f42:	0148      	lsls	r0, r1, #5
 8005f44:	6a39      	ldr	r1, [r7, #32]
 8005f46:	4401      	add	r1, r0
 8005f48:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f4c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f4e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	6999      	ldr	r1, [r3, #24]
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f66:	460a      	mov	r2, r1
 8005f68:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bf0c      	ite	eq
 8005f7a:	2301      	moveq	r3, #1
 8005f7c:	2300      	movne	r3, #0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	0151      	lsls	r1, r2, #5
 8005f94:	6a3a      	ldr	r2, [r7, #32]
 8005f96:	440a      	add	r2, r1
 8005f98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f9c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005fa0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	7e7b      	ldrb	r3, [r7, #25]
 8005fb2:	075b      	lsls	r3, r3, #29
 8005fb4:	69f9      	ldr	r1, [r7, #28]
 8005fb6:	0148      	lsls	r0, r1, #5
 8005fb8:	6a39      	ldr	r1, [r7, #32]
 8005fba:	4401      	add	r1, r0
 8005fbc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	799b      	ldrb	r3, [r3, #6]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	f040 80c3 	bne.w	8006154 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	7c5b      	ldrb	r3, [r3, #17]
 8005fd2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	6a3a      	ldr	r2, [r7, #32]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005fe6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005fea:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	0151      	lsls	r1, r2, #5
 8005ffe:	6a3a      	ldr	r2, [r7, #32]
 8006000:	440a      	add	r2, r1
 8006002:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006006:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800600a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	79db      	ldrb	r3, [r3, #7]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d123      	bne.n	800605c <USB_HC_StartXfer+0x2dc>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	78db      	ldrb	r3, [r3, #3]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d11f      	bne.n	800605c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	4413      	add	r3, r2
 8006024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	6a3a      	ldr	r2, [r7, #32]
 8006030:	440a      	add	r2, r1
 8006032:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800603a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	4413      	add	r3, r2
 8006044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	0151      	lsls	r1, r2, #5
 800604e:	6a3a      	ldr	r2, [r7, #32]
 8006050:	440a      	add	r2, r1
 8006052:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800605a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	7c9b      	ldrb	r3, [r3, #18]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d003      	beq.n	800606c <USB_HC_StartXfer+0x2ec>
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	7c9b      	ldrb	r3, [r3, #18]
 8006068:	2b03      	cmp	r3, #3
 800606a:	d117      	bne.n	800609c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006070:	2b01      	cmp	r3, #1
 8006072:	d113      	bne.n	800609c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	78db      	ldrb	r3, [r3, #3]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d10f      	bne.n	800609c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	4413      	add	r3, r2
 8006084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	6a3a      	ldr	r2, [r7, #32]
 8006090:	440a      	add	r2, r1
 8006092:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800609a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	7c9b      	ldrb	r3, [r3, #18]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d162      	bne.n	800616a <USB_HC_StartXfer+0x3ea>
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	78db      	ldrb	r3, [r3, #3]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d15e      	bne.n	800616a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d858      	bhi.n	8006168 <USB_HC_StartXfer+0x3e8>
 80060b6:	a201      	add	r2, pc, #4	@ (adr r2, 80060bc <USB_HC_StartXfer+0x33c>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	080060cd 	.word	0x080060cd
 80060c0:	080060ef 	.word	0x080060ef
 80060c4:	08006111 	.word	0x08006111
 80060c8:	08006133 	.word	0x08006133
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	0151      	lsls	r1, r2, #5
 80060de:	6a3a      	ldr	r2, [r7, #32]
 80060e0:	440a      	add	r2, r1
 80060e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ea:	6053      	str	r3, [r2, #4]
          break;
 80060ec:	e03d      	b.n	800616a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	6a3a      	ldr	r2, [r7, #32]
 8006102:	440a      	add	r2, r1
 8006104:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006108:	f043 030e 	orr.w	r3, r3, #14
 800610c:	6053      	str	r3, [r2, #4]
          break;
 800610e:	e02c      	b.n	800616a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	4413      	add	r3, r2
 8006118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	69fa      	ldr	r2, [r7, #28]
 8006120:	0151      	lsls	r1, r2, #5
 8006122:	6a3a      	ldr	r2, [r7, #32]
 8006124:	440a      	add	r2, r1
 8006126:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800612a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800612e:	6053      	str	r3, [r2, #4]
          break;
 8006130:	e01b      	b.n	800616a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	4413      	add	r3, r2
 800613a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	6a3a      	ldr	r2, [r7, #32]
 8006146:	440a      	add	r2, r1
 8006148:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800614c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006150:	6053      	str	r3, [r2, #4]
          break;
 8006152:	e00a      	b.n	800616a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	4413      	add	r3, r2
 800615c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006160:	461a      	mov	r2, r3
 8006162:	2300      	movs	r3, #0
 8006164:	6053      	str	r3, [r2, #4]
 8006166:	e000      	b.n	800616a <USB_HC_StartXfer+0x3ea>
          break;
 8006168:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006180:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	78db      	ldrb	r3, [r3, #3]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d004      	beq.n	8006194 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	e003      	b.n	800619c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800619a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061a2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061b0:	461a      	mov	r2, r3
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80061b6:	79fb      	ldrb	r3, [r7, #7]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	e055      	b.n	800626c <USB_HC_StartXfer+0x4ec>
 80061c0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	78db      	ldrb	r3, [r3, #3]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d14e      	bne.n	800626a <USB_HC_StartXfer+0x4ea>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d04a      	beq.n	800626a <USB_HC_StartXfer+0x4ea>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	79db      	ldrb	r3, [r3, #7]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d146      	bne.n	800626a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	7c9b      	ldrb	r3, [r3, #18]
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d831      	bhi.n	8006248 <USB_HC_StartXfer+0x4c8>
 80061e4:	a201      	add	r2, pc, #4	@ (adr r2, 80061ec <USB_HC_StartXfer+0x46c>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	080061fd 	.word	0x080061fd
 80061f0:	08006221 	.word	0x08006221
 80061f4:	080061fd 	.word	0x080061fd
 80061f8:	08006221 	.word	0x08006221
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	3303      	adds	r3, #3
 8006202:	089b      	lsrs	r3, r3, #2
 8006204:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006206:	8afa      	ldrh	r2, [r7, #22]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620c:	b29b      	uxth	r3, r3
 800620e:	429a      	cmp	r2, r3
 8006210:	d91c      	bls.n	800624c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	f043 0220 	orr.w	r2, r3, #32
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	619a      	str	r2, [r3, #24]
        }
        break;
 800621e:	e015      	b.n	800624c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	3303      	adds	r3, #3
 8006226:	089b      	lsrs	r3, r3, #2
 8006228:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800622a:	8afa      	ldrh	r2, [r7, #22]
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	b29b      	uxth	r3, r3
 8006236:	429a      	cmp	r2, r3
 8006238:	d90a      	bls.n	8006250 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	619a      	str	r2, [r3, #24]
        }
        break;
 8006246:	e003      	b.n	8006250 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006248:	bf00      	nop
 800624a:	e002      	b.n	8006252 <USB_HC_StartXfer+0x4d2>
        break;
 800624c:	bf00      	nop
 800624e:	e000      	b.n	8006252 <USB_HC_StartXfer+0x4d2>
        break;
 8006250:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6999      	ldr	r1, [r3, #24]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	785a      	ldrb	r2, [r3, #1]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	b29b      	uxth	r3, r3
 8006260:	2000      	movs	r0, #0
 8006262:	9000      	str	r0, [sp, #0]
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f7ff f9c9 	bl	80055fc <USB_WritePacket>
  }

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3728      	adds	r7, #40	@ 0x28
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	b29b      	uxth	r3, r3
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006296:	b480      	push	{r7}
 8006298:	b089      	sub	sp, #36	@ 0x24
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	460b      	mov	r3, r1
 80062a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	0c9b      	lsrs	r3, r3, #18
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	0fdb      	lsrs	r3, r3, #31
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	0fdb      	lsrs	r3, r3, #31
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	d10d      	bne.n	8006318 <USB_HC_Halt+0x82>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <USB_HC_Halt+0x82>
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d002      	beq.n	8006314 <USB_HC_Halt+0x7e>
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b03      	cmp	r3, #3
 8006312:	d101      	bne.n	8006318 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	e0d8      	b.n	80064ca <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <USB_HC_Halt+0x8e>
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d173      	bne.n	800640c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	440a      	add	r2, r1
 800633a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800633e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006342:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d14a      	bne.n	80063e6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006354:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d133      	bne.n	80063c4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	69fa      	ldr	r2, [r7, #28]
 8006370:	440a      	add	r2, r1
 8006372:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006376:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800637a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	4413      	add	r3, r2
 8006384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	440a      	add	r2, r1
 8006392:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006396:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800639a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	3301      	adds	r3, #1
 80063a0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063a8:	d82e      	bhi.n	8006408 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063c0:	d0ec      	beq.n	800639c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063c2:	e081      	b.n	80064c8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	0151      	lsls	r1, r2, #5
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	440a      	add	r2, r1
 80063da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063e2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063e4:	e070      	b.n	80064c8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	0151      	lsls	r1, r2, #5
 80063f8:	69fa      	ldr	r2, [r7, #28]
 80063fa:	440a      	add	r2, r1
 80063fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006400:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006404:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006406:	e05f      	b.n	80064c8 <USB_HC_Halt+0x232>
            break;
 8006408:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800640a:	e05d      	b.n	80064c8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	4413      	add	r3, r2
 8006414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	0151      	lsls	r1, r2, #5
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	440a      	add	r2, r1
 8006422:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006426:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800642a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d133      	bne.n	80064a4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	4413      	add	r3, r2
 8006444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	440a      	add	r2, r1
 8006452:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006456:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800645a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	4413      	add	r3, r2
 8006464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	440a      	add	r2, r1
 8006472:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006476:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800647a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	3301      	adds	r3, #1
 8006480:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006488:	d81d      	bhi.n	80064c6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800649c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064a0:	d0ec      	beq.n	800647c <USB_HC_Halt+0x1e6>
 80064a2:	e011      	b.n	80064c8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	0151      	lsls	r1, r2, #5
 80064b6:	69fa      	ldr	r2, [r7, #28]
 80064b8:	440a      	add	r2, r1
 80064ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	e000      	b.n	80064c8 <USB_HC_Halt+0x232>
          break;
 80064c6:	bf00      	nop
    }
  }

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3724      	adds	r7, #36	@ 0x24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
	...

080064d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80064ec:	2301      	movs	r3, #1
 80064ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	04da      	lsls	r2, r3, #19
 80064f4:	4b15      	ldr	r3, [pc, #84]	@ (800654c <USB_DoPing+0x74>)
 80064f6:	4013      	ands	r3, r2
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006504:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006508:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	4413      	add	r3, r2
 8006512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006520:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006528:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	4413      	add	r3, r2
 8006532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006536:	461a      	mov	r2, r3
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	1ff80000 	.word	0x1ff80000

08006550 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b088      	sub	sp, #32
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006558:	2300      	movs	r3, #0
 800655a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7fe ff8c 	bl	8005482 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800656a:	2110      	movs	r1, #16
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7fe ffe5 	bl	800553c <USB_FlushTxFifo>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7ff f80f 	bl	80055a0 <USB_FlushRxFifo>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800658c:	2300      	movs	r3, #0
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	e01f      	b.n	80065d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	4413      	add	r3, r2
 800659a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80065b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c6:	461a      	mov	r2, r3
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	3301      	adds	r3, #1
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	2b0f      	cmp	r3, #15
 80065d6:	d9dc      	bls.n	8006592 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80065d8:	2300      	movs	r3, #0
 80065da:	61bb      	str	r3, [r7, #24]
 80065dc:	e034      	b.n	8006648 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006604:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006612:	461a      	mov	r2, r3
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3301      	adds	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006624:	d80c      	bhi.n	8006640 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006638:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800663c:	d0ec      	beq.n	8006618 <USB_StopHost+0xc8>
 800663e:	e000      	b.n	8006642 <USB_StopHost+0xf2>
        break;
 8006640:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	3301      	adds	r3, #1
 8006646:	61bb      	str	r3, [r7, #24]
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	2b0f      	cmp	r3, #15
 800664c:	d9c7      	bls.n	80065de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006654:	461a      	mov	r2, r3
 8006656:	f04f 33ff 	mov.w	r3, #4294967295
 800665a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f04f 32ff 	mov.w	r2, #4294967295
 8006662:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7fe fefb 	bl	8005460 <USB_EnableGlobalInt>

  return ret;
 800666a:	7ffb      	ldrb	r3, [r7, #31]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3720      	adds	r7, #32
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006674:	b590      	push	{r4, r7, lr}
 8006676:	b089      	sub	sp, #36	@ 0x24
 8006678:	af04      	add	r7, sp, #16
 800667a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800667c:	2301      	movs	r3, #1
 800667e:	2202      	movs	r2, #2
 8006680:	2102      	movs	r1, #2
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fcd1 	bl	800702a <USBH_FindInterface>
 8006688:	4603      	mov	r3, r0
 800668a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	2bff      	cmp	r3, #255	@ 0xff
 8006690:	d002      	beq.n	8006698 <USBH_CDC_InterfaceInit+0x24>
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d901      	bls.n	800669c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006698:	2302      	movs	r3, #2
 800669a:	e13d      	b.n	8006918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fca6 	bl	8006ff2 <USBH_SelectInterface>
 80066a6:	4603      	mov	r3, r0
 80066a8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80066aa:	7bbb      	ldrb	r3, [r7, #14]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80066b0:	2302      	movs	r3, #2
 80066b2:	e131      	b.n	8006918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80066ba:	2050      	movs	r0, #80	@ 0x50
 80066bc:	f005 fed8 	bl	800c470 <malloc>
 80066c0:	4603      	mov	r3, r0
 80066c2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066ca:	69db      	ldr	r3, [r3, #28]
 80066cc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80066d4:	2302      	movs	r3, #2
 80066d6:	e11f      	b.n	8006918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80066d8:	2250      	movs	r2, #80	@ 0x50
 80066da:	2100      	movs	r1, #0
 80066dc:	68b8      	ldr	r0, [r7, #8]
 80066de:	f005 ff85 	bl	800c5ec <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	211a      	movs	r1, #26
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	4413      	add	r3, r2
 80066ee:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	b25b      	sxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	da15      	bge.n	8006726 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	211a      	movs	r1, #26
 8006700:	fb01 f303 	mul.w	r3, r1, r3
 8006704:	4413      	add	r3, r2
 8006706:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800670a:	781a      	ldrb	r2, [r3, #0]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	211a      	movs	r1, #26
 8006716:	fb01 f303 	mul.w	r3, r1, r3
 800671a:	4413      	add	r3, r2
 800671c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006720:	881a      	ldrh	r2, [r3, #0]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	785b      	ldrb	r3, [r3, #1]
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f002 fa18 	bl	8008b62 <USBH_AllocPipe>
 8006732:	4603      	mov	r3, r0
 8006734:	461a      	mov	r2, r3
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	7819      	ldrb	r1, [r3, #0]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	7858      	ldrb	r0, [r3, #1]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	8952      	ldrh	r2, [r2, #10]
 8006752:	9202      	str	r2, [sp, #8]
 8006754:	2203      	movs	r2, #3
 8006756:	9201      	str	r2, [sp, #4]
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	4623      	mov	r3, r4
 800675c:	4602      	mov	r2, r0
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f002 f9d0 	bl	8008b04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2200      	movs	r2, #0
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f005 fdf9 	bl	800c364 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006772:	2300      	movs	r3, #0
 8006774:	2200      	movs	r2, #0
 8006776:	210a      	movs	r1, #10
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fc56 	bl	800702a <USBH_FindInterface>
 800677e:	4603      	mov	r3, r0
 8006780:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	2bff      	cmp	r3, #255	@ 0xff
 8006786:	d002      	beq.n	800678e <USBH_CDC_InterfaceInit+0x11a>
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d901      	bls.n	8006792 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800678e:	2302      	movs	r3, #2
 8006790:	e0c2      	b.n	8006918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006792:	7bfb      	ldrb	r3, [r7, #15]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	211a      	movs	r1, #26
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	4413      	add	r3, r2
 800679e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	b25b      	sxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	da16      	bge.n	80067d8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067aa:	7bfb      	ldrb	r3, [r7, #15]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	211a      	movs	r1, #26
 80067b0:	fb01 f303 	mul.w	r3, r1, r3
 80067b4:	4413      	add	r3, r2
 80067b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80067ba:	781a      	ldrb	r2, [r3, #0]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	211a      	movs	r1, #26
 80067c6:	fb01 f303 	mul.w	r3, r1, r3
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80067d0:	881a      	ldrh	r2, [r3, #0]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	835a      	strh	r2, [r3, #26]
 80067d6:	e015      	b.n	8006804 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	211a      	movs	r1, #26
 80067de:	fb01 f303 	mul.w	r3, r1, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80067e8:	781a      	ldrb	r2, [r3, #0]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	211a      	movs	r1, #26
 80067f4:	fb01 f303 	mul.w	r3, r1, r3
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80067fe:	881a      	ldrh	r2, [r3, #0]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	211a      	movs	r1, #26
 800680a:	fb01 f303 	mul.w	r3, r1, r3
 800680e:	4413      	add	r3, r2
 8006810:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	b25b      	sxtb	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	da16      	bge.n	800684a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	211a      	movs	r1, #26
 8006822:	fb01 f303 	mul.w	r3, r1, r3
 8006826:	4413      	add	r3, r2
 8006828:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800682c:	781a      	ldrb	r2, [r3, #0]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	211a      	movs	r1, #26
 8006838:	fb01 f303 	mul.w	r3, r1, r3
 800683c:	4413      	add	r3, r2
 800683e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006842:	881a      	ldrh	r2, [r3, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	835a      	strh	r2, [r3, #26]
 8006848:	e015      	b.n	8006876 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	211a      	movs	r1, #26
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	4413      	add	r3, r2
 8006856:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800685a:	781a      	ldrb	r2, [r3, #0]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	211a      	movs	r1, #26
 8006866:	fb01 f303 	mul.w	r3, r1, r3
 800686a:	4413      	add	r3, r2
 800686c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006870:	881a      	ldrh	r2, [r3, #0]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	7b9b      	ldrb	r3, [r3, #14]
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f002 f970 	bl	8008b62 <USBH_AllocPipe>
 8006882:	4603      	mov	r3, r0
 8006884:	461a      	mov	r2, r3
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	7bdb      	ldrb	r3, [r3, #15]
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f002 f966 	bl	8008b62 <USBH_AllocPipe>
 8006896:	4603      	mov	r3, r0
 8006898:	461a      	mov	r2, r3
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	7b59      	ldrb	r1, [r3, #13]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	7b98      	ldrb	r0, [r3, #14]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	8b12      	ldrh	r2, [r2, #24]
 80068b6:	9202      	str	r2, [sp, #8]
 80068b8:	2202      	movs	r2, #2
 80068ba:	9201      	str	r2, [sp, #4]
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	4623      	mov	r3, r4
 80068c0:	4602      	mov	r2, r0
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f002 f91e 	bl	8008b04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	7b19      	ldrb	r1, [r3, #12]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	7bd8      	ldrb	r0, [r3, #15]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	8b52      	ldrh	r2, [r2, #26]
 80068e0:	9202      	str	r2, [sp, #8]
 80068e2:	2202      	movs	r2, #2
 80068e4:	9201      	str	r2, [sp, #4]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	4623      	mov	r3, r4
 80068ea:	4602      	mov	r2, r0
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f002 f909 	bl	8008b04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	7b5b      	ldrb	r3, [r3, #13]
 80068fe:	2200      	movs	r2, #0
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f005 fd2e 	bl	800c364 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	7b1b      	ldrb	r3, [r3, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f005 fd27 	bl	800c364 <USBH_LL_SetToggle>

  return USBH_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	bd90      	pop	{r4, r7, pc}

08006920 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00e      	beq.n	8006958 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f002 f8fe 	bl	8008b42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f002 f929 	bl	8008ba4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	7b1b      	ldrb	r3, [r3, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00e      	beq.n	800697e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	7b1b      	ldrb	r3, [r3, #12]
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f002 f8eb 	bl	8008b42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	7b1b      	ldrb	r3, [r3, #12]
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f002 f916 	bl	8008ba4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	7b5b      	ldrb	r3, [r3, #13]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00e      	beq.n	80069a4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	7b5b      	ldrb	r3, [r3, #13]
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f002 f8d8 	bl	8008b42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	7b5b      	ldrb	r3, [r3, #13]
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f002 f903 	bl	8008ba4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00b      	beq.n	80069c8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f005 fd61 	bl	800c480 <free>
    phost->pActiveClass->pData = 0U;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069c4:	2200      	movs	r2, #0
 80069c6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3340      	adds	r3, #64	@ 0x40
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f8b1 	bl	8006b52 <GetLineCoding>
 80069f0:	4603      	mov	r3, r0
 80069f2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80069f4:	7afb      	ldrb	r3, [r7, #11]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d105      	bne.n	8006a06 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006a00:	2102      	movs	r1, #2
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006a06:	7afb      	ldrb	r3, [r7, #11]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d877      	bhi.n	8006b24 <USBH_CDC_Process+0x114>
 8006a34:	a201      	add	r2, pc, #4	@ (adr r2, 8006a3c <USBH_CDC_Process+0x2c>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006a51 	.word	0x08006a51
 8006a40:	08006a57 	.word	0x08006a57
 8006a44:	08006a87 	.word	0x08006a87
 8006a48:	08006afb 	.word	0x08006afb
 8006a4c:	08006b09 	.word	0x08006b09
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]
      break;
 8006a54:	e06d      	b.n	8006b32 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f897 	bl	8006b90 <SetLineCoding>
 8006a62:	4603      	mov	r3, r0
 8006a64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d104      	bne.n	8006a76 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a74:	e058      	b.n	8006b28 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006a76:	7bbb      	ldrb	r3, [r7, #14]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d055      	beq.n	8006b28 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2204      	movs	r2, #4
 8006a80:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006a84:	e050      	b.n	8006b28 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	3340      	adds	r3, #64	@ 0x40
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f860 	bl	8006b52 <GetLineCoding>
 8006a92:	4603      	mov	r3, r0
 8006a94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a96:	7bbb      	ldrb	r3, [r7, #14]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d126      	bne.n	8006aea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aae:	791b      	ldrb	r3, [r3, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d13b      	bne.n	8006b2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006abe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d133      	bne.n	8006b2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ace:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d12b      	bne.n	8006b2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006adc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d124      	bne.n	8006b2c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f982 	bl	8006dec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ae8:	e020      	b.n	8006b2c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006aea:	7bbb      	ldrb	r3, [r7, #14]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d01d      	beq.n	8006b2c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2204      	movs	r2, #4
 8006af4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006af8:	e018      	b.n	8006b2c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f867 	bl	8006bce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f8f6 	bl	8006cf2 <CDC_ProcessReception>
      break;
 8006b06:	e014      	b.n	8006b32 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006b08:	2100      	movs	r1, #0
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 f984 	bl	8007e18 <USBH_ClrFeature>
 8006b10:	4603      	mov	r3, r0
 8006b12:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b14:	7bbb      	ldrb	r3, [r7, #14]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006b22:	e005      	b.n	8006b30 <USBH_CDC_Process+0x120>

    default:
      break;
 8006b24:	bf00      	nop
 8006b26:	e004      	b.n	8006b32 <USBH_CDC_Process+0x122>
      break;
 8006b28:	bf00      	nop
 8006b2a:	e002      	b.n	8006b32 <USBH_CDC_Process+0x122>
      break;
 8006b2c:	bf00      	nop
 8006b2e:	e000      	b.n	8006b32 <USBH_CDC_Process+0x122>
      break;
 8006b30:	bf00      	nop

  }

  return status;
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	22a1      	movs	r2, #161	@ 0xa1
 8006b60:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2221      	movs	r2, #33	@ 0x21
 8006b66:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2207      	movs	r2, #7
 8006b78:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2207      	movs	r2, #7
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 fc7e 	bl	8008482 <USBH_CtlReq>
 8006b86:	4603      	mov	r3, r0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2221      	movs	r2, #33	@ 0x21
 8006b9e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2207      	movs	r2, #7
 8006bb6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2207      	movs	r2, #7
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 fc5f 	bl	8008482 <USBH_CtlReq>
 8006bc4:	4603      	mov	r3, r0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b086      	sub	sp, #24
 8006bd2:	af02      	add	r7, sp, #8
 8006bd4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006be0:	2300      	movs	r3, #0
 8006be2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d002      	beq.n	8006bf4 <CDC_ProcessTransmission+0x26>
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d023      	beq.n	8006c3a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006bf2:	e07a      	b.n	8006cea <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	8b12      	ldrh	r2, [r2, #24]
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d90b      	bls.n	8006c18 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	69d9      	ldr	r1, [r3, #28]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8b1a      	ldrh	r2, [r3, #24]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	7b5b      	ldrb	r3, [r3, #13]
 8006c0c:	2001      	movs	r0, #1
 8006c0e:	9000      	str	r0, [sp, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 ff34 	bl	8008a7e <USBH_BulkSendData>
 8006c16:	e00b      	b.n	8006c30 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	7b5b      	ldrb	r3, [r3, #13]
 8006c26:	2001      	movs	r0, #1
 8006c28:	9000      	str	r0, [sp, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 ff27 	bl	8008a7e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006c38:	e057      	b.n	8006cea <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	7b5b      	ldrb	r3, [r3, #13]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f005 fb65 	bl	800c310 <USBH_LL_GetURBState>
 8006c46:	4603      	mov	r3, r0
 8006c48:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006c4a:	7afb      	ldrb	r3, [r7, #11]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d136      	bne.n	8006cbe <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	8b12      	ldrh	r2, [r2, #24]
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d90e      	bls.n	8006c7a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	8b12      	ldrh	r2, [r2, #24]
 8006c64:	1a9a      	subs	r2, r3, r2
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	8b12      	ldrh	r2, [r2, #24]
 8006c72:	441a      	add	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	61da      	str	r2, [r3, #28]
 8006c78:	e002      	b.n	8006c80 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d004      	beq.n	8006c92 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8006c90:	e006      	b.n	8006ca0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f892 	bl	8006dc4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2204      	movs	r2, #4
 8006ca4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f002 fa14 	bl	80090e4 <osMessageQueuePut>
      break;
 8006cbc:	e014      	b.n	8006ce8 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006cbe:	7afb      	ldrb	r3, [r7, #11]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d111      	bne.n	8006ce8 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2204      	movs	r2, #4
 8006cd0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f002 f9fe 	bl	80090e4 <osMessageQueuePut>
      break;
 8006ce8:	bf00      	nop
  }
}
 8006cea:	bf00      	nop
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b086      	sub	sp, #24
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d002      	beq.n	8006d18 <CDC_ProcessReception+0x26>
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d00e      	beq.n	8006d34 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006d16:	e051      	b.n	8006dbc <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	6a19      	ldr	r1, [r3, #32]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	8b5a      	ldrh	r2, [r3, #26]
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	7b1b      	ldrb	r3, [r3, #12]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 fecf 	bl	8008ac8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006d32:	e043      	b.n	8006dbc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	7b1b      	ldrb	r3, [r3, #12]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f005 fae8 	bl	800c310 <USBH_LL_GetURBState>
 8006d40:	4603      	mov	r3, r0
 8006d42:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006d44:	7cfb      	ldrb	r3, [r7, #19]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d137      	bne.n	8006dba <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	7b1b      	ldrb	r3, [r3, #12]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f005 fa4b 	bl	800c1ec <USBH_LL_GetLastXferSize>
 8006d56:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d016      	beq.n	8006d90 <CDC_ProcessReception+0x9e>
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	8b5b      	ldrh	r3, [r3, #26]
 8006d66:	461a      	mov	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d110      	bne.n	8006d90 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	1ad2      	subs	r2, r2, r3
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	6a1a      	ldr	r2, [r3, #32]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	441a      	add	r2, r3
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2203      	movs	r2, #3
 8006d8a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8006d8e:	e006      	b.n	8006d9e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f81d 	bl	8006dd8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2204      	movs	r2, #4
 8006da2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006db2:	2300      	movs	r3, #0
 8006db4:	2200      	movs	r2, #0
 8006db6:	f002 f995 	bl	80090e4 <osMessageQueuePut>
      break;
 8006dba:	bf00      	nop
  }
}
 8006dbc:	bf00      	nop
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e14:	2302      	movs	r3, #2
 8006e16:	e044      	b.n	8006ea2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	79fa      	ldrb	r2, [r7, #7]
 8006e1c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 f841 	bl	8006eb8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8006e64:	2200      	movs	r2, #0
 8006e66:	2104      	movs	r1, #4
 8006e68:	2010      	movs	r0, #16
 8006e6a:	f002 f8c7 	bl	8008ffc <osMessageQueueNew>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8006e76:	4b0d      	ldr	r3, [pc, #52]	@ (8006eac <USBH_Init+0xac>)
 8006e78:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb0 <USBH_Init+0xb0>)
 8006e7a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8006e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006eac <USBH_Init+0xac>)
 8006e7e:	2280      	movs	r2, #128	@ 0x80
 8006e80:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8006e82:	4b0a      	ldr	r3, [pc, #40]	@ (8006eac <USBH_Init+0xac>)
 8006e84:	2218      	movs	r2, #24
 8006e86:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006e88:	4a08      	ldr	r2, [pc, #32]	@ (8006eac <USBH_Init+0xac>)
 8006e8a:	68f9      	ldr	r1, [r7, #12]
 8006e8c:	4809      	ldr	r0, [pc, #36]	@ (8006eb4 <USBH_Init+0xb4>)
 8006e8e:	f001 ff49 	bl	8008d24 <osThreadNew>
 8006e92:	4602      	mov	r2, r0
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f005 f8f2 	bl	800c084 <USBH_LL_Init>

  return USBH_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	200001f8 	.word	0x200001f8
 8006eb0:	0800c788 	.word	0x0800c788
 8006eb4:	08007b69 	.word	0x08007b69

08006eb8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	e009      	b.n	8006ede <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	33e0      	adds	r3, #224	@ 0xe0
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3301      	adds	r3, #1
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b0f      	cmp	r3, #15
 8006ee2:	d9f2      	bls.n	8006eca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	e009      	b.n	8006efe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f04:	d3f1      	bcc.n	8006eea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2240      	movs	r2, #64	@ 0x40
 8006f2a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	331c      	adds	r3, #28
 8006f56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f005 fb45 	bl	800c5ec <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006f68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f005 fb3c 	bl	800c5ec <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006f7a:	2212      	movs	r2, #18
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f005 fb34 	bl	800c5ec <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006f8a:	223e      	movs	r2, #62	@ 0x3e
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f005 fb2c 	bl	800c5ec <memset>

  return USBH_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d016      	beq.n	8006fe0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10e      	bne.n	8006fda <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006fc2:	1c59      	adds	r1, r3, #1
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	33de      	adds	r3, #222	@ 0xde
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	73fb      	strb	r3, [r7, #15]
 8006fd8:	e004      	b.n	8006fe4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006fda:	2302      	movs	r3, #2
 8006fdc:	73fb      	strb	r3, [r7, #15]
 8006fde:	e001      	b.n	8006fe4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b085      	sub	sp, #20
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007008:	78fa      	ldrb	r2, [r7, #3]
 800700a:	429a      	cmp	r2, r3
 800700c:	d204      	bcs.n	8007018 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	78fa      	ldrb	r2, [r7, #3]
 8007012:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007016:	e001      	b.n	800701c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007018:	2302      	movs	r3, #2
 800701a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800701c:	7bfb      	ldrb	r3, [r7, #15]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800702a:	b480      	push	{r7}
 800702c:	b087      	sub	sp, #28
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	4608      	mov	r0, r1
 8007034:	4611      	mov	r1, r2
 8007036:	461a      	mov	r2, r3
 8007038:	4603      	mov	r3, r0
 800703a:	70fb      	strb	r3, [r7, #3]
 800703c:	460b      	mov	r3, r1
 800703e:	70bb      	strb	r3, [r7, #2]
 8007040:	4613      	mov	r3, r2
 8007042:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007048:	2300      	movs	r3, #0
 800704a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007052:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007054:	e025      	b.n	80070a2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007056:	7dfb      	ldrb	r3, [r7, #23]
 8007058:	221a      	movs	r2, #26
 800705a:	fb02 f303 	mul.w	r3, r2, r3
 800705e:	3308      	adds	r3, #8
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	3302      	adds	r3, #2
 8007066:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	795b      	ldrb	r3, [r3, #5]
 800706c:	78fa      	ldrb	r2, [r7, #3]
 800706e:	429a      	cmp	r2, r3
 8007070:	d002      	beq.n	8007078 <USBH_FindInterface+0x4e>
 8007072:	78fb      	ldrb	r3, [r7, #3]
 8007074:	2bff      	cmp	r3, #255	@ 0xff
 8007076:	d111      	bne.n	800709c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800707c:	78ba      	ldrb	r2, [r7, #2]
 800707e:	429a      	cmp	r2, r3
 8007080:	d002      	beq.n	8007088 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007082:	78bb      	ldrb	r3, [r7, #2]
 8007084:	2bff      	cmp	r3, #255	@ 0xff
 8007086:	d109      	bne.n	800709c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800708c:	787a      	ldrb	r2, [r7, #1]
 800708e:	429a      	cmp	r2, r3
 8007090:	d002      	beq.n	8007098 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007092:	787b      	ldrb	r3, [r7, #1]
 8007094:	2bff      	cmp	r3, #255	@ 0xff
 8007096:	d101      	bne.n	800709c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007098:	7dfb      	ldrb	r3, [r7, #23]
 800709a:	e006      	b.n	80070aa <USBH_FindInterface+0x80>
    }
    if_ix++;
 800709c:	7dfb      	ldrb	r3, [r7, #23]
 800709e:	3301      	adds	r3, #1
 80070a0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d9d6      	bls.n	8007056 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80070a8:	23ff      	movs	r3, #255	@ 0xff
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f005 f81c 	bl	800c0fc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80070c4:	2101      	movs	r1, #1
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f005 f935 	bl	800c336 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b088      	sub	sp, #32
 80070dc:	af04      	add	r7, sp, #16
 80070de:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80070e0:	2302      	movs	r3, #2
 80070e2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d102      	bne.n	80070fa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2203      	movs	r2, #3
 80070f8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b0b      	cmp	r3, #11
 8007102:	f200 8244 	bhi.w	800758e <USBH_Process+0x4b6>
 8007106:	a201      	add	r2, pc, #4	@ (adr r2, 800710c <USBH_Process+0x34>)
 8007108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710c:	0800713d 	.word	0x0800713d
 8007110:	0800718b 	.word	0x0800718b
 8007114:	0800720f 	.word	0x0800720f
 8007118:	0800750d 	.word	0x0800750d
 800711c:	0800758f 	.word	0x0800758f
 8007120:	080072cb 	.word	0x080072cb
 8007124:	08007497 	.word	0x08007497
 8007128:	0800731d 	.word	0x0800731d
 800712c:	08007359 	.word	0x08007359
 8007130:	08007391 	.word	0x08007391
 8007134:	080073ef 	.word	0x080073ef
 8007138:	080074f5 	.word	0x080074f5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 8224 	beq.w	8007592 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007150:	20c8      	movs	r0, #200	@ 0xc8
 8007152:	f005 f93a 	bl	800c3ca <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f005 f82d 	bl	800c1b6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007180:	2300      	movs	r3, #0
 8007182:	2200      	movs	r2, #0
 8007184:	f001 ffae 	bl	80090e4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007188:	e203      	b.n	8007592 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007190:	2b01      	cmp	r3, #1
 8007192:	d107      	bne.n	80071a4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	e025      	b.n	80071f0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80071aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071ae:	d914      	bls.n	80071da <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80071b6:	3301      	adds	r3, #1
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d903      	bls.n	80071d2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	220d      	movs	r2, #13
 80071ce:	701a      	strb	r2, [r3, #0]
 80071d0:	e00e      	b.n	80071f0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	e00a      	b.n	80071f0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80071e0:	f103 020a 	add.w	r2, r3, #10
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80071ea:	200a      	movs	r0, #10
 80071ec:	f005 f8ed 	bl	800c3ca <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007204:	2300      	movs	r3, #0
 8007206:	2200      	movs	r2, #0
 8007208:	f001 ff6c 	bl	80090e4 <osMessageQueuePut>
#endif
#endif
      break;
 800720c:	e1c8      	b.n	80075a0 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d005      	beq.n	8007224 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800721e:	2104      	movs	r1, #4
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007224:	2064      	movs	r0, #100	@ 0x64
 8007226:	f005 f8d0 	bl	800c3ca <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f004 ff9c 	bl	800c168 <USBH_LL_GetSpeed>
 8007230:	4603      	mov	r3, r0
 8007232:	461a      	mov	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2205      	movs	r2, #5
 800723e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007240:	2100      	movs	r1, #0
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f001 fc8d 	bl	8008b62 <USBH_AllocPipe>
 8007248:	4603      	mov	r3, r0
 800724a:	461a      	mov	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007250:	2180      	movs	r1, #128	@ 0x80
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 fc85 	bl	8008b62 <USBH_AllocPipe>
 8007258:	4603      	mov	r3, r0
 800725a:	461a      	mov	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	7919      	ldrb	r1, [r3, #4]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007274:	9202      	str	r2, [sp, #8]
 8007276:	2200      	movs	r2, #0
 8007278:	9201      	str	r2, [sp, #4]
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	4603      	mov	r3, r0
 800727e:	2280      	movs	r2, #128	@ 0x80
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 fc3f 	bl	8008b04 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	7959      	ldrb	r1, [r3, #5]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800729a:	9202      	str	r2, [sp, #8]
 800729c:	2200      	movs	r2, #0
 800729e:	9201      	str	r2, [sp, #4]
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	4603      	mov	r3, r0
 80072a4:	2200      	movs	r2, #0
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f001 fc2c 	bl	8008b04 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80072c0:	2300      	movs	r3, #0
 80072c2:	2200      	movs	r2, #0
 80072c4:	f001 ff0e 	bl	80090e4 <osMessageQueuePut>
#endif
#endif
      break;
 80072c8:	e16a      	b.n	80075a0 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f96e 	bl	80075ac <USBH_HandleEnum>
 80072d0:	4603      	mov	r3, r0
 80072d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f040 815c 	bne.w	8007596 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d103      	bne.n	80072f8 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2208      	movs	r2, #8
 80072f4:	701a      	strb	r2, [r3, #0]
 80072f6:	e002      	b.n	80072fe <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2207      	movs	r2, #7
 80072fc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2205      	movs	r2, #5
 8007302:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007312:	2300      	movs	r3, #0
 8007314:	2200      	movs	r2, #0
 8007316:	f001 fee5 	bl	80090e4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800731a:	e13c      	b.n	8007596 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007322:	2b00      	cmp	r3, #0
 8007324:	f000 8139 	beq.w	800759a <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800732e:	2101      	movs	r1, #1
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2208      	movs	r2, #8
 8007338:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2205      	movs	r2, #5
 800733e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800734e:	2300      	movs	r3, #0
 8007350:	2200      	movs	r2, #0
 8007352:	f001 fec7 	bl	80090e4 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8007356:	e120      	b.n	800759a <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fd12 	bl	8007d8a <USBH_SetCfg>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d102      	bne.n	8007372 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2209      	movs	r2, #9
 8007370:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007386:	2300      	movs	r3, #0
 8007388:	2200      	movs	r2, #0
 800738a:	f001 feab 	bl	80090e4 <osMessageQueuePut>
#endif
#endif
      break;
 800738e:	e107      	b.n	80075a0 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007396:	f003 0320 	and.w	r3, r3, #32
 800739a:	2b00      	cmp	r3, #0
 800739c:	d015      	beq.n	80073ca <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800739e:	2101      	movs	r1, #1
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fd15 	bl	8007dd0 <USBH_SetFeature>
 80073a6:	4603      	mov	r3, r0
 80073a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d103      	bne.n	80073ba <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	220a      	movs	r2, #10
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	e00a      	b.n	80073d0 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d106      	bne.n	80073d0 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	220a      	movs	r2, #10
 80073c6:	701a      	strb	r2, [r3, #0]
 80073c8:	e002      	b.n	80073d0 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	220a      	movs	r2, #10
 80073ce:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80073e4:	2300      	movs	r3, #0
 80073e6:	2200      	movs	r2, #0
 80073e8:	f001 fe7c 	bl	80090e4 <osMessageQueuePut>
#endif
#endif
      break;
 80073ec:	e0d8      	b.n	80075a0 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d03f      	beq.n	8007478 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]
 8007404:	e016      	b.n	8007434 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007406:	7bfa      	ldrb	r2, [r7, #15]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	32de      	adds	r2, #222	@ 0xde
 800740c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007410:	791a      	ldrb	r2, [r3, #4]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007418:	429a      	cmp	r2, r3
 800741a:	d108      	bne.n	800742e <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800741c:	7bfa      	ldrb	r2, [r7, #15]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	32de      	adds	r2, #222	@ 0xde
 8007422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800742c:	e005      	b.n	800743a <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	3301      	adds	r3, #1
 8007432:	73fb      	strb	r3, [r7, #15]
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0e5      	beq.n	8007406 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d016      	beq.n	8007472 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2206      	movs	r2, #6
 800745a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007462:	2103      	movs	r1, #3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	4798      	blx	r3
 8007468:	e006      	b.n	8007478 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	220d      	movs	r2, #13
 800746e:	701a      	strb	r2, [r3, #0]
 8007470:	e002      	b.n	8007478 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	220d      	movs	r2, #13
 8007476:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2205      	movs	r2, #5
 800747c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800748c:	2300      	movs	r3, #0
 800748e:	2200      	movs	r2, #0
 8007490:	f001 fe28 	bl	80090e4 <osMessageQueuePut>
#endif
#endif
      break;
 8007494:	e084      	b.n	80075a0 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800749c:	2b00      	cmp	r3, #0
 800749e:	d017      	beq.n	80074d0 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	4798      	blx	r3
 80074ac:	4603      	mov	r3, r0
 80074ae:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d103      	bne.n	80074c0 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	220b      	movs	r2, #11
 80074bc:	701a      	strb	r2, [r3, #0]
 80074be:	e00a      	b.n	80074d6 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d106      	bne.n	80074d6 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	220d      	movs	r2, #13
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	e002      	b.n	80074d6 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	220d      	movs	r2, #13
 80074d4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2205      	movs	r2, #5
 80074da:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80074ea:	2300      	movs	r3, #0
 80074ec:	2200      	movs	r2, #0
 80074ee:	f001 fdf9 	bl	80090e4 <osMessageQueuePut>
#endif
#endif
      break;
 80074f2:	e055      	b.n	80075a0 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d04f      	beq.n	800759e <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	4798      	blx	r3
      }
      break;
 800750a:	e048      	b.n	800759e <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff fccf 	bl	8006eb8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007520:	2b00      	cmp	r3, #0
 8007522:	d009      	beq.n	8007538 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800753e:	2b00      	cmp	r3, #0
 8007540:	d005      	beq.n	800754e <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007548:	2105      	movs	r1, #5
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b01      	cmp	r3, #1
 8007558:	d107      	bne.n	800756a <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7ff fda7 	bl	80070b6 <USBH_Start>
 8007568:	e002      	b.n	8007570 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f004 fdc6 	bl	800c0fc <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007584:	2300      	movs	r3, #0
 8007586:	2200      	movs	r2, #0
 8007588:	f001 fdac 	bl	80090e4 <osMessageQueuePut>
#endif
#endif
      break;
 800758c:	e008      	b.n	80075a0 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800758e:	bf00      	nop
 8007590:	e006      	b.n	80075a0 <USBH_Process+0x4c8>
      break;
 8007592:	bf00      	nop
 8007594:	e004      	b.n	80075a0 <USBH_Process+0x4c8>
      break;
 8007596:	bf00      	nop
 8007598:	e002      	b.n	80075a0 <USBH_Process+0x4c8>
    break;
 800759a:	bf00      	nop
 800759c:	e000      	b.n	80075a0 <USBH_Process+0x4c8>
      break;
 800759e:	bf00      	nop
  }
  return USBH_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop

080075ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af04      	add	r7, sp, #16
 80075b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075b4:	2301      	movs	r3, #1
 80075b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80075b8:	2301      	movs	r3, #1
 80075ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	785b      	ldrb	r3, [r3, #1]
 80075c0:	2b07      	cmp	r3, #7
 80075c2:	f200 8204 	bhi.w	80079ce <USBH_HandleEnum+0x422>
 80075c6:	a201      	add	r2, pc, #4	@ (adr r2, 80075cc <USBH_HandleEnum+0x20>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	080075ed 	.word	0x080075ed
 80075d0:	080076a7 	.word	0x080076a7
 80075d4:	08007711 	.word	0x08007711
 80075d8:	0800779b 	.word	0x0800779b
 80075dc:	08007805 	.word	0x08007805
 80075e0:	08007875 	.word	0x08007875
 80075e4:	08007911 	.word	0x08007911
 80075e8:	0800798f 	.word	0x0800798f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80075ec:	2108      	movs	r1, #8
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fae8 	bl	8007bc4 <USBH_Get_DevDesc>
 80075f4:	4603      	mov	r3, r0
 80075f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d12e      	bne.n	800765c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	7919      	ldrb	r1, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007622:	9202      	str	r2, [sp, #8]
 8007624:	2200      	movs	r2, #0
 8007626:	9201      	str	r2, [sp, #4]
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	4603      	mov	r3, r0
 800762c:	2280      	movs	r2, #128	@ 0x80
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 fa68 	bl	8008b04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	7959      	ldrb	r1, [r3, #5]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007648:	9202      	str	r2, [sp, #8]
 800764a:	2200      	movs	r2, #0
 800764c:	9201      	str	r2, [sp, #4]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	4603      	mov	r3, r0
 8007652:	2200      	movs	r2, #0
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f001 fa55 	bl	8008b04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800765a:	e1ba      	b.n	80079d2 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	2b03      	cmp	r3, #3
 8007660:	f040 81b7 	bne.w	80079d2 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800766a:	3301      	adds	r3, #1
 800766c:	b2da      	uxtb	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800767a:	2b03      	cmp	r3, #3
 800767c:	d903      	bls.n	8007686 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	220d      	movs	r2, #13
 8007682:	701a      	strb	r2, [r3, #0]
      break;
 8007684:	e1a5      	b.n	80079d2 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	795b      	ldrb	r3, [r3, #5]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 fa89 	bl	8008ba4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	791b      	ldrb	r3, [r3, #4]
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 fa83 	bl	8008ba4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	701a      	strb	r2, [r3, #0]
      break;
 80076a4:	e195      	b.n	80079d2 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80076a6:	2112      	movs	r1, #18
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fa8b 	bl	8007bc4 <USBH_Get_DevDesc>
 80076ae:	4603      	mov	r3, r0
 80076b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d103      	bne.n	80076c0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076be:	e18a      	b.n	80079d6 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076c0:	7bbb      	ldrb	r3, [r7, #14]
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	f040 8187 	bne.w	80079d6 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80076ce:	3301      	adds	r3, #1
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d903      	bls.n	80076ea <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	220d      	movs	r2, #13
 80076e6:	701a      	strb	r2, [r3, #0]
      break;
 80076e8:	e175      	b.n	80079d6 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	795b      	ldrb	r3, [r3, #5]
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 fa57 	bl	8008ba4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	791b      	ldrb	r3, [r3, #4]
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f001 fa51 	bl	8008ba4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	701a      	strb	r2, [r3, #0]
      break;
 800770e:	e162      	b.n	80079d6 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007710:	2101      	movs	r1, #1
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fb15 	bl	8007d42 <USBH_SetAddress>
 8007718:	4603      	mov	r3, r0
 800771a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d130      	bne.n	8007784 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007722:	2002      	movs	r0, #2
 8007724:	f004 fe51 	bl	800c3ca <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2203      	movs	r2, #3
 8007734:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	7919      	ldrb	r1, [r3, #4]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800774a:	9202      	str	r2, [sp, #8]
 800774c:	2200      	movs	r2, #0
 800774e:	9201      	str	r2, [sp, #4]
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	4603      	mov	r3, r0
 8007754:	2280      	movs	r2, #128	@ 0x80
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 f9d4 	bl	8008b04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	7959      	ldrb	r1, [r3, #5]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007770:	9202      	str	r2, [sp, #8]
 8007772:	2200      	movs	r2, #0
 8007774:	9201      	str	r2, [sp, #4]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	4603      	mov	r3, r0
 800777a:	2200      	movs	r2, #0
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 f9c1 	bl	8008b04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007782:	e12a      	b.n	80079da <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	2b03      	cmp	r3, #3
 8007788:	f040 8127 	bne.w	80079da <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	220d      	movs	r2, #13
 8007790:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	705a      	strb	r2, [r3, #1]
      break;
 8007798:	e11f      	b.n	80079da <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800779a:	2109      	movs	r1, #9
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fa3d 	bl	8007c1c <USBH_Get_CfgDesc>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d103      	bne.n	80077b4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2204      	movs	r2, #4
 80077b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077b2:	e114      	b.n	80079de <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	f040 8111 	bne.w	80079de <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80077c2:	3301      	adds	r3, #1
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d903      	bls.n	80077de <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	220d      	movs	r2, #13
 80077da:	701a      	strb	r2, [r3, #0]
      break;
 80077dc:	e0ff      	b.n	80079de <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	795b      	ldrb	r3, [r3, #5]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 f9dd 	bl	8008ba4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	791b      	ldrb	r3, [r3, #4]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 f9d7 	bl	8008ba4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	701a      	strb	r2, [r3, #0]
      break;
 8007802:	e0ec      	b.n	80079de <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fa05 	bl	8007c1c <USBH_Get_CfgDesc>
 8007812:	4603      	mov	r3, r0
 8007814:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d103      	bne.n	8007824 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2205      	movs	r2, #5
 8007820:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007822:	e0de      	b.n	80079e2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	2b03      	cmp	r3, #3
 8007828:	f040 80db 	bne.w	80079e2 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007832:	3301      	adds	r3, #1
 8007834:	b2da      	uxtb	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007842:	2b03      	cmp	r3, #3
 8007844:	d903      	bls.n	800784e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	220d      	movs	r2, #13
 800784a:	701a      	strb	r2, [r3, #0]
      break;
 800784c:	e0c9      	b.n	80079e2 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	795b      	ldrb	r3, [r3, #5]
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 f9a5 	bl	8008ba4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	791b      	ldrb	r3, [r3, #4]
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 f99f 	bl	8008ba4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	701a      	strb	r2, [r3, #0]
      break;
 8007872:	e0b6      	b.n	80079e2 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800787a:	2b00      	cmp	r3, #0
 800787c:	d036      	beq.n	80078ec <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800788a:	23ff      	movs	r3, #255	@ 0xff
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f9ef 	bl	8007c70 <USBH_Get_StringDesc>
 8007892:	4603      	mov	r3, r0
 8007894:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d111      	bne.n	80078c0 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2206      	movs	r2, #6
 80078a0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2205      	movs	r2, #5
 80078a6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80078b6:	2300      	movs	r3, #0
 80078b8:	2200      	movs	r2, #0
 80078ba:	f001 fc13 	bl	80090e4 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078be:	e092      	b.n	80079e6 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	f040 808f 	bne.w	80079e6 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2206      	movs	r2, #6
 80078cc:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2205      	movs	r2, #5
 80078d2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80078e2:	2300      	movs	r3, #0
 80078e4:	2200      	movs	r2, #0
 80078e6:	f001 fbfd 	bl	80090e4 <osMessageQueuePut>
      break;
 80078ea:	e07c      	b.n	80079e6 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2206      	movs	r2, #6
 80078f0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2205      	movs	r2, #5
 80078f6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007906:	2300      	movs	r3, #0
 8007908:	2200      	movs	r2, #0
 800790a:	f001 fbeb 	bl	80090e4 <osMessageQueuePut>
      break;
 800790e:	e06a      	b.n	80079e6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007916:	2b00      	cmp	r3, #0
 8007918:	d027      	beq.n	800796a <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007926:	23ff      	movs	r3, #255	@ 0xff
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f9a1 	bl	8007c70 <USBH_Get_StringDesc>
 800792e:	4603      	mov	r3, r0
 8007930:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d103      	bne.n	8007940 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2207      	movs	r2, #7
 800793c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800793e:	e054      	b.n	80079ea <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	2b03      	cmp	r3, #3
 8007944:	d151      	bne.n	80079ea <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2207      	movs	r2, #7
 800794a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2205      	movs	r2, #5
 8007950:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007960:	2300      	movs	r3, #0
 8007962:	2200      	movs	r2, #0
 8007964:	f001 fbbe 	bl	80090e4 <osMessageQueuePut>
      break;
 8007968:	e03f      	b.n	80079ea <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2207      	movs	r2, #7
 800796e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2205      	movs	r2, #5
 8007974:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007984:	2300      	movs	r3, #0
 8007986:	2200      	movs	r2, #0
 8007988:	f001 fbac 	bl	80090e4 <osMessageQueuePut>
      break;
 800798c:	e02d      	b.n	80079ea <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007994:	2b00      	cmp	r3, #0
 8007996:	d017      	beq.n	80079c8 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80079a4:	23ff      	movs	r3, #255	@ 0xff
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f962 	bl	8007c70 <USBH_Get_StringDesc>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d102      	bne.n	80079bc <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80079ba:	e018      	b.n	80079ee <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d115      	bne.n	80079ee <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
      break;
 80079c6:	e012      	b.n	80079ee <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	73fb      	strb	r3, [r7, #15]
      break;
 80079cc:	e00f      	b.n	80079ee <USBH_HandleEnum+0x442>

    default:
      break;
 80079ce:	bf00      	nop
 80079d0:	e00e      	b.n	80079f0 <USBH_HandleEnum+0x444>
      break;
 80079d2:	bf00      	nop
 80079d4:	e00c      	b.n	80079f0 <USBH_HandleEnum+0x444>
      break;
 80079d6:	bf00      	nop
 80079d8:	e00a      	b.n	80079f0 <USBH_HandleEnum+0x444>
      break;
 80079da:	bf00      	nop
 80079dc:	e008      	b.n	80079f0 <USBH_HandleEnum+0x444>
      break;
 80079de:	bf00      	nop
 80079e0:	e006      	b.n	80079f0 <USBH_HandleEnum+0x444>
      break;
 80079e2:	bf00      	nop
 80079e4:	e004      	b.n	80079f0 <USBH_HandleEnum+0x444>
      break;
 80079e6:	bf00      	nop
 80079e8:	e002      	b.n	80079f0 <USBH_HandleEnum+0x444>
      break;
 80079ea:	bf00      	nop
 80079ec:	e000      	b.n	80079f0 <USBH_HandleEnum+0x444>
      break;
 80079ee:	bf00      	nop
  }
  return Status;
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop

080079fc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007a0e:	bf00      	nop
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f804 	bl	8007a3e <USBH_HandleSof>
}
 8007a36:	bf00      	nop
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b0b      	cmp	r3, #11
 8007a4e:	d10a      	bne.n	8007a66 <USBH_HandleSof+0x28>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d005      	beq.n	8007a66 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	4798      	blx	r3
  }
}
 8007a66:	bf00      	nop
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b082      	sub	sp, #8
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007a92:	2300      	movs	r3, #0
 8007a94:	2200      	movs	r2, #0
 8007a96:	f001 fb25 	bl	80090e4 <osMessageQueuePut>
#endif
#endif

  return;
 8007a9a:	bf00      	nop
}
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007ab2:	bf00      	nop
}
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007af2:	2300      	movs	r3, #0
 8007af4:	2200      	movs	r2, #0
 8007af6:	f001 faf5 	bl	80090e4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f004 fb04 	bl	800c132 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	791b      	ldrb	r3, [r3, #4]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f001 f837 	bl	8008ba4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	795b      	ldrb	r3, [r3, #5]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 f831 	bl	8008ba4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007b56:	2300      	movs	r3, #0
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f001 fac3 	bl	80090e4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b80:	2200      	movs	r2, #0
 8007b82:	f001 fb0f 	bl	80091a4 <osMessageQueueGet>
 8007b86:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1f0      	bne.n	8007b70 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff faa2 	bl	80070d8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007b94:	e7ec      	b.n	8007b70 <USBH_Process_OS+0x8>

08007b96 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f001 fa95 	bl	80090e4 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007bd0:	887b      	ldrh	r3, [r7, #2]
 8007bd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bd6:	d901      	bls.n	8007bdc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e01b      	b.n	8007c14 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007be2:	887b      	ldrh	r3, [r7, #2]
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	4613      	mov	r3, r2
 8007be8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bec:	2100      	movs	r1, #0
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f872 	bl	8007cd8 <USBH_GetDescriptor>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d109      	bne.n	8007c12 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007c04:	887a      	ldrh	r2, [r7, #2]
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f929 	bl	8007e60 <USBH_ParseDevDesc>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	331c      	adds	r3, #28
 8007c2c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007c2e:	887b      	ldrh	r3, [r7, #2]
 8007c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c34:	d901      	bls.n	8007c3a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e016      	b.n	8007c68 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007c3a:	887b      	ldrh	r3, [r7, #2]
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c44:	2100      	movs	r1, #0
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f846 	bl	8007cd8 <USBH_GetDescriptor>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d107      	bne.n	8007c66 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007c56:	887b      	ldrh	r3, [r7, #2]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	68b9      	ldr	r1, [r7, #8]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f9af 	bl	8007fc0 <USBH_ParseCfgDesc>
 8007c62:	4603      	mov	r3, r0
 8007c64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af02      	add	r7, sp, #8
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	607a      	str	r2, [r7, #4]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	72fb      	strb	r3, [r7, #11]
 8007c80:	4613      	mov	r3, r2
 8007c82:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007c84:	893b      	ldrh	r3, [r7, #8]
 8007c86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c8a:	d802      	bhi.n	8007c92 <USBH_Get_StringDesc+0x22>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e01c      	b.n	8007cd0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007c96:	7afb      	ldrb	r3, [r7, #11]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007c9e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007ca6:	893b      	ldrh	r3, [r7, #8]
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	460b      	mov	r3, r1
 8007cac:	2100      	movs	r1, #0
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f000 f812 	bl	8007cd8 <USBH_GetDescriptor>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d107      	bne.n	8007cce <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007cc4:	893a      	ldrh	r2, [r7, #8]
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 fb8d 	bl	80083e8 <USBH_ParseStringDesc>
  }

  return status;
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	607b      	str	r3, [r7, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	72fb      	strb	r3, [r7, #11]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	789b      	ldrb	r3, [r3, #2]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d11c      	bne.n	8007d2c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007cf2:	7afb      	ldrb	r3, [r7, #11]
 8007cf4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2206      	movs	r2, #6
 8007d02:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	893a      	ldrh	r2, [r7, #8]
 8007d08:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007d0a:	893b      	ldrh	r3, [r7, #8]
 8007d0c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007d10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d14:	d104      	bne.n	8007d20 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f240 4209 	movw	r2, #1033	@ 0x409
 8007d1c:	829a      	strh	r2, [r3, #20]
 8007d1e:	e002      	b.n	8007d26 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8b3a      	ldrh	r2, [r7, #24]
 8007d2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007d2c:	8b3b      	ldrh	r3, [r7, #24]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	6879      	ldr	r1, [r7, #4]
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 fba5 	bl	8008482 <USBH_CtlReq>
 8007d38:	4603      	mov	r3, r0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	789b      	ldrb	r3, [r3, #2]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d10f      	bne.n	8007d76 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2205      	movs	r2, #5
 8007d60:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d62:	78fb      	ldrb	r3, [r7, #3]
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d76:	2200      	movs	r2, #0
 8007d78:	2100      	movs	r1, #0
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fb81 	bl	8008482 <USBH_CtlReq>
 8007d80:	4603      	mov	r3, r0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	789b      	ldrb	r3, [r3, #2]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d10e      	bne.n	8007dbc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2209      	movs	r2, #9
 8007da8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	887a      	ldrh	r2, [r7, #2]
 8007dae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fb5e 	bl	8008482 <USBH_CtlReq>
 8007dc6:	4603      	mov	r3, r0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	789b      	ldrb	r3, [r3, #2]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d10f      	bne.n	8007e04 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2203      	movs	r2, #3
 8007dee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e04:	2200      	movs	r2, #0
 8007e06:	2100      	movs	r1, #0
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fb3a 	bl	8008482 <USBH_CtlReq>
 8007e0e:	4603      	mov	r3, r0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	789b      	ldrb	r3, [r3, #2]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d10f      	bne.n	8007e4c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e3e:	78fb      	ldrb	r3, [r7, #3]
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2100      	movs	r1, #0
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fb16 	bl	8008482 <USBH_CtlReq>
 8007e56:	4603      	mov	r3, r0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007e74:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007e80:	2302      	movs	r3, #2
 8007e82:	e094      	b.n	8007fae <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	781a      	ldrb	r2, [r3, #0]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	785a      	ldrb	r2, [r3, #1]
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	3302      	adds	r3, #2
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	3303      	adds	r3, #3
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	021b      	lsls	r3, r3, #8
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	791a      	ldrb	r2, [r3, #4]
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	795a      	ldrb	r2, [r3, #5]
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	799a      	ldrb	r2, [r3, #6]
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	79da      	ldrb	r2, [r3, #7]
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d004      	beq.n	8007ee2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d11b      	bne.n	8007f1a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	79db      	ldrb	r3, [r3, #7]
 8007ee6:	2b20      	cmp	r3, #32
 8007ee8:	dc0f      	bgt.n	8007f0a <USBH_ParseDevDesc+0xaa>
 8007eea:	2b08      	cmp	r3, #8
 8007eec:	db0f      	blt.n	8007f0e <USBH_ParseDevDesc+0xae>
 8007eee:	3b08      	subs	r3, #8
 8007ef0:	4a32      	ldr	r2, [pc, #200]	@ (8007fbc <USBH_ParseDevDesc+0x15c>)
 8007ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	bf14      	ite	ne
 8007efe:	2301      	movne	r3, #1
 8007f00:	2300      	moveq	r3, #0
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d106      	bne.n	8007f16 <USBH_ParseDevDesc+0xb6>
 8007f08:	e001      	b.n	8007f0e <USBH_ParseDevDesc+0xae>
 8007f0a:	2b40      	cmp	r3, #64	@ 0x40
 8007f0c:	d003      	beq.n	8007f16 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2208      	movs	r2, #8
 8007f12:	71da      	strb	r2, [r3, #7]
        break;
 8007f14:	e000      	b.n	8007f18 <USBH_ParseDevDesc+0xb8>
        break;
 8007f16:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007f18:	e00e      	b.n	8007f38 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d107      	bne.n	8007f34 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	79db      	ldrb	r3, [r3, #7]
 8007f28:	2b08      	cmp	r3, #8
 8007f2a:	d005      	beq.n	8007f38 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	2208      	movs	r2, #8
 8007f30:	71da      	strb	r2, [r3, #7]
 8007f32:	e001      	b.n	8007f38 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007f34:	2303      	movs	r3, #3
 8007f36:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007f38:	88fb      	ldrh	r3, [r7, #6]
 8007f3a:	2b08      	cmp	r3, #8
 8007f3c:	d936      	bls.n	8007fac <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	3308      	adds	r3, #8
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	461a      	mov	r2, r3
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	3309      	adds	r3, #9
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	021b      	lsls	r3, r3, #8
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	4313      	orrs	r3, r2
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	330a      	adds	r3, #10
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	330b      	adds	r3, #11
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	021b      	lsls	r3, r3, #8
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	330c      	adds	r3, #12
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	330d      	adds	r3, #13
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	021b      	lsls	r3, r3, #8
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	4313      	orrs	r3, r2
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	7b9a      	ldrb	r2, [r3, #14]
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	7bda      	ldrb	r2, [r3, #15]
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	7c1a      	ldrb	r2, [r3, #16]
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	7c5a      	ldrb	r2, [r3, #17]
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	371c      	adds	r7, #28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	01000101 	.word	0x01000101

08007fc0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08c      	sub	sp, #48	@ 0x30
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007fd4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007fee:	2302      	movs	r3, #2
 8007ff0:	e0da      	b.n	80081a8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b09      	cmp	r3, #9
 8007ffc:	d002      	beq.n	8008004 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008000:	2209      	movs	r2, #9
 8008002:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	781a      	ldrb	r2, [r3, #0]
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	785a      	ldrb	r2, [r3, #1]
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	3302      	adds	r3, #2
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	3303      	adds	r3, #3
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	021b      	lsls	r3, r3, #8
 8008024:	b29b      	uxth	r3, r3
 8008026:	4313      	orrs	r3, r2
 8008028:	b29b      	uxth	r3, r3
 800802a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800802e:	bf28      	it	cs
 8008030:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008034:	b29a      	uxth	r2, r3
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	791a      	ldrb	r2, [r3, #4]
 800803e:	6a3b      	ldr	r3, [r7, #32]
 8008040:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	795a      	ldrb	r2, [r3, #5]
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	799a      	ldrb	r2, [r3, #6]
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	79da      	ldrb	r2, [r3, #7]
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	7a1a      	ldrb	r2, [r3, #8]
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008062:	88fb      	ldrh	r3, [r7, #6]
 8008064:	2b09      	cmp	r3, #9
 8008066:	f240 809d 	bls.w	80081a4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800806a:	2309      	movs	r3, #9
 800806c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800806e:	2300      	movs	r3, #0
 8008070:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008072:	e081      	b.n	8008178 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008074:	f107 0316 	add.w	r3, r7, #22
 8008078:	4619      	mov	r1, r3
 800807a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800807c:	f000 f9e7 	bl	800844e <USBH_GetNextDesc>
 8008080:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008084:	785b      	ldrb	r3, [r3, #1]
 8008086:	2b04      	cmp	r3, #4
 8008088:	d176      	bne.n	8008178 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800808a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b09      	cmp	r3, #9
 8008090:	d002      	beq.n	8008098 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008094:	2209      	movs	r2, #9
 8008096:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800809c:	221a      	movs	r2, #26
 800809e:	fb02 f303 	mul.w	r3, r2, r3
 80080a2:	3308      	adds	r3, #8
 80080a4:	6a3a      	ldr	r2, [r7, #32]
 80080a6:	4413      	add	r3, r2
 80080a8:	3302      	adds	r3, #2
 80080aa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80080ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080ae:	69f8      	ldr	r0, [r7, #28]
 80080b0:	f000 f87e 	bl	80081b0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80080ba:	2300      	movs	r3, #0
 80080bc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080be:	e043      	b.n	8008148 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080c0:	f107 0316 	add.w	r3, r7, #22
 80080c4:	4619      	mov	r1, r3
 80080c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080c8:	f000 f9c1 	bl	800844e <USBH_GetNextDesc>
 80080cc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80080ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	2b05      	cmp	r3, #5
 80080d4:	d138      	bne.n	8008148 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	795b      	ldrb	r3, [r3, #5]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d113      	bne.n	8008106 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d003      	beq.n	80080ee <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	799b      	ldrb	r3, [r3, #6]
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d10b      	bne.n	8008106 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	79db      	ldrb	r3, [r3, #7]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10b      	bne.n	800810e <USBH_ParseCfgDesc+0x14e>
 80080f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	2b09      	cmp	r3, #9
 80080fc:	d007      	beq.n	800810e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80080fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008100:	2209      	movs	r2, #9
 8008102:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008104:	e003      	b.n	800810e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008108:	2207      	movs	r2, #7
 800810a:	701a      	strb	r2, [r3, #0]
 800810c:	e000      	b.n	8008110 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800810e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008114:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008118:	3201      	adds	r2, #1
 800811a:	00d2      	lsls	r2, r2, #3
 800811c:	211a      	movs	r1, #26
 800811e:	fb01 f303 	mul.w	r3, r1, r3
 8008122:	4413      	add	r3, r2
 8008124:	3308      	adds	r3, #8
 8008126:	6a3a      	ldr	r2, [r7, #32]
 8008128:	4413      	add	r3, r2
 800812a:	3304      	adds	r3, #4
 800812c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800812e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008130:	69b9      	ldr	r1, [r7, #24]
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 f870 	bl	8008218 <USBH_ParseEPDesc>
 8008138:	4603      	mov	r3, r0
 800813a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800813e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008142:	3301      	adds	r3, #1
 8008144:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	791b      	ldrb	r3, [r3, #4]
 800814c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008150:	429a      	cmp	r2, r3
 8008152:	d204      	bcs.n	800815e <USBH_ParseCfgDesc+0x19e>
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	885a      	ldrh	r2, [r3, #2]
 8008158:	8afb      	ldrh	r3, [r7, #22]
 800815a:	429a      	cmp	r2, r3
 800815c:	d8b0      	bhi.n	80080c0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	791b      	ldrb	r3, [r3, #4]
 8008162:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008166:	429a      	cmp	r2, r3
 8008168:	d201      	bcs.n	800816e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800816a:	2303      	movs	r3, #3
 800816c:	e01c      	b.n	80081a8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800816e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008172:	3301      	adds	r3, #1
 8008174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008178:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800817c:	2b01      	cmp	r3, #1
 800817e:	d805      	bhi.n	800818c <USBH_ParseCfgDesc+0x1cc>
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	885a      	ldrh	r2, [r3, #2]
 8008184:	8afb      	ldrh	r3, [r7, #22]
 8008186:	429a      	cmp	r2, r3
 8008188:	f63f af74 	bhi.w	8008074 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	791b      	ldrb	r3, [r3, #4]
 8008190:	2b02      	cmp	r3, #2
 8008192:	bf28      	it	cs
 8008194:	2302      	movcs	r3, #2
 8008196:	b2db      	uxtb	r3, r3
 8008198:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800819c:	429a      	cmp	r2, r3
 800819e:	d201      	bcs.n	80081a4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e001      	b.n	80081a8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80081a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3730      	adds	r7, #48	@ 0x30
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781a      	ldrb	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	785a      	ldrb	r2, [r3, #1]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	789a      	ldrb	r2, [r3, #2]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	78da      	ldrb	r2, [r3, #3]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	3304      	adds	r3, #4
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	bf28      	it	cs
 80081e4:	2302      	movcs	r3, #2
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	795a      	ldrb	r2, [r3, #5]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	799a      	ldrb	r2, [r3, #6]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	79da      	ldrb	r2, [r3, #7]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	7a1a      	ldrb	r2, [r3, #8]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	721a      	strb	r2, [r3, #8]
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	781a      	ldrb	r2, [r3, #0]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	785a      	ldrb	r2, [r3, #1]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	789a      	ldrb	r2, [r3, #2]
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	78da      	ldrb	r2, [r3, #3]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3304      	adds	r3, #4
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	3305      	adds	r3, #5
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	021b      	lsls	r3, r3, #8
 8008258:	b29b      	uxth	r3, r3
 800825a:	4313      	orrs	r3, r2
 800825c:	b29a      	uxth	r2, r3
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	799a      	ldrb	r2, [r3, #6]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	889b      	ldrh	r3, [r3, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d009      	beq.n	8008286 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800827a:	d804      	bhi.n	8008286 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008284:	d901      	bls.n	800828a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008286:	2303      	movs	r3, #3
 8008288:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008290:	2b00      	cmp	r3, #0
 8008292:	d136      	bne.n	8008302 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	78db      	ldrb	r3, [r3, #3]
 8008298:	f003 0303 	and.w	r3, r3, #3
 800829c:	2b02      	cmp	r3, #2
 800829e:	d108      	bne.n	80082b2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	889b      	ldrh	r3, [r3, #4]
 80082a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082a8:	f240 8097 	bls.w	80083da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082ac:	2303      	movs	r3, #3
 80082ae:	75fb      	strb	r3, [r7, #23]
 80082b0:	e093      	b.n	80083da <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	78db      	ldrb	r3, [r3, #3]
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d107      	bne.n	80082ce <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	889b      	ldrh	r3, [r3, #4]
 80082c2:	2b40      	cmp	r3, #64	@ 0x40
 80082c4:	f240 8089 	bls.w	80083da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082c8:	2303      	movs	r3, #3
 80082ca:	75fb      	strb	r3, [r7, #23]
 80082cc:	e085      	b.n	80083da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	78db      	ldrb	r3, [r3, #3]
 80082d2:	f003 0303 	and.w	r3, r3, #3
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d005      	beq.n	80082e6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	78db      	ldrb	r3, [r3, #3]
 80082de:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d10a      	bne.n	80082fc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	799b      	ldrb	r3, [r3, #6]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <USBH_ParseEPDesc+0xde>
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	799b      	ldrb	r3, [r3, #6]
 80082f2:	2b10      	cmp	r3, #16
 80082f4:	d970      	bls.n	80083d8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80082f6:	2303      	movs	r3, #3
 80082f8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80082fa:	e06d      	b.n	80083d8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80082fc:	2303      	movs	r3, #3
 80082fe:	75fb      	strb	r3, [r7, #23]
 8008300:	e06b      	b.n	80083da <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008308:	2b01      	cmp	r3, #1
 800830a:	d13c      	bne.n	8008386 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	78db      	ldrb	r3, [r3, #3]
 8008310:	f003 0303 	and.w	r3, r3, #3
 8008314:	2b02      	cmp	r3, #2
 8008316:	d005      	beq.n	8008324 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	78db      	ldrb	r3, [r3, #3]
 800831c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008320:	2b00      	cmp	r3, #0
 8008322:	d106      	bne.n	8008332 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	889b      	ldrh	r3, [r3, #4]
 8008328:	2b40      	cmp	r3, #64	@ 0x40
 800832a:	d956      	bls.n	80083da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800832c:	2303      	movs	r3, #3
 800832e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008330:	e053      	b.n	80083da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	78db      	ldrb	r3, [r3, #3]
 8008336:	f003 0303 	and.w	r3, r3, #3
 800833a:	2b01      	cmp	r3, #1
 800833c:	d10e      	bne.n	800835c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	799b      	ldrb	r3, [r3, #6]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d007      	beq.n	8008356 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800834a:	2b10      	cmp	r3, #16
 800834c:	d803      	bhi.n	8008356 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008352:	2b40      	cmp	r3, #64	@ 0x40
 8008354:	d941      	bls.n	80083da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008356:	2303      	movs	r3, #3
 8008358:	75fb      	strb	r3, [r7, #23]
 800835a:	e03e      	b.n	80083da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	78db      	ldrb	r3, [r3, #3]
 8008360:	f003 0303 	and.w	r3, r3, #3
 8008364:	2b03      	cmp	r3, #3
 8008366:	d10b      	bne.n	8008380 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	799b      	ldrb	r3, [r3, #6]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d004      	beq.n	800837a <USBH_ParseEPDesc+0x162>
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	889b      	ldrh	r3, [r3, #4]
 8008374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008378:	d32f      	bcc.n	80083da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800837a:	2303      	movs	r3, #3
 800837c:	75fb      	strb	r3, [r7, #23]
 800837e:	e02c      	b.n	80083da <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008380:	2303      	movs	r3, #3
 8008382:	75fb      	strb	r3, [r7, #23]
 8008384:	e029      	b.n	80083da <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800838c:	2b02      	cmp	r3, #2
 800838e:	d120      	bne.n	80083d2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	78db      	ldrb	r3, [r3, #3]
 8008394:	f003 0303 	and.w	r3, r3, #3
 8008398:	2b00      	cmp	r3, #0
 800839a:	d106      	bne.n	80083aa <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	889b      	ldrh	r3, [r3, #4]
 80083a0:	2b08      	cmp	r3, #8
 80083a2:	d01a      	beq.n	80083da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80083a4:	2303      	movs	r3, #3
 80083a6:	75fb      	strb	r3, [r7, #23]
 80083a8:	e017      	b.n	80083da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	78db      	ldrb	r3, [r3, #3]
 80083ae:	f003 0303 	and.w	r3, r3, #3
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d10a      	bne.n	80083cc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	799b      	ldrb	r3, [r3, #6]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <USBH_ParseEPDesc+0x1ae>
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	889b      	ldrh	r3, [r3, #4]
 80083c2:	2b08      	cmp	r3, #8
 80083c4:	d909      	bls.n	80083da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80083c6:	2303      	movs	r3, #3
 80083c8:	75fb      	strb	r3, [r7, #23]
 80083ca:	e006      	b.n	80083da <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80083cc:	2303      	movs	r3, #3
 80083ce:	75fb      	strb	r3, [r7, #23]
 80083d0:	e003      	b.n	80083da <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80083d2:	2303      	movs	r3, #3
 80083d4:	75fb      	strb	r3, [r7, #23]
 80083d6:	e000      	b.n	80083da <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80083d8:	bf00      	nop
  }

  return status;
 80083da:	7dfb      	ldrb	r3, [r7, #23]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	371c      	adds	r7, #28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b087      	sub	sp, #28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	4613      	mov	r3, r2
 80083f4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3301      	adds	r3, #1
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d120      	bne.n	8008442 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	1e9a      	subs	r2, r3, #2
 8008406:	88fb      	ldrh	r3, [r7, #6]
 8008408:	4293      	cmp	r3, r2
 800840a:	bf28      	it	cs
 800840c:	4613      	movcs	r3, r2
 800840e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3302      	adds	r3, #2
 8008414:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008416:	2300      	movs	r3, #0
 8008418:	82fb      	strh	r3, [r7, #22]
 800841a:	e00b      	b.n	8008434 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800841c:	8afb      	ldrh	r3, [r7, #22]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	4413      	add	r3, r2
 8008422:	781a      	ldrb	r2, [r3, #0]
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	3301      	adds	r3, #1
 800842c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800842e:	8afb      	ldrh	r3, [r7, #22]
 8008430:	3302      	adds	r3, #2
 8008432:	82fb      	strh	r3, [r7, #22]
 8008434:	8afa      	ldrh	r2, [r7, #22]
 8008436:	8abb      	ldrh	r3, [r7, #20]
 8008438:	429a      	cmp	r2, r3
 800843a:	d3ef      	bcc.n	800841c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2200      	movs	r2, #0
 8008440:	701a      	strb	r2, [r3, #0]
  }
}
 8008442:	bf00      	nop
 8008444:	371c      	adds	r7, #28
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800844e:	b480      	push	{r7}
 8008450:	b085      	sub	sp, #20
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	7812      	ldrb	r2, [r2, #0]
 8008460:	4413      	add	r3, r2
 8008462:	b29a      	uxth	r2, r3
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4413      	add	r3, r2
 8008472:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008474:	68fb      	ldr	r3, [r7, #12]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b086      	sub	sp, #24
 8008486:	af00      	add	r7, sp, #0
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	4613      	mov	r3, r2
 800848e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008490:	2301      	movs	r3, #1
 8008492:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	789b      	ldrb	r3, [r3, #2]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d002      	beq.n	80084a2 <USBH_CtlReq+0x20>
 800849c:	2b02      	cmp	r3, #2
 800849e:	d01d      	beq.n	80084dc <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80084a0:	e043      	b.n	800852a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	88fa      	ldrh	r2, [r7, #6]
 80084ac:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2201      	movs	r2, #1
 80084b2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2202      	movs	r2, #2
 80084b8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80084ba:	2301      	movs	r3, #1
 80084bc:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2203      	movs	r2, #3
 80084c2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80084d2:	2300      	movs	r3, #0
 80084d4:	2200      	movs	r2, #0
 80084d6:	f000 fe05 	bl	80090e4 <osMessageQueuePut>
      break;
 80084da:	e026      	b.n	800852a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 f829 	bl	8008534 <USBH_HandleControl>
 80084e2:	4603      	mov	r3, r0
 80084e4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80084e6:	7dfb      	ldrb	r3, [r7, #23]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <USBH_CtlReq+0x70>
 80084ec:	7dfb      	ldrb	r3, [r7, #23]
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d106      	bne.n	8008500 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2201      	movs	r2, #1
 80084f6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	761a      	strb	r2, [r3, #24]
 80084fe:	e005      	b.n	800850c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	2b02      	cmp	r3, #2
 8008504:	d102      	bne.n	800850c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2201      	movs	r2, #1
 800850a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2203      	movs	r2, #3
 8008510:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008520:	2300      	movs	r3, #0
 8008522:	2200      	movs	r2, #0
 8008524:	f000 fdde 	bl	80090e4 <osMessageQueuePut>
      break;
 8008528:	bf00      	nop
  }
  return status;
 800852a:	7dfb      	ldrb	r3, [r7, #23]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3718      	adds	r7, #24
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af02      	add	r7, sp, #8
 800853a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800853c:	2301      	movs	r3, #1
 800853e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008540:	2300      	movs	r3, #0
 8008542:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	7e1b      	ldrb	r3, [r3, #24]
 8008548:	3b01      	subs	r3, #1
 800854a:	2b0a      	cmp	r3, #10
 800854c:	f200 8229 	bhi.w	80089a2 <USBH_HandleControl+0x46e>
 8008550:	a201      	add	r2, pc, #4	@ (adr r2, 8008558 <USBH_HandleControl+0x24>)
 8008552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008556:	bf00      	nop
 8008558:	08008585 	.word	0x08008585
 800855c:	0800859f 	.word	0x0800859f
 8008560:	08008641 	.word	0x08008641
 8008564:	08008667 	.word	0x08008667
 8008568:	080086f3 	.word	0x080086f3
 800856c:	0800871d 	.word	0x0800871d
 8008570:	080087df 	.word	0x080087df
 8008574:	08008801 	.word	0x08008801
 8008578:	08008893 	.word	0x08008893
 800857c:	080088b9 	.word	0x080088b9
 8008580:	0800894b 	.word	0x0800894b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f103 0110 	add.w	r1, r3, #16
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	795b      	ldrb	r3, [r3, #5]
 800858e:	461a      	mov	r2, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fa17 	bl	80089c4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2202      	movs	r2, #2
 800859a:	761a      	strb	r2, [r3, #24]
      break;
 800859c:	e20c      	b.n	80089b8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	795b      	ldrb	r3, [r3, #5]
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f003 feb3 	bl	800c310 <USBH_LL_GetURBState>
 80085aa:	4603      	mov	r3, r0
 80085ac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d12c      	bne.n	800860e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	7c1b      	ldrb	r3, [r3, #16]
 80085b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80085bc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	8adb      	ldrh	r3, [r3, #22]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80085c6:	7b7b      	ldrb	r3, [r7, #13]
 80085c8:	2b80      	cmp	r3, #128	@ 0x80
 80085ca:	d103      	bne.n	80085d4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2203      	movs	r2, #3
 80085d0:	761a      	strb	r2, [r3, #24]
 80085d2:	e00d      	b.n	80085f0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2205      	movs	r2, #5
 80085d8:	761a      	strb	r2, [r3, #24]
 80085da:	e009      	b.n	80085f0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80085dc:	7b7b      	ldrb	r3, [r7, #13]
 80085de:	2b80      	cmp	r3, #128	@ 0x80
 80085e0:	d103      	bne.n	80085ea <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2209      	movs	r2, #9
 80085e6:	761a      	strb	r2, [r3, #24]
 80085e8:	e002      	b.n	80085f0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2207      	movs	r2, #7
 80085ee:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2203      	movs	r2, #3
 80085f4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008604:	2300      	movs	r3, #0
 8008606:	2200      	movs	r2, #0
 8008608:	f000 fd6c 	bl	80090e4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800860c:	e1cb      	b.n	80089a6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	2b04      	cmp	r3, #4
 8008612:	d003      	beq.n	800861c <USBH_HandleControl+0xe8>
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	2b02      	cmp	r3, #2
 8008618:	f040 81c5 	bne.w	80089a6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	220b      	movs	r2, #11
 8008620:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2203      	movs	r2, #3
 8008626:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008636:	2300      	movs	r3, #0
 8008638:	2200      	movs	r2, #0
 800863a:	f000 fd53 	bl	80090e4 <osMessageQueuePut>
      break;
 800863e:	e1b2      	b.n	80089a6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008646:	b29a      	uxth	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6899      	ldr	r1, [r3, #8]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	899a      	ldrh	r2, [r3, #12]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	791b      	ldrb	r3, [r3, #4]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f9f2 	bl	8008a42 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2204      	movs	r2, #4
 8008662:	761a      	strb	r2, [r3, #24]
      break;
 8008664:	e1a8      	b.n	80089b8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	791b      	ldrb	r3, [r3, #4]
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f003 fe4f 	bl	800c310 <USBH_LL_GetURBState>
 8008672:	4603      	mov	r3, r0
 8008674:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008676:	7bbb      	ldrb	r3, [r7, #14]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d110      	bne.n	800869e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2209      	movs	r2, #9
 8008680:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2203      	movs	r2, #3
 8008686:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008696:	2300      	movs	r3, #0
 8008698:	2200      	movs	r2, #0
 800869a:	f000 fd23 	bl	80090e4 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b05      	cmp	r3, #5
 80086a2:	d110      	bne.n	80086c6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80086a4:	2303      	movs	r3, #3
 80086a6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2203      	movs	r2, #3
 80086ac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80086bc:	2300      	movs	r3, #0
 80086be:	2200      	movs	r2, #0
 80086c0:	f000 fd10 	bl	80090e4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086c4:	e171      	b.n	80089aa <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	f040 816e 	bne.w	80089aa <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	220b      	movs	r2, #11
 80086d2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2203      	movs	r2, #3
 80086d8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80086e8:	2300      	movs	r3, #0
 80086ea:	2200      	movs	r2, #0
 80086ec:	f000 fcfa 	bl	80090e4 <osMessageQueuePut>
      break;
 80086f0:	e15b      	b.n	80089aa <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6899      	ldr	r1, [r3, #8]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	899a      	ldrh	r2, [r3, #12]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	795b      	ldrb	r3, [r3, #5]
 80086fe:	2001      	movs	r0, #1
 8008700:	9000      	str	r0, [sp, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f978 	bl	80089f8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800870e:	b29a      	uxth	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2206      	movs	r2, #6
 8008718:	761a      	strb	r2, [r3, #24]
      break;
 800871a:	e14d      	b.n	80089b8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	795b      	ldrb	r3, [r3, #5]
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f003 fdf4 	bl	800c310 <USBH_LL_GetURBState>
 8008728:	4603      	mov	r3, r0
 800872a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800872c:	7bbb      	ldrb	r3, [r7, #14]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d111      	bne.n	8008756 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2207      	movs	r2, #7
 8008736:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2203      	movs	r2, #3
 800873c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800874c:	2300      	movs	r3, #0
 800874e:	2200      	movs	r2, #0
 8008750:	f000 fcc8 	bl	80090e4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008754:	e12b      	b.n	80089ae <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8008756:	7bbb      	ldrb	r3, [r7, #14]
 8008758:	2b05      	cmp	r3, #5
 800875a:	d113      	bne.n	8008784 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	220c      	movs	r2, #12
 8008760:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008762:	2303      	movs	r3, #3
 8008764:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2203      	movs	r2, #3
 800876a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800877a:	2300      	movs	r3, #0
 800877c:	2200      	movs	r2, #0
 800877e:	f000 fcb1 	bl	80090e4 <osMessageQueuePut>
      break;
 8008782:	e114      	b.n	80089ae <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	2b02      	cmp	r3, #2
 8008788:	d111      	bne.n	80087ae <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2205      	movs	r2, #5
 800878e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2203      	movs	r2, #3
 8008794:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80087a4:	2300      	movs	r3, #0
 80087a6:	2200      	movs	r2, #0
 80087a8:	f000 fc9c 	bl	80090e4 <osMessageQueuePut>
      break;
 80087ac:	e0ff      	b.n	80089ae <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80087ae:	7bbb      	ldrb	r3, [r7, #14]
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	f040 80fc 	bne.w	80089ae <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	220b      	movs	r2, #11
 80087ba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80087bc:	2302      	movs	r3, #2
 80087be:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2203      	movs	r2, #3
 80087c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80087d4:	2300      	movs	r3, #0
 80087d6:	2200      	movs	r2, #0
 80087d8:	f000 fc84 	bl	80090e4 <osMessageQueuePut>
      break;
 80087dc:	e0e7      	b.n	80089ae <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	791b      	ldrb	r3, [r3, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	2100      	movs	r1, #0
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f92b 	bl	8008a42 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2208      	movs	r2, #8
 80087fc:	761a      	strb	r2, [r3, #24]

      break;
 80087fe:	e0db      	b.n	80089b8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	791b      	ldrb	r3, [r3, #4]
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f003 fd82 	bl	800c310 <USBH_LL_GetURBState>
 800880c:	4603      	mov	r3, r0
 800880e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d113      	bne.n	800883e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	220d      	movs	r2, #13
 800881a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2203      	movs	r2, #3
 8008824:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008834:	2300      	movs	r3, #0
 8008836:	2200      	movs	r2, #0
 8008838:	f000 fc54 	bl	80090e4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800883c:	e0b9      	b.n	80089b2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	2b04      	cmp	r3, #4
 8008842:	d111      	bne.n	8008868 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	220b      	movs	r2, #11
 8008848:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2203      	movs	r2, #3
 800884e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800885e:	2300      	movs	r3, #0
 8008860:	2200      	movs	r2, #0
 8008862:	f000 fc3f 	bl	80090e4 <osMessageQueuePut>
      break;
 8008866:	e0a4      	b.n	80089b2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	2b05      	cmp	r3, #5
 800886c:	f040 80a1 	bne.w	80089b2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8008870:	2303      	movs	r3, #3
 8008872:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2203      	movs	r2, #3
 8008878:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008888:	2300      	movs	r3, #0
 800888a:	2200      	movs	r2, #0
 800888c:	f000 fc2a 	bl	80090e4 <osMessageQueuePut>
      break;
 8008890:	e08f      	b.n	80089b2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	795b      	ldrb	r3, [r3, #5]
 8008896:	2201      	movs	r2, #1
 8008898:	9200      	str	r2, [sp, #0]
 800889a:	2200      	movs	r2, #0
 800889c:	2100      	movs	r1, #0
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f8aa 	bl	80089f8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	220a      	movs	r2, #10
 80088b4:	761a      	strb	r2, [r3, #24]
      break;
 80088b6:	e07f      	b.n	80089b8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	795b      	ldrb	r3, [r3, #5]
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f003 fd26 	bl	800c310 <USBH_LL_GetURBState>
 80088c4:	4603      	mov	r3, r0
 80088c6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d113      	bne.n	80088f6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	220d      	movs	r2, #13
 80088d6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2203      	movs	r2, #3
 80088dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80088ec:	2300      	movs	r3, #0
 80088ee:	2200      	movs	r2, #0
 80088f0:	f000 fbf8 	bl	80090e4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088f4:	e05f      	b.n	80089b6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d111      	bne.n	8008920 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2209      	movs	r2, #9
 8008900:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2203      	movs	r2, #3
 8008906:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008916:	2300      	movs	r3, #0
 8008918:	2200      	movs	r2, #0
 800891a:	f000 fbe3 	bl	80090e4 <osMessageQueuePut>
      break;
 800891e:	e04a      	b.n	80089b6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	2b04      	cmp	r3, #4
 8008924:	d147      	bne.n	80089b6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	220b      	movs	r2, #11
 800892a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2203      	movs	r2, #3
 8008930:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008940:	2300      	movs	r3, #0
 8008942:	2200      	movs	r2, #0
 8008944:	f000 fbce 	bl	80090e4 <osMessageQueuePut>
      break;
 8008948:	e035      	b.n	80089b6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	7e5b      	ldrb	r3, [r3, #25]
 800894e:	3301      	adds	r3, #1
 8008950:	b2da      	uxtb	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	765a      	strb	r2, [r3, #25]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	7e5b      	ldrb	r3, [r3, #25]
 800895a:	2b02      	cmp	r3, #2
 800895c:	d806      	bhi.n	800896c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800896a:	e025      	b.n	80089b8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008972:	2106      	movs	r1, #6
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	795b      	ldrb	r3, [r3, #5]
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f90d 	bl	8008ba4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	791b      	ldrb	r3, [r3, #4]
 800898e:	4619      	mov	r1, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f907 	bl	8008ba4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800899c:	2302      	movs	r3, #2
 800899e:	73fb      	strb	r3, [r7, #15]
      break;
 80089a0:	e00a      	b.n	80089b8 <USBH_HandleControl+0x484>

    default:
      break;
 80089a2:	bf00      	nop
 80089a4:	e008      	b.n	80089b8 <USBH_HandleControl+0x484>
      break;
 80089a6:	bf00      	nop
 80089a8:	e006      	b.n	80089b8 <USBH_HandleControl+0x484>
      break;
 80089aa:	bf00      	nop
 80089ac:	e004      	b.n	80089b8 <USBH_HandleControl+0x484>
      break;
 80089ae:	bf00      	nop
 80089b0:	e002      	b.n	80089b8 <USBH_HandleControl+0x484>
      break;
 80089b2:	bf00      	nop
 80089b4:	e000      	b.n	80089b8 <USBH_HandleControl+0x484>
      break;
 80089b6:	bf00      	nop
  }

  return status;
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop

080089c4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b088      	sub	sp, #32
 80089c8:	af04      	add	r7, sp, #16
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	4613      	mov	r3, r2
 80089d0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089d2:	79f9      	ldrb	r1, [r7, #7]
 80089d4:	2300      	movs	r3, #0
 80089d6:	9303      	str	r3, [sp, #12]
 80089d8:	2308      	movs	r3, #8
 80089da:	9302      	str	r3, [sp, #8]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	2300      	movs	r3, #0
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	2300      	movs	r3, #0
 80089e6:	2200      	movs	r2, #0
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f003 fc60 	bl	800c2ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af04      	add	r7, sp, #16
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	4611      	mov	r1, r2
 8008a04:	461a      	mov	r2, r3
 8008a06:	460b      	mov	r3, r1
 8008a08:	80fb      	strh	r3, [r7, #6]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a1c:	7979      	ldrb	r1, [r7, #5]
 8008a1e:	7e3b      	ldrb	r3, [r7, #24]
 8008a20:	9303      	str	r3, [sp, #12]
 8008a22:	88fb      	ldrh	r3, [r7, #6]
 8008a24:	9302      	str	r3, [sp, #8]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	9301      	str	r3, [sp, #4]
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	2300      	movs	r3, #0
 8008a30:	2200      	movs	r2, #0
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f003 fc3b 	bl	800c2ae <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b088      	sub	sp, #32
 8008a46:	af04      	add	r7, sp, #16
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	461a      	mov	r2, r3
 8008a50:	460b      	mov	r3, r1
 8008a52:	80fb      	strh	r3, [r7, #6]
 8008a54:	4613      	mov	r3, r2
 8008a56:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a58:	7979      	ldrb	r1, [r7, #5]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	9303      	str	r3, [sp, #12]
 8008a5e:	88fb      	ldrh	r3, [r7, #6]
 8008a60:	9302      	str	r3, [sp, #8]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	9301      	str	r3, [sp, #4]
 8008a66:	2301      	movs	r3, #1
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f003 fc1d 	bl	800c2ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a74:	2300      	movs	r3, #0

}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b088      	sub	sp, #32
 8008a82:	af04      	add	r7, sp, #16
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	4611      	mov	r1, r2
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	80fb      	strh	r3, [r7, #6]
 8008a90:	4613      	mov	r3, r2
 8008a92:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008aa2:	7979      	ldrb	r1, [r7, #5]
 8008aa4:	7e3b      	ldrb	r3, [r7, #24]
 8008aa6:	9303      	str	r3, [sp, #12]
 8008aa8:	88fb      	ldrh	r3, [r7, #6]
 8008aaa:	9302      	str	r3, [sp, #8]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f003 fbf8 	bl	800c2ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af04      	add	r7, sp, #16
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	80fb      	strh	r3, [r7, #6]
 8008ada:	4613      	mov	r3, r2
 8008adc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ade:	7979      	ldrb	r1, [r7, #5]
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9303      	str	r3, [sp, #12]
 8008ae4:	88fb      	ldrh	r3, [r7, #6]
 8008ae6:	9302      	str	r3, [sp, #8]
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	2301      	movs	r3, #1
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	2302      	movs	r3, #2
 8008af2:	2201      	movs	r2, #1
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f003 fbda 	bl	800c2ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af04      	add	r7, sp, #16
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	4611      	mov	r1, r2
 8008b10:	461a      	mov	r2, r3
 8008b12:	4603      	mov	r3, r0
 8008b14:	70fb      	strb	r3, [r7, #3]
 8008b16:	460b      	mov	r3, r1
 8008b18:	70bb      	strb	r3, [r7, #2]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008b1e:	7878      	ldrb	r0, [r7, #1]
 8008b20:	78ba      	ldrb	r2, [r7, #2]
 8008b22:	78f9      	ldrb	r1, [r7, #3]
 8008b24:	8b3b      	ldrh	r3, [r7, #24]
 8008b26:	9302      	str	r3, [sp, #8]
 8008b28:	7d3b      	ldrb	r3, [r7, #20]
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	7c3b      	ldrb	r3, [r7, #16]
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	4603      	mov	r3, r0
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f003 fb6d 	bl	800c212 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008b4e:	78fb      	ldrb	r3, [r7, #3]
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f003 fb8c 	bl	800c270 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b084      	sub	sp, #16
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f836 	bl	8008be0 <USBH_GetFreePipe>
 8008b74:	4603      	mov	r3, r0
 8008b76:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008b78:	89fb      	ldrh	r3, [r7, #14]
 8008b7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d00a      	beq.n	8008b98 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008b82:	78fa      	ldrb	r2, [r7, #3]
 8008b84:	89fb      	ldrh	r3, [r7, #14]
 8008b86:	f003 030f 	and.w	r3, r3, #15
 8008b8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	33e0      	adds	r3, #224	@ 0xe0
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	440b      	add	r3, r1
 8008b96:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008b98:	89fb      	ldrh	r3, [r7, #14]
 8008b9a:	b2db      	uxtb	r3, r3
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	2b0f      	cmp	r3, #15
 8008bb4:	d80d      	bhi.n	8008bd2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008bb6:	78fb      	ldrb	r3, [r7, #3]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	33e0      	adds	r3, #224	@ 0xe0
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	685a      	ldr	r2, [r3, #4]
 8008bc2:	78fb      	ldrb	r3, [r7, #3]
 8008bc4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008bc8:	6879      	ldr	r1, [r7, #4]
 8008bca:	33e0      	adds	r3, #224	@ 0xe0
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	440b      	add	r3, r1
 8008bd0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]
 8008bf0:	e00f      	b.n	8008c12 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	33e0      	adds	r3, #224	@ 0xe0
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d102      	bne.n	8008c0c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	e007      	b.n	8008c1c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	73fb      	strb	r3, [r7, #15]
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	2b0f      	cmp	r3, #15
 8008c16:	d9ec      	bls.n	8008bf2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008c18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <__NVIC_SetPriority>:
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	4603      	mov	r3, r0
 8008c30:	6039      	str	r1, [r7, #0]
 8008c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	db0a      	blt.n	8008c52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	490c      	ldr	r1, [pc, #48]	@ (8008c74 <__NVIC_SetPriority+0x4c>)
 8008c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c46:	0112      	lsls	r2, r2, #4
 8008c48:	b2d2      	uxtb	r2, r2
 8008c4a:	440b      	add	r3, r1
 8008c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008c50:	e00a      	b.n	8008c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	4908      	ldr	r1, [pc, #32]	@ (8008c78 <__NVIC_SetPriority+0x50>)
 8008c58:	79fb      	ldrb	r3, [r7, #7]
 8008c5a:	f003 030f 	and.w	r3, r3, #15
 8008c5e:	3b04      	subs	r3, #4
 8008c60:	0112      	lsls	r2, r2, #4
 8008c62:	b2d2      	uxtb	r2, r2
 8008c64:	440b      	add	r3, r1
 8008c66:	761a      	strb	r2, [r3, #24]
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	e000e100 	.word	0xe000e100
 8008c78:	e000ed00 	.word	0xe000ed00

08008c7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008c80:	2100      	movs	r1, #0
 8008c82:	f06f 0004 	mvn.w	r0, #4
 8008c86:	f7ff ffcf 	bl	8008c28 <__NVIC_SetPriority>
#endif
}
 8008c8a:	bf00      	nop
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c96:	f3ef 8305 	mrs	r3, IPSR
 8008c9a:	603b      	str	r3, [r7, #0]
  return(result);
 8008c9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d003      	beq.n	8008caa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008ca2:	f06f 0305 	mvn.w	r3, #5
 8008ca6:	607b      	str	r3, [r7, #4]
 8008ca8:	e00c      	b.n	8008cc4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008caa:	4b0a      	ldr	r3, [pc, #40]	@ (8008cd4 <osKernelInitialize+0x44>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d105      	bne.n	8008cbe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008cb2:	4b08      	ldr	r3, [pc, #32]	@ (8008cd4 <osKernelInitialize+0x44>)
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	607b      	str	r3, [r7, #4]
 8008cbc:	e002      	b.n	8008cc4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008cc4:	687b      	ldr	r3, [r7, #4]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	2000021c 	.word	0x2000021c

08008cd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cde:	f3ef 8305 	mrs	r3, IPSR
 8008ce2:	603b      	str	r3, [r7, #0]
  return(result);
 8008ce4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008cea:	f06f 0305 	mvn.w	r3, #5
 8008cee:	607b      	str	r3, [r7, #4]
 8008cf0:	e010      	b.n	8008d14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8008d20 <osKernelStart+0x48>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d109      	bne.n	8008d0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008cfa:	f7ff ffbf 	bl	8008c7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008cfe:	4b08      	ldr	r3, [pc, #32]	@ (8008d20 <osKernelStart+0x48>)
 8008d00:	2202      	movs	r2, #2
 8008d02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d04:	f001 fb28 	bl	800a358 <vTaskStartScheduler>
      stat = osOK;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	607b      	str	r3, [r7, #4]
 8008d0c:	e002      	b.n	8008d14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d14:	687b      	ldr	r3, [r7, #4]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	2000021c 	.word	0x2000021c

08008d24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b08e      	sub	sp, #56	@ 0x38
 8008d28:	af04      	add	r7, sp, #16
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d30:	2300      	movs	r3, #0
 8008d32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d34:	f3ef 8305 	mrs	r3, IPSR
 8008d38:	617b      	str	r3, [r7, #20]
  return(result);
 8008d3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d17e      	bne.n	8008e3e <osThreadNew+0x11a>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d07b      	beq.n	8008e3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008d46:	2380      	movs	r3, #128	@ 0x80
 8008d48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008d4a:	2318      	movs	r3, #24
 8008d4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008d52:	f04f 33ff 	mov.w	r3, #4294967295
 8008d56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d045      	beq.n	8008dea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <osThreadNew+0x48>
        name = attr->name;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d002      	beq.n	8008d7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d008      	beq.n	8008d92 <osThreadNew+0x6e>
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	2b38      	cmp	r3, #56	@ 0x38
 8008d84:	d805      	bhi.n	8008d92 <osThreadNew+0x6e>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <osThreadNew+0x72>
        return (NULL);
 8008d92:	2300      	movs	r3, #0
 8008d94:	e054      	b.n	8008e40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	089b      	lsrs	r3, r3, #2
 8008da4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00e      	beq.n	8008dcc <osThreadNew+0xa8>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	2b5b      	cmp	r3, #91	@ 0x5b
 8008db4:	d90a      	bls.n	8008dcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d006      	beq.n	8008dcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d002      	beq.n	8008dcc <osThreadNew+0xa8>
        mem = 1;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	61bb      	str	r3, [r7, #24]
 8008dca:	e010      	b.n	8008dee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10c      	bne.n	8008dee <osThreadNew+0xca>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d108      	bne.n	8008dee <osThreadNew+0xca>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d104      	bne.n	8008dee <osThreadNew+0xca>
          mem = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	61bb      	str	r3, [r7, #24]
 8008de8:	e001      	b.n	8008dee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008dea:	2300      	movs	r3, #0
 8008dec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d110      	bne.n	8008e16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008dfc:	9202      	str	r2, [sp, #8]
 8008dfe:	9301      	str	r3, [sp, #4]
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	6a3a      	ldr	r2, [r7, #32]
 8008e08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f001 f8c8 	bl	8009fa0 <xTaskCreateStatic>
 8008e10:	4603      	mov	r3, r0
 8008e12:	613b      	str	r3, [r7, #16]
 8008e14:	e013      	b.n	8008e3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d110      	bne.n	8008e3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	f107 0310 	add.w	r3, r7, #16
 8008e24:	9301      	str	r3, [sp, #4]
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f001 f916 	bl	800a060 <xTaskCreate>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d001      	beq.n	8008e3e <osThreadNew+0x11a>
            hTask = NULL;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e3e:	693b      	ldr	r3, [r7, #16]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3728      	adds	r7, #40	@ 0x28
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e50:	f3ef 8305 	mrs	r3, IPSR
 8008e54:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <osDelay+0x1c>
    stat = osErrorISR;
 8008e5c:	f06f 0305 	mvn.w	r3, #5
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	e007      	b.n	8008e74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d002      	beq.n	8008e74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f001 fa3c 	bl	800a2ec <vTaskDelay>
    }
  }

  return (stat);
 8008e74:	68fb      	ldr	r3, [r7, #12]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f002 fb8e 	bl	800b5a8 <pvTimerGetTimerID>
 8008e8c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d005      	beq.n	8008ea0 <TimerCallback+0x22>
    callb->func (callb->arg);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	6852      	ldr	r2, [r2, #4]
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	4798      	blx	r3
  }
}
 8008ea0:	bf00      	nop
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b08c      	sub	sp, #48	@ 0x30
 8008eac:	af02      	add	r7, sp, #8
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	607a      	str	r2, [r7, #4]
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ebc:	f3ef 8305 	mrs	r3, IPSR
 8008ec0:	613b      	str	r3, [r7, #16]
  return(result);
 8008ec2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d163      	bne.n	8008f90 <osTimerNew+0xe8>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d060      	beq.n	8008f90 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008ece:	2008      	movs	r0, #8
 8008ed0:	f002 fddc 	bl	800ba8c <pvPortMalloc>
 8008ed4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d059      	beq.n	8008f90 <osTimerNew+0xe8>
      callb->func = func;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008ee8:	7afb      	ldrb	r3, [r7, #11]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d102      	bne.n	8008ef4 <osTimerNew+0x4c>
        reload = pdFALSE;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	61fb      	str	r3, [r7, #28]
 8008ef2:	e001      	b.n	8008ef8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8008ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8008efc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d01c      	beq.n	8008f42 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <osTimerNew+0x6e>
          name = attr->name;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d006      	beq.n	8008f2c <osTimerNew+0x84>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	2b2b      	cmp	r3, #43	@ 0x2b
 8008f24:	d902      	bls.n	8008f2c <osTimerNew+0x84>
          mem = 1;
 8008f26:	2301      	movs	r3, #1
 8008f28:	61bb      	str	r3, [r7, #24]
 8008f2a:	e00c      	b.n	8008f46 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d108      	bne.n	8008f46 <osTimerNew+0x9e>
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d104      	bne.n	8008f46 <osTimerNew+0x9e>
            mem = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	61bb      	str	r3, [r7, #24]
 8008f40:	e001      	b.n	8008f46 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d10c      	bne.n	8008f66 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	9301      	str	r3, [sp, #4]
 8008f52:	4b12      	ldr	r3, [pc, #72]	@ (8008f9c <osTimerNew+0xf4>)
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	69fa      	ldr	r2, [r7, #28]
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f5e:	f001 ff96 	bl	800ae8e <xTimerCreateStatic>
 8008f62:	6238      	str	r0, [r7, #32]
 8008f64:	e00b      	b.n	8008f7e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d108      	bne.n	8008f7e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8008f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f9c <osTimerNew+0xf4>)
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	69fa      	ldr	r2, [r7, #28]
 8008f74:	2101      	movs	r1, #1
 8008f76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f78:	f001 ff68 	bl	800ae4c <xTimerCreate>
 8008f7c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d105      	bne.n	8008f90 <osTimerNew+0xe8>
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d002      	beq.n	8008f90 <osTimerNew+0xe8>
        vPortFree (callb);
 8008f8a:	6978      	ldr	r0, [r7, #20]
 8008f8c:	f002 fe4c 	bl	800bc28 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008f90:	6a3b      	ldr	r3, [r7, #32]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3728      	adds	r7, #40	@ 0x28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	08008e7f 	.word	0x08008e7f

08008fa0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af02      	add	r7, sp, #8
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fae:	f3ef 8305 	mrs	r3, IPSR
 8008fb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d003      	beq.n	8008fc2 <osTimerStart+0x22>
    stat = osErrorISR;
 8008fba:	f06f 0305 	mvn.w	r3, #5
 8008fbe:	617b      	str	r3, [r7, #20]
 8008fc0:	e017      	b.n	8008ff2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d103      	bne.n	8008fd0 <osTimerStart+0x30>
    stat = osErrorParameter;
 8008fc8:	f06f 0303 	mvn.w	r3, #3
 8008fcc:	617b      	str	r3, [r7, #20]
 8008fce:	e010      	b.n	8008ff2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	2104      	movs	r1, #4
 8008fda:	6938      	ldr	r0, [r7, #16]
 8008fdc:	f001 ffd4 	bl	800af88 <xTimerGenericCommand>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d102      	bne.n	8008fec <osTimerStart+0x4c>
      stat = osOK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	617b      	str	r3, [r7, #20]
 8008fea:	e002      	b.n	8008ff2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8008fec:	f06f 0302 	mvn.w	r3, #2
 8008ff0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008ff2:	697b      	ldr	r3, [r7, #20]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b08a      	sub	sp, #40	@ 0x28
 8009000:	af02      	add	r7, sp, #8
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009008:	2300      	movs	r3, #0
 800900a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800900c:	f3ef 8305 	mrs	r3, IPSR
 8009010:	613b      	str	r3, [r7, #16]
  return(result);
 8009012:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009014:	2b00      	cmp	r3, #0
 8009016:	d15f      	bne.n	80090d8 <osMessageQueueNew+0xdc>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d05c      	beq.n	80090d8 <osMessageQueueNew+0xdc>
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d059      	beq.n	80090d8 <osMessageQueueNew+0xdc>
    mem = -1;
 8009024:	f04f 33ff 	mov.w	r3, #4294967295
 8009028:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d029      	beq.n	8009084 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d012      	beq.n	800905e <osMessageQueueNew+0x62>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	2b4f      	cmp	r3, #79	@ 0x4f
 800903e:	d90e      	bls.n	800905e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00a      	beq.n	800905e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	695a      	ldr	r2, [r3, #20]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	68b9      	ldr	r1, [r7, #8]
 8009050:	fb01 f303 	mul.w	r3, r1, r3
 8009054:	429a      	cmp	r2, r3
 8009056:	d302      	bcc.n	800905e <osMessageQueueNew+0x62>
        mem = 1;
 8009058:	2301      	movs	r3, #1
 800905a:	61bb      	str	r3, [r7, #24]
 800905c:	e014      	b.n	8009088 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d110      	bne.n	8009088 <osMessageQueueNew+0x8c>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10c      	bne.n	8009088 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009072:	2b00      	cmp	r3, #0
 8009074:	d108      	bne.n	8009088 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d104      	bne.n	8009088 <osMessageQueueNew+0x8c>
          mem = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	61bb      	str	r3, [r7, #24]
 8009082:	e001      	b.n	8009088 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d10b      	bne.n	80090a6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	691a      	ldr	r2, [r3, #16]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	2100      	movs	r1, #0
 8009098:	9100      	str	r1, [sp, #0]
 800909a:	68b9      	ldr	r1, [r7, #8]
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 fa31 	bl	8009504 <xQueueGenericCreateStatic>
 80090a2:	61f8      	str	r0, [r7, #28]
 80090a4:	e008      	b.n	80090b8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d105      	bne.n	80090b8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80090ac:	2200      	movs	r2, #0
 80090ae:	68b9      	ldr	r1, [r7, #8]
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 faa4 	bl	80095fe <xQueueGenericCreate>
 80090b6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00c      	beq.n	80090d8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d003      	beq.n	80090cc <osMessageQueueNew+0xd0>
        name = attr->name;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	617b      	str	r3, [r7, #20]
 80090ca:	e001      	b.n	80090d0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80090d0:	6979      	ldr	r1, [r7, #20]
 80090d2:	69f8      	ldr	r0, [r7, #28]
 80090d4:	f000 ff06 	bl	8009ee4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80090d8:	69fb      	ldr	r3, [r7, #28]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3720      	adds	r7, #32
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b088      	sub	sp, #32
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	603b      	str	r3, [r7, #0]
 80090f0:	4613      	mov	r3, r2
 80090f2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090fc:	f3ef 8305 	mrs	r3, IPSR
 8009100:	617b      	str	r3, [r7, #20]
  return(result);
 8009102:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009104:	2b00      	cmp	r3, #0
 8009106:	d028      	beq.n	800915a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d005      	beq.n	800911a <osMessageQueuePut+0x36>
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <osMessageQueuePut+0x36>
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800911a:	f06f 0303 	mvn.w	r3, #3
 800911e:	61fb      	str	r3, [r7, #28]
 8009120:	e038      	b.n	8009194 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009122:	2300      	movs	r3, #0
 8009124:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009126:	f107 0210 	add.w	r2, r7, #16
 800912a:	2300      	movs	r3, #0
 800912c:	68b9      	ldr	r1, [r7, #8]
 800912e:	69b8      	ldr	r0, [r7, #24]
 8009130:	f000 fbc6 	bl	80098c0 <xQueueGenericSendFromISR>
 8009134:	4603      	mov	r3, r0
 8009136:	2b01      	cmp	r3, #1
 8009138:	d003      	beq.n	8009142 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800913a:	f06f 0302 	mvn.w	r3, #2
 800913e:	61fb      	str	r3, [r7, #28]
 8009140:	e028      	b.n	8009194 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d025      	beq.n	8009194 <osMessageQueuePut+0xb0>
 8009148:	4b15      	ldr	r3, [pc, #84]	@ (80091a0 <osMessageQueuePut+0xbc>)
 800914a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800914e:	601a      	str	r2, [r3, #0]
 8009150:	f3bf 8f4f 	dsb	sy
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	e01c      	b.n	8009194 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d002      	beq.n	8009166 <osMessageQueuePut+0x82>
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d103      	bne.n	800916e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009166:	f06f 0303 	mvn.w	r3, #3
 800916a:	61fb      	str	r3, [r7, #28]
 800916c:	e012      	b.n	8009194 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800916e:	2300      	movs	r3, #0
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	68b9      	ldr	r1, [r7, #8]
 8009174:	69b8      	ldr	r0, [r7, #24]
 8009176:	f000 faa1 	bl	80096bc <xQueueGenericSend>
 800917a:	4603      	mov	r3, r0
 800917c:	2b01      	cmp	r3, #1
 800917e:	d009      	beq.n	8009194 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d003      	beq.n	800918e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009186:	f06f 0301 	mvn.w	r3, #1
 800918a:	61fb      	str	r3, [r7, #28]
 800918c:	e002      	b.n	8009194 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800918e:	f06f 0302 	mvn.w	r3, #2
 8009192:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009194:	69fb      	ldr	r3, [r7, #28]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3720      	adds	r7, #32
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	e000ed04 	.word	0xe000ed04

080091a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091ba:	f3ef 8305 	mrs	r3, IPSR
 80091be:	617b      	str	r3, [r7, #20]
  return(result);
 80091c0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d028      	beq.n	8009218 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d005      	beq.n	80091d8 <osMessageQueueGet+0x34>
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d002      	beq.n	80091d8 <osMessageQueueGet+0x34>
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d003      	beq.n	80091e0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80091d8:	f06f 0303 	mvn.w	r3, #3
 80091dc:	61fb      	str	r3, [r7, #28]
 80091de:	e037      	b.n	8009250 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80091e0:	2300      	movs	r3, #0
 80091e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80091e4:	f107 0310 	add.w	r3, r7, #16
 80091e8:	461a      	mov	r2, r3
 80091ea:	68b9      	ldr	r1, [r7, #8]
 80091ec:	69b8      	ldr	r0, [r7, #24]
 80091ee:	f000 fce7 	bl	8009bc0 <xQueueReceiveFromISR>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d003      	beq.n	8009200 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80091f8:	f06f 0302 	mvn.w	r3, #2
 80091fc:	61fb      	str	r3, [r7, #28]
 80091fe:	e027      	b.n	8009250 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d024      	beq.n	8009250 <osMessageQueueGet+0xac>
 8009206:	4b15      	ldr	r3, [pc, #84]	@ (800925c <osMessageQueueGet+0xb8>)
 8009208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	e01b      	b.n	8009250 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d002      	beq.n	8009224 <osMessageQueueGet+0x80>
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d103      	bne.n	800922c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009224:	f06f 0303 	mvn.w	r3, #3
 8009228:	61fb      	str	r3, [r7, #28]
 800922a:	e011      	b.n	8009250 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	68b9      	ldr	r1, [r7, #8]
 8009230:	69b8      	ldr	r0, [r7, #24]
 8009232:	f000 fbe3 	bl	80099fc <xQueueReceive>
 8009236:	4603      	mov	r3, r0
 8009238:	2b01      	cmp	r3, #1
 800923a:	d009      	beq.n	8009250 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009242:	f06f 0301 	mvn.w	r3, #1
 8009246:	61fb      	str	r3, [r7, #28]
 8009248:	e002      	b.n	8009250 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800924a:	f06f 0302 	mvn.w	r3, #2
 800924e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009250:	69fb      	ldr	r3, [r7, #28]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3720      	adds	r7, #32
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	e000ed04 	.word	0xe000ed04

08009260 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4a07      	ldr	r2, [pc, #28]	@ (800928c <vApplicationGetIdleTaskMemory+0x2c>)
 8009270:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	4a06      	ldr	r2, [pc, #24]	@ (8009290 <vApplicationGetIdleTaskMemory+0x30>)
 8009276:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2280      	movs	r2, #128	@ 0x80
 800927c:	601a      	str	r2, [r3, #0]
}
 800927e:	bf00      	nop
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	20000220 	.word	0x20000220
 8009290:	2000027c 	.word	0x2000027c

08009294 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	4a07      	ldr	r2, [pc, #28]	@ (80092c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80092a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	4a06      	ldr	r2, [pc, #24]	@ (80092c4 <vApplicationGetTimerTaskMemory+0x30>)
 80092aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80092b2:	601a      	str	r2, [r3, #0]
}
 80092b4:	bf00      	nop
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr
 80092c0:	2000047c 	.word	0x2000047c
 80092c4:	200004d8 	.word	0x200004d8

080092c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f103 0208 	add.w	r2, r3, #8
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f04f 32ff 	mov.w	r2, #4294967295
 80092e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f103 0208 	add.w	r2, r3, #8
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f103 0208 	add.w	r2, r3, #8
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009316:	bf00      	nop
 8009318:	370c      	adds	r7, #12
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009322:	b480      	push	{r7}
 8009324:	b085      	sub	sp, #20
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	689a      	ldr	r2, [r3, #8]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	683a      	ldr	r2, [r7, #0]
 8009346:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	601a      	str	r2, [r3, #0]
}
 800935e:	bf00      	nop
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800936a:	b480      	push	{r7}
 800936c:	b085      	sub	sp, #20
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009380:	d103      	bne.n	800938a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	e00c      	b.n	80093a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	3308      	adds	r3, #8
 800938e:	60fb      	str	r3, [r7, #12]
 8009390:	e002      	b.n	8009398 <vListInsert+0x2e>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	60fb      	str	r3, [r7, #12]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d2f6      	bcs.n	8009392 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	683a      	ldr	r2, [r7, #0]
 80093be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	601a      	str	r2, [r3, #0]
}
 80093d0:	bf00      	nop
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	6892      	ldr	r2, [r2, #8]
 80093f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	6852      	ldr	r2, [r2, #4]
 80093fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	429a      	cmp	r2, r3
 8009406:	d103      	bne.n	8009410 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	1e5a      	subs	r2, r3, #1
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10b      	bne.n	800945c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009456:	bf00      	nop
 8009458:	bf00      	nop
 800945a:	e7fd      	b.n	8009458 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800945c:	f002 f9f4 	bl	800b848 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009468:	68f9      	ldr	r1, [r7, #12]
 800946a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800946c:	fb01 f303 	mul.w	r3, r1, r3
 8009470:	441a      	add	r2, r3
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800948c:	3b01      	subs	r3, #1
 800948e:	68f9      	ldr	r1, [r7, #12]
 8009490:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009492:	fb01 f303 	mul.w	r3, r1, r3
 8009496:	441a      	add	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	22ff      	movs	r2, #255	@ 0xff
 80094a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	22ff      	movs	r2, #255	@ 0xff
 80094a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d114      	bne.n	80094dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d01a      	beq.n	80094f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	3310      	adds	r3, #16
 80094be:	4618      	mov	r0, r3
 80094c0:	f001 f9d8 	bl	800a874 <xTaskRemoveFromEventList>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d012      	beq.n	80094f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80094ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009500 <xQueueGenericReset+0xd0>)
 80094cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	e009      	b.n	80094f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	3310      	adds	r3, #16
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7ff fef1 	bl	80092c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3324      	adds	r3, #36	@ 0x24
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff feec 	bl	80092c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80094f0:	f002 f9dc 	bl	800b8ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80094f4:	2301      	movs	r3, #1
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	e000ed04 	.word	0xe000ed04

08009504 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009504:	b580      	push	{r7, lr}
 8009506:	b08e      	sub	sp, #56	@ 0x38
 8009508:	af02      	add	r7, sp, #8
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10b      	bne.n	8009530 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800952a:	bf00      	nop
 800952c:	bf00      	nop
 800952e:	e7fd      	b.n	800952c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10b      	bne.n	800954e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009548:	bf00      	nop
 800954a:	bf00      	nop
 800954c:	e7fd      	b.n	800954a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d002      	beq.n	800955a <xQueueGenericCreateStatic+0x56>
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <xQueueGenericCreateStatic+0x5a>
 800955a:	2301      	movs	r3, #1
 800955c:	e000      	b.n	8009560 <xQueueGenericCreateStatic+0x5c>
 800955e:	2300      	movs	r3, #0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10b      	bne.n	800957c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	623b      	str	r3, [r7, #32]
}
 8009576:	bf00      	nop
 8009578:	bf00      	nop
 800957a:	e7fd      	b.n	8009578 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d102      	bne.n	8009588 <xQueueGenericCreateStatic+0x84>
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <xQueueGenericCreateStatic+0x88>
 8009588:	2301      	movs	r3, #1
 800958a:	e000      	b.n	800958e <xQueueGenericCreateStatic+0x8a>
 800958c:	2300      	movs	r3, #0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10b      	bne.n	80095aa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	61fb      	str	r3, [r7, #28]
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop
 80095a8:	e7fd      	b.n	80095a6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095aa:	2350      	movs	r3, #80	@ 0x50
 80095ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2b50      	cmp	r3, #80	@ 0x50
 80095b2:	d00b      	beq.n	80095cc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	61bb      	str	r3, [r7, #24]
}
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	e7fd      	b.n	80095c8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80095d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00d      	beq.n	80095f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095e0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80095e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	4613      	mov	r3, r2
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	68b9      	ldr	r1, [r7, #8]
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f000 f840 	bl	8009674 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80095f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3730      	adds	r7, #48	@ 0x30
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b08a      	sub	sp, #40	@ 0x28
 8009602:	af02      	add	r7, sp, #8
 8009604:	60f8      	str	r0, [r7, #12]
 8009606:	60b9      	str	r1, [r7, #8]
 8009608:	4613      	mov	r3, r2
 800960a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10b      	bne.n	800962a <xQueueGenericCreate+0x2c>
	__asm volatile
 8009612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009616:	f383 8811 	msr	BASEPRI, r3
 800961a:	f3bf 8f6f 	isb	sy
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	613b      	str	r3, [r7, #16]
}
 8009624:	bf00      	nop
 8009626:	bf00      	nop
 8009628:	e7fd      	b.n	8009626 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	fb02 f303 	mul.w	r3, r2, r3
 8009632:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	3350      	adds	r3, #80	@ 0x50
 8009638:	4618      	mov	r0, r3
 800963a:	f002 fa27 	bl	800ba8c <pvPortMalloc>
 800963e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d011      	beq.n	800966a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	3350      	adds	r3, #80	@ 0x50
 800964e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009658:	79fa      	ldrb	r2, [r7, #7]
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	4613      	mov	r3, r2
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	68b9      	ldr	r1, [r7, #8]
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 f805 	bl	8009674 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800966a:	69bb      	ldr	r3, [r7, #24]
	}
 800966c:	4618      	mov	r0, r3
 800966e:	3720      	adds	r7, #32
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d103      	bne.n	8009690 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	69ba      	ldr	r2, [r7, #24]
 800968c:	601a      	str	r2, [r3, #0]
 800968e:	e002      	b.n	8009696 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80096a2:	2101      	movs	r1, #1
 80096a4:	69b8      	ldr	r0, [r7, #24]
 80096a6:	f7ff fec3 	bl	8009430 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	78fa      	ldrb	r2, [r7, #3]
 80096ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80096b2:	bf00      	nop
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
	...

080096bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08e      	sub	sp, #56	@ 0x38
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096ca:	2300      	movs	r3, #0
 80096cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80096d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10b      	bne.n	80096f0 <xQueueGenericSend+0x34>
	__asm volatile
 80096d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096dc:	f383 8811 	msr	BASEPRI, r3
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80096ea:	bf00      	nop
 80096ec:	bf00      	nop
 80096ee:	e7fd      	b.n	80096ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d103      	bne.n	80096fe <xQueueGenericSend+0x42>
 80096f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <xQueueGenericSend+0x46>
 80096fe:	2301      	movs	r3, #1
 8009700:	e000      	b.n	8009704 <xQueueGenericSend+0x48>
 8009702:	2300      	movs	r3, #0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10b      	bne.n	8009720 <xQueueGenericSend+0x64>
	__asm volatile
 8009708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800971a:	bf00      	nop
 800971c:	bf00      	nop
 800971e:	e7fd      	b.n	800971c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b02      	cmp	r3, #2
 8009724:	d103      	bne.n	800972e <xQueueGenericSend+0x72>
 8009726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800972a:	2b01      	cmp	r3, #1
 800972c:	d101      	bne.n	8009732 <xQueueGenericSend+0x76>
 800972e:	2301      	movs	r3, #1
 8009730:	e000      	b.n	8009734 <xQueueGenericSend+0x78>
 8009732:	2300      	movs	r3, #0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10b      	bne.n	8009750 <xQueueGenericSend+0x94>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	623b      	str	r3, [r7, #32]
}
 800974a:	bf00      	nop
 800974c:	bf00      	nop
 800974e:	e7fd      	b.n	800974c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009750:	f001 fa50 	bl	800abf4 <xTaskGetSchedulerState>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d102      	bne.n	8009760 <xQueueGenericSend+0xa4>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d101      	bne.n	8009764 <xQueueGenericSend+0xa8>
 8009760:	2301      	movs	r3, #1
 8009762:	e000      	b.n	8009766 <xQueueGenericSend+0xaa>
 8009764:	2300      	movs	r3, #0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10b      	bne.n	8009782 <xQueueGenericSend+0xc6>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	61fb      	str	r3, [r7, #28]
}
 800977c:	bf00      	nop
 800977e:	bf00      	nop
 8009780:	e7fd      	b.n	800977e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009782:	f002 f861 	bl	800b848 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800978a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800978e:	429a      	cmp	r2, r3
 8009790:	d302      	bcc.n	8009798 <xQueueGenericSend+0xdc>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b02      	cmp	r3, #2
 8009796:	d129      	bne.n	80097ec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	68b9      	ldr	r1, [r7, #8]
 800979c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800979e:	f000 fa91 	bl	8009cc4 <prvCopyDataToQueue>
 80097a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d010      	beq.n	80097ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	3324      	adds	r3, #36	@ 0x24
 80097b0:	4618      	mov	r0, r3
 80097b2:	f001 f85f 	bl	800a874 <xTaskRemoveFromEventList>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d013      	beq.n	80097e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80097bc:	4b3f      	ldr	r3, [pc, #252]	@ (80098bc <xQueueGenericSend+0x200>)
 80097be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	e00a      	b.n	80097e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80097ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d007      	beq.n	80097e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80097d4:	4b39      	ldr	r3, [pc, #228]	@ (80098bc <xQueueGenericSend+0x200>)
 80097d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097da:	601a      	str	r2, [r3, #0]
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80097e4:	f002 f862 	bl	800b8ac <vPortExitCritical>
				return pdPASS;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e063      	b.n	80098b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d103      	bne.n	80097fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097f2:	f002 f85b 	bl	800b8ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80097f6:	2300      	movs	r3, #0
 80097f8:	e05c      	b.n	80098b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d106      	bne.n	800980e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009800:	f107 0314 	add.w	r3, r7, #20
 8009804:	4618      	mov	r0, r3
 8009806:	f001 f899 	bl	800a93c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800980a:	2301      	movs	r3, #1
 800980c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800980e:	f002 f84d 	bl	800b8ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009812:	f000 fe09 	bl	800a428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009816:	f002 f817 	bl	800b848 <vPortEnterCritical>
 800981a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009820:	b25b      	sxtb	r3, r3
 8009822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009826:	d103      	bne.n	8009830 <xQueueGenericSend+0x174>
 8009828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982a:	2200      	movs	r2, #0
 800982c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009832:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009836:	b25b      	sxtb	r3, r3
 8009838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983c:	d103      	bne.n	8009846 <xQueueGenericSend+0x18a>
 800983e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009846:	f002 f831 	bl	800b8ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800984a:	1d3a      	adds	r2, r7, #4
 800984c:	f107 0314 	add.w	r3, r7, #20
 8009850:	4611      	mov	r1, r2
 8009852:	4618      	mov	r0, r3
 8009854:	f001 f888 	bl	800a968 <xTaskCheckForTimeOut>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d124      	bne.n	80098a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800985e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009860:	f000 fb28 	bl	8009eb4 <prvIsQueueFull>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d018      	beq.n	800989c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800986a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986c:	3310      	adds	r3, #16
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	4611      	mov	r1, r2
 8009872:	4618      	mov	r0, r3
 8009874:	f000 ffac 	bl	800a7d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009878:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800987a:	f000 fab3 	bl	8009de4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800987e:	f000 fde1 	bl	800a444 <xTaskResumeAll>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	f47f af7c 	bne.w	8009782 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800988a:	4b0c      	ldr	r3, [pc, #48]	@ (80098bc <xQueueGenericSend+0x200>)
 800988c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009890:	601a      	str	r2, [r3, #0]
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	e772      	b.n	8009782 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800989c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800989e:	f000 faa1 	bl	8009de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098a2:	f000 fdcf 	bl	800a444 <xTaskResumeAll>
 80098a6:	e76c      	b.n	8009782 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80098a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80098aa:	f000 fa9b 	bl	8009de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098ae:	f000 fdc9 	bl	800a444 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80098b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3738      	adds	r7, #56	@ 0x38
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	e000ed04 	.word	0xe000ed04

080098c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b090      	sub	sp, #64	@ 0x40
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	607a      	str	r2, [r7, #4]
 80098cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80098d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10b      	bne.n	80098f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80098d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80098ea:	bf00      	nop
 80098ec:	bf00      	nop
 80098ee:	e7fd      	b.n	80098ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d103      	bne.n	80098fe <xQueueGenericSendFromISR+0x3e>
 80098f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d101      	bne.n	8009902 <xQueueGenericSendFromISR+0x42>
 80098fe:	2301      	movs	r3, #1
 8009900:	e000      	b.n	8009904 <xQueueGenericSendFromISR+0x44>
 8009902:	2300      	movs	r3, #0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10b      	bne.n	8009920 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800991a:	bf00      	nop
 800991c:	bf00      	nop
 800991e:	e7fd      	b.n	800991c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	2b02      	cmp	r3, #2
 8009924:	d103      	bne.n	800992e <xQueueGenericSendFromISR+0x6e>
 8009926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800992a:	2b01      	cmp	r3, #1
 800992c:	d101      	bne.n	8009932 <xQueueGenericSendFromISR+0x72>
 800992e:	2301      	movs	r3, #1
 8009930:	e000      	b.n	8009934 <xQueueGenericSendFromISR+0x74>
 8009932:	2300      	movs	r3, #0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10b      	bne.n	8009950 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	623b      	str	r3, [r7, #32]
}
 800994a:	bf00      	nop
 800994c:	bf00      	nop
 800994e:	e7fd      	b.n	800994c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009950:	f002 f85a 	bl	800ba08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009954:	f3ef 8211 	mrs	r2, BASEPRI
 8009958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	61fa      	str	r2, [r7, #28]
 800996a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800996c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800996e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009972:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009978:	429a      	cmp	r2, r3
 800997a:	d302      	bcc.n	8009982 <xQueueGenericSendFromISR+0xc2>
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2b02      	cmp	r3, #2
 8009980:	d12f      	bne.n	80099e2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009984:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009988:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800998c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009990:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	68b9      	ldr	r1, [r7, #8]
 8009996:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009998:	f000 f994 	bl	8009cc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800999c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80099a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a4:	d112      	bne.n	80099cc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d016      	beq.n	80099dc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b0:	3324      	adds	r3, #36	@ 0x24
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 ff5e 	bl	800a874 <xTaskRemoveFromEventList>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00e      	beq.n	80099dc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00b      	beq.n	80099dc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	e007      	b.n	80099dc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80099cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80099d0:	3301      	adds	r3, #1
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	b25a      	sxtb	r2, r3
 80099d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80099dc:	2301      	movs	r3, #1
 80099de:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80099e0:	e001      	b.n	80099e6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099e2:	2300      	movs	r3, #0
 80099e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80099f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3740      	adds	r7, #64	@ 0x40
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08c      	sub	sp, #48	@ 0x30
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10b      	bne.n	8009a2e <xQueueReceive+0x32>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	623b      	str	r3, [r7, #32]
}
 8009a28:	bf00      	nop
 8009a2a:	bf00      	nop
 8009a2c:	e7fd      	b.n	8009a2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d103      	bne.n	8009a3c <xQueueReceive+0x40>
 8009a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d101      	bne.n	8009a40 <xQueueReceive+0x44>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e000      	b.n	8009a42 <xQueueReceive+0x46>
 8009a40:	2300      	movs	r3, #0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10b      	bne.n	8009a5e <xQueueReceive+0x62>
	__asm volatile
 8009a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	61fb      	str	r3, [r7, #28]
}
 8009a58:	bf00      	nop
 8009a5a:	bf00      	nop
 8009a5c:	e7fd      	b.n	8009a5a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a5e:	f001 f8c9 	bl	800abf4 <xTaskGetSchedulerState>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d102      	bne.n	8009a6e <xQueueReceive+0x72>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d101      	bne.n	8009a72 <xQueueReceive+0x76>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e000      	b.n	8009a74 <xQueueReceive+0x78>
 8009a72:	2300      	movs	r3, #0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10b      	bne.n	8009a90 <xQueueReceive+0x94>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	61bb      	str	r3, [r7, #24]
}
 8009a8a:	bf00      	nop
 8009a8c:	bf00      	nop
 8009a8e:	e7fd      	b.n	8009a8c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a90:	f001 feda 	bl	800b848 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a98:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d01f      	beq.n	8009ae0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009aa0:	68b9      	ldr	r1, [r7, #8]
 8009aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009aa4:	f000 f978 	bl	8009d98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aaa:	1e5a      	subs	r2, r3, #1
 8009aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00f      	beq.n	8009ad8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aba:	3310      	adds	r3, #16
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 fed9 	bl	800a874 <xTaskRemoveFromEventList>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d007      	beq.n	8009ad8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ac8:	4b3c      	ldr	r3, [pc, #240]	@ (8009bbc <xQueueReceive+0x1c0>)
 8009aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ad8:	f001 fee8 	bl	800b8ac <vPortExitCritical>
				return pdPASS;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e069      	b.n	8009bb4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d103      	bne.n	8009aee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ae6:	f001 fee1 	bl	800b8ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009aea:	2300      	movs	r3, #0
 8009aec:	e062      	b.n	8009bb4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d106      	bne.n	8009b02 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009af4:	f107 0310 	add.w	r3, r7, #16
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 ff1f 	bl	800a93c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009afe:	2301      	movs	r3, #1
 8009b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b02:	f001 fed3 	bl	800b8ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b06:	f000 fc8f 	bl	800a428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b0a:	f001 fe9d 	bl	800b848 <vPortEnterCritical>
 8009b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b14:	b25b      	sxtb	r3, r3
 8009b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1a:	d103      	bne.n	8009b24 <xQueueReceive+0x128>
 8009b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b2a:	b25b      	sxtb	r3, r3
 8009b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b30:	d103      	bne.n	8009b3a <xQueueReceive+0x13e>
 8009b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b34:	2200      	movs	r2, #0
 8009b36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b3a:	f001 feb7 	bl	800b8ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b3e:	1d3a      	adds	r2, r7, #4
 8009b40:	f107 0310 	add.w	r3, r7, #16
 8009b44:	4611      	mov	r1, r2
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 ff0e 	bl	800a968 <xTaskCheckForTimeOut>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d123      	bne.n	8009b9a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b54:	f000 f998 	bl	8009e88 <prvIsQueueEmpty>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d017      	beq.n	8009b8e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b60:	3324      	adds	r3, #36	@ 0x24
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	4611      	mov	r1, r2
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 fe32 	bl	800a7d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b6e:	f000 f939 	bl	8009de4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b72:	f000 fc67 	bl	800a444 <xTaskResumeAll>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d189      	bne.n	8009a90 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8009bbc <xQueueReceive+0x1c0>)
 8009b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	e780      	b.n	8009a90 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b90:	f000 f928 	bl	8009de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b94:	f000 fc56 	bl	800a444 <xTaskResumeAll>
 8009b98:	e77a      	b.n	8009a90 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b9c:	f000 f922 	bl	8009de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ba0:	f000 fc50 	bl	800a444 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ba4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ba6:	f000 f96f 	bl	8009e88 <prvIsQueueEmpty>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f43f af6f 	beq.w	8009a90 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009bb2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3730      	adds	r7, #48	@ 0x30
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	e000ed04 	.word	0xe000ed04

08009bc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08e      	sub	sp, #56	@ 0x38
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10b      	bne.n	8009bee <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	623b      	str	r3, [r7, #32]
}
 8009be8:	bf00      	nop
 8009bea:	bf00      	nop
 8009bec:	e7fd      	b.n	8009bea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d103      	bne.n	8009bfc <xQueueReceiveFromISR+0x3c>
 8009bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <xQueueReceiveFromISR+0x40>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e000      	b.n	8009c02 <xQueueReceiveFromISR+0x42>
 8009c00:	2300      	movs	r3, #0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10b      	bne.n	8009c1e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	61fb      	str	r3, [r7, #28]
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	e7fd      	b.n	8009c1a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c1e:	f001 fef3 	bl	800ba08 <vPortValidateInterruptPriority>
	__asm volatile
 8009c22:	f3ef 8211 	mrs	r2, BASEPRI
 8009c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c2a:	f383 8811 	msr	BASEPRI, r3
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f3bf 8f4f 	dsb	sy
 8009c36:	61ba      	str	r2, [r7, #24]
 8009c38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009c3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c42:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d02f      	beq.n	8009caa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c54:	68b9      	ldr	r1, [r7, #8]
 8009c56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c58:	f000 f89e 	bl	8009d98 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5e:	1e5a      	subs	r2, r3, #1
 8009c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c62:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009c64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6c:	d112      	bne.n	8009c94 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d016      	beq.n	8009ca4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c78:	3310      	adds	r3, #16
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 fdfa 	bl	800a874 <xTaskRemoveFromEventList>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00e      	beq.n	8009ca4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00b      	beq.n	8009ca4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	e007      	b.n	8009ca4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c98:	3301      	adds	r3, #1
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	b25a      	sxtb	r2, r3
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca8:	e001      	b.n	8009cae <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009caa:	2300      	movs	r3, #0
 8009cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	f383 8811 	msr	BASEPRI, r3
}
 8009cb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3738      	adds	r7, #56	@ 0x38
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10d      	bne.n	8009cfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d14d      	bne.n	8009d86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 ff9e 	bl	800ac30 <xTaskPriorityDisinherit>
 8009cf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	609a      	str	r2, [r3, #8]
 8009cfc:	e043      	b.n	8009d86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d119      	bne.n	8009d38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6858      	ldr	r0, [r3, #4]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	68b9      	ldr	r1, [r7, #8]
 8009d10:	f002 fcb0 	bl	800c674 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	685a      	ldr	r2, [r3, #4]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d1c:	441a      	add	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	685a      	ldr	r2, [r3, #4]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d32b      	bcc.n	8009d86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	605a      	str	r2, [r3, #4]
 8009d36:	e026      	b.n	8009d86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	68d8      	ldr	r0, [r3, #12]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d40:	461a      	mov	r2, r3
 8009d42:	68b9      	ldr	r1, [r7, #8]
 8009d44:	f002 fc96 	bl	800c674 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d50:	425b      	negs	r3, r3
 8009d52:	441a      	add	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	68da      	ldr	r2, [r3, #12]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d207      	bcs.n	8009d74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	689a      	ldr	r2, [r3, #8]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d6c:	425b      	negs	r3, r3
 8009d6e:	441a      	add	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d105      	bne.n	8009d86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	3b01      	subs	r3, #1
 8009d84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009d8e:	697b      	ldr	r3, [r7, #20]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d018      	beq.n	8009ddc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009db2:	441a      	add	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	68da      	ldr	r2, [r3, #12]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d303      	bcc.n	8009dcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	68d9      	ldr	r1, [r3, #12]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	6838      	ldr	r0, [r7, #0]
 8009dd8:	f002 fc4c 	bl	800c674 <memcpy>
	}
}
 8009ddc:	bf00      	nop
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009dec:	f001 fd2c 	bl	800b848 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009df6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009df8:	e011      	b.n	8009e1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d012      	beq.n	8009e28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	3324      	adds	r3, #36	@ 0x24
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 fd34 	bl	800a874 <xTaskRemoveFromEventList>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e12:	f000 fe0d 	bl	800aa30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	dce9      	bgt.n	8009dfa <prvUnlockQueue+0x16>
 8009e26:	e000      	b.n	8009e2a <prvUnlockQueue+0x46>
					break;
 8009e28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	22ff      	movs	r2, #255	@ 0xff
 8009e2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009e32:	f001 fd3b 	bl	800b8ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e36:	f001 fd07 	bl	800b848 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e42:	e011      	b.n	8009e68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d012      	beq.n	8009e72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	3310      	adds	r3, #16
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 fd0f 	bl	800a874 <xTaskRemoveFromEventList>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d001      	beq.n	8009e60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e5c:	f000 fde8 	bl	800aa30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e60:	7bbb      	ldrb	r3, [r7, #14]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	dce9      	bgt.n	8009e44 <prvUnlockQueue+0x60>
 8009e70:	e000      	b.n	8009e74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	22ff      	movs	r2, #255	@ 0xff
 8009e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009e7c:	f001 fd16 	bl	800b8ac <vPortExitCritical>
}
 8009e80:	bf00      	nop
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e90:	f001 fcda 	bl	800b848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d102      	bne.n	8009ea2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	60fb      	str	r3, [r7, #12]
 8009ea0:	e001      	b.n	8009ea6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ea6:	f001 fd01 	bl	800b8ac <vPortExitCritical>

	return xReturn;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ebc:	f001 fcc4 	bl	800b848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d102      	bne.n	8009ed2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	60fb      	str	r3, [r7, #12]
 8009ed0:	e001      	b.n	8009ed6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ed6:	f001 fce9 	bl	800b8ac <vPortExitCritical>

	return xReturn;
 8009eda:	68fb      	ldr	r3, [r7, #12]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009eee:	2300      	movs	r3, #0
 8009ef0:	60fb      	str	r3, [r7, #12]
 8009ef2:	e014      	b.n	8009f1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ef4:	4a0f      	ldr	r2, [pc, #60]	@ (8009f34 <vQueueAddToRegistry+0x50>)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10b      	bne.n	8009f18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009f00:	490c      	ldr	r1, [pc, #48]	@ (8009f34 <vQueueAddToRegistry+0x50>)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8009f34 <vQueueAddToRegistry+0x50>)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	00db      	lsls	r3, r3, #3
 8009f10:	4413      	add	r3, r2
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f16:	e006      	b.n	8009f26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	60fb      	str	r3, [r7, #12]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2b07      	cmp	r3, #7
 8009f22:	d9e7      	bls.n	8009ef4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f24:	bf00      	nop
 8009f26:	bf00      	nop
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	200008d8 	.word	0x200008d8

08009f38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f48:	f001 fc7e 	bl	800b848 <vPortEnterCritical>
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f52:	b25b      	sxtb	r3, r3
 8009f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f58:	d103      	bne.n	8009f62 <vQueueWaitForMessageRestricted+0x2a>
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f68:	b25b      	sxtb	r3, r3
 8009f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6e:	d103      	bne.n	8009f78 <vQueueWaitForMessageRestricted+0x40>
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f78:	f001 fc98 	bl	800b8ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d106      	bne.n	8009f92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	3324      	adds	r3, #36	@ 0x24
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	68b9      	ldr	r1, [r7, #8]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f000 fc45 	bl	800a81c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009f92:	6978      	ldr	r0, [r7, #20]
 8009f94:	f7ff ff26 	bl	8009de4 <prvUnlockQueue>
	}
 8009f98:	bf00      	nop
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b08e      	sub	sp, #56	@ 0x38
 8009fa4:	af04      	add	r7, sp, #16
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
 8009fac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10b      	bne.n	8009fcc <xTaskCreateStatic+0x2c>
	__asm volatile
 8009fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	623b      	str	r3, [r7, #32]
}
 8009fc6:	bf00      	nop
 8009fc8:	bf00      	nop
 8009fca:	e7fd      	b.n	8009fc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10b      	bne.n	8009fea <xTaskCreateStatic+0x4a>
	__asm volatile
 8009fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd6:	f383 8811 	msr	BASEPRI, r3
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	61fb      	str	r3, [r7, #28]
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop
 8009fe8:	e7fd      	b.n	8009fe6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009fea:	235c      	movs	r3, #92	@ 0x5c
 8009fec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	2b5c      	cmp	r3, #92	@ 0x5c
 8009ff2:	d00b      	beq.n	800a00c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	61bb      	str	r3, [r7, #24]
}
 800a006:	bf00      	nop
 800a008:	bf00      	nop
 800a00a:	e7fd      	b.n	800a008 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a00c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a010:	2b00      	cmp	r3, #0
 800a012:	d01e      	beq.n	800a052 <xTaskCreateStatic+0xb2>
 800a014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a016:	2b00      	cmp	r3, #0
 800a018:	d01b      	beq.n	800a052 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a020:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a022:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a026:	2202      	movs	r2, #2
 800a028:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a02c:	2300      	movs	r3, #0
 800a02e:	9303      	str	r3, [sp, #12]
 800a030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a032:	9302      	str	r3, [sp, #8]
 800a034:	f107 0314 	add.w	r3, r7, #20
 800a038:	9301      	str	r3, [sp, #4]
 800a03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	68b9      	ldr	r1, [r7, #8]
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f000 f850 	bl	800a0ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a04a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a04c:	f000 f8de 	bl	800a20c <prvAddNewTaskToReadyList>
 800a050:	e001      	b.n	800a056 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a056:	697b      	ldr	r3, [r7, #20]
	}
 800a058:	4618      	mov	r0, r3
 800a05a:	3728      	adds	r7, #40	@ 0x28
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a060:	b580      	push	{r7, lr}
 800a062:	b08c      	sub	sp, #48	@ 0x30
 800a064:	af04      	add	r7, sp, #16
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	603b      	str	r3, [r7, #0]
 800a06c:	4613      	mov	r3, r2
 800a06e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a070:	88fb      	ldrh	r3, [r7, #6]
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4618      	mov	r0, r3
 800a076:	f001 fd09 	bl	800ba8c <pvPortMalloc>
 800a07a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00e      	beq.n	800a0a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a082:	205c      	movs	r0, #92	@ 0x5c
 800a084:	f001 fd02 	bl	800ba8c <pvPortMalloc>
 800a088:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d003      	beq.n	800a098 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	631a      	str	r2, [r3, #48]	@ 0x30
 800a096:	e005      	b.n	800a0a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a098:	6978      	ldr	r0, [r7, #20]
 800a09a:	f001 fdc5 	bl	800bc28 <vPortFree>
 800a09e:	e001      	b.n	800a0a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d017      	beq.n	800a0da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0b2:	88fa      	ldrh	r2, [r7, #6]
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	9303      	str	r3, [sp, #12]
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	9302      	str	r3, [sp, #8]
 800a0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0be:	9301      	str	r3, [sp, #4]
 800a0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	68b9      	ldr	r1, [r7, #8]
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f000 f80e 	bl	800a0ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0ce:	69f8      	ldr	r0, [r7, #28]
 800a0d0:	f000 f89c 	bl	800a20c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	61bb      	str	r3, [r7, #24]
 800a0d8:	e002      	b.n	800a0e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0da:	f04f 33ff 	mov.w	r3, #4294967295
 800a0de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0e0:	69bb      	ldr	r3, [r7, #24]
	}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3720      	adds	r7, #32
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b088      	sub	sp, #32
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	60f8      	str	r0, [r7, #12]
 800a0f2:	60b9      	str	r1, [r7, #8]
 800a0f4:	607a      	str	r2, [r7, #4]
 800a0f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	461a      	mov	r2, r3
 800a102:	21a5      	movs	r1, #165	@ 0xa5
 800a104:	f002 fa72 	bl	800c5ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a112:	3b01      	subs	r3, #1
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	f023 0307 	bic.w	r3, r3, #7
 800a120:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	f003 0307 	and.w	r3, r3, #7
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00b      	beq.n	800a144 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	617b      	str	r3, [r7, #20]
}
 800a13e:	bf00      	nop
 800a140:	bf00      	nop
 800a142:	e7fd      	b.n	800a140 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d01f      	beq.n	800a18a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a14a:	2300      	movs	r3, #0
 800a14c:	61fb      	str	r3, [r7, #28]
 800a14e:	e012      	b.n	800a176 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a150:	68ba      	ldr	r2, [r7, #8]
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	4413      	add	r3, r2
 800a156:	7819      	ldrb	r1, [r3, #0]
 800a158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	4413      	add	r3, r2
 800a15e:	3334      	adds	r3, #52	@ 0x34
 800a160:	460a      	mov	r2, r1
 800a162:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	4413      	add	r3, r2
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d006      	beq.n	800a17e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	3301      	adds	r3, #1
 800a174:	61fb      	str	r3, [r7, #28]
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	2b0f      	cmp	r3, #15
 800a17a:	d9e9      	bls.n	800a150 <prvInitialiseNewTask+0x66>
 800a17c:	e000      	b.n	800a180 <prvInitialiseNewTask+0x96>
			{
				break;
 800a17e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a182:	2200      	movs	r2, #0
 800a184:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a188:	e003      	b.n	800a192 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a194:	2b37      	cmp	r3, #55	@ 0x37
 800a196:	d901      	bls.n	800a19c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a198:	2337      	movs	r3, #55	@ 0x37
 800a19a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7ff f8a8 	bl	8009308 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ba:	3318      	adds	r3, #24
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7ff f8a3 	bl	8009308 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1d6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1da:	2200      	movs	r2, #0
 800a1dc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	68f9      	ldr	r1, [r7, #12]
 800a1ea:	69b8      	ldr	r0, [r7, #24]
 800a1ec:	f001 f9fe 	bl	800b5ec <pxPortInitialiseStack>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d002      	beq.n	800a202 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a200:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a202:	bf00      	nop
 800a204:	3720      	adds	r7, #32
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
	...

0800a20c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a214:	f001 fb18 	bl	800b848 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a218:	4b2d      	ldr	r3, [pc, #180]	@ (800a2d0 <prvAddNewTaskToReadyList+0xc4>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	3301      	adds	r3, #1
 800a21e:	4a2c      	ldr	r2, [pc, #176]	@ (800a2d0 <prvAddNewTaskToReadyList+0xc4>)
 800a220:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a222:	4b2c      	ldr	r3, [pc, #176]	@ (800a2d4 <prvAddNewTaskToReadyList+0xc8>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d109      	bne.n	800a23e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a22a:	4a2a      	ldr	r2, [pc, #168]	@ (800a2d4 <prvAddNewTaskToReadyList+0xc8>)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a230:	4b27      	ldr	r3, [pc, #156]	@ (800a2d0 <prvAddNewTaskToReadyList+0xc4>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d110      	bne.n	800a25a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a238:	f000 fc1e 	bl	800aa78 <prvInitialiseTaskLists>
 800a23c:	e00d      	b.n	800a25a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a23e:	4b26      	ldr	r3, [pc, #152]	@ (800a2d8 <prvAddNewTaskToReadyList+0xcc>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d109      	bne.n	800a25a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a246:	4b23      	ldr	r3, [pc, #140]	@ (800a2d4 <prvAddNewTaskToReadyList+0xc8>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a250:	429a      	cmp	r2, r3
 800a252:	d802      	bhi.n	800a25a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a254:	4a1f      	ldr	r2, [pc, #124]	@ (800a2d4 <prvAddNewTaskToReadyList+0xc8>)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a25a:	4b20      	ldr	r3, [pc, #128]	@ (800a2dc <prvAddNewTaskToReadyList+0xd0>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3301      	adds	r3, #1
 800a260:	4a1e      	ldr	r2, [pc, #120]	@ (800a2dc <prvAddNewTaskToReadyList+0xd0>)
 800a262:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a264:	4b1d      	ldr	r3, [pc, #116]	@ (800a2dc <prvAddNewTaskToReadyList+0xd0>)
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a270:	4b1b      	ldr	r3, [pc, #108]	@ (800a2e0 <prvAddNewTaskToReadyList+0xd4>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	429a      	cmp	r2, r3
 800a276:	d903      	bls.n	800a280 <prvAddNewTaskToReadyList+0x74>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a27c:	4a18      	ldr	r2, [pc, #96]	@ (800a2e0 <prvAddNewTaskToReadyList+0xd4>)
 800a27e:	6013      	str	r3, [r2, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a284:	4613      	mov	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4413      	add	r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4a15      	ldr	r2, [pc, #84]	@ (800a2e4 <prvAddNewTaskToReadyList+0xd8>)
 800a28e:	441a      	add	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	3304      	adds	r3, #4
 800a294:	4619      	mov	r1, r3
 800a296:	4610      	mov	r0, r2
 800a298:	f7ff f843 	bl	8009322 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a29c:	f001 fb06 	bl	800b8ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2a0:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d8 <prvAddNewTaskToReadyList+0xcc>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00e      	beq.n	800a2c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2a8:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d4 <prvAddNewTaskToReadyList+0xc8>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d207      	bcs.n	800a2c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a2e8 <prvAddNewTaskToReadyList+0xdc>)
 800a2b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2bc:	601a      	str	r2, [r3, #0]
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2c6:	bf00      	nop
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20000dec 	.word	0x20000dec
 800a2d4:	20000918 	.word	0x20000918
 800a2d8:	20000df8 	.word	0x20000df8
 800a2dc:	20000e08 	.word	0x20000e08
 800a2e0:	20000df4 	.word	0x20000df4
 800a2e4:	2000091c 	.word	0x2000091c
 800a2e8:	e000ed04 	.word	0xe000ed04

0800a2ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d018      	beq.n	800a330 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a2fe:	4b14      	ldr	r3, [pc, #80]	@ (800a350 <vTaskDelay+0x64>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00b      	beq.n	800a31e <vTaskDelay+0x32>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	60bb      	str	r3, [r7, #8]
}
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	e7fd      	b.n	800a31a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a31e:	f000 f883 	bl	800a428 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a322:	2100      	movs	r1, #0
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 fcf3 	bl	800ad10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a32a:	f000 f88b 	bl	800a444 <xTaskResumeAll>
 800a32e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d107      	bne.n	800a346 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a336:	4b07      	ldr	r3, [pc, #28]	@ (800a354 <vTaskDelay+0x68>)
 800a338:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a33c:	601a      	str	r2, [r3, #0]
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a346:	bf00      	nop
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	20000e14 	.word	0x20000e14
 800a354:	e000ed04 	.word	0xe000ed04

0800a358 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08a      	sub	sp, #40	@ 0x28
 800a35c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a35e:	2300      	movs	r3, #0
 800a360:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a362:	2300      	movs	r3, #0
 800a364:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a366:	463a      	mov	r2, r7
 800a368:	1d39      	adds	r1, r7, #4
 800a36a:	f107 0308 	add.w	r3, r7, #8
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fe ff76 	bl	8009260 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	9202      	str	r2, [sp, #8]
 800a37c:	9301      	str	r3, [sp, #4]
 800a37e:	2300      	movs	r3, #0
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	2300      	movs	r3, #0
 800a384:	460a      	mov	r2, r1
 800a386:	4922      	ldr	r1, [pc, #136]	@ (800a410 <vTaskStartScheduler+0xb8>)
 800a388:	4822      	ldr	r0, [pc, #136]	@ (800a414 <vTaskStartScheduler+0xbc>)
 800a38a:	f7ff fe09 	bl	8009fa0 <xTaskCreateStatic>
 800a38e:	4603      	mov	r3, r0
 800a390:	4a21      	ldr	r2, [pc, #132]	@ (800a418 <vTaskStartScheduler+0xc0>)
 800a392:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a394:	4b20      	ldr	r3, [pc, #128]	@ (800a418 <vTaskStartScheduler+0xc0>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a39c:	2301      	movs	r3, #1
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	e001      	b.n	800a3a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d102      	bne.n	800a3b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a3ac:	f000 fd04 	bl	800adb8 <xTimerCreateTimerTask>
 800a3b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d116      	bne.n	800a3e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3bc:	f383 8811 	msr	BASEPRI, r3
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	613b      	str	r3, [r7, #16]
}
 800a3ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a3cc:	4b13      	ldr	r3, [pc, #76]	@ (800a41c <vTaskStartScheduler+0xc4>)
 800a3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a3d4:	4b12      	ldr	r3, [pc, #72]	@ (800a420 <vTaskStartScheduler+0xc8>)
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a3da:	4b12      	ldr	r3, [pc, #72]	@ (800a424 <vTaskStartScheduler+0xcc>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a3e0:	f001 f98e 	bl	800b700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a3e4:	e00f      	b.n	800a406 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ec:	d10b      	bne.n	800a406 <vTaskStartScheduler+0xae>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	60fb      	str	r3, [r7, #12]
}
 800a400:	bf00      	nop
 800a402:	bf00      	nop
 800a404:	e7fd      	b.n	800a402 <vTaskStartScheduler+0xaa>
}
 800a406:	bf00      	nop
 800a408:	3718      	adds	r7, #24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	0800c794 	.word	0x0800c794
 800a414:	0800aa49 	.word	0x0800aa49
 800a418:	20000e10 	.word	0x20000e10
 800a41c:	20000e0c 	.word	0x20000e0c
 800a420:	20000df8 	.word	0x20000df8
 800a424:	20000df0 	.word	0x20000df0

0800a428 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a428:	b480      	push	{r7}
 800a42a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a42c:	4b04      	ldr	r3, [pc, #16]	@ (800a440 <vTaskSuspendAll+0x18>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	3301      	adds	r3, #1
 800a432:	4a03      	ldr	r2, [pc, #12]	@ (800a440 <vTaskSuspendAll+0x18>)
 800a434:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a436:	bf00      	nop
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	20000e14 	.word	0x20000e14

0800a444 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a44a:	2300      	movs	r3, #0
 800a44c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a44e:	2300      	movs	r3, #0
 800a450:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a452:	4b42      	ldr	r3, [pc, #264]	@ (800a55c <xTaskResumeAll+0x118>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10b      	bne.n	800a472 <xTaskResumeAll+0x2e>
	__asm volatile
 800a45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45e:	f383 8811 	msr	BASEPRI, r3
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	603b      	str	r3, [r7, #0]
}
 800a46c:	bf00      	nop
 800a46e:	bf00      	nop
 800a470:	e7fd      	b.n	800a46e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a472:	f001 f9e9 	bl	800b848 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a476:	4b39      	ldr	r3, [pc, #228]	@ (800a55c <xTaskResumeAll+0x118>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	3b01      	subs	r3, #1
 800a47c:	4a37      	ldr	r2, [pc, #220]	@ (800a55c <xTaskResumeAll+0x118>)
 800a47e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a480:	4b36      	ldr	r3, [pc, #216]	@ (800a55c <xTaskResumeAll+0x118>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d162      	bne.n	800a54e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a488:	4b35      	ldr	r3, [pc, #212]	@ (800a560 <xTaskResumeAll+0x11c>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d05e      	beq.n	800a54e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a490:	e02f      	b.n	800a4f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a492:	4b34      	ldr	r3, [pc, #208]	@ (800a564 <xTaskResumeAll+0x120>)
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3318      	adds	r3, #24
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe ff9c 	bl	80093dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fe ff97 	bl	80093dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4b2:	4b2d      	ldr	r3, [pc, #180]	@ (800a568 <xTaskResumeAll+0x124>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d903      	bls.n	800a4c2 <xTaskResumeAll+0x7e>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4be:	4a2a      	ldr	r2, [pc, #168]	@ (800a568 <xTaskResumeAll+0x124>)
 800a4c0:	6013      	str	r3, [r2, #0]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	4413      	add	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4a27      	ldr	r2, [pc, #156]	@ (800a56c <xTaskResumeAll+0x128>)
 800a4d0:	441a      	add	r2, r3
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	4610      	mov	r0, r2
 800a4da:	f7fe ff22 	bl	8009322 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4e2:	4b23      	ldr	r3, [pc, #140]	@ (800a570 <xTaskResumeAll+0x12c>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d302      	bcc.n	800a4f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a4ec:	4b21      	ldr	r3, [pc, #132]	@ (800a574 <xTaskResumeAll+0x130>)
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4f2:	4b1c      	ldr	r3, [pc, #112]	@ (800a564 <xTaskResumeAll+0x120>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1cb      	bne.n	800a492 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d001      	beq.n	800a504 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a500:	f000 fb58 	bl	800abb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a504:	4b1c      	ldr	r3, [pc, #112]	@ (800a578 <xTaskResumeAll+0x134>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d010      	beq.n	800a532 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a510:	f000 f846 	bl	800a5a0 <xTaskIncrementTick>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a51a:	4b16      	ldr	r3, [pc, #88]	@ (800a574 <xTaskResumeAll+0x130>)
 800a51c:	2201      	movs	r2, #1
 800a51e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	3b01      	subs	r3, #1
 800a524:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1f1      	bne.n	800a510 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a52c:	4b12      	ldr	r3, [pc, #72]	@ (800a578 <xTaskResumeAll+0x134>)
 800a52e:	2200      	movs	r2, #0
 800a530:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a532:	4b10      	ldr	r3, [pc, #64]	@ (800a574 <xTaskResumeAll+0x130>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d009      	beq.n	800a54e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a53a:	2301      	movs	r3, #1
 800a53c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a53e:	4b0f      	ldr	r3, [pc, #60]	@ (800a57c <xTaskResumeAll+0x138>)
 800a540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	f3bf 8f4f 	dsb	sy
 800a54a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a54e:	f001 f9ad 	bl	800b8ac <vPortExitCritical>

	return xAlreadyYielded;
 800a552:	68bb      	ldr	r3, [r7, #8]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	20000e14 	.word	0x20000e14
 800a560:	20000dec 	.word	0x20000dec
 800a564:	20000dac 	.word	0x20000dac
 800a568:	20000df4 	.word	0x20000df4
 800a56c:	2000091c 	.word	0x2000091c
 800a570:	20000918 	.word	0x20000918
 800a574:	20000e00 	.word	0x20000e00
 800a578:	20000dfc 	.word	0x20000dfc
 800a57c:	e000ed04 	.word	0xe000ed04

0800a580 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a586:	4b05      	ldr	r3, [pc, #20]	@ (800a59c <xTaskGetTickCount+0x1c>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a58c:	687b      	ldr	r3, [r7, #4]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	20000df0 	.word	0x20000df0

0800a5a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5aa:	4b4f      	ldr	r3, [pc, #316]	@ (800a6e8 <xTaskIncrementTick+0x148>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f040 8090 	bne.w	800a6d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a5b4:	4b4d      	ldr	r3, [pc, #308]	@ (800a6ec <xTaskIncrementTick+0x14c>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a5bc:	4a4b      	ldr	r2, [pc, #300]	@ (800a6ec <xTaskIncrementTick+0x14c>)
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d121      	bne.n	800a60c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a5c8:	4b49      	ldr	r3, [pc, #292]	@ (800a6f0 <xTaskIncrementTick+0x150>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00b      	beq.n	800a5ea <xTaskIncrementTick+0x4a>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	603b      	str	r3, [r7, #0]
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop
 800a5e8:	e7fd      	b.n	800a5e6 <xTaskIncrementTick+0x46>
 800a5ea:	4b41      	ldr	r3, [pc, #260]	@ (800a6f0 <xTaskIncrementTick+0x150>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	4b40      	ldr	r3, [pc, #256]	@ (800a6f4 <xTaskIncrementTick+0x154>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a3e      	ldr	r2, [pc, #248]	@ (800a6f0 <xTaskIncrementTick+0x150>)
 800a5f6:	6013      	str	r3, [r2, #0]
 800a5f8:	4a3e      	ldr	r2, [pc, #248]	@ (800a6f4 <xTaskIncrementTick+0x154>)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6013      	str	r3, [r2, #0]
 800a5fe:	4b3e      	ldr	r3, [pc, #248]	@ (800a6f8 <xTaskIncrementTick+0x158>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3301      	adds	r3, #1
 800a604:	4a3c      	ldr	r2, [pc, #240]	@ (800a6f8 <xTaskIncrementTick+0x158>)
 800a606:	6013      	str	r3, [r2, #0]
 800a608:	f000 fad4 	bl	800abb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a60c:	4b3b      	ldr	r3, [pc, #236]	@ (800a6fc <xTaskIncrementTick+0x15c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	429a      	cmp	r2, r3
 800a614:	d349      	bcc.n	800a6aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a616:	4b36      	ldr	r3, [pc, #216]	@ (800a6f0 <xTaskIncrementTick+0x150>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d104      	bne.n	800a62a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a620:	4b36      	ldr	r3, [pc, #216]	@ (800a6fc <xTaskIncrementTick+0x15c>)
 800a622:	f04f 32ff 	mov.w	r2, #4294967295
 800a626:	601a      	str	r2, [r3, #0]
					break;
 800a628:	e03f      	b.n	800a6aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a62a:	4b31      	ldr	r3, [pc, #196]	@ (800a6f0 <xTaskIncrementTick+0x150>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a63a:	693a      	ldr	r2, [r7, #16]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d203      	bcs.n	800a64a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a642:	4a2e      	ldr	r2, [pc, #184]	@ (800a6fc <xTaskIncrementTick+0x15c>)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a648:	e02f      	b.n	800a6aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	3304      	adds	r3, #4
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fe fec4 	bl	80093dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d004      	beq.n	800a666 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	3318      	adds	r3, #24
 800a660:	4618      	mov	r0, r3
 800a662:	f7fe febb 	bl	80093dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a66a:	4b25      	ldr	r3, [pc, #148]	@ (800a700 <xTaskIncrementTick+0x160>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d903      	bls.n	800a67a <xTaskIncrementTick+0xda>
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a676:	4a22      	ldr	r2, [pc, #136]	@ (800a700 <xTaskIncrementTick+0x160>)
 800a678:	6013      	str	r3, [r2, #0]
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a67e:	4613      	mov	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4a1f      	ldr	r2, [pc, #124]	@ (800a704 <xTaskIncrementTick+0x164>)
 800a688:	441a      	add	r2, r3
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	3304      	adds	r3, #4
 800a68e:	4619      	mov	r1, r3
 800a690:	4610      	mov	r0, r2
 800a692:	f7fe fe46 	bl	8009322 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a69a:	4b1b      	ldr	r3, [pc, #108]	@ (800a708 <xTaskIncrementTick+0x168>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d3b8      	bcc.n	800a616 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6a8:	e7b5      	b.n	800a616 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6aa:	4b17      	ldr	r3, [pc, #92]	@ (800a708 <xTaskIncrementTick+0x168>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b0:	4914      	ldr	r1, [pc, #80]	@ (800a704 <xTaskIncrementTick+0x164>)
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	440b      	add	r3, r1
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d901      	bls.n	800a6c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a6c6:	4b11      	ldr	r3, [pc, #68]	@ (800a70c <xTaskIncrementTick+0x16c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d007      	beq.n	800a6de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	617b      	str	r3, [r7, #20]
 800a6d2:	e004      	b.n	800a6de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a6d4:	4b0e      	ldr	r3, [pc, #56]	@ (800a710 <xTaskIncrementTick+0x170>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	4a0d      	ldr	r2, [pc, #52]	@ (800a710 <xTaskIncrementTick+0x170>)
 800a6dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a6de:	697b      	ldr	r3, [r7, #20]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	20000e14 	.word	0x20000e14
 800a6ec:	20000df0 	.word	0x20000df0
 800a6f0:	20000da4 	.word	0x20000da4
 800a6f4:	20000da8 	.word	0x20000da8
 800a6f8:	20000e04 	.word	0x20000e04
 800a6fc:	20000e0c 	.word	0x20000e0c
 800a700:	20000df4 	.word	0x20000df4
 800a704:	2000091c 	.word	0x2000091c
 800a708:	20000918 	.word	0x20000918
 800a70c:	20000e00 	.word	0x20000e00
 800a710:	20000dfc 	.word	0x20000dfc

0800a714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a71a:	4b28      	ldr	r3, [pc, #160]	@ (800a7bc <vTaskSwitchContext+0xa8>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a722:	4b27      	ldr	r3, [pc, #156]	@ (800a7c0 <vTaskSwitchContext+0xac>)
 800a724:	2201      	movs	r2, #1
 800a726:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a728:	e042      	b.n	800a7b0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a72a:	4b25      	ldr	r3, [pc, #148]	@ (800a7c0 <vTaskSwitchContext+0xac>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a730:	4b24      	ldr	r3, [pc, #144]	@ (800a7c4 <vTaskSwitchContext+0xb0>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	60fb      	str	r3, [r7, #12]
 800a736:	e011      	b.n	800a75c <vTaskSwitchContext+0x48>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10b      	bne.n	800a756 <vTaskSwitchContext+0x42>
	__asm volatile
 800a73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	607b      	str	r3, [r7, #4]
}
 800a750:	bf00      	nop
 800a752:	bf00      	nop
 800a754:	e7fd      	b.n	800a752 <vTaskSwitchContext+0x3e>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	3b01      	subs	r3, #1
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	491a      	ldr	r1, [pc, #104]	@ (800a7c8 <vTaskSwitchContext+0xb4>)
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	4613      	mov	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	440b      	add	r3, r1
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0e3      	beq.n	800a738 <vTaskSwitchContext+0x24>
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	4613      	mov	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4a13      	ldr	r2, [pc, #76]	@ (800a7c8 <vTaskSwitchContext+0xb4>)
 800a77c:	4413      	add	r3, r2
 800a77e:	60bb      	str	r3, [r7, #8]
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	685a      	ldr	r2, [r3, #4]
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	605a      	str	r2, [r3, #4]
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	3308      	adds	r3, #8
 800a792:	429a      	cmp	r2, r3
 800a794:	d104      	bne.n	800a7a0 <vTaskSwitchContext+0x8c>
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	605a      	str	r2, [r3, #4]
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	4a09      	ldr	r2, [pc, #36]	@ (800a7cc <vTaskSwitchContext+0xb8>)
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	4a06      	ldr	r2, [pc, #24]	@ (800a7c4 <vTaskSwitchContext+0xb0>)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6013      	str	r3, [r2, #0]
}
 800a7b0:	bf00      	nop
 800a7b2:	3714      	adds	r7, #20
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	20000e14 	.word	0x20000e14
 800a7c0:	20000e00 	.word	0x20000e00
 800a7c4:	20000df4 	.word	0x20000df4
 800a7c8:	2000091c 	.word	0x2000091c
 800a7cc:	20000918 	.word	0x20000918

0800a7d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10b      	bne.n	800a7f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	60fb      	str	r3, [r7, #12]
}
 800a7f2:	bf00      	nop
 800a7f4:	bf00      	nop
 800a7f6:	e7fd      	b.n	800a7f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7f8:	4b07      	ldr	r3, [pc, #28]	@ (800a818 <vTaskPlaceOnEventList+0x48>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3318      	adds	r3, #24
 800a7fe:	4619      	mov	r1, r3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7fe fdb2 	bl	800936a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a806:	2101      	movs	r1, #1
 800a808:	6838      	ldr	r0, [r7, #0]
 800a80a:	f000 fa81 	bl	800ad10 <prvAddCurrentTaskToDelayedList>
}
 800a80e:	bf00      	nop
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	20000918 	.word	0x20000918

0800a81c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d10b      	bne.n	800a846 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	617b      	str	r3, [r7, #20]
}
 800a840:	bf00      	nop
 800a842:	bf00      	nop
 800a844:	e7fd      	b.n	800a842 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a846:	4b0a      	ldr	r3, [pc, #40]	@ (800a870 <vTaskPlaceOnEventListRestricted+0x54>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	3318      	adds	r3, #24
 800a84c:	4619      	mov	r1, r3
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f7fe fd67 	bl	8009322 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d002      	beq.n	800a860 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a85a:	f04f 33ff 	mov.w	r3, #4294967295
 800a85e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a860:	6879      	ldr	r1, [r7, #4]
 800a862:	68b8      	ldr	r0, [r7, #8]
 800a864:	f000 fa54 	bl	800ad10 <prvAddCurrentTaskToDelayedList>
	}
 800a868:	bf00      	nop
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	20000918 	.word	0x20000918

0800a874 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10b      	bne.n	800a8a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	60fb      	str	r3, [r7, #12]
}
 800a89c:	bf00      	nop
 800a89e:	bf00      	nop
 800a8a0:	e7fd      	b.n	800a89e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	3318      	adds	r3, #24
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fe fd98 	bl	80093dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8ac:	4b1d      	ldr	r3, [pc, #116]	@ (800a924 <xTaskRemoveFromEventList+0xb0>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d11d      	bne.n	800a8f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7fe fd8f 	bl	80093dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8c2:	4b19      	ldr	r3, [pc, #100]	@ (800a928 <xTaskRemoveFromEventList+0xb4>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d903      	bls.n	800a8d2 <xTaskRemoveFromEventList+0x5e>
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ce:	4a16      	ldr	r2, [pc, #88]	@ (800a928 <xTaskRemoveFromEventList+0xb4>)
 800a8d0:	6013      	str	r3, [r2, #0]
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4413      	add	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4a13      	ldr	r2, [pc, #76]	@ (800a92c <xTaskRemoveFromEventList+0xb8>)
 800a8e0:	441a      	add	r2, r3
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	f7fe fd1a 	bl	8009322 <vListInsertEnd>
 800a8ee:	e005      	b.n	800a8fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	3318      	adds	r3, #24
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	480e      	ldr	r0, [pc, #56]	@ (800a930 <xTaskRemoveFromEventList+0xbc>)
 800a8f8:	f7fe fd13 	bl	8009322 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a900:	4b0c      	ldr	r3, [pc, #48]	@ (800a934 <xTaskRemoveFromEventList+0xc0>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a906:	429a      	cmp	r2, r3
 800a908:	d905      	bls.n	800a916 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a90a:	2301      	movs	r3, #1
 800a90c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a90e:	4b0a      	ldr	r3, [pc, #40]	@ (800a938 <xTaskRemoveFromEventList+0xc4>)
 800a910:	2201      	movs	r2, #1
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	e001      	b.n	800a91a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a916:	2300      	movs	r3, #0
 800a918:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a91a:	697b      	ldr	r3, [r7, #20]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	20000e14 	.word	0x20000e14
 800a928:	20000df4 	.word	0x20000df4
 800a92c:	2000091c 	.word	0x2000091c
 800a930:	20000dac 	.word	0x20000dac
 800a934:	20000918 	.word	0x20000918
 800a938:	20000e00 	.word	0x20000e00

0800a93c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a944:	4b06      	ldr	r3, [pc, #24]	@ (800a960 <vTaskInternalSetTimeOutState+0x24>)
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a94c:	4b05      	ldr	r3, [pc, #20]	@ (800a964 <vTaskInternalSetTimeOutState+0x28>)
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	605a      	str	r2, [r3, #4]
}
 800a954:	bf00      	nop
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	20000e04 	.word	0x20000e04
 800a964:	20000df0 	.word	0x20000df0

0800a968 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b088      	sub	sp, #32
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10b      	bne.n	800a990 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	613b      	str	r3, [r7, #16]
}
 800a98a:	bf00      	nop
 800a98c:	bf00      	nop
 800a98e:	e7fd      	b.n	800a98c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10b      	bne.n	800a9ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	60fb      	str	r3, [r7, #12]
}
 800a9a8:	bf00      	nop
 800a9aa:	bf00      	nop
 800a9ac:	e7fd      	b.n	800a9aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a9ae:	f000 ff4b 	bl	800b848 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a9b2:	4b1d      	ldr	r3, [pc, #116]	@ (800aa28 <xTaskCheckForTimeOut+0xc0>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	69ba      	ldr	r2, [r7, #24]
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ca:	d102      	bne.n	800a9d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	61fb      	str	r3, [r7, #28]
 800a9d0:	e023      	b.n	800aa1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	4b15      	ldr	r3, [pc, #84]	@ (800aa2c <xTaskCheckForTimeOut+0xc4>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d007      	beq.n	800a9ee <xTaskCheckForTimeOut+0x86>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	69ba      	ldr	r2, [r7, #24]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d302      	bcc.n	800a9ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	61fb      	str	r3, [r7, #28]
 800a9ec:	e015      	b.n	800aa1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	697a      	ldr	r2, [r7, #20]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d20b      	bcs.n	800aa10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	1ad2      	subs	r2, r2, r3
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7ff ff99 	bl	800a93c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	61fb      	str	r3, [r7, #28]
 800aa0e:	e004      	b.n	800aa1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	2200      	movs	r2, #0
 800aa14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa16:	2301      	movs	r3, #1
 800aa18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa1a:	f000 ff47 	bl	800b8ac <vPortExitCritical>

	return xReturn;
 800aa1e:	69fb      	ldr	r3, [r7, #28]
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3720      	adds	r7, #32
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	20000df0 	.word	0x20000df0
 800aa2c:	20000e04 	.word	0x20000e04

0800aa30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa30:	b480      	push	{r7}
 800aa32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa34:	4b03      	ldr	r3, [pc, #12]	@ (800aa44 <vTaskMissedYield+0x14>)
 800aa36:	2201      	movs	r2, #1
 800aa38:	601a      	str	r2, [r3, #0]
}
 800aa3a:	bf00      	nop
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr
 800aa44:	20000e00 	.word	0x20000e00

0800aa48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa50:	f000 f852 	bl	800aaf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa54:	4b06      	ldr	r3, [pc, #24]	@ (800aa70 <prvIdleTask+0x28>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d9f9      	bls.n	800aa50 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa5c:	4b05      	ldr	r3, [pc, #20]	@ (800aa74 <prvIdleTask+0x2c>)
 800aa5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa6c:	e7f0      	b.n	800aa50 <prvIdleTask+0x8>
 800aa6e:	bf00      	nop
 800aa70:	2000091c 	.word	0x2000091c
 800aa74:	e000ed04 	.word	0xe000ed04

0800aa78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa7e:	2300      	movs	r3, #0
 800aa80:	607b      	str	r3, [r7, #4]
 800aa82:	e00c      	b.n	800aa9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	4613      	mov	r3, r2
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	4413      	add	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4a12      	ldr	r2, [pc, #72]	@ (800aad8 <prvInitialiseTaskLists+0x60>)
 800aa90:	4413      	add	r3, r2
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fe fc18 	bl	80092c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	607b      	str	r3, [r7, #4]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b37      	cmp	r3, #55	@ 0x37
 800aaa2:	d9ef      	bls.n	800aa84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aaa4:	480d      	ldr	r0, [pc, #52]	@ (800aadc <prvInitialiseTaskLists+0x64>)
 800aaa6:	f7fe fc0f 	bl	80092c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aaaa:	480d      	ldr	r0, [pc, #52]	@ (800aae0 <prvInitialiseTaskLists+0x68>)
 800aaac:	f7fe fc0c 	bl	80092c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aab0:	480c      	ldr	r0, [pc, #48]	@ (800aae4 <prvInitialiseTaskLists+0x6c>)
 800aab2:	f7fe fc09 	bl	80092c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aab6:	480c      	ldr	r0, [pc, #48]	@ (800aae8 <prvInitialiseTaskLists+0x70>)
 800aab8:	f7fe fc06 	bl	80092c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aabc:	480b      	ldr	r0, [pc, #44]	@ (800aaec <prvInitialiseTaskLists+0x74>)
 800aabe:	f7fe fc03 	bl	80092c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aac2:	4b0b      	ldr	r3, [pc, #44]	@ (800aaf0 <prvInitialiseTaskLists+0x78>)
 800aac4:	4a05      	ldr	r2, [pc, #20]	@ (800aadc <prvInitialiseTaskLists+0x64>)
 800aac6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aac8:	4b0a      	ldr	r3, [pc, #40]	@ (800aaf4 <prvInitialiseTaskLists+0x7c>)
 800aaca:	4a05      	ldr	r2, [pc, #20]	@ (800aae0 <prvInitialiseTaskLists+0x68>)
 800aacc:	601a      	str	r2, [r3, #0]
}
 800aace:	bf00      	nop
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	2000091c 	.word	0x2000091c
 800aadc:	20000d7c 	.word	0x20000d7c
 800aae0:	20000d90 	.word	0x20000d90
 800aae4:	20000dac 	.word	0x20000dac
 800aae8:	20000dc0 	.word	0x20000dc0
 800aaec:	20000dd8 	.word	0x20000dd8
 800aaf0:	20000da4 	.word	0x20000da4
 800aaf4:	20000da8 	.word	0x20000da8

0800aaf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aafe:	e019      	b.n	800ab34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab00:	f000 fea2 	bl	800b848 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab04:	4b10      	ldr	r3, [pc, #64]	@ (800ab48 <prvCheckTasksWaitingTermination+0x50>)
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	3304      	adds	r3, #4
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fe fc63 	bl	80093dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab16:	4b0d      	ldr	r3, [pc, #52]	@ (800ab4c <prvCheckTasksWaitingTermination+0x54>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	4a0b      	ldr	r2, [pc, #44]	@ (800ab4c <prvCheckTasksWaitingTermination+0x54>)
 800ab1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab20:	4b0b      	ldr	r3, [pc, #44]	@ (800ab50 <prvCheckTasksWaitingTermination+0x58>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3b01      	subs	r3, #1
 800ab26:	4a0a      	ldr	r2, [pc, #40]	@ (800ab50 <prvCheckTasksWaitingTermination+0x58>)
 800ab28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab2a:	f000 febf 	bl	800b8ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 f810 	bl	800ab54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab34:	4b06      	ldr	r3, [pc, #24]	@ (800ab50 <prvCheckTasksWaitingTermination+0x58>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1e1      	bne.n	800ab00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab3c:	bf00      	nop
 800ab3e:	bf00      	nop
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	20000dc0 	.word	0x20000dc0
 800ab4c:	20000dec 	.word	0x20000dec
 800ab50:	20000dd4 	.word	0x20000dd4

0800ab54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d108      	bne.n	800ab78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f001 f85c 	bl	800bc28 <vPortFree>
				vPortFree( pxTCB );
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f001 f859 	bl	800bc28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab76:	e019      	b.n	800abac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d103      	bne.n	800ab8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 f850 	bl	800bc28 <vPortFree>
	}
 800ab88:	e010      	b.n	800abac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	d00b      	beq.n	800abac <prvDeleteTCB+0x58>
	__asm volatile
 800ab94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab98:	f383 8811 	msr	BASEPRI, r3
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	60fb      	str	r3, [r7, #12]
}
 800aba6:	bf00      	nop
 800aba8:	bf00      	nop
 800abaa:	e7fd      	b.n	800aba8 <prvDeleteTCB+0x54>
	}
 800abac:	bf00      	nop
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abba:	4b0c      	ldr	r3, [pc, #48]	@ (800abec <prvResetNextTaskUnblockTime+0x38>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d104      	bne.n	800abce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800abc4:	4b0a      	ldr	r3, [pc, #40]	@ (800abf0 <prvResetNextTaskUnblockTime+0x3c>)
 800abc6:	f04f 32ff 	mov.w	r2, #4294967295
 800abca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800abcc:	e008      	b.n	800abe0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abce:	4b07      	ldr	r3, [pc, #28]	@ (800abec <prvResetNextTaskUnblockTime+0x38>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	4a04      	ldr	r2, [pc, #16]	@ (800abf0 <prvResetNextTaskUnblockTime+0x3c>)
 800abde:	6013      	str	r3, [r2, #0]
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr
 800abec:	20000da4 	.word	0x20000da4
 800abf0:	20000e0c 	.word	0x20000e0c

0800abf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800abfa:	4b0b      	ldr	r3, [pc, #44]	@ (800ac28 <xTaskGetSchedulerState+0x34>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d102      	bne.n	800ac08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac02:	2301      	movs	r3, #1
 800ac04:	607b      	str	r3, [r7, #4]
 800ac06:	e008      	b.n	800ac1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac08:	4b08      	ldr	r3, [pc, #32]	@ (800ac2c <xTaskGetSchedulerState+0x38>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d102      	bne.n	800ac16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac10:	2302      	movs	r3, #2
 800ac12:	607b      	str	r3, [r7, #4]
 800ac14:	e001      	b.n	800ac1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac16:	2300      	movs	r3, #0
 800ac18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac1a:	687b      	ldr	r3, [r7, #4]
	}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr
 800ac28:	20000df8 	.word	0x20000df8
 800ac2c:	20000e14 	.word	0x20000e14

0800ac30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b086      	sub	sp, #24
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d058      	beq.n	800acf8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac46:	4b2f      	ldr	r3, [pc, #188]	@ (800ad04 <xTaskPriorityDisinherit+0xd4>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	693a      	ldr	r2, [r7, #16]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d00b      	beq.n	800ac68 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	60fb      	str	r3, [r7, #12]
}
 800ac62:	bf00      	nop
 800ac64:	bf00      	nop
 800ac66:	e7fd      	b.n	800ac64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10b      	bne.n	800ac88 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ac70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	60bb      	str	r3, [r7, #8]
}
 800ac82:	bf00      	nop
 800ac84:	bf00      	nop
 800ac86:	e7fd      	b.n	800ac84 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac8c:	1e5a      	subs	r2, r3, #1
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d02c      	beq.n	800acf8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d128      	bne.n	800acf8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	3304      	adds	r3, #4
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fe fb96 	bl	80093dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acbc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acc8:	4b0f      	ldr	r3, [pc, #60]	@ (800ad08 <xTaskPriorityDisinherit+0xd8>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	429a      	cmp	r2, r3
 800acce:	d903      	bls.n	800acd8 <xTaskPriorityDisinherit+0xa8>
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd4:	4a0c      	ldr	r2, [pc, #48]	@ (800ad08 <xTaskPriorityDisinherit+0xd8>)
 800acd6:	6013      	str	r3, [r2, #0]
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acdc:	4613      	mov	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4a09      	ldr	r2, [pc, #36]	@ (800ad0c <xTaskPriorityDisinherit+0xdc>)
 800ace6:	441a      	add	r2, r3
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	3304      	adds	r3, #4
 800acec:	4619      	mov	r1, r3
 800acee:	4610      	mov	r0, r2
 800acf0:	f7fe fb17 	bl	8009322 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800acf4:	2301      	movs	r3, #1
 800acf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acf8:	697b      	ldr	r3, [r7, #20]
	}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3718      	adds	r7, #24
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	20000918 	.word	0x20000918
 800ad08:	20000df4 	.word	0x20000df4
 800ad0c:	2000091c 	.word	0x2000091c

0800ad10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad1a:	4b21      	ldr	r3, [pc, #132]	@ (800ada0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad20:	4b20      	ldr	r3, [pc, #128]	@ (800ada4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3304      	adds	r3, #4
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7fe fb58 	bl	80093dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad32:	d10a      	bne.n	800ad4a <prvAddCurrentTaskToDelayedList+0x3a>
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d007      	beq.n	800ad4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad3a:	4b1a      	ldr	r3, [pc, #104]	@ (800ada4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3304      	adds	r3, #4
 800ad40:	4619      	mov	r1, r3
 800ad42:	4819      	ldr	r0, [pc, #100]	@ (800ada8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad44:	f7fe faed 	bl	8009322 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad48:	e026      	b.n	800ad98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4413      	add	r3, r2
 800ad50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad52:	4b14      	ldr	r3, [pc, #80]	@ (800ada4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d209      	bcs.n	800ad76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad62:	4b12      	ldr	r3, [pc, #72]	@ (800adac <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	4b0f      	ldr	r3, [pc, #60]	@ (800ada4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	3304      	adds	r3, #4
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	4610      	mov	r0, r2
 800ad70:	f7fe fafb 	bl	800936a <vListInsert>
}
 800ad74:	e010      	b.n	800ad98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad76:	4b0e      	ldr	r3, [pc, #56]	@ (800adb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	4b0a      	ldr	r3, [pc, #40]	@ (800ada4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	3304      	adds	r3, #4
 800ad80:	4619      	mov	r1, r3
 800ad82:	4610      	mov	r0, r2
 800ad84:	f7fe faf1 	bl	800936a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad88:	4b0a      	ldr	r3, [pc, #40]	@ (800adb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d202      	bcs.n	800ad98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ad92:	4a08      	ldr	r2, [pc, #32]	@ (800adb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	6013      	str	r3, [r2, #0]
}
 800ad98:	bf00      	nop
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	20000df0 	.word	0x20000df0
 800ada4:	20000918 	.word	0x20000918
 800ada8:	20000dd8 	.word	0x20000dd8
 800adac:	20000da8 	.word	0x20000da8
 800adb0:	20000da4 	.word	0x20000da4
 800adb4:	20000e0c 	.word	0x20000e0c

0800adb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08a      	sub	sp, #40	@ 0x28
 800adbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800adbe:	2300      	movs	r3, #0
 800adc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800adc2:	f000 fbb1 	bl	800b528 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800adc6:	4b1d      	ldr	r3, [pc, #116]	@ (800ae3c <xTimerCreateTimerTask+0x84>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d021      	beq.n	800ae12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800adce:	2300      	movs	r3, #0
 800add0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800add2:	2300      	movs	r3, #0
 800add4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800add6:	1d3a      	adds	r2, r7, #4
 800add8:	f107 0108 	add.w	r1, r7, #8
 800addc:	f107 030c 	add.w	r3, r7, #12
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fe fa57 	bl	8009294 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ade6:	6879      	ldr	r1, [r7, #4]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	9202      	str	r2, [sp, #8]
 800adee:	9301      	str	r3, [sp, #4]
 800adf0:	2302      	movs	r3, #2
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	2300      	movs	r3, #0
 800adf6:	460a      	mov	r2, r1
 800adf8:	4911      	ldr	r1, [pc, #68]	@ (800ae40 <xTimerCreateTimerTask+0x88>)
 800adfa:	4812      	ldr	r0, [pc, #72]	@ (800ae44 <xTimerCreateTimerTask+0x8c>)
 800adfc:	f7ff f8d0 	bl	8009fa0 <xTaskCreateStatic>
 800ae00:	4603      	mov	r3, r0
 800ae02:	4a11      	ldr	r2, [pc, #68]	@ (800ae48 <xTimerCreateTimerTask+0x90>)
 800ae04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae06:	4b10      	ldr	r3, [pc, #64]	@ (800ae48 <xTimerCreateTimerTask+0x90>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10b      	bne.n	800ae30 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ae18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae1c:	f383 8811 	msr	BASEPRI, r3
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	613b      	str	r3, [r7, #16]
}
 800ae2a:	bf00      	nop
 800ae2c:	bf00      	nop
 800ae2e:	e7fd      	b.n	800ae2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae30:	697b      	ldr	r3, [r7, #20]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3718      	adds	r7, #24
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	20000e48 	.word	0x20000e48
 800ae40:	0800c79c 	.word	0x0800c79c
 800ae44:	0800b0c1 	.word	0x0800b0c1
 800ae48:	20000e4c 	.word	0x20000e4c

0800ae4c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b088      	sub	sp, #32
 800ae50:	af02      	add	r7, sp, #8
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ae5a:	202c      	movs	r0, #44	@ 0x2c
 800ae5c:	f000 fe16 	bl	800ba8c <pvPortMalloc>
 800ae60:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00d      	beq.n	800ae84 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	9301      	str	r3, [sp, #4]
 800ae74:	6a3b      	ldr	r3, [r7, #32]
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	68b9      	ldr	r1, [r7, #8]
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f000 f845 	bl	800af0e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ae84:	697b      	ldr	r3, [r7, #20]
	}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b08a      	sub	sp, #40	@ 0x28
 800ae92:	af02      	add	r7, sp, #8
 800ae94:	60f8      	str	r0, [r7, #12]
 800ae96:	60b9      	str	r1, [r7, #8]
 800ae98:	607a      	str	r2, [r7, #4]
 800ae9a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800ae9c:	232c      	movs	r3, #44	@ 0x2c
 800ae9e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	2b2c      	cmp	r3, #44	@ 0x2c
 800aea4:	d00b      	beq.n	800aebe <xTimerCreateStatic+0x30>
	__asm volatile
 800aea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeaa:	f383 8811 	msr	BASEPRI, r3
 800aeae:	f3bf 8f6f 	isb	sy
 800aeb2:	f3bf 8f4f 	dsb	sy
 800aeb6:	61bb      	str	r3, [r7, #24]
}
 800aeb8:	bf00      	nop
 800aeba:	bf00      	nop
 800aebc:	e7fd      	b.n	800aeba <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aebe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800aec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10b      	bne.n	800aede <xTimerCreateStatic+0x50>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	617b      	str	r3, [r7, #20]
}
 800aed8:	bf00      	nop
 800aeda:	bf00      	nop
 800aedc:	e7fd      	b.n	800aeda <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800aede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aee0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00d      	beq.n	800af04 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	2202      	movs	r2, #2
 800aeec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	9301      	str	r3, [sp, #4]
 800aef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	68b9      	ldr	r1, [r7, #8]
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f000 f805 	bl	800af0e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800af04:	69fb      	ldr	r3, [r7, #28]
	}
 800af06:	4618      	mov	r0, r3
 800af08:	3720      	adds	r7, #32
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b086      	sub	sp, #24
 800af12:	af00      	add	r7, sp, #0
 800af14:	60f8      	str	r0, [r7, #12]
 800af16:	60b9      	str	r1, [r7, #8]
 800af18:	607a      	str	r2, [r7, #4]
 800af1a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10b      	bne.n	800af3a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800af22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	617b      	str	r3, [r7, #20]
}
 800af34:	bf00      	nop
 800af36:	bf00      	nop
 800af38:	e7fd      	b.n	800af36 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800af3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d01e      	beq.n	800af7e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800af40:	f000 faf2 	bl	800b528 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800af44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800af4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800af50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800af56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af58:	6a3a      	ldr	r2, [r7, #32]
 800af5a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800af5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5e:	3304      	adds	r3, #4
 800af60:	4618      	mov	r0, r3
 800af62:	f7fe f9d1 	bl	8009308 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d008      	beq.n	800af7e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800af6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af72:	f043 0304 	orr.w	r3, r3, #4
 800af76:	b2da      	uxtb	r2, r3
 800af78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800af7e:	bf00      	nop
 800af80:	3718      	adds	r7, #24
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
	...

0800af88 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08a      	sub	sp, #40	@ 0x28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
 800af94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800af96:	2300      	movs	r3, #0
 800af98:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10b      	bne.n	800afb8 <xTimerGenericCommand+0x30>
	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	623b      	str	r3, [r7, #32]
}
 800afb2:	bf00      	nop
 800afb4:	bf00      	nop
 800afb6:	e7fd      	b.n	800afb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800afb8:	4b19      	ldr	r3, [pc, #100]	@ (800b020 <xTimerGenericCommand+0x98>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d02a      	beq.n	800b016 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2b05      	cmp	r3, #5
 800afd0:	dc18      	bgt.n	800b004 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800afd2:	f7ff fe0f 	bl	800abf4 <xTaskGetSchedulerState>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b02      	cmp	r3, #2
 800afda:	d109      	bne.n	800aff0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800afdc:	4b10      	ldr	r3, [pc, #64]	@ (800b020 <xTimerGenericCommand+0x98>)
 800afde:	6818      	ldr	r0, [r3, #0]
 800afe0:	f107 0110 	add.w	r1, r7, #16
 800afe4:	2300      	movs	r3, #0
 800afe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afe8:	f7fe fb68 	bl	80096bc <xQueueGenericSend>
 800afec:	6278      	str	r0, [r7, #36]	@ 0x24
 800afee:	e012      	b.n	800b016 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aff0:	4b0b      	ldr	r3, [pc, #44]	@ (800b020 <xTimerGenericCommand+0x98>)
 800aff2:	6818      	ldr	r0, [r3, #0]
 800aff4:	f107 0110 	add.w	r1, r7, #16
 800aff8:	2300      	movs	r3, #0
 800affa:	2200      	movs	r2, #0
 800affc:	f7fe fb5e 	bl	80096bc <xQueueGenericSend>
 800b000:	6278      	str	r0, [r7, #36]	@ 0x24
 800b002:	e008      	b.n	800b016 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b004:	4b06      	ldr	r3, [pc, #24]	@ (800b020 <xTimerGenericCommand+0x98>)
 800b006:	6818      	ldr	r0, [r3, #0]
 800b008:	f107 0110 	add.w	r1, r7, #16
 800b00c:	2300      	movs	r3, #0
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	f7fe fc56 	bl	80098c0 <xQueueGenericSendFromISR>
 800b014:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3728      	adds	r7, #40	@ 0x28
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	20000e48 	.word	0x20000e48

0800b024 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b088      	sub	sp, #32
 800b028:	af02      	add	r7, sp, #8
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b02e:	4b23      	ldr	r3, [pc, #140]	@ (800b0bc <prvProcessExpiredTimer+0x98>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	3304      	adds	r3, #4
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7fe f9cd 	bl	80093dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d023      	beq.n	800b098 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	699a      	ldr	r2, [r3, #24]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	18d1      	adds	r1, r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	6978      	ldr	r0, [r7, #20]
 800b05e:	f000 f8d5 	bl	800b20c <prvInsertTimerInActiveList>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d020      	beq.n	800b0aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b068:	2300      	movs	r3, #0
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	2300      	movs	r3, #0
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	2100      	movs	r1, #0
 800b072:	6978      	ldr	r0, [r7, #20]
 800b074:	f7ff ff88 	bl	800af88 <xTimerGenericCommand>
 800b078:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d114      	bne.n	800b0aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	60fb      	str	r3, [r7, #12]
}
 800b092:	bf00      	nop
 800b094:	bf00      	nop
 800b096:	e7fd      	b.n	800b094 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b09e:	f023 0301 	bic.w	r3, r3, #1
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	6a1b      	ldr	r3, [r3, #32]
 800b0ae:	6978      	ldr	r0, [r7, #20]
 800b0b0:	4798      	blx	r3
}
 800b0b2:	bf00      	nop
 800b0b4:	3718      	adds	r7, #24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20000e40 	.word	0x20000e40

0800b0c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0c8:	f107 0308 	add.w	r3, r7, #8
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f000 f859 	bl	800b184 <prvGetNextExpireTime>
 800b0d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f000 f805 	bl	800b0e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b0de:	f000 f8d7 	bl	800b290 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0e2:	bf00      	nop
 800b0e4:	e7f0      	b.n	800b0c8 <prvTimerTask+0x8>
	...

0800b0e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b0f2:	f7ff f999 	bl	800a428 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0f6:	f107 0308 	add.w	r3, r7, #8
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 f866 	bl	800b1cc <prvSampleTimeNow>
 800b100:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d130      	bne.n	800b16a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10a      	bne.n	800b124 <prvProcessTimerOrBlockTask+0x3c>
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	429a      	cmp	r2, r3
 800b114:	d806      	bhi.n	800b124 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b116:	f7ff f995 	bl	800a444 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b11a:	68f9      	ldr	r1, [r7, #12]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f7ff ff81 	bl	800b024 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b122:	e024      	b.n	800b16e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d008      	beq.n	800b13c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b12a:	4b13      	ldr	r3, [pc, #76]	@ (800b178 <prvProcessTimerOrBlockTask+0x90>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d101      	bne.n	800b138 <prvProcessTimerOrBlockTask+0x50>
 800b134:	2301      	movs	r3, #1
 800b136:	e000      	b.n	800b13a <prvProcessTimerOrBlockTask+0x52>
 800b138:	2300      	movs	r3, #0
 800b13a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b13c:	4b0f      	ldr	r3, [pc, #60]	@ (800b17c <prvProcessTimerOrBlockTask+0x94>)
 800b13e:	6818      	ldr	r0, [r3, #0]
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	4619      	mov	r1, r3
 800b14a:	f7fe fef5 	bl	8009f38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b14e:	f7ff f979 	bl	800a444 <xTaskResumeAll>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d10a      	bne.n	800b16e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b158:	4b09      	ldr	r3, [pc, #36]	@ (800b180 <prvProcessTimerOrBlockTask+0x98>)
 800b15a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b15e:	601a      	str	r2, [r3, #0]
 800b160:	f3bf 8f4f 	dsb	sy
 800b164:	f3bf 8f6f 	isb	sy
}
 800b168:	e001      	b.n	800b16e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b16a:	f7ff f96b 	bl	800a444 <xTaskResumeAll>
}
 800b16e:	bf00      	nop
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	20000e44 	.word	0x20000e44
 800b17c:	20000e48 	.word	0x20000e48
 800b180:	e000ed04 	.word	0xe000ed04

0800b184 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b18c:	4b0e      	ldr	r3, [pc, #56]	@ (800b1c8 <prvGetNextExpireTime+0x44>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <prvGetNextExpireTime+0x16>
 800b196:	2201      	movs	r2, #1
 800b198:	e000      	b.n	800b19c <prvGetNextExpireTime+0x18>
 800b19a:	2200      	movs	r2, #0
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d105      	bne.n	800b1b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1a8:	4b07      	ldr	r3, [pc, #28]	@ (800b1c8 <prvGetNextExpireTime+0x44>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	60fb      	str	r3, [r7, #12]
 800b1b2:	e001      	b.n	800b1b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	20000e40 	.word	0x20000e40

0800b1cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b1d4:	f7ff f9d4 	bl	800a580 <xTaskGetTickCount>
 800b1d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b1da:	4b0b      	ldr	r3, [pc, #44]	@ (800b208 <prvSampleTimeNow+0x3c>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d205      	bcs.n	800b1f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b1e4:	f000 f93a 	bl	800b45c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	601a      	str	r2, [r3, #0]
 800b1ee:	e002      	b.n	800b1f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b1f6:	4a04      	ldr	r2, [pc, #16]	@ (800b208 <prvSampleTimeNow+0x3c>)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	20000e50 	.word	0x20000e50

0800b20c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
 800b218:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b21a:	2300      	movs	r3, #0
 800b21c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d812      	bhi.n	800b258 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	1ad2      	subs	r2, r2, r3
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d302      	bcc.n	800b246 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b240:	2301      	movs	r3, #1
 800b242:	617b      	str	r3, [r7, #20]
 800b244:	e01b      	b.n	800b27e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b246:	4b10      	ldr	r3, [pc, #64]	@ (800b288 <prvInsertTimerInActiveList+0x7c>)
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3304      	adds	r3, #4
 800b24e:	4619      	mov	r1, r3
 800b250:	4610      	mov	r0, r2
 800b252:	f7fe f88a 	bl	800936a <vListInsert>
 800b256:	e012      	b.n	800b27e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d206      	bcs.n	800b26e <prvInsertTimerInActiveList+0x62>
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	429a      	cmp	r2, r3
 800b266:	d302      	bcc.n	800b26e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b268:	2301      	movs	r3, #1
 800b26a:	617b      	str	r3, [r7, #20]
 800b26c:	e007      	b.n	800b27e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b26e:	4b07      	ldr	r3, [pc, #28]	@ (800b28c <prvInsertTimerInActiveList+0x80>)
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	3304      	adds	r3, #4
 800b276:	4619      	mov	r1, r3
 800b278:	4610      	mov	r0, r2
 800b27a:	f7fe f876 	bl	800936a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b27e:	697b      	ldr	r3, [r7, #20]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3718      	adds	r7, #24
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	20000e44 	.word	0x20000e44
 800b28c:	20000e40 	.word	0x20000e40

0800b290 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b08e      	sub	sp, #56	@ 0x38
 800b294:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b296:	e0ce      	b.n	800b436 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	da19      	bge.n	800b2d2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b29e:	1d3b      	adds	r3, r7, #4
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d10b      	bne.n	800b2c2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	61fb      	str	r3, [r7, #28]
}
 800b2bc:	bf00      	nop
 800b2be:	bf00      	nop
 800b2c0:	e7fd      	b.n	800b2be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2c8:	6850      	ldr	r0, [r2, #4]
 800b2ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2cc:	6892      	ldr	r2, [r2, #8]
 800b2ce:	4611      	mov	r1, r2
 800b2d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f2c0 80ae 	blt.w	800b436 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d004      	beq.n	800b2f0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fe f876 	bl	80093dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2f0:	463b      	mov	r3, r7
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7ff ff6a 	bl	800b1cc <prvSampleTimeNow>
 800b2f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2b09      	cmp	r3, #9
 800b2fe:	f200 8097 	bhi.w	800b430 <prvProcessReceivedCommands+0x1a0>
 800b302:	a201      	add	r2, pc, #4	@ (adr r2, 800b308 <prvProcessReceivedCommands+0x78>)
 800b304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b308:	0800b331 	.word	0x0800b331
 800b30c:	0800b331 	.word	0x0800b331
 800b310:	0800b331 	.word	0x0800b331
 800b314:	0800b3a7 	.word	0x0800b3a7
 800b318:	0800b3bb 	.word	0x0800b3bb
 800b31c:	0800b407 	.word	0x0800b407
 800b320:	0800b331 	.word	0x0800b331
 800b324:	0800b331 	.word	0x0800b331
 800b328:	0800b3a7 	.word	0x0800b3a7
 800b32c:	0800b3bb 	.word	0x0800b3bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b332:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b336:	f043 0301 	orr.w	r3, r3, #1
 800b33a:	b2da      	uxtb	r2, r3
 800b33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b346:	699b      	ldr	r3, [r3, #24]
 800b348:	18d1      	adds	r1, r2, r3
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b34e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b350:	f7ff ff5c 	bl	800b20c <prvInsertTimerInActiveList>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d06c      	beq.n	800b434 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b360:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b364:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b368:	f003 0304 	and.w	r3, r3, #4
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d061      	beq.n	800b434 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	441a      	add	r2, r3
 800b378:	2300      	movs	r3, #0
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	2300      	movs	r3, #0
 800b37e:	2100      	movs	r1, #0
 800b380:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b382:	f7ff fe01 	bl	800af88 <xTimerGenericCommand>
 800b386:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b388:	6a3b      	ldr	r3, [r7, #32]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d152      	bne.n	800b434 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	61bb      	str	r3, [r7, #24]
}
 800b3a0:	bf00      	nop
 800b3a2:	bf00      	nop
 800b3a4:	e7fd      	b.n	800b3a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3ac:	f023 0301 	bic.w	r3, r3, #1
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b3b8:	e03d      	b.n	800b436 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3c0:	f043 0301 	orr.w	r3, r3, #1
 800b3c4:	b2da      	uxtb	r2, r3
 800b3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d4:	699b      	ldr	r3, [r3, #24]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d10b      	bne.n	800b3f2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	617b      	str	r3, [r7, #20]
}
 800b3ec:	bf00      	nop
 800b3ee:	bf00      	nop
 800b3f0:	e7fd      	b.n	800b3ee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f4:	699a      	ldr	r2, [r3, #24]
 800b3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f8:	18d1      	adds	r1, r2, r3
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b400:	f7ff ff04 	bl	800b20c <prvInsertTimerInActiveList>
					break;
 800b404:	e017      	b.n	800b436 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b408:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b40c:	f003 0302 	and.w	r3, r3, #2
 800b410:	2b00      	cmp	r3, #0
 800b412:	d103      	bne.n	800b41c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b414:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b416:	f000 fc07 	bl	800bc28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b41a:	e00c      	b.n	800b436 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b422:	f023 0301 	bic.w	r3, r3, #1
 800b426:	b2da      	uxtb	r2, r3
 800b428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b42e:	e002      	b.n	800b436 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b430:	bf00      	nop
 800b432:	e000      	b.n	800b436 <prvProcessReceivedCommands+0x1a6>
					break;
 800b434:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b436:	4b08      	ldr	r3, [pc, #32]	@ (800b458 <prvProcessReceivedCommands+0x1c8>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	1d39      	adds	r1, r7, #4
 800b43c:	2200      	movs	r2, #0
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fe fadc 	bl	80099fc <xQueueReceive>
 800b444:	4603      	mov	r3, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	f47f af26 	bne.w	800b298 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b44c:	bf00      	nop
 800b44e:	bf00      	nop
 800b450:	3730      	adds	r7, #48	@ 0x30
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	20000e48 	.word	0x20000e48

0800b45c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b088      	sub	sp, #32
 800b460:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b462:	e049      	b.n	800b4f8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b464:	4b2e      	ldr	r3, [pc, #184]	@ (800b520 <prvSwitchTimerLists+0xc4>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b46e:	4b2c      	ldr	r3, [pc, #176]	@ (800b520 <prvSwitchTimerLists+0xc4>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3304      	adds	r3, #4
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7fd ffad 	bl	80093dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b490:	f003 0304 	and.w	r3, r3, #4
 800b494:	2b00      	cmp	r3, #0
 800b496:	d02f      	beq.n	800b4f8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	699b      	ldr	r3, [r3, #24]
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	4413      	add	r3, r2
 800b4a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b4a2:	68ba      	ldr	r2, [r7, #8]
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d90e      	bls.n	800b4c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	68fa      	ldr	r2, [r7, #12]
 800b4b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4b6:	4b1a      	ldr	r3, [pc, #104]	@ (800b520 <prvSwitchTimerLists+0xc4>)
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	3304      	adds	r3, #4
 800b4be:	4619      	mov	r1, r3
 800b4c0:	4610      	mov	r0, r2
 800b4c2:	f7fd ff52 	bl	800936a <vListInsert>
 800b4c6:	e017      	b.n	800b4f8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	9300      	str	r3, [sp, #0]
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f7ff fd58 	bl	800af88 <xTimerGenericCommand>
 800b4d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10b      	bne.n	800b4f8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	603b      	str	r3, [r7, #0]
}
 800b4f2:	bf00      	nop
 800b4f4:	bf00      	nop
 800b4f6:	e7fd      	b.n	800b4f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b4f8:	4b09      	ldr	r3, [pc, #36]	@ (800b520 <prvSwitchTimerLists+0xc4>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d1b0      	bne.n	800b464 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b502:	4b07      	ldr	r3, [pc, #28]	@ (800b520 <prvSwitchTimerLists+0xc4>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b508:	4b06      	ldr	r3, [pc, #24]	@ (800b524 <prvSwitchTimerLists+0xc8>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a04      	ldr	r2, [pc, #16]	@ (800b520 <prvSwitchTimerLists+0xc4>)
 800b50e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b510:	4a04      	ldr	r2, [pc, #16]	@ (800b524 <prvSwitchTimerLists+0xc8>)
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	6013      	str	r3, [r2, #0]
}
 800b516:	bf00      	nop
 800b518:	3718      	adds	r7, #24
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	20000e40 	.word	0x20000e40
 800b524:	20000e44 	.word	0x20000e44

0800b528 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b52e:	f000 f98b 	bl	800b848 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b532:	4b15      	ldr	r3, [pc, #84]	@ (800b588 <prvCheckForValidListAndQueue+0x60>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d120      	bne.n	800b57c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b53a:	4814      	ldr	r0, [pc, #80]	@ (800b58c <prvCheckForValidListAndQueue+0x64>)
 800b53c:	f7fd fec4 	bl	80092c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b540:	4813      	ldr	r0, [pc, #76]	@ (800b590 <prvCheckForValidListAndQueue+0x68>)
 800b542:	f7fd fec1 	bl	80092c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b546:	4b13      	ldr	r3, [pc, #76]	@ (800b594 <prvCheckForValidListAndQueue+0x6c>)
 800b548:	4a10      	ldr	r2, [pc, #64]	@ (800b58c <prvCheckForValidListAndQueue+0x64>)
 800b54a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b54c:	4b12      	ldr	r3, [pc, #72]	@ (800b598 <prvCheckForValidListAndQueue+0x70>)
 800b54e:	4a10      	ldr	r2, [pc, #64]	@ (800b590 <prvCheckForValidListAndQueue+0x68>)
 800b550:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b552:	2300      	movs	r3, #0
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	4b11      	ldr	r3, [pc, #68]	@ (800b59c <prvCheckForValidListAndQueue+0x74>)
 800b558:	4a11      	ldr	r2, [pc, #68]	@ (800b5a0 <prvCheckForValidListAndQueue+0x78>)
 800b55a:	2110      	movs	r1, #16
 800b55c:	200a      	movs	r0, #10
 800b55e:	f7fd ffd1 	bl	8009504 <xQueueGenericCreateStatic>
 800b562:	4603      	mov	r3, r0
 800b564:	4a08      	ldr	r2, [pc, #32]	@ (800b588 <prvCheckForValidListAndQueue+0x60>)
 800b566:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b568:	4b07      	ldr	r3, [pc, #28]	@ (800b588 <prvCheckForValidListAndQueue+0x60>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d005      	beq.n	800b57c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b570:	4b05      	ldr	r3, [pc, #20]	@ (800b588 <prvCheckForValidListAndQueue+0x60>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	490b      	ldr	r1, [pc, #44]	@ (800b5a4 <prvCheckForValidListAndQueue+0x7c>)
 800b576:	4618      	mov	r0, r3
 800b578:	f7fe fcb4 	bl	8009ee4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b57c:	f000 f996 	bl	800b8ac <vPortExitCritical>
}
 800b580:	bf00      	nop
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	20000e48 	.word	0x20000e48
 800b58c:	20000e18 	.word	0x20000e18
 800b590:	20000e2c 	.word	0x20000e2c
 800b594:	20000e40 	.word	0x20000e40
 800b598:	20000e44 	.word	0x20000e44
 800b59c:	20000ef4 	.word	0x20000ef4
 800b5a0:	20000e54 	.word	0x20000e54
 800b5a4:	0800c7a4 	.word	0x0800c7a4

0800b5a8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10b      	bne.n	800b5d2 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800b5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	60fb      	str	r3, [r7, #12]
}
 800b5cc:	bf00      	nop
 800b5ce:	bf00      	nop
 800b5d0:	e7fd      	b.n	800b5ce <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b5d2:	f000 f939 	bl	800b848 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	69db      	ldr	r3, [r3, #28]
 800b5da:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b5dc:	f000 f966 	bl	800b8ac <vPortExitCritical>

	return pvReturn;
 800b5e0:	693b      	ldr	r3, [r7, #16]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3718      	adds	r7, #24
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
	...

0800b5ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	3b04      	subs	r3, #4
 800b5fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b604:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	3b04      	subs	r3, #4
 800b60a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	f023 0201 	bic.w	r2, r3, #1
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	3b04      	subs	r3, #4
 800b61a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b61c:	4a0c      	ldr	r2, [pc, #48]	@ (800b650 <pxPortInitialiseStack+0x64>)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3b14      	subs	r3, #20
 800b626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	3b04      	subs	r3, #4
 800b632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f06f 0202 	mvn.w	r2, #2
 800b63a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	3b20      	subs	r3, #32
 800b640:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b642:	68fb      	ldr	r3, [r7, #12]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3714      	adds	r7, #20
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr
 800b650:	0800b655 	.word	0x0800b655

0800b654 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b65e:	4b13      	ldr	r3, [pc, #76]	@ (800b6ac <prvTaskExitError+0x58>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b666:	d00b      	beq.n	800b680 <prvTaskExitError+0x2c>
	__asm volatile
 800b668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b66c:	f383 8811 	msr	BASEPRI, r3
 800b670:	f3bf 8f6f 	isb	sy
 800b674:	f3bf 8f4f 	dsb	sy
 800b678:	60fb      	str	r3, [r7, #12]
}
 800b67a:	bf00      	nop
 800b67c:	bf00      	nop
 800b67e:	e7fd      	b.n	800b67c <prvTaskExitError+0x28>
	__asm volatile
 800b680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b684:	f383 8811 	msr	BASEPRI, r3
 800b688:	f3bf 8f6f 	isb	sy
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	60bb      	str	r3, [r7, #8]
}
 800b692:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b694:	bf00      	nop
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d0fc      	beq.n	800b696 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b69c:	bf00      	nop
 800b69e:	bf00      	nop
 800b6a0:	3714      	adds	r7, #20
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	2000002c 	.word	0x2000002c

0800b6b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b6b0:	4b07      	ldr	r3, [pc, #28]	@ (800b6d0 <pxCurrentTCBConst2>)
 800b6b2:	6819      	ldr	r1, [r3, #0]
 800b6b4:	6808      	ldr	r0, [r1, #0]
 800b6b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ba:	f380 8809 	msr	PSP, r0
 800b6be:	f3bf 8f6f 	isb	sy
 800b6c2:	f04f 0000 	mov.w	r0, #0
 800b6c6:	f380 8811 	msr	BASEPRI, r0
 800b6ca:	4770      	bx	lr
 800b6cc:	f3af 8000 	nop.w

0800b6d0 <pxCurrentTCBConst2>:
 800b6d0:	20000918 	.word	0x20000918
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b6d4:	bf00      	nop
 800b6d6:	bf00      	nop

0800b6d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b6d8:	4808      	ldr	r0, [pc, #32]	@ (800b6fc <prvPortStartFirstTask+0x24>)
 800b6da:	6800      	ldr	r0, [r0, #0]
 800b6dc:	6800      	ldr	r0, [r0, #0]
 800b6de:	f380 8808 	msr	MSP, r0
 800b6e2:	f04f 0000 	mov.w	r0, #0
 800b6e6:	f380 8814 	msr	CONTROL, r0
 800b6ea:	b662      	cpsie	i
 800b6ec:	b661      	cpsie	f
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	df00      	svc	0
 800b6f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b6fa:	bf00      	nop
 800b6fc:	e000ed08 	.word	0xe000ed08

0800b700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b706:	4b47      	ldr	r3, [pc, #284]	@ (800b824 <xPortStartScheduler+0x124>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a47      	ldr	r2, [pc, #284]	@ (800b828 <xPortStartScheduler+0x128>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d10b      	bne.n	800b728 <xPortStartScheduler+0x28>
	__asm volatile
 800b710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	613b      	str	r3, [r7, #16]
}
 800b722:	bf00      	nop
 800b724:	bf00      	nop
 800b726:	e7fd      	b.n	800b724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b728:	4b3e      	ldr	r3, [pc, #248]	@ (800b824 <xPortStartScheduler+0x124>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a3f      	ldr	r2, [pc, #252]	@ (800b82c <xPortStartScheduler+0x12c>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d10b      	bne.n	800b74a <xPortStartScheduler+0x4a>
	__asm volatile
 800b732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b736:	f383 8811 	msr	BASEPRI, r3
 800b73a:	f3bf 8f6f 	isb	sy
 800b73e:	f3bf 8f4f 	dsb	sy
 800b742:	60fb      	str	r3, [r7, #12]
}
 800b744:	bf00      	nop
 800b746:	bf00      	nop
 800b748:	e7fd      	b.n	800b746 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b74a:	4b39      	ldr	r3, [pc, #228]	@ (800b830 <xPortStartScheduler+0x130>)
 800b74c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	b2db      	uxtb	r3, r3
 800b754:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	22ff      	movs	r2, #255	@ 0xff
 800b75a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	b2db      	uxtb	r3, r3
 800b762:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b764:	78fb      	ldrb	r3, [r7, #3]
 800b766:	b2db      	uxtb	r3, r3
 800b768:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b76c:	b2da      	uxtb	r2, r3
 800b76e:	4b31      	ldr	r3, [pc, #196]	@ (800b834 <xPortStartScheduler+0x134>)
 800b770:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b772:	4b31      	ldr	r3, [pc, #196]	@ (800b838 <xPortStartScheduler+0x138>)
 800b774:	2207      	movs	r2, #7
 800b776:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b778:	e009      	b.n	800b78e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b77a:	4b2f      	ldr	r3, [pc, #188]	@ (800b838 <xPortStartScheduler+0x138>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	3b01      	subs	r3, #1
 800b780:	4a2d      	ldr	r2, [pc, #180]	@ (800b838 <xPortStartScheduler+0x138>)
 800b782:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b784:	78fb      	ldrb	r3, [r7, #3]
 800b786:	b2db      	uxtb	r3, r3
 800b788:	005b      	lsls	r3, r3, #1
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b78e:	78fb      	ldrb	r3, [r7, #3]
 800b790:	b2db      	uxtb	r3, r3
 800b792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b796:	2b80      	cmp	r3, #128	@ 0x80
 800b798:	d0ef      	beq.n	800b77a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b79a:	4b27      	ldr	r3, [pc, #156]	@ (800b838 <xPortStartScheduler+0x138>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f1c3 0307 	rsb	r3, r3, #7
 800b7a2:	2b04      	cmp	r3, #4
 800b7a4:	d00b      	beq.n	800b7be <xPortStartScheduler+0xbe>
	__asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	60bb      	str	r3, [r7, #8]
}
 800b7b8:	bf00      	nop
 800b7ba:	bf00      	nop
 800b7bc:	e7fd      	b.n	800b7ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b7be:	4b1e      	ldr	r3, [pc, #120]	@ (800b838 <xPortStartScheduler+0x138>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	021b      	lsls	r3, r3, #8
 800b7c4:	4a1c      	ldr	r2, [pc, #112]	@ (800b838 <xPortStartScheduler+0x138>)
 800b7c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b7c8:	4b1b      	ldr	r3, [pc, #108]	@ (800b838 <xPortStartScheduler+0x138>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b7d0:	4a19      	ldr	r2, [pc, #100]	@ (800b838 <xPortStartScheduler+0x138>)
 800b7d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	b2da      	uxtb	r2, r3
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b7dc:	4b17      	ldr	r3, [pc, #92]	@ (800b83c <xPortStartScheduler+0x13c>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a16      	ldr	r2, [pc, #88]	@ (800b83c <xPortStartScheduler+0x13c>)
 800b7e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b7e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b7e8:	4b14      	ldr	r3, [pc, #80]	@ (800b83c <xPortStartScheduler+0x13c>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a13      	ldr	r2, [pc, #76]	@ (800b83c <xPortStartScheduler+0x13c>)
 800b7ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b7f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b7f4:	f000 f8da 	bl	800b9ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b7f8:	4b11      	ldr	r3, [pc, #68]	@ (800b840 <xPortStartScheduler+0x140>)
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b7fe:	f000 f8f9 	bl	800b9f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b802:	4b10      	ldr	r3, [pc, #64]	@ (800b844 <xPortStartScheduler+0x144>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a0f      	ldr	r2, [pc, #60]	@ (800b844 <xPortStartScheduler+0x144>)
 800b808:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b80c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b80e:	f7ff ff63 	bl	800b6d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b812:	f7fe ff7f 	bl	800a714 <vTaskSwitchContext>
	prvTaskExitError();
 800b816:	f7ff ff1d 	bl	800b654 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3718      	adds	r7, #24
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	e000ed00 	.word	0xe000ed00
 800b828:	410fc271 	.word	0x410fc271
 800b82c:	410fc270 	.word	0x410fc270
 800b830:	e000e400 	.word	0xe000e400
 800b834:	20000f44 	.word	0x20000f44
 800b838:	20000f48 	.word	0x20000f48
 800b83c:	e000ed20 	.word	0xe000ed20
 800b840:	2000002c 	.word	0x2000002c
 800b844:	e000ef34 	.word	0xe000ef34

0800b848 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	607b      	str	r3, [r7, #4]
}
 800b860:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b862:	4b10      	ldr	r3, [pc, #64]	@ (800b8a4 <vPortEnterCritical+0x5c>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	3301      	adds	r3, #1
 800b868:	4a0e      	ldr	r2, [pc, #56]	@ (800b8a4 <vPortEnterCritical+0x5c>)
 800b86a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b86c:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a4 <vPortEnterCritical+0x5c>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d110      	bne.n	800b896 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b874:	4b0c      	ldr	r3, [pc, #48]	@ (800b8a8 <vPortEnterCritical+0x60>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00b      	beq.n	800b896 <vPortEnterCritical+0x4e>
	__asm volatile
 800b87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	603b      	str	r3, [r7, #0]
}
 800b890:	bf00      	nop
 800b892:	bf00      	nop
 800b894:	e7fd      	b.n	800b892 <vPortEnterCritical+0x4a>
	}
}
 800b896:	bf00      	nop
 800b898:	370c      	adds	r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	2000002c 	.word	0x2000002c
 800b8a8:	e000ed04 	.word	0xe000ed04

0800b8ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b8b2:	4b12      	ldr	r3, [pc, #72]	@ (800b8fc <vPortExitCritical+0x50>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10b      	bne.n	800b8d2 <vPortExitCritical+0x26>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	607b      	str	r3, [r7, #4]
}
 800b8cc:	bf00      	nop
 800b8ce:	bf00      	nop
 800b8d0:	e7fd      	b.n	800b8ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b8d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b8fc <vPortExitCritical+0x50>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	4a08      	ldr	r2, [pc, #32]	@ (800b8fc <vPortExitCritical+0x50>)
 800b8da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b8dc:	4b07      	ldr	r3, [pc, #28]	@ (800b8fc <vPortExitCritical+0x50>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d105      	bne.n	800b8f0 <vPortExitCritical+0x44>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	f383 8811 	msr	BASEPRI, r3
}
 800b8ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr
 800b8fc:	2000002c 	.word	0x2000002c

0800b900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b900:	f3ef 8009 	mrs	r0, PSP
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	4b15      	ldr	r3, [pc, #84]	@ (800b960 <pxCurrentTCBConst>)
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	f01e 0f10 	tst.w	lr, #16
 800b910:	bf08      	it	eq
 800b912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91a:	6010      	str	r0, [r2, #0]
 800b91c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b920:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b924:	f380 8811 	msr	BASEPRI, r0
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	f3bf 8f6f 	isb	sy
 800b930:	f7fe fef0 	bl	800a714 <vTaskSwitchContext>
 800b934:	f04f 0000 	mov.w	r0, #0
 800b938:	f380 8811 	msr	BASEPRI, r0
 800b93c:	bc09      	pop	{r0, r3}
 800b93e:	6819      	ldr	r1, [r3, #0]
 800b940:	6808      	ldr	r0, [r1, #0]
 800b942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b946:	f01e 0f10 	tst.w	lr, #16
 800b94a:	bf08      	it	eq
 800b94c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b950:	f380 8809 	msr	PSP, r0
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop
 800b95c:	f3af 8000 	nop.w

0800b960 <pxCurrentTCBConst>:
 800b960:	20000918 	.word	0x20000918
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b964:	bf00      	nop
 800b966:	bf00      	nop

0800b968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
	__asm volatile
 800b96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b972:	f383 8811 	msr	BASEPRI, r3
 800b976:	f3bf 8f6f 	isb	sy
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	607b      	str	r3, [r7, #4]
}
 800b980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b982:	f7fe fe0d 	bl	800a5a0 <xTaskIncrementTick>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d003      	beq.n	800b994 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b98c:	4b06      	ldr	r3, [pc, #24]	@ (800b9a8 <xPortSysTickHandler+0x40>)
 800b98e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b992:	601a      	str	r2, [r3, #0]
 800b994:	2300      	movs	r3, #0
 800b996:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	f383 8811 	msr	BASEPRI, r3
}
 800b99e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b9a0:	bf00      	nop
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	e000ed04 	.word	0xe000ed04

0800b9ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b9e0 <vPortSetupTimerInterrupt+0x34>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b9b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b9e4 <vPortSetupTimerInterrupt+0x38>)
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b9bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b9e8 <vPortSetupTimerInterrupt+0x3c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a0a      	ldr	r2, [pc, #40]	@ (800b9ec <vPortSetupTimerInterrupt+0x40>)
 800b9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b9c6:	099b      	lsrs	r3, r3, #6
 800b9c8:	4a09      	ldr	r2, [pc, #36]	@ (800b9f0 <vPortSetupTimerInterrupt+0x44>)
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b9ce:	4b04      	ldr	r3, [pc, #16]	@ (800b9e0 <vPortSetupTimerInterrupt+0x34>)
 800b9d0:	2207      	movs	r2, #7
 800b9d2:	601a      	str	r2, [r3, #0]
}
 800b9d4:	bf00      	nop
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	e000e010 	.word	0xe000e010
 800b9e4:	e000e018 	.word	0xe000e018
 800b9e8:	20000000 	.word	0x20000000
 800b9ec:	10624dd3 	.word	0x10624dd3
 800b9f0:	e000e014 	.word	0xe000e014

0800b9f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b9f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ba04 <vPortEnableVFP+0x10>
 800b9f8:	6801      	ldr	r1, [r0, #0]
 800b9fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b9fe:	6001      	str	r1, [r0, #0]
 800ba00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba02:	bf00      	nop
 800ba04:	e000ed88 	.word	0xe000ed88

0800ba08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba0e:	f3ef 8305 	mrs	r3, IPSR
 800ba12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2b0f      	cmp	r3, #15
 800ba18:	d915      	bls.n	800ba46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba1a:	4a18      	ldr	r2, [pc, #96]	@ (800ba7c <vPortValidateInterruptPriority+0x74>)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	4413      	add	r3, r2
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba24:	4b16      	ldr	r3, [pc, #88]	@ (800ba80 <vPortValidateInterruptPriority+0x78>)
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	7afa      	ldrb	r2, [r7, #11]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d20b      	bcs.n	800ba46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	607b      	str	r3, [r7, #4]
}
 800ba40:	bf00      	nop
 800ba42:	bf00      	nop
 800ba44:	e7fd      	b.n	800ba42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba46:	4b0f      	ldr	r3, [pc, #60]	@ (800ba84 <vPortValidateInterruptPriority+0x7c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ba4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ba88 <vPortValidateInterruptPriority+0x80>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d90b      	bls.n	800ba6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ba56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba5a:	f383 8811 	msr	BASEPRI, r3
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	603b      	str	r3, [r7, #0]
}
 800ba68:	bf00      	nop
 800ba6a:	bf00      	nop
 800ba6c:	e7fd      	b.n	800ba6a <vPortValidateInterruptPriority+0x62>
	}
 800ba6e:	bf00      	nop
 800ba70:	3714      	adds	r7, #20
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	e000e3f0 	.word	0xe000e3f0
 800ba80:	20000f44 	.word	0x20000f44
 800ba84:	e000ed0c 	.word	0xe000ed0c
 800ba88:	20000f48 	.word	0x20000f48

0800ba8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b08a      	sub	sp, #40	@ 0x28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba94:	2300      	movs	r3, #0
 800ba96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba98:	f7fe fcc6 	bl	800a428 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba9c:	4b5c      	ldr	r3, [pc, #368]	@ (800bc10 <pvPortMalloc+0x184>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d101      	bne.n	800baa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800baa4:	f000 f924 	bl	800bcf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800baa8:	4b5a      	ldr	r3, [pc, #360]	@ (800bc14 <pvPortMalloc+0x188>)
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4013      	ands	r3, r2
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f040 8095 	bne.w	800bbe0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d01e      	beq.n	800bafa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800babc:	2208      	movs	r2, #8
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4413      	add	r3, r2
 800bac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f003 0307 	and.w	r3, r3, #7
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d015      	beq.n	800bafa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f023 0307 	bic.w	r3, r3, #7
 800bad4:	3308      	adds	r3, #8
 800bad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f003 0307 	and.w	r3, r3, #7
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00b      	beq.n	800bafa <pvPortMalloc+0x6e>
	__asm volatile
 800bae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	617b      	str	r3, [r7, #20]
}
 800baf4:	bf00      	nop
 800baf6:	bf00      	nop
 800baf8:	e7fd      	b.n	800baf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d06f      	beq.n	800bbe0 <pvPortMalloc+0x154>
 800bb00:	4b45      	ldr	r3, [pc, #276]	@ (800bc18 <pvPortMalloc+0x18c>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d86a      	bhi.n	800bbe0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb0a:	4b44      	ldr	r3, [pc, #272]	@ (800bc1c <pvPortMalloc+0x190>)
 800bb0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bb0e:	4b43      	ldr	r3, [pc, #268]	@ (800bc1c <pvPortMalloc+0x190>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb14:	e004      	b.n	800bb20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d903      	bls.n	800bb32 <pvPortMalloc+0xa6>
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1f1      	bne.n	800bb16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb32:	4b37      	ldr	r3, [pc, #220]	@ (800bc10 <pvPortMalloc+0x184>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d051      	beq.n	800bbe0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2208      	movs	r2, #8
 800bb42:	4413      	add	r3, r2
 800bb44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	6a3b      	ldr	r3, [r7, #32]
 800bb4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb50:	685a      	ldr	r2, [r3, #4]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	1ad2      	subs	r2, r2, r3
 800bb56:	2308      	movs	r3, #8
 800bb58:	005b      	lsls	r3, r3, #1
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d920      	bls.n	800bba0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4413      	add	r3, r2
 800bb64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	f003 0307 	and.w	r3, r3, #7
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00b      	beq.n	800bb88 <pvPortMalloc+0xfc>
	__asm volatile
 800bb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb74:	f383 8811 	msr	BASEPRI, r3
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	613b      	str	r3, [r7, #16]
}
 800bb82:	bf00      	nop
 800bb84:	bf00      	nop
 800bb86:	e7fd      	b.n	800bb84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	1ad2      	subs	r2, r2, r3
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb9a:	69b8      	ldr	r0, [r7, #24]
 800bb9c:	f000 f90a 	bl	800bdb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bba0:	4b1d      	ldr	r3, [pc, #116]	@ (800bc18 <pvPortMalloc+0x18c>)
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	1ad3      	subs	r3, r2, r3
 800bbaa:	4a1b      	ldr	r2, [pc, #108]	@ (800bc18 <pvPortMalloc+0x18c>)
 800bbac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bbae:	4b1a      	ldr	r3, [pc, #104]	@ (800bc18 <pvPortMalloc+0x18c>)
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	4b1b      	ldr	r3, [pc, #108]	@ (800bc20 <pvPortMalloc+0x194>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d203      	bcs.n	800bbc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bbba:	4b17      	ldr	r3, [pc, #92]	@ (800bc18 <pvPortMalloc+0x18c>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a18      	ldr	r2, [pc, #96]	@ (800bc20 <pvPortMalloc+0x194>)
 800bbc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc4:	685a      	ldr	r2, [r3, #4]
 800bbc6:	4b13      	ldr	r3, [pc, #76]	@ (800bc14 <pvPortMalloc+0x188>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	431a      	orrs	r2, r3
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bbd6:	4b13      	ldr	r3, [pc, #76]	@ (800bc24 <pvPortMalloc+0x198>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	4a11      	ldr	r2, [pc, #68]	@ (800bc24 <pvPortMalloc+0x198>)
 800bbde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bbe0:	f7fe fc30 	bl	800a444 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	f003 0307 	and.w	r3, r3, #7
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00b      	beq.n	800bc06 <pvPortMalloc+0x17a>
	__asm volatile
 800bbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	60fb      	str	r3, [r7, #12]
}
 800bc00:	bf00      	nop
 800bc02:	bf00      	nop
 800bc04:	e7fd      	b.n	800bc02 <pvPortMalloc+0x176>
	return pvReturn;
 800bc06:	69fb      	ldr	r3, [r7, #28]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3728      	adds	r7, #40	@ 0x28
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20004b54 	.word	0x20004b54
 800bc14:	20004b68 	.word	0x20004b68
 800bc18:	20004b58 	.word	0x20004b58
 800bc1c:	20004b4c 	.word	0x20004b4c
 800bc20:	20004b5c 	.word	0x20004b5c
 800bc24:	20004b60 	.word	0x20004b60

0800bc28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d04f      	beq.n	800bcda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc3a:	2308      	movs	r3, #8
 800bc3c:	425b      	negs	r3, r3
 800bc3e:	697a      	ldr	r2, [r7, #20]
 800bc40:	4413      	add	r3, r2
 800bc42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	4b25      	ldr	r3, [pc, #148]	@ (800bce4 <vPortFree+0xbc>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4013      	ands	r3, r2
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d10b      	bne.n	800bc6e <vPortFree+0x46>
	__asm volatile
 800bc56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc5a:	f383 8811 	msr	BASEPRI, r3
 800bc5e:	f3bf 8f6f 	isb	sy
 800bc62:	f3bf 8f4f 	dsb	sy
 800bc66:	60fb      	str	r3, [r7, #12]
}
 800bc68:	bf00      	nop
 800bc6a:	bf00      	nop
 800bc6c:	e7fd      	b.n	800bc6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00b      	beq.n	800bc8e <vPortFree+0x66>
	__asm volatile
 800bc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	60bb      	str	r3, [r7, #8]
}
 800bc88:	bf00      	nop
 800bc8a:	bf00      	nop
 800bc8c:	e7fd      	b.n	800bc8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	4b14      	ldr	r3, [pc, #80]	@ (800bce4 <vPortFree+0xbc>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4013      	ands	r3, r2
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d01e      	beq.n	800bcda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d11a      	bne.n	800bcda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	685a      	ldr	r2, [r3, #4]
 800bca8:	4b0e      	ldr	r3, [pc, #56]	@ (800bce4 <vPortFree+0xbc>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	43db      	mvns	r3, r3
 800bcae:	401a      	ands	r2, r3
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bcb4:	f7fe fbb8 	bl	800a428 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	685a      	ldr	r2, [r3, #4]
 800bcbc:	4b0a      	ldr	r3, [pc, #40]	@ (800bce8 <vPortFree+0xc0>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	4a09      	ldr	r2, [pc, #36]	@ (800bce8 <vPortFree+0xc0>)
 800bcc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bcc6:	6938      	ldr	r0, [r7, #16]
 800bcc8:	f000 f874 	bl	800bdb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bccc:	4b07      	ldr	r3, [pc, #28]	@ (800bcec <vPortFree+0xc4>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	4a06      	ldr	r2, [pc, #24]	@ (800bcec <vPortFree+0xc4>)
 800bcd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bcd6:	f7fe fbb5 	bl	800a444 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bcda:	bf00      	nop
 800bcdc:	3718      	adds	r7, #24
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	20004b68 	.word	0x20004b68
 800bce8:	20004b58 	.word	0x20004b58
 800bcec:	20004b64 	.word	0x20004b64

0800bcf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bcf6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bcfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bcfc:	4b27      	ldr	r3, [pc, #156]	@ (800bd9c <prvHeapInit+0xac>)
 800bcfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f003 0307 	and.w	r3, r3, #7
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00c      	beq.n	800bd24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	3307      	adds	r3, #7
 800bd0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f023 0307 	bic.w	r3, r3, #7
 800bd16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	4a1f      	ldr	r2, [pc, #124]	@ (800bd9c <prvHeapInit+0xac>)
 800bd20:	4413      	add	r3, r2
 800bd22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd28:	4a1d      	ldr	r2, [pc, #116]	@ (800bda0 <prvHeapInit+0xb0>)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd2e:	4b1c      	ldr	r3, [pc, #112]	@ (800bda0 <prvHeapInit+0xb0>)
 800bd30:	2200      	movs	r2, #0
 800bd32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	4413      	add	r3, r2
 800bd3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd3c:	2208      	movs	r2, #8
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	1a9b      	subs	r3, r3, r2
 800bd42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f023 0307 	bic.w	r3, r3, #7
 800bd4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	4a15      	ldr	r2, [pc, #84]	@ (800bda4 <prvHeapInit+0xb4>)
 800bd50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd52:	4b14      	ldr	r3, [pc, #80]	@ (800bda4 <prvHeapInit+0xb4>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2200      	movs	r2, #0
 800bd58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd5a:	4b12      	ldr	r3, [pc, #72]	@ (800bda4 <prvHeapInit+0xb4>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	1ad2      	subs	r2, r2, r3
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd70:	4b0c      	ldr	r3, [pc, #48]	@ (800bda4 <prvHeapInit+0xb4>)
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	4a0a      	ldr	r2, [pc, #40]	@ (800bda8 <prvHeapInit+0xb8>)
 800bd7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	4a09      	ldr	r2, [pc, #36]	@ (800bdac <prvHeapInit+0xbc>)
 800bd86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd88:	4b09      	ldr	r3, [pc, #36]	@ (800bdb0 <prvHeapInit+0xc0>)
 800bd8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bd8e:	601a      	str	r2, [r3, #0]
}
 800bd90:	bf00      	nop
 800bd92:	3714      	adds	r7, #20
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr
 800bd9c:	20000f4c 	.word	0x20000f4c
 800bda0:	20004b4c 	.word	0x20004b4c
 800bda4:	20004b54 	.word	0x20004b54
 800bda8:	20004b5c 	.word	0x20004b5c
 800bdac:	20004b58 	.word	0x20004b58
 800bdb0:	20004b68 	.word	0x20004b68

0800bdb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bdbc:	4b28      	ldr	r3, [pc, #160]	@ (800be60 <prvInsertBlockIntoFreeList+0xac>)
 800bdbe:	60fb      	str	r3, [r7, #12]
 800bdc0:	e002      	b.n	800bdc8 <prvInsertBlockIntoFreeList+0x14>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	60fb      	str	r3, [r7, #12]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d8f7      	bhi.n	800bdc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	4413      	add	r3, r2
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d108      	bne.n	800bdf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	441a      	add	r2, r3
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	441a      	add	r2, r3
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	429a      	cmp	r2, r3
 800be08:	d118      	bne.n	800be3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	4b15      	ldr	r3, [pc, #84]	@ (800be64 <prvInsertBlockIntoFreeList+0xb0>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	429a      	cmp	r2, r3
 800be14:	d00d      	beq.n	800be32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	441a      	add	r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	601a      	str	r2, [r3, #0]
 800be30:	e008      	b.n	800be44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be32:	4b0c      	ldr	r3, [pc, #48]	@ (800be64 <prvInsertBlockIntoFreeList+0xb0>)
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	601a      	str	r2, [r3, #0]
 800be3a:	e003      	b.n	800be44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d002      	beq.n	800be52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be52:	bf00      	nop
 800be54:	3714      	adds	r7, #20
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	20004b4c 	.word	0x20004b4c
 800be64:	20004b54 	.word	0x20004b54

0800be68 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800be6c:	2201      	movs	r2, #1
 800be6e:	490e      	ldr	r1, [pc, #56]	@ (800bea8 <MX_USB_HOST_Init+0x40>)
 800be70:	480e      	ldr	r0, [pc, #56]	@ (800beac <MX_USB_HOST_Init+0x44>)
 800be72:	f7fa ffc5 	bl	8006e00 <USBH_Init>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d001      	beq.n	800be80 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800be7c:	f7f4 fe16 	bl	8000aac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800be80:	490b      	ldr	r1, [pc, #44]	@ (800beb0 <MX_USB_HOST_Init+0x48>)
 800be82:	480a      	ldr	r0, [pc, #40]	@ (800beac <MX_USB_HOST_Init+0x44>)
 800be84:	f7fb f88b 	bl	8006f9e <USBH_RegisterClass>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800be8e:	f7f4 fe0d 	bl	8000aac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800be92:	4806      	ldr	r0, [pc, #24]	@ (800beac <MX_USB_HOST_Init+0x44>)
 800be94:	f7fb f90f 	bl	80070b6 <USBH_Start>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d001      	beq.n	800bea2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800be9e:	f7f4 fe05 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bea2:	bf00      	nop
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	0800beb5 	.word	0x0800beb5
 800beac:	20004b6c 	.word	0x20004b6c
 800beb0:	2000000c 	.word	0x2000000c

0800beb4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	460b      	mov	r3, r1
 800bebe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bec0:	78fb      	ldrb	r3, [r7, #3]
 800bec2:	3b01      	subs	r3, #1
 800bec4:	2b04      	cmp	r3, #4
 800bec6:	d819      	bhi.n	800befc <USBH_UserProcess+0x48>
 800bec8:	a201      	add	r2, pc, #4	@ (adr r2, 800bed0 <USBH_UserProcess+0x1c>)
 800beca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bece:	bf00      	nop
 800bed0:	0800befd 	.word	0x0800befd
 800bed4:	0800beed 	.word	0x0800beed
 800bed8:	0800befd 	.word	0x0800befd
 800bedc:	0800bef5 	.word	0x0800bef5
 800bee0:	0800bee5 	.word	0x0800bee5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bee4:	4b09      	ldr	r3, [pc, #36]	@ (800bf0c <USBH_UserProcess+0x58>)
 800bee6:	2203      	movs	r2, #3
 800bee8:	701a      	strb	r2, [r3, #0]
  break;
 800beea:	e008      	b.n	800befe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800beec:	4b07      	ldr	r3, [pc, #28]	@ (800bf0c <USBH_UserProcess+0x58>)
 800beee:	2202      	movs	r2, #2
 800bef0:	701a      	strb	r2, [r3, #0]
  break;
 800bef2:	e004      	b.n	800befe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bef4:	4b05      	ldr	r3, [pc, #20]	@ (800bf0c <USBH_UserProcess+0x58>)
 800bef6:	2201      	movs	r2, #1
 800bef8:	701a      	strb	r2, [r3, #0]
  break;
 800befa:	e000      	b.n	800befe <USBH_UserProcess+0x4a>

  default:
  break;
 800befc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800befe:	bf00      	nop
 800bf00:	370c      	adds	r7, #12
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	20004f50 	.word	0x20004f50

0800bf10 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b08a      	sub	sp, #40	@ 0x28
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf18:	f107 0314 	add.w	r3, r7, #20
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	601a      	str	r2, [r3, #0]
 800bf20:	605a      	str	r2, [r3, #4]
 800bf22:	609a      	str	r2, [r3, #8]
 800bf24:	60da      	str	r2, [r3, #12]
 800bf26:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf30:	d147      	bne.n	800bfc2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf32:	2300      	movs	r3, #0
 800bf34:	613b      	str	r3, [r7, #16]
 800bf36:	4b25      	ldr	r3, [pc, #148]	@ (800bfcc <HAL_HCD_MspInit+0xbc>)
 800bf38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf3a:	4a24      	ldr	r2, [pc, #144]	@ (800bfcc <HAL_HCD_MspInit+0xbc>)
 800bf3c:	f043 0301 	orr.w	r3, r3, #1
 800bf40:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf42:	4b22      	ldr	r3, [pc, #136]	@ (800bfcc <HAL_HCD_MspInit+0xbc>)
 800bf44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf46:	f003 0301 	and.w	r3, r3, #1
 800bf4a:	613b      	str	r3, [r7, #16]
 800bf4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bf4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bf54:	2300      	movs	r3, #0
 800bf56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bf5c:	f107 0314 	add.w	r3, r7, #20
 800bf60:	4619      	mov	r1, r3
 800bf62:	481b      	ldr	r0, [pc, #108]	@ (800bfd0 <HAL_HCD_MspInit+0xc0>)
 800bf64:	f7f5 f952 	bl	800120c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bf68:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800bf6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf6e:	2302      	movs	r3, #2
 800bf70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf72:	2300      	movs	r3, #0
 800bf74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf76:	2300      	movs	r3, #0
 800bf78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bf7a:	230a      	movs	r3, #10
 800bf7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf7e:	f107 0314 	add.w	r3, r7, #20
 800bf82:	4619      	mov	r1, r3
 800bf84:	4812      	ldr	r0, [pc, #72]	@ (800bfd0 <HAL_HCD_MspInit+0xc0>)
 800bf86:	f7f5 f941 	bl	800120c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf8a:	4b10      	ldr	r3, [pc, #64]	@ (800bfcc <HAL_HCD_MspInit+0xbc>)
 800bf8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf8e:	4a0f      	ldr	r2, [pc, #60]	@ (800bfcc <HAL_HCD_MspInit+0xbc>)
 800bf90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf94:	6353      	str	r3, [r2, #52]	@ 0x34
 800bf96:	2300      	movs	r3, #0
 800bf98:	60fb      	str	r3, [r7, #12]
 800bf9a:	4b0c      	ldr	r3, [pc, #48]	@ (800bfcc <HAL_HCD_MspInit+0xbc>)
 800bf9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf9e:	4a0b      	ldr	r2, [pc, #44]	@ (800bfcc <HAL_HCD_MspInit+0xbc>)
 800bfa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bfa4:	6453      	str	r3, [r2, #68]	@ 0x44
 800bfa6:	4b09      	ldr	r3, [pc, #36]	@ (800bfcc <HAL_HCD_MspInit+0xbc>)
 800bfa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bfae:	60fb      	str	r3, [r7, #12]
 800bfb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	2105      	movs	r1, #5
 800bfb6:	2043      	movs	r0, #67	@ 0x43
 800bfb8:	f7f5 f8f1 	bl	800119e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bfbc:	2043      	movs	r0, #67	@ 0x43
 800bfbe:	f7f5 f90a 	bl	80011d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bfc2:	bf00      	nop
 800bfc4:	3728      	adds	r7, #40	@ 0x28
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	40023800 	.word	0x40023800
 800bfd0:	40020000 	.word	0x40020000

0800bfd4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7fb fd19 	bl	8007a1a <USBH_LL_IncTimer>
}
 800bfe8:	bf00      	nop
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fb fd5d 	bl	8007abe <USBH_LL_Connect>
}
 800c004:	bf00      	nop
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fb fd72 	bl	8007b04 <USBH_LL_Disconnect>
}
 800c020:	bf00      	nop
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	460b      	mov	r3, r1
 800c032:	70fb      	strb	r3, [r7, #3]
 800c034:	4613      	mov	r3, r2
 800c036:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fb fda9 	bl	8007b96 <USBH_LL_NotifyURBChange>
#endif
}
 800c044:	bf00      	nop
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fb fd07 	bl	8007a6e <USBH_LL_PortEnabled>
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c076:	4618      	mov	r0, r3
 800c078:	f7fb fd13 	bl	8007aa2 <USBH_LL_PortDisabled>
}
 800c07c:	bf00      	nop
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c092:	2b01      	cmp	r3, #1
 800c094:	d12a      	bne.n	800c0ec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c096:	4a18      	ldr	r2, [pc, #96]	@ (800c0f8 <USBH_LL_Init+0x74>)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a15      	ldr	r2, [pc, #84]	@ (800c0f8 <USBH_LL_Init+0x74>)
 800c0a2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c0a6:	4b14      	ldr	r3, [pc, #80]	@ (800c0f8 <USBH_LL_Init+0x74>)
 800c0a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c0ac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c0ae:	4b12      	ldr	r3, [pc, #72]	@ (800c0f8 <USBH_LL_Init+0x74>)
 800c0b0:	2208      	movs	r2, #8
 800c0b2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c0b4:	4b10      	ldr	r3, [pc, #64]	@ (800c0f8 <USBH_LL_Init+0x74>)
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c0ba:	4b0f      	ldr	r3, [pc, #60]	@ (800c0f8 <USBH_LL_Init+0x74>)
 800c0bc:	2200      	movs	r2, #0
 800c0be:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c0c0:	4b0d      	ldr	r3, [pc, #52]	@ (800c0f8 <USBH_LL_Init+0x74>)
 800c0c2:	2202      	movs	r2, #2
 800c0c4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c0c6:	4b0c      	ldr	r3, [pc, #48]	@ (800c0f8 <USBH_LL_Init+0x74>)
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c0cc:	480a      	ldr	r0, [pc, #40]	@ (800c0f8 <USBH_LL_Init+0x74>)
 800c0ce:	f7f5 fa84 	bl	80015da <HAL_HCD_Init>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d001      	beq.n	800c0dc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c0d8:	f7f4 fce8 	bl	8000aac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c0dc:	4806      	ldr	r0, [pc, #24]	@ (800c0f8 <USBH_LL_Init+0x74>)
 800c0de:	f7f5 fee5 	bl	8001eac <HAL_HCD_GetCurrentFrame>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7fb fc88 	bl	80079fc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3708      	adds	r7, #8
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20004f54 	.word	0x20004f54

0800c0fc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c104:	2300      	movs	r3, #0
 800c106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c108:	2300      	movs	r3, #0
 800c10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c112:	4618      	mov	r0, r3
 800c114:	f7f5 fe52 	bl	8001dbc <HAL_HCD_Start>
 800c118:	4603      	mov	r3, r0
 800c11a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
 800c11e:	4618      	mov	r0, r3
 800c120:	f000 f95e 	bl	800c3e0 <USBH_Get_USB_Status>
 800c124:	4603      	mov	r3, r0
 800c126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c128:	7bbb      	ldrb	r3, [r7, #14]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b084      	sub	sp, #16
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c13e:	2300      	movs	r3, #0
 800c140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c148:	4618      	mov	r0, r3
 800c14a:	f7f5 fe5a 	bl	8001e02 <HAL_HCD_Stop>
 800c14e:	4603      	mov	r3, r0
 800c150:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c152:	7bfb      	ldrb	r3, [r7, #15]
 800c154:	4618      	mov	r0, r3
 800c156:	f000 f943 	bl	800c3e0 <USBH_Get_USB_Status>
 800c15a:	4603      	mov	r3, r0
 800c15c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c170:	2301      	movs	r3, #1
 800c172:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7f5 fea4 	bl	8001ec8 <HAL_HCD_GetCurrentSpeed>
 800c180:	4603      	mov	r3, r0
 800c182:	2b02      	cmp	r3, #2
 800c184:	d00c      	beq.n	800c1a0 <USBH_LL_GetSpeed+0x38>
 800c186:	2b02      	cmp	r3, #2
 800c188:	d80d      	bhi.n	800c1a6 <USBH_LL_GetSpeed+0x3e>
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d002      	beq.n	800c194 <USBH_LL_GetSpeed+0x2c>
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d003      	beq.n	800c19a <USBH_LL_GetSpeed+0x32>
 800c192:	e008      	b.n	800c1a6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c194:	2300      	movs	r3, #0
 800c196:	73fb      	strb	r3, [r7, #15]
    break;
 800c198:	e008      	b.n	800c1ac <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c19a:	2301      	movs	r3, #1
 800c19c:	73fb      	strb	r3, [r7, #15]
    break;
 800c19e:	e005      	b.n	800c1ac <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a4:	e002      	b.n	800c1ac <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c1aa:	bf00      	nop
  }
  return  speed;
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b084      	sub	sp, #16
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7f5 fe35 	bl	8001e3c <HAL_HCD_ResetPort>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1d6:	7bfb      	ldrb	r3, [r7, #15]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 f901 	bl	800c3e0 <USBH_Get_USB_Status>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3710      	adds	r7, #16
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c1fe:	78fa      	ldrb	r2, [r7, #3]
 800c200:	4611      	mov	r1, r2
 800c202:	4618      	mov	r0, r3
 800c204:	f7f5 fe3d 	bl	8001e82 <HAL_HCD_HC_GetXferCount>
 800c208:	4603      	mov	r3, r0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3708      	adds	r7, #8
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c212:	b590      	push	{r4, r7, lr}
 800c214:	b089      	sub	sp, #36	@ 0x24
 800c216:	af04      	add	r7, sp, #16
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	4608      	mov	r0, r1
 800c21c:	4611      	mov	r1, r2
 800c21e:	461a      	mov	r2, r3
 800c220:	4603      	mov	r3, r0
 800c222:	70fb      	strb	r3, [r7, #3]
 800c224:	460b      	mov	r3, r1
 800c226:	70bb      	strb	r3, [r7, #2]
 800c228:	4613      	mov	r3, r2
 800c22a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c22c:	2300      	movs	r3, #0
 800c22e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c230:	2300      	movs	r3, #0
 800c232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c23a:	787c      	ldrb	r4, [r7, #1]
 800c23c:	78ba      	ldrb	r2, [r7, #2]
 800c23e:	78f9      	ldrb	r1, [r7, #3]
 800c240:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c242:	9302      	str	r3, [sp, #8]
 800c244:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c248:	9301      	str	r3, [sp, #4]
 800c24a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	4623      	mov	r3, r4
 800c252:	f7f5 fa29 	bl	80016a8 <HAL_HCD_HC_Init>
 800c256:	4603      	mov	r3, r0
 800c258:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f000 f8bf 	bl	800c3e0 <USBH_Get_USB_Status>
 800c262:	4603      	mov	r3, r0
 800c264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c266:	7bbb      	ldrb	r3, [r7, #14]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3714      	adds	r7, #20
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd90      	pop	{r4, r7, pc}

0800c270 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c27c:	2300      	movs	r3, #0
 800c27e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c280:	2300      	movs	r3, #0
 800c282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c28a:	78fa      	ldrb	r2, [r7, #3]
 800c28c:	4611      	mov	r1, r2
 800c28e:	4618      	mov	r0, r3
 800c290:	f7f5 fac2 	bl	8001818 <HAL_HCD_HC_Halt>
 800c294:	4603      	mov	r3, r0
 800c296:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c298:	7bfb      	ldrb	r3, [r7, #15]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 f8a0 	bl	800c3e0 <USBH_Get_USB_Status>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c2ae:	b590      	push	{r4, r7, lr}
 800c2b0:	b089      	sub	sp, #36	@ 0x24
 800c2b2:	af04      	add	r7, sp, #16
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	4608      	mov	r0, r1
 800c2b8:	4611      	mov	r1, r2
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	4603      	mov	r3, r0
 800c2be:	70fb      	strb	r3, [r7, #3]
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	70bb      	strb	r3, [r7, #2]
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c2d6:	787c      	ldrb	r4, [r7, #1]
 800c2d8:	78ba      	ldrb	r2, [r7, #2]
 800c2da:	78f9      	ldrb	r1, [r7, #3]
 800c2dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c2e0:	9303      	str	r3, [sp, #12]
 800c2e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c2e4:	9302      	str	r3, [sp, #8]
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e8:	9301      	str	r3, [sp, #4]
 800c2ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	4623      	mov	r3, r4
 800c2f2:	f7f5 fab5 	bl	8001860 <HAL_HCD_HC_SubmitRequest>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c2fa:	7bfb      	ldrb	r3, [r7, #15]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 f86f 	bl	800c3e0 <USBH_Get_USB_Status>
 800c302:	4603      	mov	r3, r0
 800c304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c306:	7bbb      	ldrb	r3, [r7, #14]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3714      	adds	r7, #20
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd90      	pop	{r4, r7, pc}

0800c310 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	460b      	mov	r3, r1
 800c31a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c322:	78fa      	ldrb	r2, [r7, #3]
 800c324:	4611      	mov	r1, r2
 800c326:	4618      	mov	r0, r3
 800c328:	f7f5 fd96 	bl	8001e58 <HAL_HCD_HC_GetURBState>
 800c32c:	4603      	mov	r3, r0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b082      	sub	sp, #8
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
 800c33e:	460b      	mov	r3, r1
 800c340:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d103      	bne.n	800c354 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c34c:	78fb      	ldrb	r3, [r7, #3]
 800c34e:	4618      	mov	r0, r3
 800c350:	f000 f872 	bl	800c438 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c354:	20c8      	movs	r0, #200	@ 0xc8
 800c356:	f7f4 fe23 	bl	8000fa0 <HAL_Delay>
  return USBH_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	460b      	mov	r3, r1
 800c36e:	70fb      	strb	r3, [r7, #3]
 800c370:	4613      	mov	r3, r2
 800c372:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c37a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c37c:	78fa      	ldrb	r2, [r7, #3]
 800c37e:	68f9      	ldr	r1, [r7, #12]
 800c380:	4613      	mov	r3, r2
 800c382:	011b      	lsls	r3, r3, #4
 800c384:	1a9b      	subs	r3, r3, r2
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	440b      	add	r3, r1
 800c38a:	3317      	adds	r3, #23
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00a      	beq.n	800c3a8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c392:	78fa      	ldrb	r2, [r7, #3]
 800c394:	68f9      	ldr	r1, [r7, #12]
 800c396:	4613      	mov	r3, r2
 800c398:	011b      	lsls	r3, r3, #4
 800c39a:	1a9b      	subs	r3, r3, r2
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	440b      	add	r3, r1
 800c3a0:	333c      	adds	r3, #60	@ 0x3c
 800c3a2:	78ba      	ldrb	r2, [r7, #2]
 800c3a4:	701a      	strb	r2, [r3, #0]
 800c3a6:	e009      	b.n	800c3bc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c3a8:	78fa      	ldrb	r2, [r7, #3]
 800c3aa:	68f9      	ldr	r1, [r7, #12]
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	011b      	lsls	r3, r3, #4
 800c3b0:	1a9b      	subs	r3, r3, r2
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	440b      	add	r3, r1
 800c3b6:	333d      	adds	r3, #61	@ 0x3d
 800c3b8:	78ba      	ldrb	r2, [r7, #2]
 800c3ba:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3714      	adds	r7, #20
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr

0800c3ca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b082      	sub	sp, #8
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7f4 fde4 	bl	8000fa0 <HAL_Delay>
}
 800c3d8:	bf00      	nop
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c3ee:	79fb      	ldrb	r3, [r7, #7]
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	d817      	bhi.n	800c424 <USBH_Get_USB_Status+0x44>
 800c3f4:	a201      	add	r2, pc, #4	@ (adr r2, 800c3fc <USBH_Get_USB_Status+0x1c>)
 800c3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3fa:	bf00      	nop
 800c3fc:	0800c40d 	.word	0x0800c40d
 800c400:	0800c413 	.word	0x0800c413
 800c404:	0800c419 	.word	0x0800c419
 800c408:	0800c41f 	.word	0x0800c41f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c40c:	2300      	movs	r3, #0
 800c40e:	73fb      	strb	r3, [r7, #15]
    break;
 800c410:	e00b      	b.n	800c42a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c412:	2302      	movs	r3, #2
 800c414:	73fb      	strb	r3, [r7, #15]
    break;
 800c416:	e008      	b.n	800c42a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c418:	2301      	movs	r3, #1
 800c41a:	73fb      	strb	r3, [r7, #15]
    break;
 800c41c:	e005      	b.n	800c42a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c41e:	2302      	movs	r3, #2
 800c420:	73fb      	strb	r3, [r7, #15]
    break;
 800c422:	e002      	b.n	800c42a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c424:	2302      	movs	r3, #2
 800c426:	73fb      	strb	r3, [r7, #15]
    break;
 800c428:	bf00      	nop
  }
  return usb_status;
 800c42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3714      	adds	r7, #20
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	4603      	mov	r3, r0
 800c440:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c442:	79fb      	ldrb	r3, [r7, #7]
 800c444:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c446:	79fb      	ldrb	r3, [r7, #7]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d102      	bne.n	800c452 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c44c:	2300      	movs	r3, #0
 800c44e:	73fb      	strb	r3, [r7, #15]
 800c450:	e001      	b.n	800c456 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c452:	2301      	movs	r3, #1
 800c454:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c456:	7bfb      	ldrb	r3, [r7, #15]
 800c458:	461a      	mov	r2, r3
 800c45a:	2101      	movs	r1, #1
 800c45c:	4803      	ldr	r0, [pc, #12]	@ (800c46c <MX_DriverVbusFS+0x34>)
 800c45e:	f7f5 f889 	bl	8001574 <HAL_GPIO_WritePin>
}
 800c462:	bf00      	nop
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	40020800 	.word	0x40020800

0800c470 <malloc>:
 800c470:	4b02      	ldr	r3, [pc, #8]	@ (800c47c <malloc+0xc>)
 800c472:	4601      	mov	r1, r0
 800c474:	6818      	ldr	r0, [r3, #0]
 800c476:	f000 b82d 	b.w	800c4d4 <_malloc_r>
 800c47a:	bf00      	nop
 800c47c:	20000030 	.word	0x20000030

0800c480 <free>:
 800c480:	4b02      	ldr	r3, [pc, #8]	@ (800c48c <free+0xc>)
 800c482:	4601      	mov	r1, r0
 800c484:	6818      	ldr	r0, [r3, #0]
 800c486:	f000 b903 	b.w	800c690 <_free_r>
 800c48a:	bf00      	nop
 800c48c:	20000030 	.word	0x20000030

0800c490 <sbrk_aligned>:
 800c490:	b570      	push	{r4, r5, r6, lr}
 800c492:	4e0f      	ldr	r6, [pc, #60]	@ (800c4d0 <sbrk_aligned+0x40>)
 800c494:	460c      	mov	r4, r1
 800c496:	6831      	ldr	r1, [r6, #0]
 800c498:	4605      	mov	r5, r0
 800c49a:	b911      	cbnz	r1, 800c4a2 <sbrk_aligned+0x12>
 800c49c:	f000 f8ae 	bl	800c5fc <_sbrk_r>
 800c4a0:	6030      	str	r0, [r6, #0]
 800c4a2:	4621      	mov	r1, r4
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	f000 f8a9 	bl	800c5fc <_sbrk_r>
 800c4aa:	1c43      	adds	r3, r0, #1
 800c4ac:	d103      	bne.n	800c4b6 <sbrk_aligned+0x26>
 800c4ae:	f04f 34ff 	mov.w	r4, #4294967295
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	bd70      	pop	{r4, r5, r6, pc}
 800c4b6:	1cc4      	adds	r4, r0, #3
 800c4b8:	f024 0403 	bic.w	r4, r4, #3
 800c4bc:	42a0      	cmp	r0, r4
 800c4be:	d0f8      	beq.n	800c4b2 <sbrk_aligned+0x22>
 800c4c0:	1a21      	subs	r1, r4, r0
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	f000 f89a 	bl	800c5fc <_sbrk_r>
 800c4c8:	3001      	adds	r0, #1
 800c4ca:	d1f2      	bne.n	800c4b2 <sbrk_aligned+0x22>
 800c4cc:	e7ef      	b.n	800c4ae <sbrk_aligned+0x1e>
 800c4ce:	bf00      	nop
 800c4d0:	20005334 	.word	0x20005334

0800c4d4 <_malloc_r>:
 800c4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d8:	1ccd      	adds	r5, r1, #3
 800c4da:	f025 0503 	bic.w	r5, r5, #3
 800c4de:	3508      	adds	r5, #8
 800c4e0:	2d0c      	cmp	r5, #12
 800c4e2:	bf38      	it	cc
 800c4e4:	250c      	movcc	r5, #12
 800c4e6:	2d00      	cmp	r5, #0
 800c4e8:	4606      	mov	r6, r0
 800c4ea:	db01      	blt.n	800c4f0 <_malloc_r+0x1c>
 800c4ec:	42a9      	cmp	r1, r5
 800c4ee:	d904      	bls.n	800c4fa <_malloc_r+0x26>
 800c4f0:	230c      	movs	r3, #12
 800c4f2:	6033      	str	r3, [r6, #0]
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5d0 <_malloc_r+0xfc>
 800c4fe:	f000 f869 	bl	800c5d4 <__malloc_lock>
 800c502:	f8d8 3000 	ldr.w	r3, [r8]
 800c506:	461c      	mov	r4, r3
 800c508:	bb44      	cbnz	r4, 800c55c <_malloc_r+0x88>
 800c50a:	4629      	mov	r1, r5
 800c50c:	4630      	mov	r0, r6
 800c50e:	f7ff ffbf 	bl	800c490 <sbrk_aligned>
 800c512:	1c43      	adds	r3, r0, #1
 800c514:	4604      	mov	r4, r0
 800c516:	d158      	bne.n	800c5ca <_malloc_r+0xf6>
 800c518:	f8d8 4000 	ldr.w	r4, [r8]
 800c51c:	4627      	mov	r7, r4
 800c51e:	2f00      	cmp	r7, #0
 800c520:	d143      	bne.n	800c5aa <_malloc_r+0xd6>
 800c522:	2c00      	cmp	r4, #0
 800c524:	d04b      	beq.n	800c5be <_malloc_r+0xea>
 800c526:	6823      	ldr	r3, [r4, #0]
 800c528:	4639      	mov	r1, r7
 800c52a:	4630      	mov	r0, r6
 800c52c:	eb04 0903 	add.w	r9, r4, r3
 800c530:	f000 f864 	bl	800c5fc <_sbrk_r>
 800c534:	4581      	cmp	r9, r0
 800c536:	d142      	bne.n	800c5be <_malloc_r+0xea>
 800c538:	6821      	ldr	r1, [r4, #0]
 800c53a:	1a6d      	subs	r5, r5, r1
 800c53c:	4629      	mov	r1, r5
 800c53e:	4630      	mov	r0, r6
 800c540:	f7ff ffa6 	bl	800c490 <sbrk_aligned>
 800c544:	3001      	adds	r0, #1
 800c546:	d03a      	beq.n	800c5be <_malloc_r+0xea>
 800c548:	6823      	ldr	r3, [r4, #0]
 800c54a:	442b      	add	r3, r5
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	f8d8 3000 	ldr.w	r3, [r8]
 800c552:	685a      	ldr	r2, [r3, #4]
 800c554:	bb62      	cbnz	r2, 800c5b0 <_malloc_r+0xdc>
 800c556:	f8c8 7000 	str.w	r7, [r8]
 800c55a:	e00f      	b.n	800c57c <_malloc_r+0xa8>
 800c55c:	6822      	ldr	r2, [r4, #0]
 800c55e:	1b52      	subs	r2, r2, r5
 800c560:	d420      	bmi.n	800c5a4 <_malloc_r+0xd0>
 800c562:	2a0b      	cmp	r2, #11
 800c564:	d917      	bls.n	800c596 <_malloc_r+0xc2>
 800c566:	1961      	adds	r1, r4, r5
 800c568:	42a3      	cmp	r3, r4
 800c56a:	6025      	str	r5, [r4, #0]
 800c56c:	bf18      	it	ne
 800c56e:	6059      	strne	r1, [r3, #4]
 800c570:	6863      	ldr	r3, [r4, #4]
 800c572:	bf08      	it	eq
 800c574:	f8c8 1000 	streq.w	r1, [r8]
 800c578:	5162      	str	r2, [r4, r5]
 800c57a:	604b      	str	r3, [r1, #4]
 800c57c:	4630      	mov	r0, r6
 800c57e:	f000 f82f 	bl	800c5e0 <__malloc_unlock>
 800c582:	f104 000b 	add.w	r0, r4, #11
 800c586:	1d23      	adds	r3, r4, #4
 800c588:	f020 0007 	bic.w	r0, r0, #7
 800c58c:	1ac2      	subs	r2, r0, r3
 800c58e:	bf1c      	itt	ne
 800c590:	1a1b      	subne	r3, r3, r0
 800c592:	50a3      	strne	r3, [r4, r2]
 800c594:	e7af      	b.n	800c4f6 <_malloc_r+0x22>
 800c596:	6862      	ldr	r2, [r4, #4]
 800c598:	42a3      	cmp	r3, r4
 800c59a:	bf0c      	ite	eq
 800c59c:	f8c8 2000 	streq.w	r2, [r8]
 800c5a0:	605a      	strne	r2, [r3, #4]
 800c5a2:	e7eb      	b.n	800c57c <_malloc_r+0xa8>
 800c5a4:	4623      	mov	r3, r4
 800c5a6:	6864      	ldr	r4, [r4, #4]
 800c5a8:	e7ae      	b.n	800c508 <_malloc_r+0x34>
 800c5aa:	463c      	mov	r4, r7
 800c5ac:	687f      	ldr	r7, [r7, #4]
 800c5ae:	e7b6      	b.n	800c51e <_malloc_r+0x4a>
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	42a3      	cmp	r3, r4
 800c5b6:	d1fb      	bne.n	800c5b0 <_malloc_r+0xdc>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	6053      	str	r3, [r2, #4]
 800c5bc:	e7de      	b.n	800c57c <_malloc_r+0xa8>
 800c5be:	230c      	movs	r3, #12
 800c5c0:	6033      	str	r3, [r6, #0]
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	f000 f80c 	bl	800c5e0 <__malloc_unlock>
 800c5c8:	e794      	b.n	800c4f4 <_malloc_r+0x20>
 800c5ca:	6005      	str	r5, [r0, #0]
 800c5cc:	e7d6      	b.n	800c57c <_malloc_r+0xa8>
 800c5ce:	bf00      	nop
 800c5d0:	20005338 	.word	0x20005338

0800c5d4 <__malloc_lock>:
 800c5d4:	4801      	ldr	r0, [pc, #4]	@ (800c5dc <__malloc_lock+0x8>)
 800c5d6:	f000 b84b 	b.w	800c670 <__retarget_lock_acquire_recursive>
 800c5da:	bf00      	nop
 800c5dc:	20005478 	.word	0x20005478

0800c5e0 <__malloc_unlock>:
 800c5e0:	4801      	ldr	r0, [pc, #4]	@ (800c5e8 <__malloc_unlock+0x8>)
 800c5e2:	f000 b846 	b.w	800c672 <__retarget_lock_release_recursive>
 800c5e6:	bf00      	nop
 800c5e8:	20005478 	.word	0x20005478

0800c5ec <memset>:
 800c5ec:	4402      	add	r2, r0
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d100      	bne.n	800c5f6 <memset+0xa>
 800c5f4:	4770      	bx	lr
 800c5f6:	f803 1b01 	strb.w	r1, [r3], #1
 800c5fa:	e7f9      	b.n	800c5f0 <memset+0x4>

0800c5fc <_sbrk_r>:
 800c5fc:	b538      	push	{r3, r4, r5, lr}
 800c5fe:	4d06      	ldr	r5, [pc, #24]	@ (800c618 <_sbrk_r+0x1c>)
 800c600:	2300      	movs	r3, #0
 800c602:	4604      	mov	r4, r0
 800c604:	4608      	mov	r0, r1
 800c606:	602b      	str	r3, [r5, #0]
 800c608:	f7f4 fbe6 	bl	8000dd8 <_sbrk>
 800c60c:	1c43      	adds	r3, r0, #1
 800c60e:	d102      	bne.n	800c616 <_sbrk_r+0x1a>
 800c610:	682b      	ldr	r3, [r5, #0]
 800c612:	b103      	cbz	r3, 800c616 <_sbrk_r+0x1a>
 800c614:	6023      	str	r3, [r4, #0]
 800c616:	bd38      	pop	{r3, r4, r5, pc}
 800c618:	20005474 	.word	0x20005474

0800c61c <__errno>:
 800c61c:	4b01      	ldr	r3, [pc, #4]	@ (800c624 <__errno+0x8>)
 800c61e:	6818      	ldr	r0, [r3, #0]
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	20000030 	.word	0x20000030

0800c628 <__libc_init_array>:
 800c628:	b570      	push	{r4, r5, r6, lr}
 800c62a:	4d0d      	ldr	r5, [pc, #52]	@ (800c660 <__libc_init_array+0x38>)
 800c62c:	4c0d      	ldr	r4, [pc, #52]	@ (800c664 <__libc_init_array+0x3c>)
 800c62e:	1b64      	subs	r4, r4, r5
 800c630:	10a4      	asrs	r4, r4, #2
 800c632:	2600      	movs	r6, #0
 800c634:	42a6      	cmp	r6, r4
 800c636:	d109      	bne.n	800c64c <__libc_init_array+0x24>
 800c638:	4d0b      	ldr	r5, [pc, #44]	@ (800c668 <__libc_init_array+0x40>)
 800c63a:	4c0c      	ldr	r4, [pc, #48]	@ (800c66c <__libc_init_array+0x44>)
 800c63c:	f000 f872 	bl	800c724 <_init>
 800c640:	1b64      	subs	r4, r4, r5
 800c642:	10a4      	asrs	r4, r4, #2
 800c644:	2600      	movs	r6, #0
 800c646:	42a6      	cmp	r6, r4
 800c648:	d105      	bne.n	800c656 <__libc_init_array+0x2e>
 800c64a:	bd70      	pop	{r4, r5, r6, pc}
 800c64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c650:	4798      	blx	r3
 800c652:	3601      	adds	r6, #1
 800c654:	e7ee      	b.n	800c634 <__libc_init_array+0xc>
 800c656:	f855 3b04 	ldr.w	r3, [r5], #4
 800c65a:	4798      	blx	r3
 800c65c:	3601      	adds	r6, #1
 800c65e:	e7f2      	b.n	800c646 <__libc_init_array+0x1e>
 800c660:	0800c878 	.word	0x0800c878
 800c664:	0800c878 	.word	0x0800c878
 800c668:	0800c878 	.word	0x0800c878
 800c66c:	0800c87c 	.word	0x0800c87c

0800c670 <__retarget_lock_acquire_recursive>:
 800c670:	4770      	bx	lr

0800c672 <__retarget_lock_release_recursive>:
 800c672:	4770      	bx	lr

0800c674 <memcpy>:
 800c674:	440a      	add	r2, r1
 800c676:	4291      	cmp	r1, r2
 800c678:	f100 33ff 	add.w	r3, r0, #4294967295
 800c67c:	d100      	bne.n	800c680 <memcpy+0xc>
 800c67e:	4770      	bx	lr
 800c680:	b510      	push	{r4, lr}
 800c682:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c68a:	4291      	cmp	r1, r2
 800c68c:	d1f9      	bne.n	800c682 <memcpy+0xe>
 800c68e:	bd10      	pop	{r4, pc}

0800c690 <_free_r>:
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	4605      	mov	r5, r0
 800c694:	2900      	cmp	r1, #0
 800c696:	d041      	beq.n	800c71c <_free_r+0x8c>
 800c698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c69c:	1f0c      	subs	r4, r1, #4
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	bfb8      	it	lt
 800c6a2:	18e4      	addlt	r4, r4, r3
 800c6a4:	f7ff ff96 	bl	800c5d4 <__malloc_lock>
 800c6a8:	4a1d      	ldr	r2, [pc, #116]	@ (800c720 <_free_r+0x90>)
 800c6aa:	6813      	ldr	r3, [r2, #0]
 800c6ac:	b933      	cbnz	r3, 800c6bc <_free_r+0x2c>
 800c6ae:	6063      	str	r3, [r4, #4]
 800c6b0:	6014      	str	r4, [r2, #0]
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6b8:	f7ff bf92 	b.w	800c5e0 <__malloc_unlock>
 800c6bc:	42a3      	cmp	r3, r4
 800c6be:	d908      	bls.n	800c6d2 <_free_r+0x42>
 800c6c0:	6820      	ldr	r0, [r4, #0]
 800c6c2:	1821      	adds	r1, r4, r0
 800c6c4:	428b      	cmp	r3, r1
 800c6c6:	bf01      	itttt	eq
 800c6c8:	6819      	ldreq	r1, [r3, #0]
 800c6ca:	685b      	ldreq	r3, [r3, #4]
 800c6cc:	1809      	addeq	r1, r1, r0
 800c6ce:	6021      	streq	r1, [r4, #0]
 800c6d0:	e7ed      	b.n	800c6ae <_free_r+0x1e>
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	b10b      	cbz	r3, 800c6dc <_free_r+0x4c>
 800c6d8:	42a3      	cmp	r3, r4
 800c6da:	d9fa      	bls.n	800c6d2 <_free_r+0x42>
 800c6dc:	6811      	ldr	r1, [r2, #0]
 800c6de:	1850      	adds	r0, r2, r1
 800c6e0:	42a0      	cmp	r0, r4
 800c6e2:	d10b      	bne.n	800c6fc <_free_r+0x6c>
 800c6e4:	6820      	ldr	r0, [r4, #0]
 800c6e6:	4401      	add	r1, r0
 800c6e8:	1850      	adds	r0, r2, r1
 800c6ea:	4283      	cmp	r3, r0
 800c6ec:	6011      	str	r1, [r2, #0]
 800c6ee:	d1e0      	bne.n	800c6b2 <_free_r+0x22>
 800c6f0:	6818      	ldr	r0, [r3, #0]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	6053      	str	r3, [r2, #4]
 800c6f6:	4408      	add	r0, r1
 800c6f8:	6010      	str	r0, [r2, #0]
 800c6fa:	e7da      	b.n	800c6b2 <_free_r+0x22>
 800c6fc:	d902      	bls.n	800c704 <_free_r+0x74>
 800c6fe:	230c      	movs	r3, #12
 800c700:	602b      	str	r3, [r5, #0]
 800c702:	e7d6      	b.n	800c6b2 <_free_r+0x22>
 800c704:	6820      	ldr	r0, [r4, #0]
 800c706:	1821      	adds	r1, r4, r0
 800c708:	428b      	cmp	r3, r1
 800c70a:	bf04      	itt	eq
 800c70c:	6819      	ldreq	r1, [r3, #0]
 800c70e:	685b      	ldreq	r3, [r3, #4]
 800c710:	6063      	str	r3, [r4, #4]
 800c712:	bf04      	itt	eq
 800c714:	1809      	addeq	r1, r1, r0
 800c716:	6021      	streq	r1, [r4, #0]
 800c718:	6054      	str	r4, [r2, #4]
 800c71a:	e7ca      	b.n	800c6b2 <_free_r+0x22>
 800c71c:	bd38      	pop	{r3, r4, r5, pc}
 800c71e:	bf00      	nop
 800c720:	20005338 	.word	0x20005338

0800c724 <_init>:
 800c724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c726:	bf00      	nop
 800c728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c72a:	bc08      	pop	{r3}
 800c72c:	469e      	mov	lr, r3
 800c72e:	4770      	bx	lr

0800c730 <_fini>:
 800c730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c732:	bf00      	nop
 800c734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c736:	bc08      	pop	{r3}
 800c738:	469e      	mov	lr, r3
 800c73a:	4770      	bx	lr
