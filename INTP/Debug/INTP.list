
INTP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800c36c  0800c36c  0000d36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c484  0800c484  0000e080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c484  0800c484  0000d484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c48c  0800c48c  0000e080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c48c  0800c48c  0000d48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c490  0800c490  0000d490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800c494  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e080  2**0
                  CONTENTS
 10 .bss          000053f8  20000080  20000080  0000e080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005478  20005478  0000e080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023704  00000000  00000000  0000e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053ef  00000000  00000000  000317b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001eb0  00000000  00000000  00036ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017b6  00000000  00000000  00038a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006a19  00000000  00000000  0003a20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025e79  00000000  00000000  00040c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de80d  00000000  00000000  00066aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001452ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085d8  00000000  00000000  001452f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0014d8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c354 	.word	0x0800c354

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800c354 	.word	0x0800c354

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fcc4 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f852 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f984 	bl	80007d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f8b8 	bl	8000644 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f8e4 	bl	80006a0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f912 	bl	8000700 <MX_SPI1_Init>
  MX_TIM7_Init();
 80004dc:	f000 f946 	bl	800076c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e0:	f008 fb6e 	bl	8008bc0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 80004e4:	4a15      	ldr	r2, [pc, #84]	@ (800053c <main+0x7c>)
 80004e6:	2102      	movs	r1, #2
 80004e8:	2010      	movs	r0, #16
 80004ea:	f008 fc60 	bl	8008dae <osMessageQueueNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a13      	ldr	r2, [pc, #76]	@ (8000540 <main+0x80>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue02_attributes);
 80004f4:	4a13      	ldr	r2, [pc, #76]	@ (8000544 <main+0x84>)
 80004f6:	2102      	movs	r1, #2
 80004f8:	2010      	movs	r0, #16
 80004fa:	f008 fc58 	bl	8008dae <osMessageQueueNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a11      	ldr	r2, [pc, #68]	@ (8000548 <main+0x88>)
 8000502:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000504:	4a11      	ldr	r2, [pc, #68]	@ (800054c <main+0x8c>)
 8000506:	2100      	movs	r1, #0
 8000508:	4811      	ldr	r0, [pc, #68]	@ (8000550 <main+0x90>)
 800050a:	f008 fba3 	bl	8008c54 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a10      	ldr	r2, [pc, #64]	@ (8000554 <main+0x94>)
 8000512:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000514:	4a10      	ldr	r2, [pc, #64]	@ (8000558 <main+0x98>)
 8000516:	2100      	movs	r1, #0
 8000518:	4810      	ldr	r0, [pc, #64]	@ (800055c <main+0x9c>)
 800051a:	f008 fb9b 	bl	8008c54 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0f      	ldr	r2, [pc, #60]	@ (8000560 <main+0xa0>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000524:	4a0f      	ldr	r2, [pc, #60]	@ (8000564 <main+0xa4>)
 8000526:	2100      	movs	r1, #0
 8000528:	480f      	ldr	r0, [pc, #60]	@ (8000568 <main+0xa8>)
 800052a:	f008 fb93 	bl	8008c54 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0e      	ldr	r2, [pc, #56]	@ (800056c <main+0xac>)
 8000532:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000534:	f008 fb68 	bl	8008c08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <main+0x78>
 800053c:	0800c43c 	.word	0x0800c43c
 8000540:	200001e4 	.word	0x200001e4
 8000544:	0800c454 	.word	0x0800c454
 8000548:	200001e8 	.word	0x200001e8
 800054c:	0800c3d0 	.word	0x0800c3d0
 8000550:	080009d5 	.word	0x080009d5
 8000554:	200001d8 	.word	0x200001d8
 8000558:	0800c3f4 	.word	0x0800c3f4
 800055c:	080009e9 	.word	0x080009e9
 8000560:	200001dc 	.word	0x200001dc
 8000564:	0800c418 	.word	0x0800c418
 8000568:	08000a31 	.word	0x08000a31
 800056c:	200001e0 	.word	0x200001e0

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	@ 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	@ 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f00b fe4c 	bl	800c21c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b28      	ldr	r3, [pc, #160]	@ (800063c <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	4a27      	ldr	r2, [pc, #156]	@ (800063c <SystemClock_Config+0xcc>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a4:	4b25      	ldr	r3, [pc, #148]	@ (800063c <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b22      	ldr	r3, [pc, #136]	@ (8000640 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a21      	ldr	r2, [pc, #132]	@ (8000640 <SystemClock_Config+0xd0>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ee:	2307      	movs	r3, #7
 80005f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fea0 	bl	800433c <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000602:	f000 fa1d 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000612:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2105      	movs	r1, #5
 8000624:	4618      	mov	r0, r3
 8000626:	f004 f901 	bl	800482c <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000630:	f000 fa06 	bl	8000a40 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3750      	adds	r7, #80	@ 0x50
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <MX_I2C1_Init+0x50>)
 800064a:	4a13      	ldr	r2, [pc, #76]	@ (8000698 <MX_I2C1_Init+0x54>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000650:	4a12      	ldr	r2, [pc, #72]	@ (800069c <MX_I2C1_Init+0x58>)
 8000652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000662:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000682:	f003 f877 	bl	8003774 <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800068c:	f000 f9d8 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000009c 	.word	0x2000009c
 8000698:	40005400 	.word	0x40005400
 800069c:	000186a0 	.word	0x000186a0

080006a0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006a4:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_I2S3_Init+0x54>)
 80006a6:	4a14      	ldr	r2, [pc, #80]	@ (80006f8 <MX_I2S3_Init+0x58>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006aa:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <MX_I2S3_Init+0x54>)
 80006ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006b2:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <MX_I2S3_Init+0x54>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006b8:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_I2S3_Init+0x54>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006be:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <MX_I2S3_Init+0x54>)
 80006c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_I2S3_Init+0x54>)
 80006c8:	4a0c      	ldr	r2, [pc, #48]	@ (80006fc <MX_I2S3_Init+0x5c>)
 80006ca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_I2S3_Init+0x54>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <MX_I2S3_Init+0x54>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_I2S3_Init+0x54>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_I2S3_Init+0x54>)
 80006e0:	f003 f98c 	bl	80039fc <HAL_I2S_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006ea:	f000 f9a9 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000f0 	.word	0x200000f0
 80006f8:	40003c00 	.word	0x40003c00
 80006fc:	00017700 	.word	0x00017700

08000700 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000704:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <MX_SPI1_Init+0x64>)
 8000706:	4a18      	ldr	r2, [pc, #96]	@ (8000768 <MX_SPI1_Init+0x68>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070a:	4b16      	ldr	r3, [pc, #88]	@ (8000764 <MX_SPI1_Init+0x64>)
 800070c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_SPI1_Init+0x64>)
 800072c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000730:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <MX_SPI1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000738:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000744:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_SPI1_Init+0x64>)
 800074c:	220a      	movs	r2, #10
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	@ (8000764 <MX_SPI1_Init+0x64>)
 8000752:	f004 fbb9 	bl	8004ec8 <HAL_SPI_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800075c:	f000 f970 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000138 	.word	0x20000138
 8000768:	40013000 	.word	0x40013000

0800076c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <MX_TIM7_Init+0x64>)
 800077c:	4a15      	ldr	r2, [pc, #84]	@ (80007d4 <MX_TIM7_Init+0x68>)
 800077e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8000780:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_TIM7_Init+0x64>)
 8000782:	2253      	movs	r2, #83	@ 0x53
 8000784:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_TIM7_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800078c:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_TIM7_Init+0x64>)
 800078e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000792:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_TIM7_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <MX_TIM7_Init+0x64>)
 800079c:	f004 fc1d 	bl	8004fda <HAL_TIM_Base_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80007a6:	f000 f94b 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007b2:	463b      	mov	r3, r7
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	@ (80007d0 <MX_TIM7_Init+0x64>)
 80007b8:	f004 fd0a 	bl	80051d0 <HAL_TIMEx_MasterConfigSynchronization>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80007c2:	f000 f93d 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000190 	.word	0x20000190
 80007d4:	40001400 	.word	0x40001400

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	@ 0x30
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
 80007f2:	4b72      	ldr	r3, [pc, #456]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a71      	ldr	r2, [pc, #452]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b6f      	ldr	r3, [pc, #444]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0310 	and.w	r3, r3, #16
 8000806:	61bb      	str	r3, [r7, #24]
 8000808:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	4b6b      	ldr	r3, [pc, #428]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a6a      	ldr	r2, [pc, #424]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b68      	ldr	r3, [pc, #416]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b64      	ldr	r3, [pc, #400]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a63      	ldr	r2, [pc, #396]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b61      	ldr	r3, [pc, #388]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b5d      	ldr	r3, [pc, #372]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a5c      	ldr	r2, [pc, #368]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b5a      	ldr	r3, [pc, #360]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b56      	ldr	r3, [pc, #344]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a55      	ldr	r2, [pc, #340]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b53      	ldr	r3, [pc, #332]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b4f      	ldr	r3, [pc, #316]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a4e      	ldr	r2, [pc, #312]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b4c      	ldr	r3, [pc, #304]	@ (80009bc <MX_GPIO_Init+0x1e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2108      	movs	r1, #8
 800089a:	4849      	ldr	r0, [pc, #292]	@ (80009c0 <MX_GPIO_Init+0x1e8>)
 800089c:	f000 fe1c 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2101      	movs	r1, #1
 80008a4:	4847      	ldr	r0, [pc, #284]	@ (80009c4 <MX_GPIO_Init+0x1ec>)
 80008a6:	f000 fe17 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008aa:	2200      	movs	r2, #0
 80008ac:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008b0:	4845      	ldr	r0, [pc, #276]	@ (80009c8 <MX_GPIO_Init+0x1f0>)
 80008b2:	f000 fe11 	bl	80014d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008b6:	2308      	movs	r3, #8
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	483c      	ldr	r0, [pc, #240]	@ (80009c0 <MX_GPIO_Init+0x1e8>)
 80008ce:	f000 fc67 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4836      	ldr	r0, [pc, #216]	@ (80009c4 <MX_GPIO_Init+0x1ec>)
 80008ea:	f000 fc59 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ee:	2308      	movs	r3, #8
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008fe:	2305      	movs	r3, #5
 8000900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	482e      	ldr	r0, [pc, #184]	@ (80009c4 <MX_GPIO_Init+0x1ec>)
 800090a:	f000 fc49 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800090e:	2301      	movs	r3, #1
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000912:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	482a      	ldr	r0, [pc, #168]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 8000924:	f000 fc3c 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000928:	2304      	movs	r3, #4
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4825      	ldr	r0, [pc, #148]	@ (80009d0 <MX_GPIO_Init+0x1f8>)
 800093c:	f000 fc30 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000940:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000952:	2305      	movs	r3, #5
 8000954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	481c      	ldr	r0, [pc, #112]	@ (80009d0 <MX_GPIO_Init+0x1f8>)
 800095e:	f000 fc1f 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000962:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000966:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4813      	ldr	r0, [pc, #76]	@ (80009c8 <MX_GPIO_Init+0x1f0>)
 800097c:	f000 fc10 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000980:	2320      	movs	r3, #32
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <MX_GPIO_Init+0x1f0>)
 8000994:	f000 fc04 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	@ (80009c0 <MX_GPIO_Init+0x1e8>)
 80009ae:	f000 fbf7 	bl	80011a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	@ 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400

080009d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80009dc:	f00b f85c 	bl	800ba98 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f008 f9c9 	bl	8008d78 <osDelay>
 80009e6:	e7fb      	b.n	80009e0 <StartDefaultTask+0xc>

080009e8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	int counter = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	int buf = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
	osMessageQueueGet(myQueue01Handle, &buf, NULL, 10);
 80009f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <StartTask02+0x40>)
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	f107 0108 	add.w	r1, r7, #8
 8000a00:	230a      	movs	r3, #10
 8000a02:	2200      	movs	r2, #0
 8000a04:	f008 faa6 	bl	8008f54 <osMessageQueueGet>
	counter = counter + buf;
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
	osMessageQueuePut(myQueue02Handle, counter, NULL, 10);
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <StartTask02+0x44>)
 8000a12:	6818      	ldr	r0, [r3, #0]
 8000a14:	68f9      	ldr	r1, [r7, #12]
 8000a16:	230a      	movs	r3, #10
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f008 fa3b 	bl	8008e94 <osMessageQueuePut>
    osDelay(1);
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f008 f9aa 	bl	8008d78 <osDelay>
  {
 8000a24:	bf00      	nop
 8000a26:	e7e5      	b.n	80009f4 <StartTask02+0xc>
 8000a28:	200001e4 	.word	0x200001e4
 8000a2c:	200001e8 	.word	0x200001e8

08000a30 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f008 f99d 	bl	8008d78 <osDelay>
 8000a3e:	e7fb      	b.n	8000a38 <StartTask03+0x8>

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <Error_Handler+0x8>

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <HAL_MspInit+0x54>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5a:	4a11      	ldr	r2, [pc, #68]	@ (8000aa0 <HAL_MspInit+0x54>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <HAL_MspInit+0x54>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <HAL_MspInit+0x54>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <HAL_MspInit+0x54>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7e:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <HAL_MspInit+0x54>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	210f      	movs	r1, #15
 8000a8e:	f06f 0001 	mvn.w	r0, #1
 8000a92:	f000 fb4e 	bl	8001132 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	@ 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a19      	ldr	r2, [pc, #100]	@ (8000b28 <HAL_I2C_MspInit+0x84>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d12c      	bne.n	8000b20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <HAL_I2C_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a17      	ldr	r2, [pc, #92]	@ (8000b2c <HAL_I2C_MspInit+0x88>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <HAL_I2C_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ae2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae8:	2312      	movs	r3, #18
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af4:	2304      	movs	r3, #4
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <HAL_I2C_MspInit+0x8c>)
 8000b00:	f000 fb4e 	bl	80011a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <HAL_I2C_MspInit+0x88>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	4a07      	ldr	r2, [pc, #28]	@ (8000b2c <HAL_I2C_MspInit+0x88>)
 8000b0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b14:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <HAL_I2C_MspInit+0x88>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	@ 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020400 	.word	0x40020400

08000b34 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	@ 0x38
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a31      	ldr	r2, [pc, #196]	@ (8000c24 <HAL_I2S_MspInit+0xf0>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d15a      	bne.n	8000c1a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b64:	2301      	movs	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b68:	23c0      	movs	r3, #192	@ 0xc0
 8000b6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4618      	mov	r0, r3
 8000b76:	f004 f865 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b80:	f7ff ff5e 	bl	8000a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	4b27      	ldr	r3, [pc, #156]	@ (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	4a26      	ldr	r2, [pc, #152]	@ (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000b8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b94:	4b24      	ldr	r3, [pc, #144]	@ (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b20      	ldr	r3, [pc, #128]	@ (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc4:	4a18      	ldr	r2, [pc, #96]	@ (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bcc:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bd8:	2310      	movs	r3, #16
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000be8:	2306      	movs	r3, #6
 8000bea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480e      	ldr	r0, [pc, #56]	@ (8000c2c <HAL_I2S_MspInit+0xf8>)
 8000bf4:	f000 fad4 	bl	80011a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bf8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c0a:	2306      	movs	r3, #6
 8000c0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	4806      	ldr	r0, [pc, #24]	@ (8000c30 <HAL_I2S_MspInit+0xfc>)
 8000c16:	f000 fac3 	bl	80011a0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3738      	adds	r7, #56	@ 0x38
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40003c00 	.word	0x40003c00
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	40020800 	.word	0x40020800

08000c34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	@ 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	@ (8000cb8 <HAL_SPI_MspInit+0x84>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12b      	bne.n	8000cae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5e:	4a17      	ldr	r2, [pc, #92]	@ (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a10      	ldr	r2, [pc, #64]	@ (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c8e:	23e0      	movs	r3, #224	@ 0xe0
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c9e:	2305      	movs	r3, #5
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <HAL_SPI_MspInit+0x8c>)
 8000caa:	f000 fa79 	bl	80011a0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	@ 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40013000 	.word	0x40013000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8000d00 <HAL_TIM_Base_MspInit+0x3c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d10d      	bne.n	8000cf2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_TIM_Base_MspInit+0x40>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	4a09      	ldr	r2, [pc, #36]	@ (8000d04 <HAL_TIM_Base_MspInit+0x40>)
 8000ce0:	f043 0320 	orr.w	r3, r3, #32
 8000ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce6:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <HAL_TIM_Base_MspInit+0x40>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	f003 0320 	and.w	r3, r3, #32
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40001400 	.word	0x40001400
 8000d04:	40023800 	.word	0x40023800

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <NMI_Handler+0x4>

08000d10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <MemManage_Handler+0x4>

08000d20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d42:	f000 f8d7 	bl	8000ef4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d46:	f009 fe2d 	bl	800a9a4 <xTaskGetSchedulerState>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d001      	beq.n	8000d54 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d50:	f00a fc22 	bl	800b598 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d5c:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <OTG_FS_IRQHandler+0x10>)
 8000d5e:	f000 feb5 	bl	8001acc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20004f50 	.word	0x20004f50

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	@ (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f00b fa56 	bl	800c24c <__errno>
 8000da0:	4603      	mov	r3, r0
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20020000 	.word	0x20020000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	200001ec 	.word	0x200001ec
 8000dd4:	20005478 	.word	0x20005478

08000dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e00:	f7ff ffea 	bl	8000dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	@ (8000e38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	@ (8000e3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	@ (8000e40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f00b fa15 	bl	800c258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff fb47 	bl	80004c0 <main>
  bx  lr    
 8000e32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000e40:	0800c494 	.word	0x0800c494
  ldr r2, =_sbss
 8000e44:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000e48:	20005478 	.word	0x20005478

08000e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e54:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0d      	ldr	r2, [pc, #52]	@ (8000e90 <HAL_Init+0x40>)
 8000e5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e60:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <HAL_Init+0x40>)
 8000e66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	@ (8000e90 <HAL_Init+0x40>)
 8000e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 f94f 	bl	800111c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7e:	200f      	movs	r0, #15
 8000e80:	f000 f808 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff fde2 	bl	8000a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023c00 	.word	0x40023c00

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f967 	bl	8001186 <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ed0:	f000 f92f 	bl	8001132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	@ (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008
 8000f18:	200001f0 	.word	0x200001f0

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	@ (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	200001f0 	.word	0x200001f0

08000f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff ffee 	bl	8000f1c <HAL_GetTick>
 8000f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f4c:	d005      	beq.n	8000f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <HAL_Delay+0x44>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f5a:	bf00      	nop
 8000f5c:	f7ff ffde 	bl	8000f1c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d8f7      	bhi.n	8000f5c <HAL_Delay+0x28>
  {
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008

08000f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db0b      	blt.n	800100a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	f003 021f 	and.w	r2, r3, #31
 8000ff8:	4907      	ldr	r1, [pc, #28]	@ (8001018 <__NVIC_EnableIRQ+0x38>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	2001      	movs	r0, #1
 8001002:	fa00 f202 	lsl.w	r2, r0, r2
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	@ (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	@ (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	@ 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	@ 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010e8:	d301      	bcc.n	80010ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00f      	b.n	800110e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <SysTick_Config+0x40>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f6:	210f      	movs	r1, #15
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010fc:	f7ff ff8e 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	4b05      	ldr	r3, [pc, #20]	@ (8001118 <SysTick_Config+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <SysTick_Config+0x40>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff29 	bl	8000f7c <__NVIC_SetPriorityGrouping>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001144:	f7ff ff3e 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 8001148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f7ff ff8e 	bl	8001070 <NVIC_EncodePriority>
 8001154:	4602      	mov	r2, r0
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff5d 	bl	800101c <__NVIC_SetPriority>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff31 	bl	8000fe0 <__NVIC_EnableIRQ>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffa2 	bl	80010d8 <SysTick_Config>
 8001194:	4603      	mov	r3, r0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	@ 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	e16b      	b.n	8001494 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011bc:	2201      	movs	r2, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	f040 815a 	bne.w	800148e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d005      	beq.n	80011f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d130      	bne.n	8001254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 0201 	and.w	r2, r3, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b03      	cmp	r3, #3
 800125e:	d017      	beq.n	8001290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d123      	bne.n	80012e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	08da      	lsrs	r2, r3, #3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3208      	adds	r2, #8
 80012a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	08da      	lsrs	r2, r3, #3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3208      	adds	r2, #8
 80012de:	69b9      	ldr	r1, [r7, #24]
 80012e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0203 	and.w	r2, r3, #3
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80b4 	beq.w	800148e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b60      	ldr	r3, [pc, #384]	@ (80014ac <HAL_GPIO_Init+0x30c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	4a5f      	ldr	r2, [pc, #380]	@ (80014ac <HAL_GPIO_Init+0x30c>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001334:	6453      	str	r3, [r2, #68]	@ 0x44
 8001336:	4b5d      	ldr	r3, [pc, #372]	@ (80014ac <HAL_GPIO_Init+0x30c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001342:	4a5b      	ldr	r2, [pc, #364]	@ (80014b0 <HAL_GPIO_Init+0x310>)
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3302      	adds	r3, #2
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	220f      	movs	r2, #15
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a52      	ldr	r2, [pc, #328]	@ (80014b4 <HAL_GPIO_Init+0x314>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d02b      	beq.n	80013c6 <HAL_GPIO_Init+0x226>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a51      	ldr	r2, [pc, #324]	@ (80014b8 <HAL_GPIO_Init+0x318>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d025      	beq.n	80013c2 <HAL_GPIO_Init+0x222>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a50      	ldr	r2, [pc, #320]	@ (80014bc <HAL_GPIO_Init+0x31c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d01f      	beq.n	80013be <HAL_GPIO_Init+0x21e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4f      	ldr	r2, [pc, #316]	@ (80014c0 <HAL_GPIO_Init+0x320>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d019      	beq.n	80013ba <HAL_GPIO_Init+0x21a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4e      	ldr	r2, [pc, #312]	@ (80014c4 <HAL_GPIO_Init+0x324>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d013      	beq.n	80013b6 <HAL_GPIO_Init+0x216>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4d      	ldr	r2, [pc, #308]	@ (80014c8 <HAL_GPIO_Init+0x328>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00d      	beq.n	80013b2 <HAL_GPIO_Init+0x212>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4c      	ldr	r2, [pc, #304]	@ (80014cc <HAL_GPIO_Init+0x32c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x20e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4b      	ldr	r2, [pc, #300]	@ (80014d0 <HAL_GPIO_Init+0x330>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_GPIO_Init+0x20a>
 80013a6:	2307      	movs	r3, #7
 80013a8:	e00e      	b.n	80013c8 <HAL_GPIO_Init+0x228>
 80013aa:	2308      	movs	r3, #8
 80013ac:	e00c      	b.n	80013c8 <HAL_GPIO_Init+0x228>
 80013ae:	2306      	movs	r3, #6
 80013b0:	e00a      	b.n	80013c8 <HAL_GPIO_Init+0x228>
 80013b2:	2305      	movs	r3, #5
 80013b4:	e008      	b.n	80013c8 <HAL_GPIO_Init+0x228>
 80013b6:	2304      	movs	r3, #4
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x228>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e004      	b.n	80013c8 <HAL_GPIO_Init+0x228>
 80013be:	2302      	movs	r3, #2
 80013c0:	e002      	b.n	80013c8 <HAL_GPIO_Init+0x228>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <HAL_GPIO_Init+0x228>
 80013c6:	2300      	movs	r3, #0
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	f002 0203 	and.w	r2, r2, #3
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	4093      	lsls	r3, r2
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d8:	4935      	ldr	r1, [pc, #212]	@ (80014b0 <HAL_GPIO_Init+0x310>)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	3302      	adds	r3, #2
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e6:	4b3b      	ldr	r3, [pc, #236]	@ (80014d4 <HAL_GPIO_Init+0x334>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800140a:	4a32      	ldr	r2, [pc, #200]	@ (80014d4 <HAL_GPIO_Init+0x334>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001410:	4b30      	ldr	r3, [pc, #192]	@ (80014d4 <HAL_GPIO_Init+0x334>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001434:	4a27      	ldr	r2, [pc, #156]	@ (80014d4 <HAL_GPIO_Init+0x334>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800143a:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <HAL_GPIO_Init+0x334>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145e:	4a1d      	ldr	r2, [pc, #116]	@ (80014d4 <HAL_GPIO_Init+0x334>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001464:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <HAL_GPIO_Init+0x334>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001488:	4a12      	ldr	r2, [pc, #72]	@ (80014d4 <HAL_GPIO_Init+0x334>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3301      	adds	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	2b0f      	cmp	r3, #15
 8001498:	f67f ae90 	bls.w	80011bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3724      	adds	r7, #36	@ 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40013800 	.word	0x40013800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40020c00 	.word	0x40020c00
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40021400 	.word	0x40021400
 80014cc:	40021800 	.word	0x40021800
 80014d0:	40021c00 	.word	0x40021c00
 80014d4:	40013c00 	.word	0x40013c00

080014d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
 80014e4:	4613      	mov	r3, r2
 80014e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e8:	787b      	ldrb	r3, [r7, #1]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ee:	887a      	ldrh	r2, [r7, #2]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f4:	e003      	b.n	80014fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	041a      	lsls	r2, r3, #16
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	619a      	str	r2, [r3, #24]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af02      	add	r7, sp, #8
 8001510:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e059      	b.n	80015d0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f00a fb02 	bl	800bb40 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2203      	movs	r2, #3
 8001540:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800154a:	d102      	bne.n	8001552 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f003 ff2b 	bl	80053b2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7c1a      	ldrb	r2, [r3, #16]
 8001564:	f88d 2000 	strb.w	r2, [sp]
 8001568:	3304      	adds	r3, #4
 800156a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156c:	f003 feac 	bl	80052c8 <USB_CoreInit>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e026      	b.n	80015d0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2101      	movs	r1, #1
 8001588:	4618      	mov	r0, r3
 800158a:	f003 ff23 	bl	80053d4 <USB_SetCurrentMode>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2202      	movs	r2, #2
 8001598:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e017      	b.n	80015d0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7c1a      	ldrb	r2, [r3, #16]
 80015a8:	f88d 2000 	strb.w	r2, [sp]
 80015ac:	3304      	adds	r3, #4
 80015ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b0:	f004 f8c6 	bl	8005740 <USB_HostInit>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2202      	movs	r2, #2
 80015be:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e004      	b.n	80015d0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b08b      	sub	sp, #44	@ 0x2c
 80015dc:	af04      	add	r7, sp, #16
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	4608      	mov	r0, r1
 80015e2:	4611      	mov	r1, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	70fb      	strb	r3, [r7, #3]
 80015ea:	460b      	mov	r3, r1
 80015ec:	70bb      	strb	r3, [r7, #2]
 80015ee:	4613      	mov	r3, r2
 80015f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015f2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015f4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_HCD_HC_Init+0x2c>
 8001600:	2302      	movs	r3, #2
 8001602:	e09d      	b.n	8001740 <HAL_HCD_HC_Init+0x168>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800160c:	78fa      	ldrb	r2, [r7, #3]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3319      	adds	r3, #25
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001620:	78fa      	ldrb	r2, [r7, #3]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	3314      	adds	r3, #20
 8001630:	787a      	ldrb	r2, [r7, #1]
 8001632:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	3315      	adds	r3, #21
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	3326      	adds	r3, #38	@ 0x26
 8001658:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800165c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	78bb      	ldrb	r3, [r7, #2]
 8001662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001666:	b2d8      	uxtb	r0, r3
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	1a9b      	subs	r3, r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3316      	adds	r3, #22
 8001676:	4602      	mov	r2, r0
 8001678:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	4619      	mov	r1, r3
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fbc8 	bl	8001e14 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001684:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001688:	2b00      	cmp	r3, #0
 800168a:	da0a      	bge.n	80016a2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	1a9b      	subs	r3, r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	3317      	adds	r3, #23
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	e009      	b.n	80016b6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016a2:	78fa      	ldrb	r2, [r7, #3]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	3317      	adds	r3, #23
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 f9a4 	bl	8005a08 <USB_GetHostSpeed>
 80016c0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d10b      	bne.n	80016e2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d107      	bne.n	80016e2 <HAL_HCD_HC_Init+0x10a>
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d104      	bne.n	80016e2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2bbc      	cmp	r3, #188	@ 0xbc
 80016dc:	d901      	bls.n	80016e2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80016de:	23bc      	movs	r3, #188	@ 0xbc
 80016e0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	3318      	adds	r3, #24
 80016f2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80016f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016f8:	78fa      	ldrb	r2, [r7, #3]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	b298      	uxth	r0, r3
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	1a9b      	subs	r3, r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	3328      	adds	r3, #40	@ 0x28
 800170c:	4602      	mov	r2, r0
 800170e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	b29b      	uxth	r3, r3
 8001718:	787c      	ldrb	r4, [r7, #1]
 800171a:	78ba      	ldrb	r2, [r7, #2]
 800171c:	78f9      	ldrb	r1, [r7, #3]
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4623      	mov	r3, r4
 800172e:	f004 f993 	bl	8005a58 <USB_HC_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}

08001748 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_HCD_HC_Halt+0x1e>
 8001762:	2302      	movs	r3, #2
 8001764:	e00f      	b.n	8001786 <HAL_HCD_HC_Halt+0x3e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f004 fd25 	bl	80061c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	4608      	mov	r0, r1
 800179a:	4611      	mov	r1, r2
 800179c:	461a      	mov	r2, r3
 800179e:	4603      	mov	r3, r0
 80017a0:	70fb      	strb	r3, [r7, #3]
 80017a2:	460b      	mov	r3, r1
 80017a4:	70bb      	strb	r3, [r7, #2]
 80017a6:	4613      	mov	r3, r2
 80017a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	3317      	adds	r3, #23
 80017ba:	78ba      	ldrb	r2, [r7, #2]
 80017bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	3326      	adds	r3, #38	@ 0x26
 80017ce:	787a      	ldrb	r2, [r7, #1]
 80017d0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017d2:	7c3b      	ldrb	r3, [r7, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d114      	bne.n	8001802 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	1a9b      	subs	r3, r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	332a      	adds	r3, #42	@ 0x2a
 80017e8:	2203      	movs	r2, #3
 80017ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	3319      	adds	r3, #25
 80017fc:	7f3a      	ldrb	r2, [r7, #28]
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	e009      	b.n	8001816 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	1a9b      	subs	r3, r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	332a      	adds	r3, #42	@ 0x2a
 8001812:	2202      	movs	r2, #2
 8001814:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001816:	787b      	ldrb	r3, [r7, #1]
 8001818:	2b03      	cmp	r3, #3
 800181a:	f200 8102 	bhi.w	8001a22 <HAL_HCD_HC_SubmitRequest+0x292>
 800181e:	a201      	add	r2, pc, #4	@ (adr r2, 8001824 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	08001835 	.word	0x08001835
 8001828:	08001a0d 	.word	0x08001a0d
 800182c:	080018f9 	.word	0x080018f9
 8001830:	08001983 	.word	0x08001983
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001834:	7c3b      	ldrb	r3, [r7, #16]
 8001836:	2b01      	cmp	r3, #1
 8001838:	f040 80f5 	bne.w	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800183c:	78bb      	ldrb	r3, [r7, #2]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d12d      	bne.n	800189e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001842:	8b3b      	ldrh	r3, [r7, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d109      	bne.n	800185c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	333d      	adds	r3, #61	@ 0x3d
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	333d      	adds	r3, #61	@ 0x3d
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10a      	bne.n	8001888 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	332a      	adds	r3, #42	@ 0x2a
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001886:	e0ce      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	332a      	adds	r3, #42	@ 0x2a
 8001898:	2202      	movs	r2, #2
 800189a:	701a      	strb	r2, [r3, #0]
      break;
 800189c:	e0c3      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	331a      	adds	r3, #26
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	f040 80b8 	bne.w	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	333c      	adds	r3, #60	@ 0x3c
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	332a      	adds	r3, #42	@ 0x2a
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
      break;
 80018e0:	e0a1      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	332a      	adds	r3, #42	@ 0x2a
 80018f2:	2202      	movs	r2, #2
 80018f4:	701a      	strb	r2, [r3, #0]
      break;
 80018f6:	e096      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018f8:	78bb      	ldrb	r3, [r7, #2]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d120      	bne.n	8001940 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	333d      	adds	r3, #61	@ 0x3d
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10a      	bne.n	800192a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	332a      	adds	r3, #42	@ 0x2a
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001928:	e07e      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	332a      	adds	r3, #42	@ 0x2a
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]
      break;
 800193e:	e073      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	333c      	adds	r3, #60	@ 0x3c
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10a      	bne.n	800196c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	332a      	adds	r3, #42	@ 0x2a
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
      break;
 800196a:	e05d      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	332a      	adds	r3, #42	@ 0x2a
 800197c:	2202      	movs	r2, #2
 800197e:	701a      	strb	r2, [r3, #0]
      break;
 8001980:	e052      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001982:	78bb      	ldrb	r3, [r7, #2]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d120      	bne.n	80019ca <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	333d      	adds	r3, #61	@ 0x3d
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10a      	bne.n	80019b4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	332a      	adds	r3, #42	@ 0x2a
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019b2:	e039      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	332a      	adds	r3, #42	@ 0x2a
 80019c4:	2202      	movs	r2, #2
 80019c6:	701a      	strb	r2, [r3, #0]
      break;
 80019c8:	e02e      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	1a9b      	subs	r3, r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	333c      	adds	r3, #60	@ 0x3c
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10a      	bne.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	332a      	adds	r3, #42	@ 0x2a
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
      break;
 80019f4:	e018      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	332a      	adds	r3, #42	@ 0x2a
 8001a06:	2202      	movs	r2, #2
 8001a08:	701a      	strb	r2, [r3, #0]
      break;
 8001a0a:	e00d      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	332a      	adds	r3, #42	@ 0x2a
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
      break;
 8001a20:	e002      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a22:	bf00      	nop
 8001a24:	e000      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a26:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	332c      	adds	r3, #44	@ 0x2c
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	8b39      	ldrh	r1, [r7, #24]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4403      	add	r3, r0
 8001a4c:	3334      	adds	r3, #52	@ 0x34
 8001a4e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	334c      	adds	r3, #76	@ 0x4c
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	3338      	adds	r3, #56	@ 0x38
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	3315      	adds	r3, #21
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	334d      	adds	r3, #77	@ 0x4d
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	78fa      	ldrb	r2, [r7, #3]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	3310      	adds	r3, #16
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	1d19      	adds	r1, r3, #4
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	799b      	ldrb	r3, [r3, #6]
 8001aba:	461a      	mov	r2, r3
 8001abc:	f004 f8f8 	bl	8005cb0 <USB_HC_StartXfer>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop

08001acc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 fdec 	bl	80056c0 <USB_GetMode>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	f040 80fb 	bne.w	8001ce6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 fdaf 	bl	8005658 <USB_ReadInterrupts>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80f1 	beq.w	8001ce4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fda6 	bl	8005658 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b16:	d104      	bne.n	8001b22 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fd96 	bl	8005658 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b36:	d104      	bne.n	8001b42 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 fd86 	bl	8005658 <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b56:	d104      	bne.n	8001b62 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 fd76 	bl	8005658 <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d103      	bne.n	8001b7e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fd68 	bl	8005658 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b92:	d120      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b9c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d113      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bae:	2110      	movs	r1, #16
 8001bb0:	6938      	ldr	r0, [r7, #16]
 8001bb2:	f003 fc5b 	bl	800546c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bb6:	6938      	ldr	r0, [r7, #16]
 8001bb8:	f003 fc8a 	bl	80054d0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7a5b      	ldrb	r3, [r3, #9]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d105      	bne.n	8001bd0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fe7c 	bl	80058c8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f00a f833 	bl	800bc3c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fd3c 	bl	8005658 <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001be6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bea:	d102      	bne.n	8001bf2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f001 fd4d 	bl	800368c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fd2e 	bl	8005658 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d106      	bne.n	8001c14 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f009 fffc 	bl	800bc04 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2208      	movs	r2, #8
 8001c12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f003 fd1d 	bl	8005658 <USB_ReadInterrupts>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c28:	d139      	bne.n	8001c9e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f004 fab8 	bl	80061a4 <USB_HC_ReadInterrupt>
 8001c34:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e025      	b.n	8001c88 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d018      	beq.n	8001c82 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c66:	d106      	bne.n	8001c76 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f905 	bl	8001e7e <HCD_HC_IN_IRQHandler>
 8001c74:	e005      	b.n	8001c82 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 ff67 	bl	8002b50 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	795b      	ldrb	r3, [r3, #5]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d3d3      	bcc.n	8001c3c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fcd8 	bl	8005658 <USB_ReadInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	d101      	bne.n	8001cb6 <HAL_HCD_IRQHandler+0x1ea>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_HCD_IRQHandler+0x1ec>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d014      	beq.n	8001ce6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0210 	bic.w	r2, r2, #16
 8001cca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f001 fbfe 	bl	80034ce <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699a      	ldr	r2, [r3, #24]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 0210 	orr.w	r2, r2, #16
 8001ce0:	619a      	str	r2, [r3, #24]
 8001ce2:	e000      	b.n	8001ce6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001ce4:	bf00      	nop
    }
  }
}
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_HCD_Start+0x16>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e013      	b.n	8001d2a <HAL_HCD_Start+0x3e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2101      	movs	r1, #1
 8001d10:	4618      	mov	r0, r3
 8001d12:	f003 fe40 	bl	8005996 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f003 fb38 	bl	8005390 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_HCD_Stop+0x16>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e00d      	b.n	8001d64 <HAL_HCD_Stop+0x32>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f004 fb93 	bl	8006480 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fde2 	bl	8005942 <USB_ResetPort>
 8001d7e:	4603      	mov	r3, r0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	334c      	adds	r3, #76	@ 0x4c
 8001da4:	781b      	ldrb	r3, [r3, #0]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	3338      	adds	r3, #56	@ 0x38
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 fe24 	bl	8005a36 <USB_GetCurrentFrame>
 8001dee:	4603      	mov	r3, r0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 fdff 	bl	8005a08 <USB_GetHostSpeed>
 8001e0a:	4603      	mov	r3, r0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	331a      	adds	r3, #26
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	331b      	adds	r3, #27
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	3325      	adds	r3, #37	@ 0x25
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	3324      	adds	r3, #36	@ 0x24
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fbee 	bl	800567e <USB_ReadChInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d11a      	bne.n	8001ee2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2304      	movs	r3, #4
 8001ebc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	334d      	adds	r3, #77	@ 0x4d
 8001ece:	2207      	movs	r2, #7
 8001ed0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 f973 	bl	80061c6 <USB_HC_Halt>
 8001ee0:	e09e      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 fbc7 	bl	800567e <USB_ReadChInterrupts>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001efa:	d11b      	bne.n	8001f34 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	334d      	adds	r3, #77	@ 0x4d
 8001f20:	2208      	movs	r2, #8
 8001f22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f004 f94a 	bl	80061c6 <USB_HC_Halt>
 8001f32:	e075      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 fb9e 	bl	800567e <USB_ReadChInterrupts>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d11a      	bne.n	8001f82 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	334d      	adds	r3, #77	@ 0x4d
 8001f6e:	2206      	movs	r2, #6
 8001f70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f004 f923 	bl	80061c6 <USB_HC_Halt>
 8001f80:	e04e      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 fb77 	bl	800567e <USB_ReadChInterrupts>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f9a:	d11b      	bne.n	8001fd4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fa8:	461a      	mov	r2, r3
 8001faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	334d      	adds	r3, #77	@ 0x4d
 8001fc0:	2209      	movs	r2, #9
 8001fc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f004 f8fa 	bl	80061c6 <USB_HC_Halt>
 8001fd2:	e025      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fb4e 	bl	800567e <USB_ReadChInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe8:	2b80      	cmp	r3, #128	@ 0x80
 8001fea:	d119      	bne.n	8002020 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2380      	movs	r3, #128	@ 0x80
 8001ffc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ffe:	78fa      	ldrb	r2, [r7, #3]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	334d      	adds	r3, #77	@ 0x4d
 800200e:	2207      	movs	r2, #7
 8002010:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f004 f8d3 	bl	80061c6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f003 fb28 	bl	800567e <USB_ReadChInterrupts>
 800202e:	4603      	mov	r3, r0
 8002030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002038:	d112      	bne.n	8002060 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	78fa      	ldrb	r2, [r7, #3]
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f004 f8bf 	bl	80061c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002054:	461a      	mov	r2, r3
 8002056:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800205a:	6093      	str	r3, [r2, #8]
 800205c:	f000 bd75 	b.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f003 fb08 	bl	800567e <USB_ReadChInterrupts>
 800206e:	4603      	mov	r3, r0
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	f040 8128 	bne.w	80022ca <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4413      	add	r3, r2
 8002082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002086:	461a      	mov	r2, r3
 8002088:	2320      	movs	r3, #32
 800208a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	331b      	adds	r3, #27
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d119      	bne.n	80020d6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80020a2:	78fa      	ldrb	r2, [r7, #3]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	331b      	adds	r3, #27
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	0151      	lsls	r1, r2, #5
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	440a      	add	r2, r1
 80020cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020d4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	799b      	ldrb	r3, [r3, #6]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d01b      	beq.n	8002116 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3330      	adds	r3, #48	@ 0x30
 80020ee:	6819      	ldr	r1, [r3, #0]
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	1ac9      	subs	r1, r1, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4403      	add	r3, r0
 8002112:	3338      	adds	r3, #56	@ 0x38
 8002114:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	334d      	adds	r3, #77	@ 0x4d
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	3344      	adds	r3, #68	@ 0x44
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800214a:	461a      	mov	r2, r3
 800214c:	2301      	movs	r3, #1
 800214e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3326      	adds	r3, #38	@ 0x26
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	3326      	adds	r3, #38	@ 0x26
 8002176:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002178:	2b02      	cmp	r3, #2
 800217a:	d110      	bne.n	800219e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f004 f81e 	bl	80061c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002196:	461a      	mov	r2, r3
 8002198:	2310      	movs	r3, #16
 800219a:	6093      	str	r3, [r2, #8]
 800219c:	e03d      	b.n	800221a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	3326      	adds	r3, #38	@ 0x26
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d00a      	beq.n	80021ca <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3326      	adds	r3, #38	@ 0x26
 80021c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d127      	bne.n	800221a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	0151      	lsls	r1, r2, #5
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	440a      	add	r2, r1
 80021e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80021e8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	334c      	adds	r3, #76	@ 0x4c
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	334c      	adds	r3, #76	@ 0x4c
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	4619      	mov	r1, r3
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f009 fd1f 	bl	800bc58 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	799b      	ldrb	r3, [r3, #6]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d13b      	bne.n	800229a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	3338      	adds	r3, #56	@ 0x38
 8002232:	6819      	ldr	r1, [r3, #0]
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4403      	add	r3, r0
 8002242:	3328      	adds	r3, #40	@ 0x28
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	440b      	add	r3, r1
 8002248:	1e59      	subs	r1, r3, #1
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4403      	add	r3, r0
 8002258:	3328      	adds	r3, #40	@ 0x28
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 8470 	beq.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	333c      	adds	r3, #60	@ 0x3c
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2d8      	uxtb	r0, r3
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	333c      	adds	r3, #60	@ 0x3c
 8002292:	4602      	mov	r2, r0
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	f000 bc58 	b.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	333c      	adds	r3, #60	@ 0x3c
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2d8      	uxtb	r0, r3
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	333c      	adds	r3, #60	@ 0x3c
 80022c2:	4602      	mov	r2, r0
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	f000 bc40 	b.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 f9d3 	bl	800567e <USB_ReadChInterrupts>
 80022d8:	4603      	mov	r3, r0
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d131      	bne.n	8002346 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022ee:	461a      	mov	r2, r3
 80022f0:	2320      	movs	r3, #32
 80022f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	331a      	adds	r3, #26
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	f040 841f 	bne.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	331b      	adds	r3, #27
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	334d      	adds	r3, #77	@ 0x4d
 8002330:	2203      	movs	r2, #3
 8002332:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f003 ff42 	bl	80061c6 <USB_HC_Halt>
 8002342:	f000 bc02 	b.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f003 f995 	bl	800567e <USB_ReadChInterrupts>
 8002354:	4603      	mov	r3, r0
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b02      	cmp	r3, #2
 800235c:	f040 8305 	bne.w	800296a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4413      	add	r3, r2
 8002368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800236c:	461a      	mov	r2, r3
 800236e:	2302      	movs	r3, #2
 8002370:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	334d      	adds	r3, #77	@ 0x4d
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d114      	bne.n	80023b2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	334d      	adds	r3, #77	@ 0x4d
 8002398:	2202      	movs	r2, #2
 800239a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	334c      	adds	r3, #76	@ 0x4c
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
 80023b0:	e2cc      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	334d      	adds	r3, #77	@ 0x4d
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b06      	cmp	r3, #6
 80023c6:	d114      	bne.n	80023f2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	334d      	adds	r3, #77	@ 0x4d
 80023d8:	2202      	movs	r2, #2
 80023da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	334c      	adds	r3, #76	@ 0x4c
 80023ec:	2205      	movs	r2, #5
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e2ac      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	334d      	adds	r3, #77	@ 0x4d
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b07      	cmp	r3, #7
 8002406:	d00b      	beq.n	8002420 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	334d      	adds	r3, #77	@ 0x4d
 8002418:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800241a:	2b09      	cmp	r3, #9
 800241c:	f040 80a6 	bne.w	800256c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	334d      	adds	r3, #77	@ 0x4d
 8002430:	2202      	movs	r2, #2
 8002432:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	3344      	adds	r3, #68	@ 0x44
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	1c59      	adds	r1, r3, #1
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4403      	add	r3, r0
 8002454:	3344      	adds	r3, #68	@ 0x44
 8002456:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	3344      	adds	r3, #68	@ 0x44
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d943      	bls.n	80024f6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3344      	adds	r3, #68	@ 0x44
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	331a      	adds	r3, #26
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d123      	bne.n	80024e0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	331b      	adds	r3, #27
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	331c      	adds	r3, #28
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	0151      	lsls	r1, r2, #5
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	440a      	add	r2, r1
 80024d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024de:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	334c      	adds	r3, #76	@ 0x4c
 80024f0:	2204      	movs	r2, #4
 80024f2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024f4:	e229      	b.n	800294a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	334c      	adds	r3, #76	@ 0x4c
 8002506:	2202      	movs	r2, #2
 8002508:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	3326      	adds	r3, #38	@ 0x26
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00b      	beq.n	8002538 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	3326      	adds	r3, #38	@ 0x26
 8002530:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002532:	2b02      	cmp	r3, #2
 8002534:	f040 8209 	bne.w	800294a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800254e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002556:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002564:	461a      	mov	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800256a:	e1ee      	b.n	800294a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	334d      	adds	r3, #77	@ 0x4d
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b05      	cmp	r3, #5
 8002580:	f040 80c8 	bne.w	8002714 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	334d      	adds	r3, #77	@ 0x4d
 8002594:	2202      	movs	r2, #2
 8002596:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	331b      	adds	r3, #27
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	f040 81ce 	bne.w	800294c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	3326      	adds	r3, #38	@ 0x26
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d16b      	bne.n	800269e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80025c6:	78fa      	ldrb	r2, [r7, #3]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	3348      	adds	r3, #72	@ 0x48
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	1c59      	adds	r1, r3, #1
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4403      	add	r3, r0
 80025e6:	3348      	adds	r3, #72	@ 0x48
 80025e8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	3348      	adds	r3, #72	@ 0x48
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d943      	bls.n	8002688 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3348      	adds	r3, #72	@ 0x48
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	331b      	adds	r3, #27
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3344      	adds	r3, #68	@ 0x44
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d809      	bhi.n	8002652 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	331c      	adds	r3, #28
 800264e:	2201      	movs	r2, #1
 8002650:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	0151      	lsls	r1, r2, #5
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	440a      	add	r2, r1
 8002668:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800266c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002670:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002672:	78fa      	ldrb	r2, [r7, #3]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	334c      	adds	r3, #76	@ 0x4c
 8002682:	2204      	movs	r2, #4
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e014      	b.n	80026b2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	334c      	adds	r3, #76	@ 0x4c
 8002698:	2202      	movs	r2, #2
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	e009      	b.n	80026b2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	334c      	adds	r3, #76	@ 0x4c
 80026ae:	2202      	movs	r2, #2
 80026b0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	3326      	adds	r3, #38	@ 0x26
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3326      	adds	r3, #38	@ 0x26
 80026d8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026da:	2b02      	cmp	r3, #2
 80026dc:	f040 8136 	bne.w	800294c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026f6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026fe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e11b      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	334d      	adds	r3, #77	@ 0x4d
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b03      	cmp	r3, #3
 8002728:	f040 8081 	bne.w	800282e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	334d      	adds	r3, #77	@ 0x4d
 800273c:	2202      	movs	r2, #2
 800273e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	331b      	adds	r3, #27
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	f040 80fa 	bne.w	800294c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	334c      	adds	r3, #76	@ 0x4c
 8002768:	2202      	movs	r2, #2
 800276a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	0151      	lsls	r1, r2, #5
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	440a      	add	r2, r1
 8002782:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	0151      	lsls	r1, r2, #5
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	440a      	add	r2, r1
 80027a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027aa:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	0151      	lsls	r1, r2, #5
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	440a      	add	r2, r1
 80027c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027c6:	f023 0320 	bic.w	r3, r3, #32
 80027ca:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3326      	adds	r3, #38	@ 0x26
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	3326      	adds	r3, #38	@ 0x26
 80027f2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	f040 80a9 	bne.w	800294c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002810:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002818:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	e08e      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	334d      	adds	r3, #77	@ 0x4d
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b04      	cmp	r3, #4
 8002842:	d143      	bne.n	80028cc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	334d      	adds	r3, #77	@ 0x4d
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	334c      	adds	r3, #76	@ 0x4c
 8002868:	2202      	movs	r2, #2
 800286a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	3326      	adds	r3, #38	@ 0x26
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	3326      	adds	r3, #38	@ 0x26
 8002892:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002894:	2b02      	cmp	r3, #2
 8002896:	d159      	bne.n	800294c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028ae:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028b6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028c4:	461a      	mov	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e03f      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	334d      	adds	r3, #77	@ 0x4d
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d126      	bne.n	8002930 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	334d      	adds	r3, #77	@ 0x4d
 80028f2:	2202      	movs	r2, #2
 80028f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3344      	adds	r3, #68	@ 0x44
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	1c59      	adds	r1, r3, #1
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4403      	add	r3, r0
 8002916:	3344      	adds	r3, #68	@ 0x44
 8002918:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	334c      	adds	r3, #76	@ 0x4c
 800292a:	2204      	movs	r2, #4
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e00d      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	334d      	adds	r3, #77	@ 0x4d
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b02      	cmp	r3, #2
 8002944:	f000 8100 	beq.w	8002b48 <HCD_HC_IN_IRQHandler+0xcca>
 8002948:	e000      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800294a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	334c      	adds	r3, #76	@ 0x4c
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	4619      	mov	r1, r3
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f009 f978 	bl	800bc58 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002968:	e0ef      	b.n	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f002 fe83 	bl	800567e <USB_ReadChInterrupts>
 8002978:	4603      	mov	r3, r0
 800297a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800297e:	2b40      	cmp	r3, #64	@ 0x40
 8002980:	d12f      	bne.n	80029e2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800298e:	461a      	mov	r2, r3
 8002990:	2340      	movs	r3, #64	@ 0x40
 8002992:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	334d      	adds	r3, #77	@ 0x4d
 80029a4:	2205      	movs	r2, #5
 80029a6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	331a      	adds	r3, #26
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3344      	adds	r3, #68	@ 0x44
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 fbf3 	bl	80061c6 <USB_HC_Halt>
 80029e0:	e0b3      	b.n	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f002 fe47 	bl	800567e <USB_ReadChInterrupts>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b10      	cmp	r3, #16
 80029f8:	f040 80a7 	bne.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	3326      	adds	r3, #38	@ 0x26
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d11b      	bne.n	8002a4a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3344      	adds	r3, #68	@ 0x44
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	334d      	adds	r3, #77	@ 0x4d
 8002a36:	2204      	movs	r2, #4
 8002a38:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 fbbf 	bl	80061c6 <USB_HC_Halt>
 8002a48:	e03f      	b.n	8002aca <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	3326      	adds	r3, #38	@ 0x26
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3326      	adds	r3, #38	@ 0x26
 8002a70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d129      	bne.n	8002aca <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	3344      	adds	r3, #68	@ 0x44
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	799b      	ldrb	r3, [r3, #6]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HCD_HC_IN_IRQHandler+0xc2a>
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	331b      	adds	r3, #27
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d110      	bne.n	8002aca <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	334d      	adds	r3, #77	@ 0x4d
 8002ab8:	2204      	movs	r2, #4
 8002aba:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 fb7e 	bl	80061c6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	331b      	adds	r3, #27
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d129      	bne.n	8002b34 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	331b      	adds	r3, #27
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	0151      	lsls	r1, r2, #5
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	440a      	add	r2, r1
 8002b0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b12:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	0151      	lsls	r1, r2, #5
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	440a      	add	r2, r1
 8002b2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b2e:	f043 0320 	orr.w	r3, r3, #32
 8002b32:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	2310      	movs	r3, #16
 8002b44:	6093      	str	r3, [r2, #8]
 8002b46:	e000      	b.n	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b48:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 fd85 	bl	800567e <USB_ReadChInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d11b      	bne.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	334d      	adds	r3, #77	@ 0x4d
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f003 fb0a 	bl	80061c6 <USB_HC_Halt>
 8002bb2:	f000 bc89 	b.w	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f002 fd5d 	bl	800567e <USB_ReadChInterrupts>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	f040 8082 	bne.w	8002cd4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2320      	movs	r3, #32
 8002be0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	3319      	adds	r3, #25
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d124      	bne.n	8002c42 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	3319      	adds	r3, #25
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	334c      	adds	r3, #76	@ 0x4c
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334d      	adds	r3, #77	@ 0x4d
 8002c30:	2203      	movs	r2, #3
 8002c32:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 fac2 	bl	80061c6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	331a      	adds	r3, #26
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	f040 8437 	bne.w	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	331b      	adds	r3, #27
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f040 842b 	bne.w	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3326      	adds	r3, #38	@ 0x26
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d009      	beq.n	8002c9c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	331b      	adds	r3, #27
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	334d      	adds	r3, #77	@ 0x4d
 8002cac:	2203      	movs	r2, #3
 8002cae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 fa84 	bl	80061c6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	3344      	adds	r3, #68	@ 0x44
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	e3f9      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f002 fcce 	bl	800567e <USB_ReadChInterrupts>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cec:	d111      	bne.n	8002d12 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d00:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 fa5b 	bl	80061c6 <USB_HC_Halt>
 8002d10:	e3da      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 fcaf 	bl	800567e <USB_ReadChInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d168      	bne.n	8002dfc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	3344      	adds	r3, #68	@ 0x44
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 fc99 	bl	800567e <USB_ReadChInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d52:	2b40      	cmp	r3, #64	@ 0x40
 8002d54:	d112      	bne.n	8002d7c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	3319      	adds	r3, #25
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d76:	461a      	mov	r2, r3
 8002d78:	2340      	movs	r3, #64	@ 0x40
 8002d7a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	331b      	adds	r3, #27
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d019      	beq.n	8002dc6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	331b      	adds	r3, #27
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	0151      	lsls	r1, r2, #5
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	440a      	add	r2, r1
 8002dbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	334d      	adds	r3, #77	@ 0x4d
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f003 f9e6 	bl	80061c6 <USB_HC_Halt>
 8002dfa:	e365      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f002 fc3a 	bl	800567e <USB_ReadChInterrupts>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e10:	2b40      	cmp	r3, #64	@ 0x40
 8002e12:	d139      	bne.n	8002e88 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	334d      	adds	r3, #77	@ 0x4d
 8002e24:	2205      	movs	r2, #5
 8002e26:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	331a      	adds	r3, #26
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3319      	adds	r3, #25
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	3344      	adds	r3, #68	@ 0x44
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f003 f9a9 	bl	80061c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e80:	461a      	mov	r2, r3
 8002e82:	2340      	movs	r3, #64	@ 0x40
 8002e84:	6093      	str	r3, [r2, #8]
 8002e86:	e31f      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f002 fbf4 	bl	800567e <USB_ReadChInterrupts>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d11a      	bne.n	8002ed6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eac:	461a      	mov	r2, r3
 8002eae:	2308      	movs	r3, #8
 8002eb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	334d      	adds	r3, #77	@ 0x4d
 8002ec2:	2206      	movs	r2, #6
 8002ec4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 f979 	bl	80061c6 <USB_HC_Halt>
 8002ed4:	e2f8      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f002 fbcd 	bl	800567e <USB_ReadChInterrupts>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b10      	cmp	r3, #16
 8002eec:	d144      	bne.n	8002f78 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3344      	adds	r3, #68	@ 0x44
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	334d      	adds	r3, #77	@ 0x4d
 8002f12:	2204      	movs	r2, #4
 8002f14:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	3319      	adds	r3, #25
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d114      	bne.n	8002f56 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3318      	adds	r3, #24
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	3319      	adds	r3, #25
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f003 f931 	bl	80061c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f70:	461a      	mov	r2, r3
 8002f72:	2310      	movs	r3, #16
 8002f74:	6093      	str	r3, [r2, #8]
 8002f76:	e2a7      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f002 fb7c 	bl	800567e <USB_ReadChInterrupts>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8c:	2b80      	cmp	r3, #128	@ 0x80
 8002f8e:	f040 8083 	bne.w	8003098 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	799b      	ldrb	r3, [r3, #6]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d111      	bne.n	8002fbe <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	334d      	adds	r3, #77	@ 0x4d
 8002faa:	2207      	movs	r2, #7
 8002fac:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f003 f905 	bl	80061c6 <USB_HC_Halt>
 8002fbc:	e062      	b.n	8003084 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3344      	adds	r3, #68	@ 0x44
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	1c59      	adds	r1, r3, #1
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4403      	add	r3, r0
 8002fde:	3344      	adds	r3, #68	@ 0x44
 8002fe0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	3344      	adds	r3, #68	@ 0x44
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d922      	bls.n	800303e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	3344      	adds	r3, #68	@ 0x44
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	334c      	adds	r3, #76	@ 0x4c
 800301c:	2204      	movs	r2, #4
 800301e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	334c      	adds	r3, #76	@ 0x4c
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	4619      	mov	r1, r3
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f008 fe0e 	bl	800bc58 <HAL_HCD_HC_NotifyURBChange_Callback>
 800303c:	e022      	b.n	8003084 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	334c      	adds	r3, #76	@ 0x4c
 800304e:	2202      	movs	r2, #2
 8003050:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003068:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003070:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003090:	461a      	mov	r2, r3
 8003092:	2380      	movs	r3, #128	@ 0x80
 8003094:	6093      	str	r3, [r2, #8]
 8003096:	e217      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f002 faec 	bl	800567e <USB_ReadChInterrupts>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b0:	d11b      	bne.n	80030ea <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	334d      	adds	r3, #77	@ 0x4d
 80030c2:	2209      	movs	r2, #9
 80030c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 f879 	bl	80061c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e0:	461a      	mov	r2, r3
 80030e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030e6:	6093      	str	r3, [r2, #8]
 80030e8:	e1ee      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	4611      	mov	r1, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f002 fac3 	bl	800567e <USB_ReadChInterrupts>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	f040 81df 	bne.w	80034c2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4413      	add	r3, r2
 800310c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003110:	461a      	mov	r2, r3
 8003112:	2302      	movs	r3, #2
 8003114:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	334d      	adds	r3, #77	@ 0x4d
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b01      	cmp	r3, #1
 800312a:	f040 8093 	bne.w	8003254 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	334d      	adds	r3, #77	@ 0x4d
 800313e:	2202      	movs	r2, #2
 8003140:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	334c      	adds	r3, #76	@ 0x4c
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	3326      	adds	r3, #38	@ 0x26
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d00b      	beq.n	8003184 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	3326      	adds	r3, #38	@ 0x26
 800317c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800317e:	2b03      	cmp	r3, #3
 8003180:	f040 8190 	bne.w	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	799b      	ldrb	r3, [r3, #6]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d115      	bne.n	80031b8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	333d      	adds	r3, #61	@ 0x3d
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	f083 0301 	eor.w	r3, r3, #1
 80031a4:	b2d8      	uxtb	r0, r3
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	333d      	adds	r3, #61	@ 0x3d
 80031b4:	4602      	mov	r2, r0
 80031b6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	799b      	ldrb	r3, [r3, #6]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	f040 8171 	bne.w	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3334      	adds	r3, #52	@ 0x34
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8165 	beq.w	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	3334      	adds	r3, #52	@ 0x34
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4403      	add	r3, r0
 80031fa:	3328      	adds	r3, #40	@ 0x28
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	440b      	add	r3, r1
 8003200:	1e59      	subs	r1, r3, #1
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4403      	add	r3, r0
 8003210:	3328      	adds	r3, #40	@ 0x28
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	fbb1 f3f3 	udiv	r3, r1, r3
 8003218:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 813f 	beq.w	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	333d      	adds	r3, #61	@ 0x3d
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	f083 0301 	eor.w	r3, r3, #1
 800323e:	b2d8      	uxtb	r0, r3
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	333d      	adds	r3, #61	@ 0x3d
 800324e:	4602      	mov	r2, r0
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e127      	b.n	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	334d      	adds	r3, #77	@ 0x4d
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d120      	bne.n	80032ac <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	334d      	adds	r3, #77	@ 0x4d
 800327a:	2202      	movs	r2, #2
 800327c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	331b      	adds	r3, #27
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	f040 8107 	bne.w	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	334c      	adds	r3, #76	@ 0x4c
 80032a6:	2202      	movs	r2, #2
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e0fb      	b.n	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	334d      	adds	r3, #77	@ 0x4d
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d13a      	bne.n	8003338 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	334d      	adds	r3, #77	@ 0x4d
 80032d2:	2202      	movs	r2, #2
 80032d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	334c      	adds	r3, #76	@ 0x4c
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	331b      	adds	r3, #27
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	f040 80d1 	bne.w	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	331b      	adds	r3, #27
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4413      	add	r3, r2
 800331e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	0151      	lsls	r1, r2, #5
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	440a      	add	r2, r1
 800332c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003330:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003334:	6053      	str	r3, [r2, #4]
 8003336:	e0b5      	b.n	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	334d      	adds	r3, #77	@ 0x4d
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b05      	cmp	r3, #5
 800334c:	d114      	bne.n	8003378 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	334d      	adds	r3, #77	@ 0x4d
 800335e:	2202      	movs	r2, #2
 8003360:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	334c      	adds	r3, #76	@ 0x4c
 8003372:	2202      	movs	r2, #2
 8003374:	701a      	strb	r2, [r3, #0]
 8003376:	e095      	b.n	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	334d      	adds	r3, #77	@ 0x4d
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b06      	cmp	r3, #6
 800338c:	d114      	bne.n	80033b8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	334d      	adds	r3, #77	@ 0x4d
 800339e:	2202      	movs	r2, #2
 80033a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	334c      	adds	r3, #76	@ 0x4c
 80033b2:	2205      	movs	r2, #5
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	e075      	b.n	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	334d      	adds	r3, #77	@ 0x4d
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b07      	cmp	r3, #7
 80033cc:	d00a      	beq.n	80033e4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	334d      	adds	r3, #77	@ 0x4d
 80033de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033e0:	2b09      	cmp	r3, #9
 80033e2:	d170      	bne.n	80034c6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	334d      	adds	r3, #77	@ 0x4d
 80033f4:	2202      	movs	r2, #2
 80033f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	3344      	adds	r3, #68	@ 0x44
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	1c59      	adds	r1, r3, #1
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4403      	add	r3, r0
 8003418:	3344      	adds	r3, #68	@ 0x44
 800341a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	3344      	adds	r3, #68	@ 0x44
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d914      	bls.n	800345c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	3344      	adds	r3, #68	@ 0x44
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	334c      	adds	r3, #76	@ 0x4c
 8003456:	2204      	movs	r2, #4
 8003458:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800345a:	e022      	b.n	80034a2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	334c      	adds	r3, #76	@ 0x4c
 800346c:	2202      	movs	r2, #2
 800346e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003486:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800348e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800349c:	461a      	mov	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034a2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	334c      	adds	r3, #76	@ 0x4c
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	4619      	mov	r1, r3
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f008 fbcc 	bl	800bc58 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034c0:	e002      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80034c6:	bf00      	nop
  }
}
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b08a      	sub	sp, #40	@ 0x28
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034de:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	0c5b      	lsrs	r3, r3, #17
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003502:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d004      	beq.n	8003514 <HCD_RXQLVL_IRQHandler+0x46>
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b05      	cmp	r3, #5
 800350e:	f000 80b6 	beq.w	800367e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003512:	e0b7      	b.n	8003684 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 80b3 	beq.w	8003682 <HCD_RXQLVL_IRQHandler+0x1b4>
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	332c      	adds	r3, #44	@ 0x2c
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80a7 	beq.w	8003682 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	3338      	adds	r3, #56	@ 0x38
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	18d1      	adds	r1, r2, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4403      	add	r3, r0
 8003558:	3334      	adds	r3, #52	@ 0x34
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4299      	cmp	r1, r3
 800355e:	f200 8083 	bhi.w	8003668 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	332c      	adds	r3, #44	@ 0x2c
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	b292      	uxth	r2, r2
 800357c:	4619      	mov	r1, r3
 800357e:	f002 f813 	bl	80055a8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	332c      	adds	r3, #44	@ 0x2c
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	18d1      	adds	r1, r2, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4403      	add	r3, r0
 80035a6:	332c      	adds	r3, #44	@ 0x2c
 80035a8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	3338      	adds	r3, #56	@ 0x38
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	18d1      	adds	r1, r2, r3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4613      	mov	r3, r2
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4403      	add	r3, r0
 80035ce:	3338      	adds	r3, #56	@ 0x38
 80035d0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	0cdb      	lsrs	r3, r3, #19
 80035e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035e6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	3328      	adds	r3, #40	@ 0x28
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4293      	cmp	r3, r2
 8003600:	d13f      	bne.n	8003682 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d03c      	beq.n	8003682 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	4413      	add	r3, r2
 8003610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800361e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003626:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003634:	461a      	mov	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	333c      	adds	r3, #60	@ 0x3c
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	f083 0301 	eor.w	r3, r3, #1
 8003650:	b2d8      	uxtb	r0, r3
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	333c      	adds	r3, #60	@ 0x3c
 8003662:	4602      	mov	r2, r0
 8003664:	701a      	strb	r2, [r3, #0]
      break;
 8003666:	e00c      	b.n	8003682 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	334c      	adds	r3, #76	@ 0x4c
 8003678:	2204      	movs	r2, #4
 800367a:	701a      	strb	r2, [r3, #0]
      break;
 800367c:	e001      	b.n	8003682 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003682:	bf00      	nop
  }
}
 8003684:	bf00      	nop
 8003686:	3728      	adds	r7, #40	@ 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80036b8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d10b      	bne.n	80036dc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d102      	bne.n	80036d4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f008 faa6 	bl	800bc20 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f043 0302 	orr.w	r3, r3, #2
 80036da:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d132      	bne.n	800374c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f043 0308 	orr.w	r3, r3, #8
 80036ec:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d126      	bne.n	8003746 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7a5b      	ldrb	r3, [r3, #9]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d113      	bne.n	8003728 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003706:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800370a:	d106      	bne.n	800371a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2102      	movs	r1, #2
 8003712:	4618      	mov	r0, r3
 8003714:	f002 f8d8 	bl	80058c8 <USB_InitFSLSPClkSel>
 8003718:	e011      	b.n	800373e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2101      	movs	r1, #1
 8003720:	4618      	mov	r0, r3
 8003722:	f002 f8d1 	bl	80058c8 <USB_InitFSLSPClkSel>
 8003726:	e00a      	b.n	800373e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	79db      	ldrb	r3, [r3, #7]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d106      	bne.n	800373e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003736:	461a      	mov	r2, r3
 8003738:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800373c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f008 fa9c 	bl	800bc7c <HAL_HCD_PortEnabled_Callback>
 8003744:	e002      	b.n	800374c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f008 faa6 	bl	800bc98 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b20      	cmp	r3, #32
 8003754:	d103      	bne.n	800375e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f043 0320 	orr.w	r3, r3, #32
 800375c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003764:	461a      	mov	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	6013      	str	r3, [r2, #0]
}
 800376a:	bf00      	nop
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e12b      	b.n	80039de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd f982 	bl	8000aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2224      	movs	r2, #36	@ 0x24
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037d8:	f001 fa20 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 80037dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4a81      	ldr	r2, [pc, #516]	@ (80039e8 <HAL_I2C_Init+0x274>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d807      	bhi.n	80037f8 <HAL_I2C_Init+0x84>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4a80      	ldr	r2, [pc, #512]	@ (80039ec <HAL_I2C_Init+0x278>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	bf94      	ite	ls
 80037f0:	2301      	movls	r3, #1
 80037f2:	2300      	movhi	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e006      	b.n	8003806 <HAL_I2C_Init+0x92>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4a7d      	ldr	r2, [pc, #500]	@ (80039f0 <HAL_I2C_Init+0x27c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	bf94      	ite	ls
 8003800:	2301      	movls	r3, #1
 8003802:	2300      	movhi	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0e7      	b.n	80039de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a78      	ldr	r2, [pc, #480]	@ (80039f4 <HAL_I2C_Init+0x280>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	0c9b      	lsrs	r3, r3, #18
 8003818:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a6a      	ldr	r2, [pc, #424]	@ (80039e8 <HAL_I2C_Init+0x274>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d802      	bhi.n	8003848 <HAL_I2C_Init+0xd4>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3301      	adds	r3, #1
 8003846:	e009      	b.n	800385c <HAL_I2C_Init+0xe8>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	4a69      	ldr	r2, [pc, #420]	@ (80039f8 <HAL_I2C_Init+0x284>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	099b      	lsrs	r3, r3, #6
 800385a:	3301      	adds	r3, #1
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	430b      	orrs	r3, r1
 8003862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800386e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	495c      	ldr	r1, [pc, #368]	@ (80039e8 <HAL_I2C_Init+0x274>)
 8003878:	428b      	cmp	r3, r1
 800387a:	d819      	bhi.n	80038b0 <HAL_I2C_Init+0x13c>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e59      	subs	r1, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	fbb1 f3f3 	udiv	r3, r1, r3
 800388a:	1c59      	adds	r1, r3, #1
 800388c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003890:	400b      	ands	r3, r1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_I2C_Init+0x138>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1e59      	subs	r1, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038aa:	e051      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 80038ac:	2304      	movs	r3, #4
 80038ae:	e04f      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d111      	bne.n	80038dc <HAL_I2C_Init+0x168>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e58      	subs	r0, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	e012      	b.n	8003902 <HAL_I2C_Init+0x18e>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e58      	subs	r0, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	0099      	lsls	r1, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_Init+0x196>
 8003906:	2301      	movs	r3, #1
 8003908:	e022      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10e      	bne.n	8003930 <HAL_I2C_Init+0x1bc>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1e58      	subs	r0, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	440b      	add	r3, r1
 8003920:	fbb0 f3f3 	udiv	r3, r0, r3
 8003924:	3301      	adds	r3, #1
 8003926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800392e:	e00f      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1e58      	subs	r0, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	0099      	lsls	r1, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	fbb0 f3f3 	udiv	r3, r0, r3
 8003946:	3301      	adds	r3, #1
 8003948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	6809      	ldr	r1, [r1, #0]
 8003954:	4313      	orrs	r3, r2
 8003956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800397e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6911      	ldr	r1, [r2, #16]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	4311      	orrs	r1, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	430b      	orrs	r3, r1
 8003992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	000186a0 	.word	0x000186a0
 80039ec:	001e847f 	.word	0x001e847f
 80039f0:	003d08ff 	.word	0x003d08ff
 80039f4:	431bde83 	.word	0x431bde83
 80039f8:	10624dd3 	.word	0x10624dd3

080039fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e128      	b.n	8003c60 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a90      	ldr	r2, [pc, #576]	@ (8003c68 <HAL_I2S_Init+0x26c>)
 8003a26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7fd f883 	bl	8000b34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2202      	movs	r2, #2
 8003a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a44:	f023 030f 	bic.w	r3, r3, #15
 8003a48:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d060      	beq.n	8003b1c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d102      	bne.n	8003a68 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a62:	2310      	movs	r3, #16
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e001      	b.n	8003a6c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a68:	2320      	movs	r3, #32
 8003a6a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d802      	bhi.n	8003a7a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f001 f9c4 	bl	8004e08 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a80:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a8a:	d125      	bne.n	8003ad8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d010      	beq.n	8003ab6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	3305      	adds	r3, #5
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	e01f      	b.n	8003af6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	461a      	mov	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad2:	3305      	adds	r3, #5
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	e00e      	b.n	8003af6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	461a      	mov	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	3305      	adds	r3, #5
 8003af4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4a5c      	ldr	r2, [pc, #368]	@ (8003c6c <HAL_I2S_Init+0x270>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	08db      	lsrs	r3, r3, #3
 8003b00:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	085b      	lsrs	r3, r3, #1
 8003b12:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	e003      	b.n	8003b24 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d902      	bls.n	8003b30 <HAL_I2S_Init+0x134>
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	2bff      	cmp	r3, #255	@ 0xff
 8003b2e:	d907      	bls.n	8003b40 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b34:	f043 0210 	orr.w	r2, r3, #16
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e08f      	b.n	8003c60 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	ea42 0103 	orr.w	r1, r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b5e:	f023 030f 	bic.w	r3, r3, #15
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6851      	ldr	r1, [r2, #4]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6892      	ldr	r2, [r2, #8]
 8003b6a:	4311      	orrs	r1, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	68d2      	ldr	r2, [r2, #12]
 8003b70:	4311      	orrs	r1, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6992      	ldr	r2, [r2, #24]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b82:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d161      	bne.n	8003c50 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a38      	ldr	r2, [pc, #224]	@ (8003c70 <HAL_I2S_Init+0x274>)
 8003b90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a37      	ldr	r2, [pc, #220]	@ (8003c74 <HAL_I2S_Init+0x278>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d101      	bne.n	8003ba0 <HAL_I2S_Init+0x1a4>
 8003b9c:	4b36      	ldr	r3, [pc, #216]	@ (8003c78 <HAL_I2S_Init+0x27c>)
 8003b9e:	e001      	b.n	8003ba4 <HAL_I2S_Init+0x1a8>
 8003ba0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	4932      	ldr	r1, [pc, #200]	@ (8003c74 <HAL_I2S_Init+0x278>)
 8003bac:	428a      	cmp	r2, r1
 8003bae:	d101      	bne.n	8003bb4 <HAL_I2S_Init+0x1b8>
 8003bb0:	4a31      	ldr	r2, [pc, #196]	@ (8003c78 <HAL_I2S_Init+0x27c>)
 8003bb2:	e001      	b.n	8003bb8 <HAL_I2S_Init+0x1bc>
 8003bb4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003bb8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bbc:	f023 030f 	bic.w	r3, r3, #15
 8003bc0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2b      	ldr	r2, [pc, #172]	@ (8003c74 <HAL_I2S_Init+0x278>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2S_Init+0x1d4>
 8003bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8003c78 <HAL_I2S_Init+0x27c>)
 8003bce:	e001      	b.n	8003bd4 <HAL_I2S_Init+0x1d8>
 8003bd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a25      	ldr	r2, [pc, #148]	@ (8003c74 <HAL_I2S_Init+0x278>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_I2S_Init+0x1ea>
 8003be2:	4b25      	ldr	r3, [pc, #148]	@ (8003c78 <HAL_I2S_Init+0x27c>)
 8003be4:	e001      	b.n	8003bea <HAL_I2S_Init+0x1ee>
 8003be6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bf6:	d003      	beq.n	8003c00 <HAL_I2S_Init+0x204>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	e001      	b.n	8003c0c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c16:	4313      	orrs	r3, r2
 8003c18:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c20:	4313      	orrs	r3, r2
 8003c22:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	897b      	ldrh	r3, [r7, #10]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c38:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a0d      	ldr	r2, [pc, #52]	@ (8003c74 <HAL_I2S_Init+0x278>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d101      	bne.n	8003c48 <HAL_I2S_Init+0x24c>
 8003c44:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <HAL_I2S_Init+0x27c>)
 8003c46:	e001      	b.n	8003c4c <HAL_I2S_Init+0x250>
 8003c48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c4c:	897a      	ldrh	r2, [r7, #10]
 8003c4e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	08003d73 	.word	0x08003d73
 8003c6c:	cccccccd 	.word	0xcccccccd
 8003c70:	08003e89 	.word	0x08003e89
 8003c74:	40003800 	.word	0x40003800
 8003c78:	40003400 	.word	0x40003400

08003c7c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	881a      	ldrh	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	1c9a      	adds	r2, r3, #2
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10e      	bne.n	8003d0c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003cfc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff ffb8 	bl	8003c7c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d26:	b292      	uxth	r2, r2
 8003d28:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2e:	1c9a      	adds	r2, r3, #2
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10e      	bne.n	8003d6a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d5a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ff93 	bl	8003c90 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d13a      	bne.n	8003e04 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d109      	bne.n	8003dac <I2S_IRQHandler+0x3a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da2:	2b40      	cmp	r3, #64	@ 0x40
 8003da4:	d102      	bne.n	8003dac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff ffb4 	bl	8003d14 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db2:	2b40      	cmp	r3, #64	@ 0x40
 8003db4:	d126      	bne.n	8003e04 <I2S_IRQHandler+0x92>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d11f      	bne.n	8003e04 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003dd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df6:	f043 0202 	orr.w	r2, r3, #2
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff ff50 	bl	8003ca4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d136      	bne.n	8003e7e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d109      	bne.n	8003e2e <I2S_IRQHandler+0xbc>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e24:	2b80      	cmp	r3, #128	@ 0x80
 8003e26:	d102      	bne.n	8003e2e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff ff45 	bl	8003cb8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d122      	bne.n	8003e7e <I2S_IRQHandler+0x10c>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d11b      	bne.n	8003e7e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e54:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e70:	f043 0204 	orr.w	r2, r3, #4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ff13 	bl	8003ca4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e7e:	bf00      	nop
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a92      	ldr	r2, [pc, #584]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d101      	bne.n	8003ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ea2:	4b92      	ldr	r3, [pc, #584]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea4:	e001      	b.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003ea6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a8b      	ldr	r2, [pc, #556]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ec0:	4b8a      	ldr	r3, [pc, #552]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ec2:	e001      	b.n	8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ec4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ed4:	d004      	beq.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f040 8099 	bne.w	8004012 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d107      	bne.n	8003efa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f925 	bl	8004144 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f9c8 	bl	80042a4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1a:	2b40      	cmp	r3, #64	@ 0x40
 8003f1c:	d13a      	bne.n	8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d035      	beq.n	8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a6e      	ldr	r2, [pc, #440]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f32:	4b6e      	ldr	r3, [pc, #440]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f34:	e001      	b.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4969      	ldr	r1, [pc, #420]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f42:	428b      	cmp	r3, r1
 8003f44:	d101      	bne.n	8003f4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f46:	4b69      	ldr	r3, [pc, #420]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f48:	e001      	b.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f4e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f52:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	f043 0202 	orr.w	r2, r3, #2
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fe88 	bl	8003ca4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	f040 80c3 	bne.w	8004126 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80bd 	beq.w	8004126 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a49      	ldr	r2, [pc, #292]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d101      	bne.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003fc6:	4b49      	ldr	r3, [pc, #292]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fc8:	e001      	b.n	8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003fca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4944      	ldr	r1, [pc, #272]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fd6:	428b      	cmp	r3, r1
 8003fd8:	d101      	bne.n	8003fde <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003fda:	4b44      	ldr	r3, [pc, #272]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fdc:	e001      	b.n	8003fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003fde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fe6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	f043 0204 	orr.w	r2, r3, #4
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff fe4a 	bl	8003ca4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004010:	e089      	b.n	8004126 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b02      	cmp	r3, #2
 800401a:	d107      	bne.n	800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f8be 	bl	80041a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b01      	cmp	r3, #1
 8004034:	d107      	bne.n	8004046 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f8fd 	bl	8004240 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404c:	2b40      	cmp	r3, #64	@ 0x40
 800404e:	d12f      	bne.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d02a      	beq.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004068:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1e      	ldr	r2, [pc, #120]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004074:	4b1d      	ldr	r3, [pc, #116]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004076:	e001      	b.n	800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004078:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4919      	ldr	r1, [pc, #100]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004084:	428b      	cmp	r3, r1
 8004086:	d101      	bne.n	800408c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004088:	4b18      	ldr	r3, [pc, #96]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800408a:	e001      	b.n	8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800408c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004090:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004094:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a2:	f043 0202 	orr.w	r2, r3, #2
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff fdfa 	bl	8003ca4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d136      	bne.n	8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d031      	beq.n	8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a07      	ldr	r2, [pc, #28]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d101      	bne.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040ce:	4b07      	ldr	r3, [pc, #28]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040d0:	e001      	b.n	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4902      	ldr	r1, [pc, #8]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040de:	428b      	cmp	r3, r1
 80040e0:	d106      	bne.n	80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80040e2:	4b02      	ldr	r3, [pc, #8]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040e4:	e006      	b.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80040e6:	bf00      	nop
 80040e8:	40003800 	.word	0x40003800
 80040ec:	40003400 	.word	0x40003400
 80040f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040f8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004108:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004116:	f043 0204 	orr.w	r2, r3, #4
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff fdc0 	bl	8003ca4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004124:	e000      	b.n	8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004126:	bf00      	nop
}
 8004128:	bf00      	nop
 800412a:	3720      	adds	r7, #32
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	1c99      	adds	r1, r3, #2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6251      	str	r1, [r2, #36]	@ 0x24
 8004156:	881a      	ldrh	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d113      	bne.n	800419e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004184:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff ffc9 	bl	8004130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	1c99      	adds	r1, r3, #2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6251      	str	r1, [r2, #36]	@ 0x24
 80041ba:	8819      	ldrh	r1, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004238 <I2SEx_TxISR_I2SExt+0x90>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d101      	bne.n	80041ca <I2SEx_TxISR_I2SExt+0x22>
 80041c6:	4b1d      	ldr	r3, [pc, #116]	@ (800423c <I2SEx_TxISR_I2SExt+0x94>)
 80041c8:	e001      	b.n	80041ce <I2SEx_TxISR_I2SExt+0x26>
 80041ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041ce:	460a      	mov	r2, r1
 80041d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d121      	bne.n	800422e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a12      	ldr	r2, [pc, #72]	@ (8004238 <I2SEx_TxISR_I2SExt+0x90>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d101      	bne.n	80041f8 <I2SEx_TxISR_I2SExt+0x50>
 80041f4:	4b11      	ldr	r3, [pc, #68]	@ (800423c <I2SEx_TxISR_I2SExt+0x94>)
 80041f6:	e001      	b.n	80041fc <I2SEx_TxISR_I2SExt+0x54>
 80041f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	490d      	ldr	r1, [pc, #52]	@ (8004238 <I2SEx_TxISR_I2SExt+0x90>)
 8004204:	428b      	cmp	r3, r1
 8004206:	d101      	bne.n	800420c <I2SEx_TxISR_I2SExt+0x64>
 8004208:	4b0c      	ldr	r3, [pc, #48]	@ (800423c <I2SEx_TxISR_I2SExt+0x94>)
 800420a:	e001      	b.n	8004210 <I2SEx_TxISR_I2SExt+0x68>
 800420c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004210:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004214:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d106      	bne.n	800422e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff ff81 	bl	8004130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40003800 	.word	0x40003800
 800423c:	40003400 	.word	0x40003400

08004240 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68d8      	ldr	r0, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004252:	1c99      	adds	r1, r3, #2
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004258:	b282      	uxth	r2, r0
 800425a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d113      	bne.n	800429c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004282:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff ff4a 	bl	8004130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a20      	ldr	r2, [pc, #128]	@ (8004334 <I2SEx_RxISR_I2SExt+0x90>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <I2SEx_RxISR_I2SExt+0x16>
 80042b6:	4b20      	ldr	r3, [pc, #128]	@ (8004338 <I2SEx_RxISR_I2SExt+0x94>)
 80042b8:	e001      	b.n	80042be <I2SEx_RxISR_I2SExt+0x1a>
 80042ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042be:	68d8      	ldr	r0, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c4:	1c99      	adds	r1, r3, #2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042ca:	b282      	uxth	r2, r0
 80042cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d121      	bne.n	800432a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a12      	ldr	r2, [pc, #72]	@ (8004334 <I2SEx_RxISR_I2SExt+0x90>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d101      	bne.n	80042f4 <I2SEx_RxISR_I2SExt+0x50>
 80042f0:	4b11      	ldr	r3, [pc, #68]	@ (8004338 <I2SEx_RxISR_I2SExt+0x94>)
 80042f2:	e001      	b.n	80042f8 <I2SEx_RxISR_I2SExt+0x54>
 80042f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	490d      	ldr	r1, [pc, #52]	@ (8004334 <I2SEx_RxISR_I2SExt+0x90>)
 8004300:	428b      	cmp	r3, r1
 8004302:	d101      	bne.n	8004308 <I2SEx_RxISR_I2SExt+0x64>
 8004304:	4b0c      	ldr	r3, [pc, #48]	@ (8004338 <I2SEx_RxISR_I2SExt+0x94>)
 8004306:	e001      	b.n	800430c <I2SEx_RxISR_I2SExt+0x68>
 8004308:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800430c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004310:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d106      	bne.n	800432a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ff03 	bl	8004130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40003800 	.word	0x40003800
 8004338:	40003400 	.word	0x40003400

0800433c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e267      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d075      	beq.n	8004446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800435a:	4b88      	ldr	r3, [pc, #544]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b04      	cmp	r3, #4
 8004364:	d00c      	beq.n	8004380 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004366:	4b85      	ldr	r3, [pc, #532]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800436e:	2b08      	cmp	r3, #8
 8004370:	d112      	bne.n	8004398 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004372:	4b82      	ldr	r3, [pc, #520]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800437e:	d10b      	bne.n	8004398 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004380:	4b7e      	ldr	r3, [pc, #504]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d05b      	beq.n	8004444 <HAL_RCC_OscConfig+0x108>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d157      	bne.n	8004444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e242      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a0:	d106      	bne.n	80043b0 <HAL_RCC_OscConfig+0x74>
 80043a2:	4b76      	ldr	r3, [pc, #472]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a75      	ldr	r2, [pc, #468]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e01d      	b.n	80043ec <HAL_RCC_OscConfig+0xb0>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0x98>
 80043ba:	4b70      	ldr	r3, [pc, #448]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6f      	ldr	r2, [pc, #444]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	4b6d      	ldr	r3, [pc, #436]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a6c      	ldr	r2, [pc, #432]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e00b      	b.n	80043ec <HAL_RCC_OscConfig+0xb0>
 80043d4:	4b69      	ldr	r3, [pc, #420]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a68      	ldr	r2, [pc, #416]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	4b66      	ldr	r3, [pc, #408]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a65      	ldr	r2, [pc, #404]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d013      	beq.n	800441c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fc fd92 	bl	8000f1c <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fc fd8e 	bl	8000f1c <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	@ 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e207      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440e:	4b5b      	ldr	r3, [pc, #364]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0xc0>
 800441a:	e014      	b.n	8004446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441c:	f7fc fd7e 	bl	8000f1c <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004424:	f7fc fd7a 	bl	8000f1c <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	@ 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e1f3      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004436:	4b51      	ldr	r3, [pc, #324]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0xe8>
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d063      	beq.n	800451a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004452:	4b4a      	ldr	r3, [pc, #296]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445e:	4b47      	ldr	r3, [pc, #284]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004466:	2b08      	cmp	r3, #8
 8004468:	d11c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446a:	4b44      	ldr	r3, [pc, #272]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d116      	bne.n	80044a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004476:	4b41      	ldr	r3, [pc, #260]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_RCC_OscConfig+0x152>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d001      	beq.n	800448e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e1c7      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448e:	4b3b      	ldr	r3, [pc, #236]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4937      	ldr	r1, [pc, #220]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a2:	e03a      	b.n	800451a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d020      	beq.n	80044ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ac:	4b34      	ldr	r3, [pc, #208]	@ (8004580 <HAL_RCC_OscConfig+0x244>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b2:	f7fc fd33 	bl	8000f1c <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ba:	f7fc fd2f 	bl	8000f1c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e1a8      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044cc:	4b2b      	ldr	r3, [pc, #172]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d8:	4b28      	ldr	r3, [pc, #160]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4925      	ldr	r1, [pc, #148]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]
 80044ec:	e015      	b.n	800451a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ee:	4b24      	ldr	r3, [pc, #144]	@ (8004580 <HAL_RCC_OscConfig+0x244>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fc fd12 	bl	8000f1c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044fc:	f7fc fd0e 	bl	8000f1c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e187      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450e:	4b1b      	ldr	r3, [pc, #108]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d036      	beq.n	8004594 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d016      	beq.n	800455c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800452e:	4b15      	ldr	r3, [pc, #84]	@ (8004584 <HAL_RCC_OscConfig+0x248>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fc fcf2 	bl	8000f1c <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800453c:	f7fc fcee 	bl	8000f1c <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e167      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454e:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x200>
 800455a:	e01b      	b.n	8004594 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800455c:	4b09      	ldr	r3, [pc, #36]	@ (8004584 <HAL_RCC_OscConfig+0x248>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004562:	f7fc fcdb 	bl	8000f1c <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004568:	e00e      	b.n	8004588 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800456a:	f7fc fcd7 	bl	8000f1c <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d907      	bls.n	8004588 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e150      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
 800457c:	40023800 	.word	0x40023800
 8004580:	42470000 	.word	0x42470000
 8004584:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004588:	4b88      	ldr	r3, [pc, #544]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800458a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1ea      	bne.n	800456a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8097 	beq.w	80046d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a6:	4b81      	ldr	r3, [pc, #516]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10f      	bne.n	80045d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	4b7d      	ldr	r3, [pc, #500]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ba:	4a7c      	ldr	r2, [pc, #496]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045c2:	4b7a      	ldr	r3, [pc, #488]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d2:	4b77      	ldr	r3, [pc, #476]	@ (80047b0 <HAL_RCC_OscConfig+0x474>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d118      	bne.n	8004610 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045de:	4b74      	ldr	r3, [pc, #464]	@ (80047b0 <HAL_RCC_OscConfig+0x474>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a73      	ldr	r2, [pc, #460]	@ (80047b0 <HAL_RCC_OscConfig+0x474>)
 80045e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ea:	f7fc fc97 	bl	8000f1c <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f2:	f7fc fc93 	bl	8000f1c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e10c      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004604:	4b6a      	ldr	r3, [pc, #424]	@ (80047b0 <HAL_RCC_OscConfig+0x474>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d106      	bne.n	8004626 <HAL_RCC_OscConfig+0x2ea>
 8004618:	4b64      	ldr	r3, [pc, #400]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461c:	4a63      	ldr	r2, [pc, #396]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	6713      	str	r3, [r2, #112]	@ 0x70
 8004624:	e01c      	b.n	8004660 <HAL_RCC_OscConfig+0x324>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b05      	cmp	r3, #5
 800462c:	d10c      	bne.n	8004648 <HAL_RCC_OscConfig+0x30c>
 800462e:	4b5f      	ldr	r3, [pc, #380]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004632:	4a5e      	ldr	r2, [pc, #376]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004634:	f043 0304 	orr.w	r3, r3, #4
 8004638:	6713      	str	r3, [r2, #112]	@ 0x70
 800463a:	4b5c      	ldr	r3, [pc, #368]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463e:	4a5b      	ldr	r2, [pc, #364]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6713      	str	r3, [r2, #112]	@ 0x70
 8004646:	e00b      	b.n	8004660 <HAL_RCC_OscConfig+0x324>
 8004648:	4b58      	ldr	r3, [pc, #352]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464c:	4a57      	ldr	r2, [pc, #348]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	6713      	str	r3, [r2, #112]	@ 0x70
 8004654:	4b55      	ldr	r3, [pc, #340]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004658:	4a54      	ldr	r2, [pc, #336]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800465a:	f023 0304 	bic.w	r3, r3, #4
 800465e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d015      	beq.n	8004694 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004668:	f7fc fc58 	bl	8000f1c <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466e:	e00a      	b.n	8004686 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7fc fc54 	bl	8000f1c <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e0cb      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004686:	4b49      	ldr	r3, [pc, #292]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0ee      	beq.n	8004670 <HAL_RCC_OscConfig+0x334>
 8004692:	e014      	b.n	80046be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004694:	f7fc fc42 	bl	8000f1c <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469c:	f7fc fc3e 	bl	8000f1c <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e0b5      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b2:	4b3e      	ldr	r3, [pc, #248]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ee      	bne.n	800469c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046be:	7dfb      	ldrb	r3, [r7, #23]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d105      	bne.n	80046d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c4:	4b39      	ldr	r3, [pc, #228]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80046c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c8:	4a38      	ldr	r2, [pc, #224]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80046ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80a1 	beq.w	800481c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046da:	4b34      	ldr	r3, [pc, #208]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d05c      	beq.n	80047a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d141      	bne.n	8004772 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ee:	4b31      	ldr	r3, [pc, #196]	@ (80047b4 <HAL_RCC_OscConfig+0x478>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fc fc12 	bl	8000f1c <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fc fc0e 	bl	8000f1c <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e087      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470e:	4b27      	ldr	r3, [pc, #156]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69da      	ldr	r2, [r3, #28]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	019b      	lsls	r3, r3, #6
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	3b01      	subs	r3, #1
 8004734:	041b      	lsls	r3, r3, #16
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473c:	061b      	lsls	r3, r3, #24
 800473e:	491b      	ldr	r1, [pc, #108]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004740:	4313      	orrs	r3, r2
 8004742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004744:	4b1b      	ldr	r3, [pc, #108]	@ (80047b4 <HAL_RCC_OscConfig+0x478>)
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474a:	f7fc fbe7 	bl	8000f1c <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004752:	f7fc fbe3 	bl	8000f1c <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e05c      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004764:	4b11      	ldr	r3, [pc, #68]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x416>
 8004770:	e054      	b.n	800481c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004772:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <HAL_RCC_OscConfig+0x478>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fc fbd0 	bl	8000f1c <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004780:	f7fc fbcc 	bl	8000f1c <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e045      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004792:	4b06      	ldr	r3, [pc, #24]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0x444>
 800479e:	e03d      	b.n	800481c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e038      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40007000 	.word	0x40007000
 80047b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004828 <HAL_RCC_OscConfig+0x4ec>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d028      	beq.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d121      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d11a      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047e8:	4013      	ands	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d111      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	3b01      	subs	r3, #1
 8004802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d107      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800

0800482c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0cc      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004840:	4b68      	ldr	r3, [pc, #416]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d90c      	bls.n	8004868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b65      	ldr	r3, [pc, #404]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b63      	ldr	r3, [pc, #396]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0b8      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d020      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004880:	4b59      	ldr	r3, [pc, #356]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4a58      	ldr	r2, [pc, #352]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800488a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004898:	4b53      	ldr	r3, [pc, #332]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a52      	ldr	r2, [pc, #328]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a4:	4b50      	ldr	r3, [pc, #320]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	494d      	ldr	r1, [pc, #308]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d044      	beq.n	800494c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	4b47      	ldr	r3, [pc, #284]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d119      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d003      	beq.n	80048ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d107      	bne.n	80048fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ea:	4b3f      	ldr	r3, [pc, #252]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e06f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fa:	4b3b      	ldr	r3, [pc, #236]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e067      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800490a:	4b37      	ldr	r3, [pc, #220]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f023 0203 	bic.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4934      	ldr	r1, [pc, #208]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	4313      	orrs	r3, r2
 800491a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800491c:	f7fc fafe 	bl	8000f1c <HAL_GetTick>
 8004920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	e00a      	b.n	800493a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004924:	f7fc fafa 	bl	8000f1c <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e04f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	4b2b      	ldr	r3, [pc, #172]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 020c 	and.w	r2, r3, #12
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	429a      	cmp	r2, r3
 800494a:	d1eb      	bne.n	8004924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800494c:	4b25      	ldr	r3, [pc, #148]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d20c      	bcs.n	8004974 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b22      	ldr	r3, [pc, #136]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b20      	ldr	r3, [pc, #128]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e032      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004980:	4b19      	ldr	r3, [pc, #100]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4916      	ldr	r1, [pc, #88]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499e:	4b12      	ldr	r3, [pc, #72]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	490e      	ldr	r1, [pc, #56]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049b2:	f000 f821 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 80049b6:	4602      	mov	r2, r0
 80049b8:	4b0b      	ldr	r3, [pc, #44]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	490a      	ldr	r1, [pc, #40]	@ (80049ec <HAL_RCC_ClockConfig+0x1c0>)
 80049c4:	5ccb      	ldrb	r3, [r1, r3]
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	4a09      	ldr	r2, [pc, #36]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049ce:	4b09      	ldr	r3, [pc, #36]	@ (80049f4 <HAL_RCC_ClockConfig+0x1c8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fc fa5e 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40023c00 	.word	0x40023c00
 80049e8:	40023800 	.word	0x40023800
 80049ec:	0800c46c 	.word	0x0800c46c
 80049f0:	20000000 	.word	0x20000000
 80049f4:	20000004 	.word	0x20000004

080049f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049fc:	b094      	sub	sp, #80	@ 0x50
 80049fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a10:	4b79      	ldr	r3, [pc, #484]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 030c 	and.w	r3, r3, #12
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d00d      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0x40>
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	f200 80e1 	bhi.w	8004be4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_RCC_GetSysClockFreq+0x34>
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d003      	beq.n	8004a32 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a2a:	e0db      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a2c:	4b73      	ldr	r3, [pc, #460]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8004a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a30:	e0db      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a32:	4b73      	ldr	r3, [pc, #460]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a36:	e0d8      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a38:	4b6f      	ldr	r3, [pc, #444]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a40:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a42:	4b6d      	ldr	r3, [pc, #436]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d063      	beq.n	8004b16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	099b      	lsrs	r3, r3, #6
 8004a54:	2200      	movs	r2, #0
 8004a56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a60:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a62:	2300      	movs	r3, #0
 8004a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	462b      	mov	r3, r5
 8004a6e:	f04f 0000 	mov.w	r0, #0
 8004a72:	f04f 0100 	mov.w	r1, #0
 8004a76:	0159      	lsls	r1, r3, #5
 8004a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a7c:	0150      	lsls	r0, r2, #5
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4621      	mov	r1, r4
 8004a84:	1a51      	subs	r1, r2, r1
 8004a86:	6139      	str	r1, [r7, #16]
 8004a88:	4629      	mov	r1, r5
 8004a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	018b      	lsls	r3, r1, #6
 8004aa0:	4651      	mov	r1, sl
 8004aa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	018a      	lsls	r2, r1, #6
 8004aaa:	4651      	mov	r1, sl
 8004aac:	ebb2 0801 	subs.w	r8, r2, r1
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aca:	4690      	mov	r8, r2
 8004acc:	4699      	mov	r9, r3
 8004ace:	4623      	mov	r3, r4
 8004ad0:	eb18 0303 	adds.w	r3, r8, r3
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	462b      	mov	r3, r5
 8004ad8:	eb49 0303 	adc.w	r3, r9, r3
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004aea:	4629      	mov	r1, r5
 8004aec:	024b      	lsls	r3, r1, #9
 8004aee:	4621      	mov	r1, r4
 8004af0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004af4:	4621      	mov	r1, r4
 8004af6:	024a      	lsls	r2, r1, #9
 8004af8:	4610      	mov	r0, r2
 8004afa:	4619      	mov	r1, r3
 8004afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004afe:	2200      	movs	r2, #0
 8004b00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b08:	f7fb fb62 	bl	80001d0 <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4613      	mov	r3, r2
 8004b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b14:	e058      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b16:	4b38      	ldr	r3, [pc, #224]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	099b      	lsrs	r3, r3, #6
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	4618      	mov	r0, r3
 8004b20:	4611      	mov	r1, r2
 8004b22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b26:	623b      	str	r3, [r7, #32]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b30:	4642      	mov	r2, r8
 8004b32:	464b      	mov	r3, r9
 8004b34:	f04f 0000 	mov.w	r0, #0
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	0159      	lsls	r1, r3, #5
 8004b3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b42:	0150      	lsls	r0, r2, #5
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4641      	mov	r1, r8
 8004b4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b4e:	4649      	mov	r1, r9
 8004b50:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b68:	ebb2 040a 	subs.w	r4, r2, sl
 8004b6c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	00eb      	lsls	r3, r5, #3
 8004b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b7e:	00e2      	lsls	r2, r4, #3
 8004b80:	4614      	mov	r4, r2
 8004b82:	461d      	mov	r5, r3
 8004b84:	4643      	mov	r3, r8
 8004b86:	18e3      	adds	r3, r4, r3
 8004b88:	603b      	str	r3, [r7, #0]
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	eb45 0303 	adc.w	r3, r5, r3
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	028b      	lsls	r3, r1, #10
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ba8:	4621      	mov	r1, r4
 8004baa:	028a      	lsls	r2, r1, #10
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	61fa      	str	r2, [r7, #28]
 8004bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bbc:	f7fb fb08 	bl	80001d0 <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	0c1b      	lsrs	r3, r3, #16
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004be2:	e002      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004be4:	4b05      	ldr	r3, [pc, #20]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8004be6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3750      	adds	r7, #80	@ 0x50
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	007a1200 	.word	0x007a1200

08004c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c08:	4b03      	ldr	r3, [pc, #12]	@ (8004c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000000 	.word	0x20000000

08004c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c20:	f7ff fff0 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0a9b      	lsrs	r3, r3, #10
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4903      	ldr	r1, [pc, #12]	@ (8004c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c32:	5ccb      	ldrb	r3, [r1, r3]
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	0800c47c 	.word	0x0800c47c

08004c44 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d035      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c6c:	4b62      	ldr	r3, [pc, #392]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c72:	f7fc f953 	bl	8000f1c <HAL_GetTick>
 8004c76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c7a:	f7fc f94f 	bl	8000f1c <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e0b0      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f0      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	019a      	lsls	r2, r3, #6
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	071b      	lsls	r3, r3, #28
 8004ca4:	4955      	ldr	r1, [pc, #340]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cac:	4b52      	ldr	r3, [pc, #328]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cb2:	f7fc f933 	bl	8000f1c <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cba:	f7fc f92f 	bl	8000f1c <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e090      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ccc:	4b4b      	ldr	r3, [pc, #300]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 8083 	beq.w	8004dec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	4b44      	ldr	r3, [pc, #272]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	4a43      	ldr	r2, [pc, #268]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cf6:	4b41      	ldr	r3, [pc, #260]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d02:	4b3f      	ldr	r3, [pc, #252]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a3e      	ldr	r2, [pc, #248]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d0e:	f7fc f905 	bl	8000f1c <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d14:	e008      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d16:	f7fc f901 	bl	8000f1c <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e062      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d28:	4b35      	ldr	r3, [pc, #212]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d34:	4b31      	ldr	r3, [pc, #196]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d3c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d02f      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d028      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d52:	4b2a      	ldr	r3, [pc, #168]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d5c:	4b29      	ldr	r3, [pc, #164]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d62:	4b28      	ldr	r3, [pc, #160]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d68:	4a24      	ldr	r2, [pc, #144]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d6e:	4b23      	ldr	r3, [pc, #140]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d114      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d7a:	f7fc f8cf 	bl	8000f1c <HAL_GetTick>
 8004d7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d80:	e00a      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d82:	f7fc f8cb 	bl	8000f1c <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e02a      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d98:	4b18      	ldr	r3, [pc, #96]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0ee      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004db0:	d10d      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004db2:	4b12      	ldr	r3, [pc, #72]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc6:	490d      	ldr	r1, [pc, #52]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	608b      	str	r3, [r1, #8]
 8004dcc:	e005      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004dce:	4b0b      	ldr	r3, [pc, #44]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004dd8:	6093      	str	r3, [r2, #8]
 8004dda:	4b08      	ldr	r3, [pc, #32]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ddc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de6:	4905      	ldr	r1, [pc, #20]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	42470068 	.word	0x42470068
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	40007000 	.word	0x40007000
 8004e04:	42470e40 	.word	0x42470e40

08004e08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d13f      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e26:	4b24      	ldr	r3, [pc, #144]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d006      	beq.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e3c:	d12f      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e40:	617b      	str	r3, [r7, #20]
          break;
 8004e42:	e02f      	b.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e44:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e50:	d108      	bne.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e52:	4b19      	ldr	r3, [pc, #100]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e5a:	4a19      	ldr	r2, [pc, #100]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	e007      	b.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e64:	4b14      	ldr	r3, [pc, #80]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e6c:	4a15      	ldr	r2, [pc, #84]	@ (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e72:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e74:	4b10      	ldr	r3, [pc, #64]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e7a:	099b      	lsrs	r3, r3, #6
 8004e7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	fb02 f303 	mul.w	r3, r2, r3
 8004e86:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e88:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e8e:	0f1b      	lsrs	r3, r3, #28
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9a:	617b      	str	r3, [r7, #20]
          break;
 8004e9c:	e002      	b.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]
          break;
 8004ea2:	bf00      	nop
        }
      }
      break;
 8004ea4:	e000      	b.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004ea6:	bf00      	nop
    }
  }
  return frequency;
 8004ea8:	697b      	ldr	r3, [r7, #20]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	00bb8000 	.word	0x00bb8000
 8004ec0:	007a1200 	.word	0x007a1200
 8004ec4:	00f42400 	.word	0x00f42400

08004ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e07b      	b.n	8004fd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d108      	bne.n	8004ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eea:	d009      	beq.n	8004f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	61da      	str	r2, [r3, #28]
 8004ef2:	e005      	b.n	8004f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fb fe8a 	bl	8000c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f84:	ea42 0103 	orr.w	r1, r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	0c1b      	lsrs	r3, r3, #16
 8004f9e:	f003 0104 	and.w	r1, r3, #4
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	f003 0210 	and.w	r2, r3, #16
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e041      	b.n	8005070 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d106      	bne.n	8005006 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7fb fe5f 	bl	8000cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2202      	movs	r2, #2
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3304      	adds	r3, #4
 8005016:	4619      	mov	r1, r3
 8005018:	4610      	mov	r0, r2
 800501a:	f000 f82d 	bl	8005078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a46      	ldr	r2, [pc, #280]	@ (80051a4 <TIM_Base_SetConfig+0x12c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005096:	d00f      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a43      	ldr	r2, [pc, #268]	@ (80051a8 <TIM_Base_SetConfig+0x130>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00b      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a42      	ldr	r2, [pc, #264]	@ (80051ac <TIM_Base_SetConfig+0x134>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a41      	ldr	r2, [pc, #260]	@ (80051b0 <TIM_Base_SetConfig+0x138>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a40      	ldr	r2, [pc, #256]	@ (80051b4 <TIM_Base_SetConfig+0x13c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d108      	bne.n	80050ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a35      	ldr	r2, [pc, #212]	@ (80051a4 <TIM_Base_SetConfig+0x12c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d02b      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d8:	d027      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a32      	ldr	r2, [pc, #200]	@ (80051a8 <TIM_Base_SetConfig+0x130>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d023      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a31      	ldr	r2, [pc, #196]	@ (80051ac <TIM_Base_SetConfig+0x134>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d01f      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a30      	ldr	r2, [pc, #192]	@ (80051b0 <TIM_Base_SetConfig+0x138>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d01b      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a2f      	ldr	r2, [pc, #188]	@ (80051b4 <TIM_Base_SetConfig+0x13c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d017      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a2e      	ldr	r2, [pc, #184]	@ (80051b8 <TIM_Base_SetConfig+0x140>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d013      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a2d      	ldr	r2, [pc, #180]	@ (80051bc <TIM_Base_SetConfig+0x144>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00f      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a2c      	ldr	r2, [pc, #176]	@ (80051c0 <TIM_Base_SetConfig+0x148>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00b      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a2b      	ldr	r2, [pc, #172]	@ (80051c4 <TIM_Base_SetConfig+0x14c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a2a      	ldr	r2, [pc, #168]	@ (80051c8 <TIM_Base_SetConfig+0x150>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d003      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a29      	ldr	r2, [pc, #164]	@ (80051cc <TIM_Base_SetConfig+0x154>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d108      	bne.n	800513c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a10      	ldr	r2, [pc, #64]	@ (80051a4 <TIM_Base_SetConfig+0x12c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d003      	beq.n	8005170 <TIM_Base_SetConfig+0xf8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a12      	ldr	r2, [pc, #72]	@ (80051b4 <TIM_Base_SetConfig+0x13c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d103      	bne.n	8005178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b01      	cmp	r3, #1
 8005188:	d105      	bne.n	8005196 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f023 0201 	bic.w	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	611a      	str	r2, [r3, #16]
  }
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40000400 	.word	0x40000400
 80051ac:	40000800 	.word	0x40000800
 80051b0:	40000c00 	.word	0x40000c00
 80051b4:	40010400 	.word	0x40010400
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400
 80051c0:	40014800 	.word	0x40014800
 80051c4:	40001800 	.word	0x40001800
 80051c8:	40001c00 	.word	0x40001c00
 80051cc:	40002000 	.word	0x40002000

080051d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e05a      	b.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a21      	ldr	r2, [pc, #132]	@ (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d022      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005234:	d01d      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1d      	ldr	r2, [pc, #116]	@ (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d018      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1b      	ldr	r2, [pc, #108]	@ (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1a      	ldr	r2, [pc, #104]	@ (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00e      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a18      	ldr	r2, [pc, #96]	@ (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d009      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a17      	ldr	r2, [pc, #92]	@ (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a15      	ldr	r2, [pc, #84]	@ (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d10c      	bne.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	4313      	orrs	r3, r2
 8005282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40010000 	.word	0x40010000
 80052b0:	40000400 	.word	0x40000400
 80052b4:	40000800 	.word	0x40000800
 80052b8:	40000c00 	.word	0x40000c00
 80052bc:	40010400 	.word	0x40010400
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40001800 	.word	0x40001800

080052c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052c8:	b084      	sub	sp, #16
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	f107 001c 	add.w	r0, r7, #28
 80052d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d123      	bne.n	800532a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80052f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800530a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800530e:	2b01      	cmp	r3, #1
 8005310:	d105      	bne.n	800531e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f9dc 	bl	80056dc <USB_CoreReset>
 8005324:	4603      	mov	r3, r0
 8005326:	73fb      	strb	r3, [r7, #15]
 8005328:	e01b      	b.n	8005362 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f9d0 	bl	80056dc <USB_CoreReset>
 800533c:	4603      	mov	r3, r0
 800533e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005340:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005344:	2b00      	cmp	r3, #0
 8005346:	d106      	bne.n	8005356 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	639a      	str	r2, [r3, #56]	@ 0x38
 8005354:	e005      	b.n	8005362 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005362:	7fbb      	ldrb	r3, [r7, #30]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d10b      	bne.n	8005380 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f043 0206 	orr.w	r2, r3, #6
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f043 0220 	orr.w	r2, r3, #32
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800538c:	b004      	add	sp, #16
 800538e:	4770      	bx	lr

08005390 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f043 0201 	orr.w	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f023 0201 	bic.w	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d115      	bne.n	8005422 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005402:	200a      	movs	r0, #10
 8005404:	f7fb fd96 	bl	8000f34 <HAL_Delay>
      ms += 10U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	330a      	adds	r3, #10
 800540c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f956 	bl	80056c0 <USB_GetMode>
 8005414:	4603      	mov	r3, r0
 8005416:	2b01      	cmp	r3, #1
 8005418:	d01e      	beq.n	8005458 <USB_SetCurrentMode+0x84>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2bc7      	cmp	r3, #199	@ 0xc7
 800541e:	d9f0      	bls.n	8005402 <USB_SetCurrentMode+0x2e>
 8005420:	e01a      	b.n	8005458 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d115      	bne.n	8005454 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005434:	200a      	movs	r0, #10
 8005436:	f7fb fd7d 	bl	8000f34 <HAL_Delay>
      ms += 10U;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	330a      	adds	r3, #10
 800543e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f93d 	bl	80056c0 <USB_GetMode>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <USB_SetCurrentMode+0x84>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005450:	d9f0      	bls.n	8005434 <USB_SetCurrentMode+0x60>
 8005452:	e001      	b.n	8005458 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e005      	b.n	8005464 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2bc8      	cmp	r3, #200	@ 0xc8
 800545c:	d101      	bne.n	8005462 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3301      	adds	r3, #1
 800547e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005486:	d901      	bls.n	800548c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e01b      	b.n	80054c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	daf2      	bge.n	800547a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	019b      	lsls	r3, r3, #6
 800549c:	f043 0220 	orr.w	r2, r3, #32
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3301      	adds	r3, #1
 80054a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054b0:	d901      	bls.n	80054b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e006      	b.n	80054c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b20      	cmp	r3, #32
 80054c0:	d0f0      	beq.n	80054a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3301      	adds	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054e8:	d901      	bls.n	80054ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e018      	b.n	8005520 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	daf2      	bge.n	80054dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2210      	movs	r2, #16
 80054fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3301      	adds	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800550c:	d901      	bls.n	8005512 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e006      	b.n	8005520 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0310 	and.w	r3, r3, #16
 800551a:	2b10      	cmp	r3, #16
 800551c:	d0f0      	beq.n	8005500 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800552c:	b480      	push	{r7}
 800552e:	b089      	sub	sp, #36	@ 0x24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	4611      	mov	r1, r2
 8005538:	461a      	mov	r2, r3
 800553a:	460b      	mov	r3, r1
 800553c:	71fb      	strb	r3, [r7, #7]
 800553e:	4613      	mov	r3, r2
 8005540:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800554a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800554e:	2b00      	cmp	r3, #0
 8005550:	d123      	bne.n	800559a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005552:	88bb      	ldrh	r3, [r7, #4]
 8005554:	3303      	adds	r3, #3
 8005556:	089b      	lsrs	r3, r3, #2
 8005558:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800555a:	2300      	movs	r3, #0
 800555c:	61bb      	str	r3, [r7, #24]
 800555e:	e018      	b.n	8005592 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005560:	79fb      	ldrb	r3, [r7, #7]
 8005562:	031a      	lsls	r2, r3, #12
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	4413      	add	r3, r2
 8005568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800556c:	461a      	mov	r2, r3
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	3301      	adds	r3, #1
 8005578:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	3301      	adds	r3, #1
 800557e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	3301      	adds	r3, #1
 8005584:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	3301      	adds	r3, #1
 800558a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	3301      	adds	r3, #1
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	429a      	cmp	r2, r3
 8005598:	d3e2      	bcc.n	8005560 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3724      	adds	r7, #36	@ 0x24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b08b      	sub	sp, #44	@ 0x2c
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	089b      	lsrs	r3, r3, #2
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	623b      	str	r3, [r7, #32]
 80055d2:	e014      	b.n	80055fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055de:	601a      	str	r2, [r3, #0]
    pDest++;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e2:	3301      	adds	r3, #1
 80055e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	3301      	adds	r3, #1
 80055ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	3301      	adds	r3, #1
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80055f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f4:	3301      	adds	r3, #1
 80055f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	3301      	adds	r3, #1
 80055fc:	623b      	str	r3, [r7, #32]
 80055fe:	6a3a      	ldr	r2, [r7, #32]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	429a      	cmp	r2, r3
 8005604:	d3e6      	bcc.n	80055d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005606:	8bfb      	ldrh	r3, [r7, #30]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01e      	beq.n	800564a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005616:	461a      	mov	r2, r3
 8005618:	f107 0310 	add.w	r3, r7, #16
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	fa22 f303 	lsr.w	r3, r2, r3
 800562c:	b2da      	uxtb	r2, r3
 800562e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005630:	701a      	strb	r2, [r3, #0]
      i++;
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	3301      	adds	r3, #1
 8005636:	623b      	str	r3, [r7, #32]
      pDest++;
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563a:	3301      	adds	r3, #1
 800563c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800563e:	8bfb      	ldrh	r3, [r7, #30]
 8005640:	3b01      	subs	r3, #1
 8005642:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005644:	8bfb      	ldrh	r3, [r7, #30]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1ea      	bne.n	8005620 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800564c:	4618      	mov	r0, r3
 800564e:	372c      	adds	r7, #44	@ 0x2c
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4013      	ands	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005670:	68fb      	ldr	r3, [r7, #12]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	460b      	mov	r3, r1
 8005688:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800568e:	78fb      	ldrb	r3, [r7, #3]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4413      	add	r3, r2
 8005696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	4013      	ands	r3, r2
 80056b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056b2:	68bb      	ldr	r3, [r7, #8]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	f003 0301 	and.w	r3, r3, #1
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3301      	adds	r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056f4:	d901      	bls.n	80056fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e01b      	b.n	8005732 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	daf2      	bge.n	80056e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f043 0201 	orr.w	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3301      	adds	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800571e:	d901      	bls.n	8005724 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e006      	b.n	8005732 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b01      	cmp	r3, #1
 800572e:	d0f0      	beq.n	8005712 <USB_CoreReset+0x36>

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
	...

08005740 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005740:	b084      	sub	sp, #16
 8005742:	b580      	push	{r7, lr}
 8005744:	b086      	sub	sp, #24
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800574e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005760:	461a      	mov	r2, r3
 8005762:	2300      	movs	r3, #0
 8005764:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005776:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005782:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d119      	bne.n	80057ca <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005796:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800579a:	2b01      	cmp	r3, #1
 800579c:	d10a      	bne.n	80057b4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80057ac:	f043 0304 	orr.w	r3, r3, #4
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e014      	b.n	80057de <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80057c2:	f023 0304 	bic.w	r3, r3, #4
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	e009      	b.n	80057de <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80057d8:	f023 0304 	bic.w	r3, r3, #4
 80057dc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057de:	2110      	movs	r1, #16
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff fe43 	bl	800546c <USB_FlushTxFifo>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff fe6d 	bl	80054d0 <USB_FlushRxFifo>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005800:	2300      	movs	r3, #0
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	e015      	b.n	8005832 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005812:	461a      	mov	r2, r3
 8005814:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005818:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4413      	add	r3, r2
 8005822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005826:	461a      	mov	r2, r3
 8005828:	2300      	movs	r3, #0
 800582a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	3301      	adds	r3, #1
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005836:	461a      	mov	r2, r3
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4293      	cmp	r3, r2
 800583c:	d3e3      	bcc.n	8005806 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800584a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a18      	ldr	r2, [pc, #96]	@ (80058b0 <USB_HostInit+0x170>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d10b      	bne.n	800586c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800585a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a15      	ldr	r2, [pc, #84]	@ (80058b4 <USB_HostInit+0x174>)
 8005860:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a14      	ldr	r2, [pc, #80]	@ (80058b8 <USB_HostInit+0x178>)
 8005866:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800586a:	e009      	b.n	8005880 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2280      	movs	r2, #128	@ 0x80
 8005870:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a11      	ldr	r2, [pc, #68]	@ (80058bc <USB_HostInit+0x17c>)
 8005876:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a11      	ldr	r2, [pc, #68]	@ (80058c0 <USB_HostInit+0x180>)
 800587c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005880:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005884:	2b00      	cmp	r3, #0
 8005886:	d105      	bne.n	8005894 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	f043 0210 	orr.w	r2, r3, #16
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699a      	ldr	r2, [r3, #24]
 8005898:	4b0a      	ldr	r3, [pc, #40]	@ (80058c4 <USB_HostInit+0x184>)
 800589a:	4313      	orrs	r3, r2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80058a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058ac:	b004      	add	sp, #16
 80058ae:	4770      	bx	lr
 80058b0:	40040000 	.word	0x40040000
 80058b4:	01000200 	.word	0x01000200
 80058b8:	00e00300 	.word	0x00e00300
 80058bc:	00600080 	.word	0x00600080
 80058c0:	004000e0 	.word	0x004000e0
 80058c4:	a3200008 	.word	0xa3200008

080058c8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80058e6:	f023 0303 	bic.w	r3, r3, #3
 80058ea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	68f9      	ldr	r1, [r7, #12]
 80058fc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005900:	4313      	orrs	r3, r2
 8005902:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005904:	78fb      	ldrb	r3, [r7, #3]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d107      	bne.n	800591a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005910:	461a      	mov	r2, r3
 8005912:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005916:	6053      	str	r3, [r2, #4]
 8005918:	e00c      	b.n	8005934 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	2b02      	cmp	r3, #2
 800591e:	d107      	bne.n	8005930 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005926:	461a      	mov	r2, r3
 8005928:	f241 7370 	movw	r3, #6000	@ 0x1770
 800592c:	6053      	str	r3, [r2, #4]
 800592e:	e001      	b.n	8005934 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005962:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800596c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005970:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005972:	2064      	movs	r0, #100	@ 0x64
 8005974:	f7fb fade 	bl	8000f34 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005984:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005986:	200a      	movs	r0, #10
 8005988:	f7fb fad4 	bl	8000f34 <HAL_Delay>

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005996:	b480      	push	{r7}
 8005998:	b085      	sub	sp, #20
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80059ba:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d109      	bne.n	80059da <USB_DriveVbus+0x44>
 80059c6:	78fb      	ldrb	r3, [r7, #3]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d106      	bne.n	80059da <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80059d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80059d8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059e4:	d109      	bne.n	80059fa <USB_DriveVbus+0x64>
 80059e6:	78fb      	ldrb	r3, [r7, #3]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d106      	bne.n	80059fa <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80059f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059f8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	0c5b      	lsrs	r3, r3, #17
 8005a26:	f003 0303 	and.w	r3, r3, #3
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	b29b      	uxth	r3, r3
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	4608      	mov	r0, r1
 8005a62:	4611      	mov	r1, r2
 8005a64:	461a      	mov	r2, r3
 8005a66:	4603      	mov	r3, r0
 8005a68:	70fb      	strb	r3, [r7, #3]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	70bb      	strb	r3, [r7, #2]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a86:	461a      	mov	r2, r3
 8005a88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a8c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d87c      	bhi.n	8005b90 <USB_HC_Init+0x138>
 8005a96:	a201      	add	r2, pc, #4	@ (adr r2, 8005a9c <USB_HC_Init+0x44>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005aad 	.word	0x08005aad
 8005aa0:	08005b53 	.word	0x08005b53
 8005aa4:	08005aad 	.word	0x08005aad
 8005aa8:	08005b15 	.word	0x08005b15
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ab8:	461a      	mov	r2, r3
 8005aba:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005abe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ac0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	da10      	bge.n	8005aea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	78fa      	ldrb	r2, [r7, #3]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005ae8:	e055      	b.n	8005b96 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a6f      	ldr	r2, [pc, #444]	@ (8005cac <USB_HC_Init+0x254>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d151      	bne.n	8005b96 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	78fa      	ldrb	r2, [r7, #3]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b0c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b10:	60d3      	str	r3, [r2, #12]
      break;
 8005b12:	e040      	b.n	8005b96 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b20:	461a      	mov	r2, r3
 8005b22:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005b26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	da34      	bge.n	8005b9a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b30:	78fb      	ldrb	r3, [r7, #3]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	78fa      	ldrb	r2, [r7, #3]
 8005b40:	0151      	lsls	r1, r2, #5
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	440a      	add	r2, r1
 8005b46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b4e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005b50:	e023      	b.n	8005b9a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b52:	78fb      	ldrb	r3, [r7, #3]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f240 2325 	movw	r3, #549	@ 0x225
 8005b64:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	da17      	bge.n	8005b9e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	78fa      	ldrb	r2, [r7, #3]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b88:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005b8c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b8e:	e006      	b.n	8005b9e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	77fb      	strb	r3, [r7, #31]
      break;
 8005b94:	e004      	b.n	8005ba0 <USB_HC_Init+0x148>
      break;
 8005b96:	bf00      	nop
 8005b98:	e002      	b.n	8005ba0 <USB_HC_Init+0x148>
      break;
 8005b9a:	bf00      	nop
 8005b9c:	e000      	b.n	8005ba0 <USB_HC_Init+0x148>
      break;
 8005b9e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bac:	461a      	mov	r2, r3
 8005bae:	2300      	movs	r3, #0
 8005bb0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	78fa      	ldrb	r2, [r7, #3]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bcc:	f043 0302 	orr.w	r3, r3, #2
 8005bd0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	2101      	movs	r1, #1
 8005be2:	fa01 f303 	lsl.w	r3, r1, r3
 8005be6:	6939      	ldr	r1, [r7, #16]
 8005be8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005bec:	4313      	orrs	r3, r2
 8005bee:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005bfc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	da03      	bge.n	8005c0c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005c04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	e001      	b.n	8005c10 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff fef9 	bl	8005a08 <USB_GetHostSpeed>
 8005c16:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005c18:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d106      	bne.n	8005c2e <USB_HC_Init+0x1d6>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d003      	beq.n	8005c2e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005c26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	e001      	b.n	8005c32 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c32:	787b      	ldrb	r3, [r7, #1]
 8005c34:	059b      	lsls	r3, r3, #22
 8005c36:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c3a:	78bb      	ldrb	r3, [r7, #2]
 8005c3c:	02db      	lsls	r3, r3, #11
 8005c3e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c42:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c48:	049b      	lsls	r3, r3, #18
 8005c4a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c4e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005c50:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005c52:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c56:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c60:	78fa      	ldrb	r2, [r7, #3]
 8005c62:	0151      	lsls	r1, r2, #5
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	440a      	add	r2, r1
 8005c68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005c6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c70:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005c72:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d003      	beq.n	8005c82 <USB_HC_Init+0x22a>
 8005c7a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d10f      	bne.n	8005ca2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	78fa      	ldrb	r2, [r7, #3]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ca0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3720      	adds	r7, #32
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40040000 	.word	0x40040000

08005cb0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08c      	sub	sp, #48	@ 0x30
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	785b      	ldrb	r3, [r3, #1]
 8005cc6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005cc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ccc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a5d      	ldr	r2, [pc, #372]	@ (8005e48 <USB_HC_StartXfer+0x198>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d12f      	bne.n	8005d36 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d11c      	bne.n	8005d16 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	7c9b      	ldrb	r3, [r3, #18]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <USB_HC_StartXfer+0x3c>
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	7c9b      	ldrb	r3, [r3, #18]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d124      	bne.n	8005d36 <USB_HC_StartXfer+0x86>
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	799b      	ldrb	r3, [r3, #6]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d120      	bne.n	8005d36 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	6a3a      	ldr	r2, [r7, #32]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d12:	60d3      	str	r3, [r2, #12]
 8005d14:	e00f      	b.n	8005d36 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	791b      	ldrb	r3, [r3, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <USB_HC_StartXfer+0x86>
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	795b      	ldrb	r3, [r3, #5]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d107      	bne.n	8005d36 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 fb6b 	bl	8006408 <USB_DoPing>
        return HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e232      	b.n	800619c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	799b      	ldrb	r3, [r3, #6]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d158      	bne.n	8005df0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	78db      	ldrb	r3, [r3, #3]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	8a92      	ldrh	r2, [r2, #20]
 8005d50:	fb03 f202 	mul.w	r2, r3, r2
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	61da      	str	r2, [r3, #28]
 8005d58:	e07c      	b.n	8005e54 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	7c9b      	ldrb	r3, [r3, #18]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d130      	bne.n	8005dc4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	2bbc      	cmp	r3, #188	@ 0xbc
 8005d68:	d918      	bls.n	8005d9c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	8a9b      	ldrh	r3, [r3, #20]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	69da      	ldr	r2, [r3, #28]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d003      	beq.n	8005d8c <USB_HC_StartXfer+0xdc>
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d103      	bne.n	8005d94 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	60da      	str	r2, [r3, #12]
 8005d92:	e05f      	b.n	8005e54 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2201      	movs	r2, #1
 8005d98:	60da      	str	r2, [r3, #12]
 8005d9a:	e05b      	b.n	8005e54 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	6a1a      	ldr	r2, [r3, #32]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d007      	beq.n	8005dbc <USB_HC_StartXfer+0x10c>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d003      	beq.n	8005dbc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2204      	movs	r2, #4
 8005db8:	60da      	str	r2, [r3, #12]
 8005dba:	e04b      	b.n	8005e54 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2203      	movs	r2, #3
 8005dc0:	60da      	str	r2, [r3, #12]
 8005dc2:	e047      	b.n	8005e54 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d10d      	bne.n	8005de6 <USB_HC_StartXfer+0x136>
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	8a92      	ldrh	r2, [r2, #20]
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d907      	bls.n	8005de6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005dd6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	8a92      	ldrh	r2, [r2, #20]
 8005ddc:	fb03 f202 	mul.w	r2, r3, r2
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	61da      	str	r2, [r3, #28]
 8005de4:	e036      	b.n	8005e54 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	6a1a      	ldr	r2, [r3, #32]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	61da      	str	r2, [r3, #28]
 8005dee:	e031      	b.n	8005e54 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d018      	beq.n	8005e2a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	8a92      	ldrh	r2, [r2, #20]
 8005e00:	4413      	add	r3, r2
 8005e02:	3b01      	subs	r3, #1
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	8a92      	ldrh	r2, [r2, #20]
 8005e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e0c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005e0e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005e10:	8b7b      	ldrh	r3, [r7, #26]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d90b      	bls.n	8005e2e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005e16:	8b7b      	ldrh	r3, [r7, #26]
 8005e18:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	8a92      	ldrh	r2, [r2, #20]
 8005e20:	fb03 f202 	mul.w	r2, r3, r2
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	61da      	str	r2, [r3, #28]
 8005e28:	e001      	b.n	8005e2e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	78db      	ldrb	r3, [r3, #3]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	8a92      	ldrh	r2, [r2, #20]
 8005e3c:	fb03 f202 	mul.w	r2, r3, r2
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	61da      	str	r2, [r3, #28]
 8005e44:	e006      	b.n	8005e54 <USB_HC_StartXfer+0x1a4>
 8005e46:	bf00      	nop
 8005e48:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e5c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e5e:	04d9      	lsls	r1, r3, #19
 8005e60:	4ba3      	ldr	r3, [pc, #652]	@ (80060f0 <USB_HC_StartXfer+0x440>)
 8005e62:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e64:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	7d9b      	ldrb	r3, [r3, #22]
 8005e6a:	075b      	lsls	r3, r3, #29
 8005e6c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e70:	69f9      	ldr	r1, [r7, #28]
 8005e72:	0148      	lsls	r0, r1, #5
 8005e74:	6a39      	ldr	r1, [r7, #32]
 8005e76:	4401      	add	r1, r0
 8005e78:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e7c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e7e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	6999      	ldr	r1, [r3, #24]
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e96:	460a      	mov	r2, r1
 8005e98:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	bf0c      	ite	eq
 8005eaa:	2301      	moveq	r3, #1
 8005eac:	2300      	movne	r3, #0
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	6a3a      	ldr	r2, [r7, #32]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ecc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ed0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	7e7b      	ldrb	r3, [r7, #25]
 8005ee2:	075b      	lsls	r3, r3, #29
 8005ee4:	69f9      	ldr	r1, [r7, #28]
 8005ee6:	0148      	lsls	r0, r1, #5
 8005ee8:	6a39      	ldr	r1, [r7, #32]
 8005eea:	4401      	add	r1, r0
 8005eec:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	799b      	ldrb	r3, [r3, #6]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	f040 80c3 	bne.w	8006084 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	7c5b      	ldrb	r3, [r3, #17]
 8005f02:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	0151      	lsls	r1, r2, #5
 8005f0e:	6a3a      	ldr	r2, [r7, #32]
 8005f10:	440a      	add	r2, r1
 8005f12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005f16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005f1a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	6a3a      	ldr	r2, [r7, #32]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f36:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005f3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	79db      	ldrb	r3, [r3, #7]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d123      	bne.n	8005f8c <USB_HC_StartXfer+0x2dc>
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	78db      	ldrb	r3, [r3, #3]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d11f      	bne.n	8005f8c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	6a3a      	ldr	r2, [r7, #32]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f6a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	0151      	lsls	r1, r2, #5
 8005f7e:	6a3a      	ldr	r2, [r7, #32]
 8005f80:	440a      	add	r2, r1
 8005f82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f8a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	7c9b      	ldrb	r3, [r3, #18]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d003      	beq.n	8005f9c <USB_HC_StartXfer+0x2ec>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	7c9b      	ldrb	r3, [r3, #18]
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d117      	bne.n	8005fcc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d113      	bne.n	8005fcc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	78db      	ldrb	r3, [r3, #3]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d10f      	bne.n	8005fcc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	6a3a      	ldr	r2, [r7, #32]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fca:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	7c9b      	ldrb	r3, [r3, #18]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d162      	bne.n	800609a <USB_HC_StartXfer+0x3ea>
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	78db      	ldrb	r3, [r3, #3]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d15e      	bne.n	800609a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d858      	bhi.n	8006098 <USB_HC_StartXfer+0x3e8>
 8005fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fec <USB_HC_StartXfer+0x33c>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08005ffd 	.word	0x08005ffd
 8005ff0:	0800601f 	.word	0x0800601f
 8005ff4:	08006041 	.word	0x08006041
 8005ff8:	08006063 	.word	0x08006063
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	4413      	add	r3, r2
 8006004:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	69fa      	ldr	r2, [r7, #28]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	6a3a      	ldr	r2, [r7, #32]
 8006010:	440a      	add	r2, r1
 8006012:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800601a:	6053      	str	r3, [r2, #4]
          break;
 800601c:	e03d      	b.n	800609a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	4413      	add	r3, r2
 8006026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	0151      	lsls	r1, r2, #5
 8006030:	6a3a      	ldr	r2, [r7, #32]
 8006032:	440a      	add	r2, r1
 8006034:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006038:	f043 030e 	orr.w	r3, r3, #14
 800603c:	6053      	str	r3, [r2, #4]
          break;
 800603e:	e02c      	b.n	800609a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	4413      	add	r3, r2
 8006048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	0151      	lsls	r1, r2, #5
 8006052:	6a3a      	ldr	r2, [r7, #32]
 8006054:	440a      	add	r2, r1
 8006056:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800605a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800605e:	6053      	str	r3, [r2, #4]
          break;
 8006060:	e01b      	b.n	800609a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	4413      	add	r3, r2
 800606a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	0151      	lsls	r1, r2, #5
 8006074:	6a3a      	ldr	r2, [r7, #32]
 8006076:	440a      	add	r2, r1
 8006078:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800607c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006080:	6053      	str	r3, [r2, #4]
          break;
 8006082:	e00a      	b.n	800609a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	4413      	add	r3, r2
 800608c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006090:	461a      	mov	r2, r3
 8006092:	2300      	movs	r3, #0
 8006094:	6053      	str	r3, [r2, #4]
 8006096:	e000      	b.n	800609a <USB_HC_StartXfer+0x3ea>
          break;
 8006098:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060b0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	78db      	ldrb	r3, [r3, #3]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d004      	beq.n	80060c4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	e003      	b.n	80060cc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060ca:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060d2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060e0:	461a      	mov	r2, r3
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80060e6:	79fb      	ldrb	r3, [r7, #7]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	e055      	b.n	800619c <USB_HC_StartXfer+0x4ec>
 80060f0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	78db      	ldrb	r3, [r3, #3]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d14e      	bne.n	800619a <USB_HC_StartXfer+0x4ea>
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d04a      	beq.n	800619a <USB_HC_StartXfer+0x4ea>
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	79db      	ldrb	r3, [r3, #7]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d146      	bne.n	800619a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	7c9b      	ldrb	r3, [r3, #18]
 8006110:	2b03      	cmp	r3, #3
 8006112:	d831      	bhi.n	8006178 <USB_HC_StartXfer+0x4c8>
 8006114:	a201      	add	r2, pc, #4	@ (adr r2, 800611c <USB_HC_StartXfer+0x46c>)
 8006116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611a:	bf00      	nop
 800611c:	0800612d 	.word	0x0800612d
 8006120:	08006151 	.word	0x08006151
 8006124:	0800612d 	.word	0x0800612d
 8006128:	08006151 	.word	0x08006151
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	3303      	adds	r3, #3
 8006132:	089b      	lsrs	r3, r3, #2
 8006134:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006136:	8afa      	ldrh	r2, [r7, #22]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613c:	b29b      	uxth	r3, r3
 800613e:	429a      	cmp	r2, r3
 8006140:	d91c      	bls.n	800617c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f043 0220 	orr.w	r2, r3, #32
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	619a      	str	r2, [r3, #24]
        }
        break;
 800614e:	e015      	b.n	800617c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	3303      	adds	r3, #3
 8006156:	089b      	lsrs	r3, r3, #2
 8006158:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800615a:	8afa      	ldrh	r2, [r7, #22]
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	b29b      	uxth	r3, r3
 8006166:	429a      	cmp	r2, r3
 8006168:	d90a      	bls.n	8006180 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	619a      	str	r2, [r3, #24]
        }
        break;
 8006176:	e003      	b.n	8006180 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006178:	bf00      	nop
 800617a:	e002      	b.n	8006182 <USB_HC_StartXfer+0x4d2>
        break;
 800617c:	bf00      	nop
 800617e:	e000      	b.n	8006182 <USB_HC_StartXfer+0x4d2>
        break;
 8006180:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6999      	ldr	r1, [r3, #24]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	785a      	ldrb	r2, [r3, #1]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	b29b      	uxth	r3, r3
 8006190:	2000      	movs	r0, #0
 8006192:	9000      	str	r0, [sp, #0]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff f9c9 	bl	800552c <USB_WritePacket>
  }

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3728      	adds	r7, #40	@ 0x28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	b29b      	uxth	r3, r3
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b089      	sub	sp, #36	@ 0x24
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	460b      	mov	r3, r1
 80061d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	0c9b      	lsrs	r3, r3, #18
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	0fdb      	lsrs	r3, r3, #31
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	0fdb      	lsrs	r3, r3, #31
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b20      	cmp	r3, #32
 800622a:	d10d      	bne.n	8006248 <USB_HC_Halt+0x82>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <USB_HC_Halt+0x82>
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d002      	beq.n	8006244 <USB_HC_Halt+0x7e>
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2b03      	cmp	r3, #3
 8006242:	d101      	bne.n	8006248 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	e0d8      	b.n	80063fa <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <USB_HC_Halt+0x8e>
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b02      	cmp	r3, #2
 8006252:	d173      	bne.n	800633c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	4413      	add	r3, r2
 800625c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	0151      	lsls	r1, r2, #5
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	440a      	add	r2, r1
 800626a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800626e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006272:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d14a      	bne.n	8006316 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006284:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d133      	bne.n	80062f4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062aa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	0151      	lsls	r1, r2, #5
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	440a      	add	r2, r1
 80062c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062ca:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	3301      	adds	r3, #1
 80062d0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062d8:	d82e      	bhi.n	8006338 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062f0:	d0ec      	beq.n	80062cc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062f2:	e081      	b.n	80063f8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	0151      	lsls	r1, r2, #5
 8006306:	69fa      	ldr	r2, [r7, #28]
 8006308:	440a      	add	r2, r1
 800630a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800630e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006312:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006314:	e070      	b.n	80063f8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	440a      	add	r2, r1
 800632c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006330:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006334:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006336:	e05f      	b.n	80063f8 <USB_HC_Halt+0x232>
            break;
 8006338:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800633a:	e05d      	b.n	80063f8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	440a      	add	r2, r1
 8006352:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006356:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800635a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d133      	bne.n	80063d4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	4413      	add	r3, r2
 8006374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	440a      	add	r2, r1
 8006382:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006386:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800638a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	4413      	add	r3, r2
 8006394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	0151      	lsls	r1, r2, #5
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	440a      	add	r2, r1
 80063a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063aa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063b8:	d81d      	bhi.n	80063f6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063d0:	d0ec      	beq.n	80063ac <USB_HC_Halt+0x1e6>
 80063d2:	e011      	b.n	80063f8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	0151      	lsls	r1, r2, #5
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	440a      	add	r2, r1
 80063ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	e000      	b.n	80063f8 <USB_HC_Halt+0x232>
          break;
 80063f6:	bf00      	nop
    }
  }

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3724      	adds	r7, #36	@ 0x24
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
	...

08006408 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800641c:	2301      	movs	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	04da      	lsls	r2, r3, #19
 8006424:	4b15      	ldr	r3, [pc, #84]	@ (800647c <USB_DoPing+0x74>)
 8006426:	4013      	ands	r3, r2
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	0151      	lsls	r1, r2, #5
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	440a      	add	r2, r1
 8006430:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006434:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006438:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	4413      	add	r3, r2
 8006442:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006450:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006458:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	4413      	add	r3, r2
 8006462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006466:	461a      	mov	r2, r3
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	1ff80000 	.word	0x1ff80000

08006480 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7fe ff8c 	bl	80053b2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800649a:	2110      	movs	r1, #16
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7fe ffe5 	bl	800546c <USB_FlushTxFifo>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff f80f 	bl	80054d0 <USB_FlushRxFifo>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80064bc:	2300      	movs	r3, #0
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	e01f      	b.n	8006502 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064f6:	461a      	mov	r2, r3
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	3301      	adds	r3, #1
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b0f      	cmp	r3, #15
 8006506:	d9dc      	bls.n	80064c2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006508:	2300      	movs	r3, #0
 800650a:	61bb      	str	r3, [r7, #24]
 800650c:	e034      	b.n	8006578 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	4413      	add	r3, r2
 8006516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006524:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800652c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006534:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	4413      	add	r3, r2
 800653e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006542:	461a      	mov	r2, r3
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006554:	d80c      	bhi.n	8006570 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	4413      	add	r3, r2
 800655e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006568:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800656c:	d0ec      	beq.n	8006548 <USB_StopHost+0xc8>
 800656e:	e000      	b.n	8006572 <USB_StopHost+0xf2>
        break;
 8006570:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	3301      	adds	r3, #1
 8006576:	61bb      	str	r3, [r7, #24]
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	2b0f      	cmp	r3, #15
 800657c:	d9c7      	bls.n	800650e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006584:	461a      	mov	r2, r3
 8006586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800658a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006592:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7fe fefb 	bl	8005390 <USB_EnableGlobalInt>

  return ret;
 800659a:	7ffb      	ldrb	r3, [r7, #31]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3720      	adds	r7, #32
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80065a4:	b590      	push	{r4, r7, lr}
 80065a6:	b089      	sub	sp, #36	@ 0x24
 80065a8:	af04      	add	r7, sp, #16
 80065aa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80065ac:	2301      	movs	r3, #1
 80065ae:	2202      	movs	r2, #2
 80065b0:	2102      	movs	r1, #2
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fcd1 	bl	8006f5a <USBH_FindInterface>
 80065b8:	4603      	mov	r3, r0
 80065ba:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	2bff      	cmp	r3, #255	@ 0xff
 80065c0:	d002      	beq.n	80065c8 <USBH_CDC_InterfaceInit+0x24>
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d901      	bls.n	80065cc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065c8:	2302      	movs	r3, #2
 80065ca:	e13d      	b.n	8006848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fca6 	bl	8006f22 <USBH_SelectInterface>
 80065d6:	4603      	mov	r3, r0
 80065d8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80065e0:	2302      	movs	r3, #2
 80065e2:	e131      	b.n	8006848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80065ea:	2050      	movs	r0, #80	@ 0x50
 80065ec:	f005 fd58 	bl	800c0a0 <malloc>
 80065f0:	4603      	mov	r3, r0
 80065f2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006604:	2302      	movs	r3, #2
 8006606:	e11f      	b.n	8006848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006608:	2250      	movs	r2, #80	@ 0x50
 800660a:	2100      	movs	r1, #0
 800660c:	68b8      	ldr	r0, [r7, #8]
 800660e:	f005 fe05 	bl	800c21c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006612:	7bfb      	ldrb	r3, [r7, #15]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	211a      	movs	r1, #26
 8006618:	fb01 f303 	mul.w	r3, r1, r3
 800661c:	4413      	add	r3, r2
 800661e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	b25b      	sxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	da15      	bge.n	8006656 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	211a      	movs	r1, #26
 8006630:	fb01 f303 	mul.w	r3, r1, r3
 8006634:	4413      	add	r3, r2
 8006636:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800663a:	781a      	ldrb	r2, [r3, #0]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	211a      	movs	r1, #26
 8006646:	fb01 f303 	mul.w	r3, r1, r3
 800664a:	4413      	add	r3, r2
 800664c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006650:	881a      	ldrh	r2, [r3, #0]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	785b      	ldrb	r3, [r3, #1]
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f002 fa18 	bl	8008a92 <USBH_AllocPipe>
 8006662:	4603      	mov	r3, r0
 8006664:	461a      	mov	r2, r3
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	7819      	ldrb	r1, [r3, #0]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	7858      	ldrb	r0, [r3, #1]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	8952      	ldrh	r2, [r2, #10]
 8006682:	9202      	str	r2, [sp, #8]
 8006684:	2203      	movs	r2, #3
 8006686:	9201      	str	r2, [sp, #4]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	4623      	mov	r3, r4
 800668c:	4602      	mov	r2, r0
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f002 f9d0 	bl	8008a34 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2200      	movs	r2, #0
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f005 fc79 	bl	800bf94 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80066a2:	2300      	movs	r3, #0
 80066a4:	2200      	movs	r2, #0
 80066a6:	210a      	movs	r1, #10
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fc56 	bl	8006f5a <USBH_FindInterface>
 80066ae:	4603      	mov	r3, r0
 80066b0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	2bff      	cmp	r3, #255	@ 0xff
 80066b6:	d002      	beq.n	80066be <USBH_CDC_InterfaceInit+0x11a>
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d901      	bls.n	80066c2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066be:	2302      	movs	r3, #2
 80066c0:	e0c2      	b.n	8006848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	211a      	movs	r1, #26
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	4413      	add	r3, r2
 80066ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	b25b      	sxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	da16      	bge.n	8006708 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	211a      	movs	r1, #26
 80066e0:	fb01 f303 	mul.w	r3, r1, r3
 80066e4:	4413      	add	r3, r2
 80066e6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80066ea:	781a      	ldrb	r2, [r3, #0]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	211a      	movs	r1, #26
 80066f6:	fb01 f303 	mul.w	r3, r1, r3
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006700:	881a      	ldrh	r2, [r3, #0]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	835a      	strh	r2, [r3, #26]
 8006706:	e015      	b.n	8006734 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	211a      	movs	r1, #26
 800670e:	fb01 f303 	mul.w	r3, r1, r3
 8006712:	4413      	add	r3, r2
 8006714:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006718:	781a      	ldrb	r2, [r3, #0]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	211a      	movs	r1, #26
 8006724:	fb01 f303 	mul.w	r3, r1, r3
 8006728:	4413      	add	r3, r2
 800672a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800672e:	881a      	ldrh	r2, [r3, #0]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	211a      	movs	r1, #26
 800673a:	fb01 f303 	mul.w	r3, r1, r3
 800673e:	4413      	add	r3, r2
 8006740:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	b25b      	sxtb	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	da16      	bge.n	800677a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	211a      	movs	r1, #26
 8006752:	fb01 f303 	mul.w	r3, r1, r3
 8006756:	4413      	add	r3, r2
 8006758:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800675c:	781a      	ldrb	r2, [r3, #0]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006762:	7bfb      	ldrb	r3, [r7, #15]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	211a      	movs	r1, #26
 8006768:	fb01 f303 	mul.w	r3, r1, r3
 800676c:	4413      	add	r3, r2
 800676e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006772:	881a      	ldrh	r2, [r3, #0]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	835a      	strh	r2, [r3, #26]
 8006778:	e015      	b.n	80067a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	211a      	movs	r1, #26
 8006780:	fb01 f303 	mul.w	r3, r1, r3
 8006784:	4413      	add	r3, r2
 8006786:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800678a:	781a      	ldrb	r2, [r3, #0]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	211a      	movs	r1, #26
 8006796:	fb01 f303 	mul.w	r3, r1, r3
 800679a:	4413      	add	r3, r2
 800679c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80067a0:	881a      	ldrh	r2, [r3, #0]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	7b9b      	ldrb	r3, [r3, #14]
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f002 f970 	bl	8008a92 <USBH_AllocPipe>
 80067b2:	4603      	mov	r3, r0
 80067b4:	461a      	mov	r2, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	7bdb      	ldrb	r3, [r3, #15]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f002 f966 	bl	8008a92 <USBH_AllocPipe>
 80067c6:	4603      	mov	r3, r0
 80067c8:	461a      	mov	r2, r3
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	7b59      	ldrb	r1, [r3, #13]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	7b98      	ldrb	r0, [r3, #14]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	8b12      	ldrh	r2, [r2, #24]
 80067e6:	9202      	str	r2, [sp, #8]
 80067e8:	2202      	movs	r2, #2
 80067ea:	9201      	str	r2, [sp, #4]
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	4623      	mov	r3, r4
 80067f0:	4602      	mov	r2, r0
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f002 f91e 	bl	8008a34 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	7b19      	ldrb	r1, [r3, #12]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	7bd8      	ldrb	r0, [r3, #15]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	8b52      	ldrh	r2, [r2, #26]
 8006810:	9202      	str	r2, [sp, #8]
 8006812:	2202      	movs	r2, #2
 8006814:	9201      	str	r2, [sp, #4]
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	4623      	mov	r3, r4
 800681a:	4602      	mov	r2, r0
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f002 f909 	bl	8008a34 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	7b5b      	ldrb	r3, [r3, #13]
 800682e:	2200      	movs	r2, #0
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f005 fbae 	bl	800bf94 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	7b1b      	ldrb	r3, [r3, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f005 fba7 	bl	800bf94 <USBH_LL_SetToggle>

  return USBH_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	bd90      	pop	{r4, r7, pc}

08006850 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00e      	beq.n	8006888 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f002 f8fe 	bl	8008a72 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f002 f929 	bl	8008ad4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	7b1b      	ldrb	r3, [r3, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00e      	beq.n	80068ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	7b1b      	ldrb	r3, [r3, #12]
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f002 f8eb 	bl	8008a72 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	7b1b      	ldrb	r3, [r3, #12]
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f002 f916 	bl	8008ad4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	7b5b      	ldrb	r3, [r3, #13]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00e      	beq.n	80068d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	7b5b      	ldrb	r3, [r3, #13]
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f002 f8d8 	bl	8008a72 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	7b5b      	ldrb	r3, [r3, #13]
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f002 f903 	bl	8008ad4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00b      	beq.n	80068f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f005 fbe1 	bl	800c0b0 <free>
    phost->pActiveClass->pData = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068f4:	2200      	movs	r2, #0
 80068f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3340      	adds	r3, #64	@ 0x40
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f8b1 	bl	8006a82 <GetLineCoding>
 8006920:	4603      	mov	r3, r0
 8006922:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006924:	7afb      	ldrb	r3, [r7, #11]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d105      	bne.n	8006936 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006930:	2102      	movs	r1, #2
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006936:	7afb      	ldrb	r3, [r7, #11]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006948:	2301      	movs	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006960:	2b04      	cmp	r3, #4
 8006962:	d877      	bhi.n	8006a54 <USBH_CDC_Process+0x114>
 8006964:	a201      	add	r2, pc, #4	@ (adr r2, 800696c <USBH_CDC_Process+0x2c>)
 8006966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696a:	bf00      	nop
 800696c:	08006981 	.word	0x08006981
 8006970:	08006987 	.word	0x08006987
 8006974:	080069b7 	.word	0x080069b7
 8006978:	08006a2b 	.word	0x08006a2b
 800697c:	08006a39 	.word	0x08006a39
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	73fb      	strb	r3, [r7, #15]
      break;
 8006984:	e06d      	b.n	8006a62 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f897 	bl	8006ac0 <SetLineCoding>
 8006992:	4603      	mov	r3, r0
 8006994:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006996:	7bbb      	ldrb	r3, [r7, #14]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d104      	bne.n	80069a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80069a4:	e058      	b.n	8006a58 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80069a6:	7bbb      	ldrb	r3, [r7, #14]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d055      	beq.n	8006a58 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2204      	movs	r2, #4
 80069b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80069b4:	e050      	b.n	8006a58 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	3340      	adds	r3, #64	@ 0x40
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f860 	bl	8006a82 <GetLineCoding>
 80069c2:	4603      	mov	r3, r0
 80069c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069c6:	7bbb      	ldrb	r3, [r7, #14]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d126      	bne.n	8006a1a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069de:	791b      	ldrb	r3, [r3, #4]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d13b      	bne.n	8006a5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d133      	bne.n	8006a5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d12b      	bne.n	8006a5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a0c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d124      	bne.n	8006a5c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f982 	bl	8006d1c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a18:	e020      	b.n	8006a5c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d01d      	beq.n	8006a5c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2204      	movs	r2, #4
 8006a24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006a28:	e018      	b.n	8006a5c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f867 	bl	8006afe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f8f6 	bl	8006c22 <CDC_ProcessReception>
      break;
 8006a36:	e014      	b.n	8006a62 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a38:	2100      	movs	r1, #0
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 f984 	bl	8007d48 <USBH_ClrFeature>
 8006a40:	4603      	mov	r3, r0
 8006a42:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a44:	7bbb      	ldrb	r3, [r7, #14]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10a      	bne.n	8006a60 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006a52:	e005      	b.n	8006a60 <USBH_CDC_Process+0x120>

    default:
      break;
 8006a54:	bf00      	nop
 8006a56:	e004      	b.n	8006a62 <USBH_CDC_Process+0x122>
      break;
 8006a58:	bf00      	nop
 8006a5a:	e002      	b.n	8006a62 <USBH_CDC_Process+0x122>
      break;
 8006a5c:	bf00      	nop
 8006a5e:	e000      	b.n	8006a62 <USBH_CDC_Process+0x122>
      break;
 8006a60:	bf00      	nop

  }

  return status;
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	22a1      	movs	r2, #161	@ 0xa1
 8006a90:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2221      	movs	r2, #33	@ 0x21
 8006a96:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2207      	movs	r2, #7
 8006aa8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2207      	movs	r2, #7
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f001 fc7e 	bl	80083b2 <USBH_CtlReq>
 8006ab6:	4603      	mov	r3, r0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2221      	movs	r2, #33	@ 0x21
 8006ace:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2207      	movs	r2, #7
 8006ae6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2207      	movs	r2, #7
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 fc5f 	bl	80083b2 <USBH_CtlReq>
 8006af4:	4603      	mov	r3, r0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af02      	add	r7, sp, #8
 8006b04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b10:	2300      	movs	r3, #0
 8006b12:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d002      	beq.n	8006b24 <CDC_ProcessTransmission+0x26>
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d023      	beq.n	8006b6a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006b22:	e07a      	b.n	8006c1a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	8b12      	ldrh	r2, [r2, #24]
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d90b      	bls.n	8006b48 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	69d9      	ldr	r1, [r3, #28]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8b1a      	ldrh	r2, [r3, #24]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	7b5b      	ldrb	r3, [r3, #13]
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	9000      	str	r0, [sp, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 ff34 	bl	80089ae <USBH_BulkSendData>
 8006b46:	e00b      	b.n	8006b60 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	7b5b      	ldrb	r3, [r3, #13]
 8006b56:	2001      	movs	r0, #1
 8006b58:	9000      	str	r0, [sp, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 ff27 	bl	80089ae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006b68:	e057      	b.n	8006c1a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	7b5b      	ldrb	r3, [r3, #13]
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f005 f9e5 	bl	800bf40 <USBH_LL_GetURBState>
 8006b76:	4603      	mov	r3, r0
 8006b78:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006b7a:	7afb      	ldrb	r3, [r7, #11]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d136      	bne.n	8006bee <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	8b12      	ldrh	r2, [r2, #24]
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d90e      	bls.n	8006baa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	8b12      	ldrh	r2, [r2, #24]
 8006b94:	1a9a      	subs	r2, r3, r2
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	8b12      	ldrh	r2, [r2, #24]
 8006ba2:	441a      	add	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	61da      	str	r2, [r3, #28]
 8006ba8:	e002      	b.n	8006bb0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d004      	beq.n	8006bc2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8006bc0:	e006      	b.n	8006bd0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f892 	bl	8006cf4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2204      	movs	r2, #4
 8006bd4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006be4:	2300      	movs	r3, #0
 8006be6:	2200      	movs	r2, #0
 8006be8:	f002 f954 	bl	8008e94 <osMessageQueuePut>
      break;
 8006bec:	e014      	b.n	8006c18 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006bee:	7afb      	ldrb	r3, [r7, #11]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d111      	bne.n	8006c18 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2204      	movs	r2, #4
 8006c00:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006c10:	2300      	movs	r3, #0
 8006c12:	2200      	movs	r2, #0
 8006c14:	f002 f93e 	bl	8008e94 <osMessageQueuePut>
      break;
 8006c18:	bf00      	nop
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b086      	sub	sp, #24
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c34:	2300      	movs	r3, #0
 8006c36:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d002      	beq.n	8006c48 <CDC_ProcessReception+0x26>
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d00e      	beq.n	8006c64 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c46:	e051      	b.n	8006cec <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	6a19      	ldr	r1, [r3, #32]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	8b5a      	ldrh	r2, [r3, #26]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	7b1b      	ldrb	r3, [r3, #12]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 fecf 	bl	80089f8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2204      	movs	r2, #4
 8006c5e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006c62:	e043      	b.n	8006cec <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	7b1b      	ldrb	r3, [r3, #12]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f005 f968 	bl	800bf40 <USBH_LL_GetURBState>
 8006c70:	4603      	mov	r3, r0
 8006c72:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006c74:	7cfb      	ldrb	r3, [r7, #19]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d137      	bne.n	8006cea <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	7b1b      	ldrb	r3, [r3, #12]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f005 f8cb 	bl	800be1c <USBH_LL_GetLastXferSize>
 8006c86:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d016      	beq.n	8006cc0 <CDC_ProcessReception+0x9e>
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	8b5b      	ldrh	r3, [r3, #26]
 8006c96:	461a      	mov	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d110      	bne.n	8006cc0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	1ad2      	subs	r2, r2, r3
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	6a1a      	ldr	r2, [r3, #32]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	441a      	add	r2, r3
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2203      	movs	r2, #3
 8006cba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8006cbe:	e006      	b.n	8006cce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f81d 	bl	8006d08 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f002 f8d5 	bl	8008e94 <osMessageQueuePut>
      break;
 8006cea:	bf00      	nop
  }
}
 8006cec:	bf00      	nop
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d44:	2302      	movs	r3, #2
 8006d46:	e044      	b.n	8006dd2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	79fa      	ldrb	r2, [r7, #7]
 8006d4c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 f841 	bl	8006de8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8006d94:	2200      	movs	r2, #0
 8006d96:	2104      	movs	r1, #4
 8006d98:	2010      	movs	r0, #16
 8006d9a:	f002 f808 	bl	8008dae <osMessageQueueNew>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8006da6:	4b0d      	ldr	r3, [pc, #52]	@ (8006ddc <USBH_Init+0xac>)
 8006da8:	4a0d      	ldr	r2, [pc, #52]	@ (8006de0 <USBH_Init+0xb0>)
 8006daa:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8006dac:	4b0b      	ldr	r3, [pc, #44]	@ (8006ddc <USBH_Init+0xac>)
 8006dae:	2280      	movs	r2, #128	@ 0x80
 8006db0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8006db2:	4b0a      	ldr	r3, [pc, #40]	@ (8006ddc <USBH_Init+0xac>)
 8006db4:	2218      	movs	r2, #24
 8006db6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006db8:	4a08      	ldr	r2, [pc, #32]	@ (8006ddc <USBH_Init+0xac>)
 8006dba:	68f9      	ldr	r1, [r7, #12]
 8006dbc:	4809      	ldr	r0, [pc, #36]	@ (8006de4 <USBH_Init+0xb4>)
 8006dbe:	f001 ff49 	bl	8008c54 <osThreadNew>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f004 ff72 	bl	800bcb4 <USBH_LL_Init>

  return USBH_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	200001f4 	.word	0x200001f4
 8006de0:	0800c3ac 	.word	0x0800c3ac
 8006de4:	08007a99 	.word	0x08007a99

08006de8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	e009      	b.n	8006e0e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	33e0      	adds	r3, #224	@ 0xe0
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	2200      	movs	r2, #0
 8006e06:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b0f      	cmp	r3, #15
 8006e12:	d9f2      	bls.n	8006dfa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	e009      	b.n	8006e2e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006e24:	2200      	movs	r2, #0
 8006e26:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e34:	d3f1      	bcc.n	8006e1a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2240      	movs	r2, #64	@ 0x40
 8006e5a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	331c      	adds	r3, #28
 8006e86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f005 f9c5 	bl	800c21c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006e98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f005 f9bc 	bl	800c21c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006eaa:	2212      	movs	r2, #18
 8006eac:	2100      	movs	r1, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f005 f9b4 	bl	800c21c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006eba:	223e      	movs	r2, #62	@ 0x3e
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f005 f9ac 	bl	800c21c <memset>

  return USBH_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b085      	sub	sp, #20
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d016      	beq.n	8006f10 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10e      	bne.n	8006f0a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006ef2:	1c59      	adds	r1, r3, #1
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	33de      	adds	r3, #222	@ 0xde
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	73fb      	strb	r3, [r7, #15]
 8006f08:	e004      	b.n	8006f14 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	73fb      	strb	r3, [r7, #15]
 8006f0e:	e001      	b.n	8006f14 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006f10:	2302      	movs	r3, #2
 8006f12:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b085      	sub	sp, #20
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006f38:	78fa      	ldrb	r2, [r7, #3]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d204      	bcs.n	8006f48 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	78fa      	ldrb	r2, [r7, #3]
 8006f42:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006f46:	e001      	b.n	8006f4c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006f48:	2302      	movs	r3, #2
 8006f4a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b087      	sub	sp, #28
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	4608      	mov	r0, r1
 8006f64:	4611      	mov	r1, r2
 8006f66:	461a      	mov	r2, r3
 8006f68:	4603      	mov	r3, r0
 8006f6a:	70fb      	strb	r3, [r7, #3]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	70bb      	strb	r3, [r7, #2]
 8006f70:	4613      	mov	r3, r2
 8006f72:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006f82:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f84:	e025      	b.n	8006fd2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
 8006f88:	221a      	movs	r2, #26
 8006f8a:	fb02 f303 	mul.w	r3, r2, r3
 8006f8e:	3308      	adds	r3, #8
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	3302      	adds	r3, #2
 8006f96:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	795b      	ldrb	r3, [r3, #5]
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d002      	beq.n	8006fa8 <USBH_FindInterface+0x4e>
 8006fa2:	78fb      	ldrb	r3, [r7, #3]
 8006fa4:	2bff      	cmp	r3, #255	@ 0xff
 8006fa6:	d111      	bne.n	8006fcc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006fac:	78ba      	ldrb	r2, [r7, #2]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d002      	beq.n	8006fb8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fb2:	78bb      	ldrb	r3, [r7, #2]
 8006fb4:	2bff      	cmp	r3, #255	@ 0xff
 8006fb6:	d109      	bne.n	8006fcc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fbc:	787a      	ldrb	r2, [r7, #1]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d002      	beq.n	8006fc8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006fc2:	787b      	ldrb	r3, [r7, #1]
 8006fc4:	2bff      	cmp	r3, #255	@ 0xff
 8006fc6:	d101      	bne.n	8006fcc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	e006      	b.n	8006fda <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d9d6      	bls.n	8006f86 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006fd8:	23ff      	movs	r3, #255	@ 0xff
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f004 fe9c 	bl	800bd2c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f004 ffb5 	bl	800bf66 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af04      	add	r7, sp, #16
 800700e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007010:	2302      	movs	r3, #2
 8007012:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b01      	cmp	r3, #1
 8007022:	d102      	bne.n	800702a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2203      	movs	r2, #3
 8007028:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b0b      	cmp	r3, #11
 8007032:	f200 8244 	bhi.w	80074be <USBH_Process+0x4b6>
 8007036:	a201      	add	r2, pc, #4	@ (adr r2, 800703c <USBH_Process+0x34>)
 8007038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703c:	0800706d 	.word	0x0800706d
 8007040:	080070bb 	.word	0x080070bb
 8007044:	0800713f 	.word	0x0800713f
 8007048:	0800743d 	.word	0x0800743d
 800704c:	080074bf 	.word	0x080074bf
 8007050:	080071fb 	.word	0x080071fb
 8007054:	080073c7 	.word	0x080073c7
 8007058:	0800724d 	.word	0x0800724d
 800705c:	08007289 	.word	0x08007289
 8007060:	080072c1 	.word	0x080072c1
 8007064:	0800731f 	.word	0x0800731f
 8007068:	08007425 	.word	0x08007425
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 8224 	beq.w	80074c2 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007080:	20c8      	movs	r0, #200	@ 0xc8
 8007082:	f004 ffba 	bl	800bffa <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f004 fead 	bl	800bde6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80070b0:	2300      	movs	r3, #0
 80070b2:	2200      	movs	r2, #0
 80070b4:	f001 feee 	bl	8008e94 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80070b8:	e203      	b.n	80074c2 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d107      	bne.n	80070d4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	e025      	b.n	8007120 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80070da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070de:	d914      	bls.n	800710a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80070e6:	3301      	adds	r3, #1
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d903      	bls.n	8007102 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	220d      	movs	r2, #13
 80070fe:	701a      	strb	r2, [r3, #0]
 8007100:	e00e      	b.n	8007120 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
 8007108:	e00a      	b.n	8007120 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007110:	f103 020a 	add.w	r2, r3, #10
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800711a:	200a      	movs	r0, #10
 800711c:	f004 ff6d 	bl	800bffa <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007134:	2300      	movs	r3, #0
 8007136:	2200      	movs	r2, #0
 8007138:	f001 feac 	bl	8008e94 <osMessageQueuePut>
#endif
#endif
      break;
 800713c:	e1c8      	b.n	80074d0 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007144:	2b00      	cmp	r3, #0
 8007146:	d005      	beq.n	8007154 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800714e:	2104      	movs	r1, #4
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007154:	2064      	movs	r0, #100	@ 0x64
 8007156:	f004 ff50 	bl	800bffa <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f004 fe1c 	bl	800bd98 <USBH_LL_GetSpeed>
 8007160:	4603      	mov	r3, r0
 8007162:	461a      	mov	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2205      	movs	r2, #5
 800716e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007170:	2100      	movs	r1, #0
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f001 fc8d 	bl	8008a92 <USBH_AllocPipe>
 8007178:	4603      	mov	r3, r0
 800717a:	461a      	mov	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007180:	2180      	movs	r1, #128	@ 0x80
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f001 fc85 	bl	8008a92 <USBH_AllocPipe>
 8007188:	4603      	mov	r3, r0
 800718a:	461a      	mov	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	7919      	ldrb	r1, [r3, #4]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071a4:	9202      	str	r2, [sp, #8]
 80071a6:	2200      	movs	r2, #0
 80071a8:	9201      	str	r2, [sp, #4]
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	4603      	mov	r3, r0
 80071ae:	2280      	movs	r2, #128	@ 0x80
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 fc3f 	bl	8008a34 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	7959      	ldrb	r1, [r3, #5]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80071ca:	9202      	str	r2, [sp, #8]
 80071cc:	2200      	movs	r2, #0
 80071ce:	9201      	str	r2, [sp, #4]
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	4603      	mov	r3, r0
 80071d4:	2200      	movs	r2, #0
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 fc2c 	bl	8008a34 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80071f0:	2300      	movs	r3, #0
 80071f2:	2200      	movs	r2, #0
 80071f4:	f001 fe4e 	bl	8008e94 <osMessageQueuePut>
#endif
#endif
      break;
 80071f8:	e16a      	b.n	80074d0 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f96e 	bl	80074dc <USBH_HandleEnum>
 8007200:	4603      	mov	r3, r0
 8007202:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	f040 815c 	bne.w	80074c6 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800721c:	2b01      	cmp	r3, #1
 800721e:	d103      	bne.n	8007228 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2208      	movs	r2, #8
 8007224:	701a      	strb	r2, [r3, #0]
 8007226:	e002      	b.n	800722e <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2207      	movs	r2, #7
 800722c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2205      	movs	r2, #5
 8007232:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007242:	2300      	movs	r3, #0
 8007244:	2200      	movs	r2, #0
 8007246:	f001 fe25 	bl	8008e94 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800724a:	e13c      	b.n	80074c6 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 8139 	beq.w	80074ca <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800725e:	2101      	movs	r1, #1
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2208      	movs	r2, #8
 8007268:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2205      	movs	r2, #5
 800726e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800727e:	2300      	movs	r3, #0
 8007280:	2200      	movs	r2, #0
 8007282:	f001 fe07 	bl	8008e94 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8007286:	e120      	b.n	80074ca <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fd12 	bl	8007cba <USBH_SetCfg>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2209      	movs	r2, #9
 80072a0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80072b6:	2300      	movs	r3, #0
 80072b8:	2200      	movs	r2, #0
 80072ba:	f001 fdeb 	bl	8008e94 <osMessageQueuePut>
#endif
#endif
      break;
 80072be:	e107      	b.n	80074d0 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80072c6:	f003 0320 	and.w	r3, r3, #32
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d015      	beq.n	80072fa <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80072ce:	2101      	movs	r1, #1
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fd15 	bl	8007d00 <USBH_SetFeature>
 80072d6:	4603      	mov	r3, r0
 80072d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d103      	bne.n	80072ea <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	220a      	movs	r2, #10
 80072e6:	701a      	strb	r2, [r3, #0]
 80072e8:	e00a      	b.n	8007300 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d106      	bne.n	8007300 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	220a      	movs	r2, #10
 80072f6:	701a      	strb	r2, [r3, #0]
 80072f8:	e002      	b.n	8007300 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	220a      	movs	r2, #10
 80072fe:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007314:	2300      	movs	r3, #0
 8007316:	2200      	movs	r2, #0
 8007318:	f001 fdbc 	bl	8008e94 <osMessageQueuePut>
#endif
#endif
      break;
 800731c:	e0d8      	b.n	80074d0 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007324:	2b00      	cmp	r3, #0
 8007326:	d03f      	beq.n	80073a8 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007330:	2300      	movs	r3, #0
 8007332:	73fb      	strb	r3, [r7, #15]
 8007334:	e016      	b.n	8007364 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007336:	7bfa      	ldrb	r2, [r7, #15]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	32de      	adds	r2, #222	@ 0xde
 800733c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007340:	791a      	ldrb	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007348:	429a      	cmp	r2, r3
 800734a:	d108      	bne.n	800735e <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800734c:	7bfa      	ldrb	r2, [r7, #15]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	32de      	adds	r2, #222	@ 0xde
 8007352:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800735c:	e005      	b.n	800736a <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	3301      	adds	r3, #1
 8007362:	73fb      	strb	r3, [r7, #15]
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0e5      	beq.n	8007336 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007370:	2b00      	cmp	r3, #0
 8007372:	d016      	beq.n	80073a2 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	4798      	blx	r3
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d109      	bne.n	800739a <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2206      	movs	r2, #6
 800738a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007392:	2103      	movs	r1, #3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	4798      	blx	r3
 8007398:	e006      	b.n	80073a8 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	220d      	movs	r2, #13
 800739e:	701a      	strb	r2, [r3, #0]
 80073a0:	e002      	b.n	80073a8 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	220d      	movs	r2, #13
 80073a6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2205      	movs	r2, #5
 80073ac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80073bc:	2300      	movs	r3, #0
 80073be:	2200      	movs	r2, #0
 80073c0:	f001 fd68 	bl	8008e94 <osMessageQueuePut>
#endif
#endif
      break;
 80073c4:	e084      	b.n	80074d0 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d017      	beq.n	8007400 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
 80073dc:	4603      	mov	r3, r0
 80073de:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d103      	bne.n	80073f0 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	220b      	movs	r2, #11
 80073ec:	701a      	strb	r2, [r3, #0]
 80073ee:	e00a      	b.n	8007406 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d106      	bne.n	8007406 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	220d      	movs	r2, #13
 80073fc:	701a      	strb	r2, [r3, #0]
 80073fe:	e002      	b.n	8007406 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	220d      	movs	r2, #13
 8007404:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2205      	movs	r2, #5
 800740a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800741a:	2300      	movs	r3, #0
 800741c:	2200      	movs	r2, #0
 800741e:	f001 fd39 	bl	8008e94 <osMessageQueuePut>
#endif
#endif
      break;
 8007422:	e055      	b.n	80074d0 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d04f      	beq.n	80074ce <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	4798      	blx	r3
      }
      break;
 800743a:	e048      	b.n	80074ce <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff fccf 	bl	8006de8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007450:	2b00      	cmp	r3, #0
 8007452:	d009      	beq.n	8007468 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800746e:	2b00      	cmp	r3, #0
 8007470:	d005      	beq.n	800747e <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007478:	2105      	movs	r1, #5
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b01      	cmp	r3, #1
 8007488:	d107      	bne.n	800749a <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff fda7 	bl	8006fe6 <USBH_Start>
 8007498:	e002      	b.n	80074a0 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f004 fc46 	bl	800bd2c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80074b4:	2300      	movs	r3, #0
 80074b6:	2200      	movs	r2, #0
 80074b8:	f001 fcec 	bl	8008e94 <osMessageQueuePut>
#endif
#endif
      break;
 80074bc:	e008      	b.n	80074d0 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80074be:	bf00      	nop
 80074c0:	e006      	b.n	80074d0 <USBH_Process+0x4c8>
      break;
 80074c2:	bf00      	nop
 80074c4:	e004      	b.n	80074d0 <USBH_Process+0x4c8>
      break;
 80074c6:	bf00      	nop
 80074c8:	e002      	b.n	80074d0 <USBH_Process+0x4c8>
    break;
 80074ca:	bf00      	nop
 80074cc:	e000      	b.n	80074d0 <USBH_Process+0x4c8>
      break;
 80074ce:	bf00      	nop
  }
  return USBH_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop

080074dc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b088      	sub	sp, #32
 80074e0:	af04      	add	r7, sp, #16
 80074e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80074e4:	2301      	movs	r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80074e8:	2301      	movs	r3, #1
 80074ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	2b07      	cmp	r3, #7
 80074f2:	f200 8204 	bhi.w	80078fe <USBH_HandleEnum+0x422>
 80074f6:	a201      	add	r2, pc, #4	@ (adr r2, 80074fc <USBH_HandleEnum+0x20>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	0800751d 	.word	0x0800751d
 8007500:	080075d7 	.word	0x080075d7
 8007504:	08007641 	.word	0x08007641
 8007508:	080076cb 	.word	0x080076cb
 800750c:	08007735 	.word	0x08007735
 8007510:	080077a5 	.word	0x080077a5
 8007514:	08007841 	.word	0x08007841
 8007518:	080078bf 	.word	0x080078bf
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800751c:	2108      	movs	r1, #8
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fae8 	bl	8007af4 <USBH_Get_DevDesc>
 8007524:	4603      	mov	r3, r0
 8007526:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d12e      	bne.n	800758c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	7919      	ldrb	r1, [r3, #4]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007552:	9202      	str	r2, [sp, #8]
 8007554:	2200      	movs	r2, #0
 8007556:	9201      	str	r2, [sp, #4]
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	4603      	mov	r3, r0
 800755c:	2280      	movs	r2, #128	@ 0x80
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 fa68 	bl	8008a34 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	7959      	ldrb	r1, [r3, #5]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007578:	9202      	str	r2, [sp, #8]
 800757a:	2200      	movs	r2, #0
 800757c:	9201      	str	r2, [sp, #4]
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	4603      	mov	r3, r0
 8007582:	2200      	movs	r2, #0
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 fa55 	bl	8008a34 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800758a:	e1ba      	b.n	8007902 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800758c:	7bbb      	ldrb	r3, [r7, #14]
 800758e:	2b03      	cmp	r3, #3
 8007590:	f040 81b7 	bne.w	8007902 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800759a:	3301      	adds	r3, #1
 800759c:	b2da      	uxtb	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d903      	bls.n	80075b6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	220d      	movs	r2, #13
 80075b2:	701a      	strb	r2, [r3, #0]
      break;
 80075b4:	e1a5      	b.n	8007902 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	795b      	ldrb	r3, [r3, #5]
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 fa89 	bl	8008ad4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	791b      	ldrb	r3, [r3, #4]
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 fa83 	bl	8008ad4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	701a      	strb	r2, [r3, #0]
      break;
 80075d4:	e195      	b.n	8007902 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80075d6:	2112      	movs	r1, #18
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fa8b 	bl	8007af4 <USBH_Get_DevDesc>
 80075de:	4603      	mov	r3, r0
 80075e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d103      	bne.n	80075f0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075ee:	e18a      	b.n	8007906 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	f040 8187 	bne.w	8007906 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80075fe:	3301      	adds	r3, #1
 8007600:	b2da      	uxtb	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800760e:	2b03      	cmp	r3, #3
 8007610:	d903      	bls.n	800761a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	220d      	movs	r2, #13
 8007616:	701a      	strb	r2, [r3, #0]
      break;
 8007618:	e175      	b.n	8007906 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	795b      	ldrb	r3, [r3, #5]
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 fa57 	bl	8008ad4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	791b      	ldrb	r3, [r3, #4]
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 fa51 	bl	8008ad4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	701a      	strb	r2, [r3, #0]
      break;
 800763e:	e162      	b.n	8007906 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007640:	2101      	movs	r1, #1
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fb15 	bl	8007c72 <USBH_SetAddress>
 8007648:	4603      	mov	r3, r0
 800764a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d130      	bne.n	80076b4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007652:	2002      	movs	r0, #2
 8007654:	f004 fcd1 	bl	800bffa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2203      	movs	r2, #3
 8007664:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	7919      	ldrb	r1, [r3, #4]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800767a:	9202      	str	r2, [sp, #8]
 800767c:	2200      	movs	r2, #0
 800767e:	9201      	str	r2, [sp, #4]
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	4603      	mov	r3, r0
 8007684:	2280      	movs	r2, #128	@ 0x80
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 f9d4 	bl	8008a34 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	7959      	ldrb	r1, [r3, #5]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076a0:	9202      	str	r2, [sp, #8]
 80076a2:	2200      	movs	r2, #0
 80076a4:	9201      	str	r2, [sp, #4]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	4603      	mov	r3, r0
 80076aa:	2200      	movs	r2, #0
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 f9c1 	bl	8008a34 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80076b2:	e12a      	b.n	800790a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	f040 8127 	bne.w	800790a <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	220d      	movs	r2, #13
 80076c0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	705a      	strb	r2, [r3, #1]
      break;
 80076c8:	e11f      	b.n	800790a <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80076ca:	2109      	movs	r1, #9
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fa3d 	bl	8007b4c <USBH_Get_CfgDesc>
 80076d2:	4603      	mov	r3, r0
 80076d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2204      	movs	r2, #4
 80076e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076e2:	e114      	b.n	800790e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	f040 8111 	bne.w	800790e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80076f2:	3301      	adds	r3, #1
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007702:	2b03      	cmp	r3, #3
 8007704:	d903      	bls.n	800770e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	220d      	movs	r2, #13
 800770a:	701a      	strb	r2, [r3, #0]
      break;
 800770c:	e0ff      	b.n	800790e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	795b      	ldrb	r3, [r3, #5]
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 f9dd 	bl	8008ad4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	791b      	ldrb	r3, [r3, #4]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 f9d7 	bl	8008ad4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	701a      	strb	r2, [r3, #0]
      break;
 8007732:	e0ec      	b.n	800790e <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fa05 	bl	8007b4c <USBH_Get_CfgDesc>
 8007742:	4603      	mov	r3, r0
 8007744:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d103      	bne.n	8007754 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2205      	movs	r2, #5
 8007750:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007752:	e0de      	b.n	8007912 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b03      	cmp	r3, #3
 8007758:	f040 80db 	bne.w	8007912 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007762:	3301      	adds	r3, #1
 8007764:	b2da      	uxtb	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007772:	2b03      	cmp	r3, #3
 8007774:	d903      	bls.n	800777e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	220d      	movs	r2, #13
 800777a:	701a      	strb	r2, [r3, #0]
      break;
 800777c:	e0c9      	b.n	8007912 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	795b      	ldrb	r3, [r3, #5]
 8007782:	4619      	mov	r1, r3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 f9a5 	bl	8008ad4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	791b      	ldrb	r3, [r3, #4]
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 f99f 	bl	8008ad4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	701a      	strb	r2, [r3, #0]
      break;
 80077a2:	e0b6      	b.n	8007912 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d036      	beq.n	800781c <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077ba:	23ff      	movs	r3, #255	@ 0xff
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f9ef 	bl	8007ba0 <USBH_Get_StringDesc>
 80077c2:	4603      	mov	r3, r0
 80077c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d111      	bne.n	80077f0 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2206      	movs	r2, #6
 80077d0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2205      	movs	r2, #5
 80077d6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80077e6:	2300      	movs	r3, #0
 80077e8:	2200      	movs	r2, #0
 80077ea:	f001 fb53 	bl	8008e94 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077ee:	e092      	b.n	8007916 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	f040 808f 	bne.w	8007916 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2206      	movs	r2, #6
 80077fc:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2205      	movs	r2, #5
 8007802:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007812:	2300      	movs	r3, #0
 8007814:	2200      	movs	r2, #0
 8007816:	f001 fb3d 	bl	8008e94 <osMessageQueuePut>
      break;
 800781a:	e07c      	b.n	8007916 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2206      	movs	r2, #6
 8007820:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2205      	movs	r2, #5
 8007826:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007836:	2300      	movs	r3, #0
 8007838:	2200      	movs	r2, #0
 800783a:	f001 fb2b 	bl	8008e94 <osMessageQueuePut>
      break;
 800783e:	e06a      	b.n	8007916 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007846:	2b00      	cmp	r3, #0
 8007848:	d027      	beq.n	800789a <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007856:	23ff      	movs	r3, #255	@ 0xff
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f9a1 	bl	8007ba0 <USBH_Get_StringDesc>
 800785e:	4603      	mov	r3, r0
 8007860:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d103      	bne.n	8007870 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2207      	movs	r2, #7
 800786c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800786e:	e054      	b.n	800791a <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	2b03      	cmp	r3, #3
 8007874:	d151      	bne.n	800791a <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2207      	movs	r2, #7
 800787a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2205      	movs	r2, #5
 8007880:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007890:	2300      	movs	r3, #0
 8007892:	2200      	movs	r2, #0
 8007894:	f001 fafe 	bl	8008e94 <osMessageQueuePut>
      break;
 8007898:	e03f      	b.n	800791a <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2207      	movs	r2, #7
 800789e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2205      	movs	r2, #5
 80078a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80078b4:	2300      	movs	r3, #0
 80078b6:	2200      	movs	r2, #0
 80078b8:	f001 faec 	bl	8008e94 <osMessageQueuePut>
      break;
 80078bc:	e02d      	b.n	800791a <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d017      	beq.n	80078f8 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078d4:	23ff      	movs	r3, #255	@ 0xff
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f962 	bl	8007ba0 <USBH_Get_StringDesc>
 80078dc:	4603      	mov	r3, r0
 80078de:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d102      	bne.n	80078ec <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80078ea:	e018      	b.n	800791e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d115      	bne.n	800791e <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73fb      	strb	r3, [r7, #15]
      break;
 80078f6:	e012      	b.n	800791e <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]
      break;
 80078fc:	e00f      	b.n	800791e <USBH_HandleEnum+0x442>

    default:
      break;
 80078fe:	bf00      	nop
 8007900:	e00e      	b.n	8007920 <USBH_HandleEnum+0x444>
      break;
 8007902:	bf00      	nop
 8007904:	e00c      	b.n	8007920 <USBH_HandleEnum+0x444>
      break;
 8007906:	bf00      	nop
 8007908:	e00a      	b.n	8007920 <USBH_HandleEnum+0x444>
      break;
 800790a:	bf00      	nop
 800790c:	e008      	b.n	8007920 <USBH_HandleEnum+0x444>
      break;
 800790e:	bf00      	nop
 8007910:	e006      	b.n	8007920 <USBH_HandleEnum+0x444>
      break;
 8007912:	bf00      	nop
 8007914:	e004      	b.n	8007920 <USBH_HandleEnum+0x444>
      break;
 8007916:	bf00      	nop
 8007918:	e002      	b.n	8007920 <USBH_HandleEnum+0x444>
      break;
 800791a:	bf00      	nop
 800791c:	e000      	b.n	8007920 <USBH_HandleEnum+0x444>
      break;
 800791e:	bf00      	nop
  }
  return Status;
 8007920:	7bfb      	ldrb	r3, [r7, #15]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop

0800792c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007958:	1c5a      	adds	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f804 	bl	800796e <USBH_HandleSof>
}
 8007966:	bf00      	nop
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b0b      	cmp	r3, #11
 800797e:	d10a      	bne.n	8007996 <USBH_HandleSof+0x28>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d005      	beq.n	8007996 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	4798      	blx	r3
  }
}
 8007996:	bf00      	nop
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80079c2:	2300      	movs	r3, #0
 80079c4:	2200      	movs	r2, #0
 80079c6:	f001 fa65 	bl	8008e94 <osMessageQueuePut>
#endif
#endif

  return;
 80079ca:	bf00      	nop
}
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80079e2:	bf00      	nop
}
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007a22:	2300      	movs	r3, #0
 8007a24:	2200      	movs	r2, #0
 8007a26:	f001 fa35 	bl	8008e94 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f004 f984 	bl	800bd62 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	791b      	ldrb	r3, [r3, #4]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 f837 	bl	8008ad4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	795b      	ldrb	r3, [r3, #5]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 f831 	bl	8008ad4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007a86:	2300      	movs	r3, #0
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f001 fa03 	bl	8008e94 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007aac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f001 fa4f 	bl	8008f54 <osMessageQueueGet>
 8007ab6:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1f0      	bne.n	8007aa0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff faa2 	bl	8007008 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007ac4:	e7ec      	b.n	8007aa0 <USBH_Process_OS+0x8>

08007ac6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f001 f9d5 	bl	8008e94 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007b00:	887b      	ldrh	r3, [r7, #2]
 8007b02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b06:	d901      	bls.n	8007b0c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e01b      	b.n	8007b44 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007b12:	887b      	ldrh	r3, [r7, #2]
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	4613      	mov	r3, r2
 8007b18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f872 	bl	8007c08 <USBH_GetDescriptor>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d109      	bne.n	8007b42 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b34:	887a      	ldrh	r2, [r7, #2]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f929 	bl	8007d90 <USBH_ParseDevDesc>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af02      	add	r7, sp, #8
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	331c      	adds	r3, #28
 8007b5c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007b5e:	887b      	ldrh	r3, [r7, #2]
 8007b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b64:	d901      	bls.n	8007b6a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e016      	b.n	8007b98 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007b6a:	887b      	ldrh	r3, [r7, #2]
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b74:	2100      	movs	r1, #0
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f846 	bl	8007c08 <USBH_GetDescriptor>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d107      	bne.n	8007b96 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007b86:	887b      	ldrh	r3, [r7, #2]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	68b9      	ldr	r1, [r7, #8]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f9af 	bl	8007ef0 <USBH_ParseCfgDesc>
 8007b92:	4603      	mov	r3, r0
 8007b94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	607a      	str	r2, [r7, #4]
 8007baa:	461a      	mov	r2, r3
 8007bac:	460b      	mov	r3, r1
 8007bae:	72fb      	strb	r3, [r7, #11]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007bb4:	893b      	ldrh	r3, [r7, #8]
 8007bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bba:	d802      	bhi.n	8007bc2 <USBH_Get_StringDesc+0x22>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e01c      	b.n	8007c00 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007bc6:	7afb      	ldrb	r3, [r7, #11]
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007bce:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007bd6:	893b      	ldrh	r3, [r7, #8]
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	2100      	movs	r1, #0
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 f812 	bl	8007c08 <USBH_GetDescriptor>
 8007be4:	4603      	mov	r3, r0
 8007be6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d107      	bne.n	8007bfe <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007bf4:	893a      	ldrh	r2, [r7, #8]
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fb8d 	bl	8008318 <USBH_ParseStringDesc>
  }

  return status;
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	607b      	str	r3, [r7, #4]
 8007c12:	460b      	mov	r3, r1
 8007c14:	72fb      	strb	r3, [r7, #11]
 8007c16:	4613      	mov	r3, r2
 8007c18:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	789b      	ldrb	r3, [r3, #2]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d11c      	bne.n	8007c5c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007c22:	7afb      	ldrb	r3, [r7, #11]
 8007c24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2206      	movs	r2, #6
 8007c32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	893a      	ldrh	r2, [r7, #8]
 8007c38:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007c3a:	893b      	ldrh	r3, [r7, #8]
 8007c3c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007c40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c44:	d104      	bne.n	8007c50 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f240 4209 	movw	r2, #1033	@ 0x409
 8007c4c:	829a      	strh	r2, [r3, #20]
 8007c4e:	e002      	b.n	8007c56 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8b3a      	ldrh	r2, [r7, #24]
 8007c5a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007c5c:	8b3b      	ldrh	r3, [r7, #24]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 fba5 	bl	80083b2 <USBH_CtlReq>
 8007c68:	4603      	mov	r3, r0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b082      	sub	sp, #8
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	789b      	ldrb	r3, [r3, #2]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d10f      	bne.n	8007ca6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2205      	movs	r2, #5
 8007c90:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2100      	movs	r1, #0
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fb81 	bl	80083b2 <USBH_CtlReq>
 8007cb0:	4603      	mov	r3, r0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	789b      	ldrb	r3, [r3, #2]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d10e      	bne.n	8007cec <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2209      	movs	r2, #9
 8007cd8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	887a      	ldrh	r2, [r7, #2]
 8007cde:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007cec:	2200      	movs	r2, #0
 8007cee:	2100      	movs	r1, #0
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fb5e 	bl	80083b2 <USBH_CtlReq>
 8007cf6:	4603      	mov	r3, r0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	789b      	ldrb	r3, [r3, #2]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d10f      	bne.n	8007d34 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d34:	2200      	movs	r2, #0
 8007d36:	2100      	movs	r1, #0
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fb3a 	bl	80083b2 <USBH_CtlReq>
 8007d3e:	4603      	mov	r3, r0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	789b      	ldrb	r3, [r3, #2]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d10f      	bne.n	8007d7c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007d6e:	78fb      	ldrb	r3, [r7, #3]
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2100      	movs	r1, #0
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fb16 	bl	80083b2 <USBH_CtlReq>
 8007d86:	4603      	mov	r3, r0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007da4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007db0:	2302      	movs	r3, #2
 8007db2:	e094      	b.n	8007ede <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	781a      	ldrb	r2, [r3, #0]
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	785a      	ldrb	r2, [r3, #1]
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	3302      	adds	r3, #2
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	3303      	adds	r3, #3
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	021b      	lsls	r3, r3, #8
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	791a      	ldrb	r2, [r3, #4]
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	795a      	ldrb	r2, [r3, #5]
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	799a      	ldrb	r2, [r3, #6]
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	79da      	ldrb	r2, [r3, #7]
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d004      	beq.n	8007e12 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d11b      	bne.n	8007e4a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	79db      	ldrb	r3, [r3, #7]
 8007e16:	2b20      	cmp	r3, #32
 8007e18:	dc0f      	bgt.n	8007e3a <USBH_ParseDevDesc+0xaa>
 8007e1a:	2b08      	cmp	r3, #8
 8007e1c:	db0f      	blt.n	8007e3e <USBH_ParseDevDesc+0xae>
 8007e1e:	3b08      	subs	r3, #8
 8007e20:	4a32      	ldr	r2, [pc, #200]	@ (8007eec <USBH_ParseDevDesc+0x15c>)
 8007e22:	fa22 f303 	lsr.w	r3, r2, r3
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	bf14      	ite	ne
 8007e2e:	2301      	movne	r3, #1
 8007e30:	2300      	moveq	r3, #0
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d106      	bne.n	8007e46 <USBH_ParseDevDesc+0xb6>
 8007e38:	e001      	b.n	8007e3e <USBH_ParseDevDesc+0xae>
 8007e3a:	2b40      	cmp	r3, #64	@ 0x40
 8007e3c:	d003      	beq.n	8007e46 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	2208      	movs	r2, #8
 8007e42:	71da      	strb	r2, [r3, #7]
        break;
 8007e44:	e000      	b.n	8007e48 <USBH_ParseDevDesc+0xb8>
        break;
 8007e46:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007e48:	e00e      	b.n	8007e68 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d107      	bne.n	8007e64 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	79db      	ldrb	r3, [r3, #7]
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d005      	beq.n	8007e68 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	2208      	movs	r2, #8
 8007e60:	71da      	strb	r2, [r3, #7]
 8007e62:	e001      	b.n	8007e68 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007e64:	2303      	movs	r3, #3
 8007e66:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007e68:	88fb      	ldrh	r3, [r7, #6]
 8007e6a:	2b08      	cmp	r3, #8
 8007e6c:	d936      	bls.n	8007edc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	3308      	adds	r3, #8
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	461a      	mov	r2, r3
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	3309      	adds	r3, #9
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	021b      	lsls	r3, r3, #8
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	4313      	orrs	r3, r2
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	330a      	adds	r3, #10
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	330b      	adds	r3, #11
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	330c      	adds	r3, #12
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	330d      	adds	r3, #13
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	021b      	lsls	r3, r3, #8
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	7b9a      	ldrb	r2, [r3, #14]
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	7bda      	ldrb	r2, [r3, #15]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	7c1a      	ldrb	r2, [r3, #16]
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	7c5a      	ldrb	r2, [r3, #17]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	371c      	adds	r7, #28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	01000101 	.word	0x01000101

08007ef0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08c      	sub	sp, #48	@ 0x30
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	4613      	mov	r3, r2
 8007efc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007f04:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e0da      	b.n	80080d8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	2b09      	cmp	r3, #9
 8007f2c:	d002      	beq.n	8007f34 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f30:	2209      	movs	r2, #9
 8007f32:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	781a      	ldrb	r2, [r3, #0]
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	785a      	ldrb	r2, [r3, #1]
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	3302      	adds	r3, #2
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	3303      	adds	r3, #3
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	021b      	lsls	r3, r3, #8
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	4313      	orrs	r3, r2
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f5e:	bf28      	it	cs
 8007f60:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	791a      	ldrb	r2, [r3, #4]
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	795a      	ldrb	r2, [r3, #5]
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	799a      	ldrb	r2, [r3, #6]
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	79da      	ldrb	r2, [r3, #7]
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	7a1a      	ldrb	r2, [r3, #8]
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f92:	88fb      	ldrh	r3, [r7, #6]
 8007f94:	2b09      	cmp	r3, #9
 8007f96:	f240 809d 	bls.w	80080d4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f9a:	2309      	movs	r3, #9
 8007f9c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fa2:	e081      	b.n	80080a8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fa4:	f107 0316 	add.w	r3, r7, #22
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fac:	f000 f9e7 	bl	800837e <USBH_GetNextDesc>
 8007fb0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb4:	785b      	ldrb	r3, [r3, #1]
 8007fb6:	2b04      	cmp	r3, #4
 8007fb8:	d176      	bne.n	80080a8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b09      	cmp	r3, #9
 8007fc0:	d002      	beq.n	8007fc8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc4:	2209      	movs	r2, #9
 8007fc6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fcc:	221a      	movs	r2, #26
 8007fce:	fb02 f303 	mul.w	r3, r2, r3
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	6a3a      	ldr	r2, [r7, #32]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	3302      	adds	r3, #2
 8007fda:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007fdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fde:	69f8      	ldr	r0, [r7, #28]
 8007fe0:	f000 f87e 	bl	80080e0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fee:	e043      	b.n	8008078 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ff0:	f107 0316 	add.w	r3, r7, #22
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ff8:	f000 f9c1 	bl	800837e <USBH_GetNextDesc>
 8007ffc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008000:	785b      	ldrb	r3, [r3, #1]
 8008002:	2b05      	cmp	r3, #5
 8008004:	d138      	bne.n	8008078 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	795b      	ldrb	r3, [r3, #5]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d113      	bne.n	8008036 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008012:	2b02      	cmp	r3, #2
 8008014:	d003      	beq.n	800801e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	799b      	ldrb	r3, [r3, #6]
 800801a:	2b03      	cmp	r3, #3
 800801c:	d10b      	bne.n	8008036 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	79db      	ldrb	r3, [r3, #7]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10b      	bne.n	800803e <USBH_ParseCfgDesc+0x14e>
 8008026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	2b09      	cmp	r3, #9
 800802c:	d007      	beq.n	800803e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800802e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008030:	2209      	movs	r2, #9
 8008032:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008034:	e003      	b.n	800803e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008038:	2207      	movs	r2, #7
 800803a:	701a      	strb	r2, [r3, #0]
 800803c:	e000      	b.n	8008040 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800803e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008044:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008048:	3201      	adds	r2, #1
 800804a:	00d2      	lsls	r2, r2, #3
 800804c:	211a      	movs	r1, #26
 800804e:	fb01 f303 	mul.w	r3, r1, r3
 8008052:	4413      	add	r3, r2
 8008054:	3308      	adds	r3, #8
 8008056:	6a3a      	ldr	r2, [r7, #32]
 8008058:	4413      	add	r3, r2
 800805a:	3304      	adds	r3, #4
 800805c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800805e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008060:	69b9      	ldr	r1, [r7, #24]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 f870 	bl	8008148 <USBH_ParseEPDesc>
 8008068:	4603      	mov	r3, r0
 800806a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800806e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008072:	3301      	adds	r3, #1
 8008074:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	791b      	ldrb	r3, [r3, #4]
 800807c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008080:	429a      	cmp	r2, r3
 8008082:	d204      	bcs.n	800808e <USBH_ParseCfgDesc+0x19e>
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	885a      	ldrh	r2, [r3, #2]
 8008088:	8afb      	ldrh	r3, [r7, #22]
 800808a:	429a      	cmp	r2, r3
 800808c:	d8b0      	bhi.n	8007ff0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	791b      	ldrb	r3, [r3, #4]
 8008092:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008096:	429a      	cmp	r2, r3
 8008098:	d201      	bcs.n	800809e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800809a:	2303      	movs	r3, #3
 800809c:	e01c      	b.n	80080d8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800809e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080a2:	3301      	adds	r3, #1
 80080a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d805      	bhi.n	80080bc <USBH_ParseCfgDesc+0x1cc>
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	885a      	ldrh	r2, [r3, #2]
 80080b4:	8afb      	ldrh	r3, [r7, #22]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	f63f af74 	bhi.w	8007fa4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	791b      	ldrb	r3, [r3, #4]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	bf28      	it	cs
 80080c4:	2302      	movcs	r3, #2
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d201      	bcs.n	80080d4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e001      	b.n	80080d8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80080d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3730      	adds	r7, #48	@ 0x30
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	781a      	ldrb	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	785a      	ldrb	r2, [r3, #1]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	789a      	ldrb	r2, [r3, #2]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	78da      	ldrb	r2, [r3, #3]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	3304      	adds	r3, #4
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2b02      	cmp	r3, #2
 8008112:	bf28      	it	cs
 8008114:	2302      	movcs	r3, #2
 8008116:	b2da      	uxtb	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	795a      	ldrb	r2, [r3, #5]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	799a      	ldrb	r2, [r3, #6]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	79da      	ldrb	r2, [r3, #7]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	7a1a      	ldrb	r2, [r3, #8]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	721a      	strb	r2, [r3, #8]
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	781a      	ldrb	r2, [r3, #0]
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	785a      	ldrb	r2, [r3, #1]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	789a      	ldrb	r2, [r3, #2]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	78da      	ldrb	r2, [r3, #3]
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	3304      	adds	r3, #4
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3305      	adds	r3, #5
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	b29b      	uxth	r3, r3
 800818a:	4313      	orrs	r3, r2
 800818c:	b29a      	uxth	r2, r3
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	799a      	ldrb	r2, [r3, #6]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	889b      	ldrh	r3, [r3, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d009      	beq.n	80081b6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80081a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081aa:	d804      	bhi.n	80081b6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80081b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081b4:	d901      	bls.n	80081ba <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80081b6:	2303      	movs	r3, #3
 80081b8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d136      	bne.n	8008232 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	78db      	ldrb	r3, [r3, #3]
 80081c8:	f003 0303 	and.w	r3, r3, #3
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d108      	bne.n	80081e2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	889b      	ldrh	r3, [r3, #4]
 80081d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081d8:	f240 8097 	bls.w	800830a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80081dc:	2303      	movs	r3, #3
 80081de:	75fb      	strb	r3, [r7, #23]
 80081e0:	e093      	b.n	800830a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	78db      	ldrb	r3, [r3, #3]
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d107      	bne.n	80081fe <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	889b      	ldrh	r3, [r3, #4]
 80081f2:	2b40      	cmp	r3, #64	@ 0x40
 80081f4:	f240 8089 	bls.w	800830a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80081f8:	2303      	movs	r3, #3
 80081fa:	75fb      	strb	r3, [r7, #23]
 80081fc:	e085      	b.n	800830a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	78db      	ldrb	r3, [r3, #3]
 8008202:	f003 0303 	and.w	r3, r3, #3
 8008206:	2b01      	cmp	r3, #1
 8008208:	d005      	beq.n	8008216 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	78db      	ldrb	r3, [r3, #3]
 800820e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008212:	2b03      	cmp	r3, #3
 8008214:	d10a      	bne.n	800822c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	799b      	ldrb	r3, [r3, #6]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <USBH_ParseEPDesc+0xde>
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	799b      	ldrb	r3, [r3, #6]
 8008222:	2b10      	cmp	r3, #16
 8008224:	d970      	bls.n	8008308 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008226:	2303      	movs	r3, #3
 8008228:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800822a:	e06d      	b.n	8008308 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800822c:	2303      	movs	r3, #3
 800822e:	75fb      	strb	r3, [r7, #23]
 8008230:	e06b      	b.n	800830a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008238:	2b01      	cmp	r3, #1
 800823a:	d13c      	bne.n	80082b6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	78db      	ldrb	r3, [r3, #3]
 8008240:	f003 0303 	and.w	r3, r3, #3
 8008244:	2b02      	cmp	r3, #2
 8008246:	d005      	beq.n	8008254 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	78db      	ldrb	r3, [r3, #3]
 800824c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008250:	2b00      	cmp	r3, #0
 8008252:	d106      	bne.n	8008262 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	889b      	ldrh	r3, [r3, #4]
 8008258:	2b40      	cmp	r3, #64	@ 0x40
 800825a:	d956      	bls.n	800830a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800825c:	2303      	movs	r3, #3
 800825e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008260:	e053      	b.n	800830a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	78db      	ldrb	r3, [r3, #3]
 8008266:	f003 0303 	and.w	r3, r3, #3
 800826a:	2b01      	cmp	r3, #1
 800826c:	d10e      	bne.n	800828c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	799b      	ldrb	r3, [r3, #6]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d007      	beq.n	8008286 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800827a:	2b10      	cmp	r3, #16
 800827c:	d803      	bhi.n	8008286 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008282:	2b40      	cmp	r3, #64	@ 0x40
 8008284:	d941      	bls.n	800830a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008286:	2303      	movs	r3, #3
 8008288:	75fb      	strb	r3, [r7, #23]
 800828a:	e03e      	b.n	800830a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	78db      	ldrb	r3, [r3, #3]
 8008290:	f003 0303 	and.w	r3, r3, #3
 8008294:	2b03      	cmp	r3, #3
 8008296:	d10b      	bne.n	80082b0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	799b      	ldrb	r3, [r3, #6]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d004      	beq.n	80082aa <USBH_ParseEPDesc+0x162>
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	889b      	ldrh	r3, [r3, #4]
 80082a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082a8:	d32f      	bcc.n	800830a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082aa:	2303      	movs	r3, #3
 80082ac:	75fb      	strb	r3, [r7, #23]
 80082ae:	e02c      	b.n	800830a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80082b0:	2303      	movs	r3, #3
 80082b2:	75fb      	strb	r3, [r7, #23]
 80082b4:	e029      	b.n	800830a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d120      	bne.n	8008302 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	78db      	ldrb	r3, [r3, #3]
 80082c4:	f003 0303 	and.w	r3, r3, #3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d106      	bne.n	80082da <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	889b      	ldrh	r3, [r3, #4]
 80082d0:	2b08      	cmp	r3, #8
 80082d2:	d01a      	beq.n	800830a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082d4:	2303      	movs	r3, #3
 80082d6:	75fb      	strb	r3, [r7, #23]
 80082d8:	e017      	b.n	800830a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	78db      	ldrb	r3, [r3, #3]
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d10a      	bne.n	80082fc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	799b      	ldrb	r3, [r3, #6]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <USBH_ParseEPDesc+0x1ae>
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	889b      	ldrh	r3, [r3, #4]
 80082f2:	2b08      	cmp	r3, #8
 80082f4:	d909      	bls.n	800830a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082f6:	2303      	movs	r3, #3
 80082f8:	75fb      	strb	r3, [r7, #23]
 80082fa:	e006      	b.n	800830a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80082fc:	2303      	movs	r3, #3
 80082fe:	75fb      	strb	r3, [r7, #23]
 8008300:	e003      	b.n	800830a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008302:	2303      	movs	r3, #3
 8008304:	75fb      	strb	r3, [r7, #23]
 8008306:	e000      	b.n	800830a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008308:	bf00      	nop
  }

  return status;
 800830a:	7dfb      	ldrb	r3, [r7, #23]
}
 800830c:	4618      	mov	r0, r3
 800830e:	371c      	adds	r7, #28
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	4613      	mov	r3, r2
 8008324:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3301      	adds	r3, #1
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b03      	cmp	r3, #3
 800832e:	d120      	bne.n	8008372 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	1e9a      	subs	r2, r3, #2
 8008336:	88fb      	ldrh	r3, [r7, #6]
 8008338:	4293      	cmp	r3, r2
 800833a:	bf28      	it	cs
 800833c:	4613      	movcs	r3, r2
 800833e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3302      	adds	r3, #2
 8008344:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008346:	2300      	movs	r3, #0
 8008348:	82fb      	strh	r3, [r7, #22]
 800834a:	e00b      	b.n	8008364 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800834c:	8afb      	ldrh	r3, [r7, #22]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	4413      	add	r3, r2
 8008352:	781a      	ldrb	r2, [r3, #0]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	3301      	adds	r3, #1
 800835c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800835e:	8afb      	ldrh	r3, [r7, #22]
 8008360:	3302      	adds	r3, #2
 8008362:	82fb      	strh	r3, [r7, #22]
 8008364:	8afa      	ldrh	r2, [r7, #22]
 8008366:	8abb      	ldrh	r3, [r7, #20]
 8008368:	429a      	cmp	r2, r3
 800836a:	d3ef      	bcc.n	800834c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2200      	movs	r2, #0
 8008370:	701a      	strb	r2, [r3, #0]
  }
}
 8008372:	bf00      	nop
 8008374:	371c      	adds	r7, #28
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800837e:	b480      	push	{r7}
 8008380:	b085      	sub	sp, #20
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	7812      	ldrb	r2, [r2, #0]
 8008390:	4413      	add	r3, r2
 8008392:	b29a      	uxth	r2, r3
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4413      	add	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083a4:	68fb      	ldr	r3, [r7, #12]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b086      	sub	sp, #24
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	60f8      	str	r0, [r7, #12]
 80083ba:	60b9      	str	r1, [r7, #8]
 80083bc:	4613      	mov	r3, r2
 80083be:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80083c0:	2301      	movs	r3, #1
 80083c2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	789b      	ldrb	r3, [r3, #2]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d002      	beq.n	80083d2 <USBH_CtlReq+0x20>
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d01d      	beq.n	800840c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80083d0:	e043      	b.n	800845a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	88fa      	ldrh	r2, [r7, #6]
 80083dc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2201      	movs	r2, #1
 80083e2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2202      	movs	r2, #2
 80083e8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80083ea:	2301      	movs	r3, #1
 80083ec:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2203      	movs	r2, #3
 80083f2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008402:	2300      	movs	r3, #0
 8008404:	2200      	movs	r2, #0
 8008406:	f000 fd45 	bl	8008e94 <osMessageQueuePut>
      break;
 800840a:	e026      	b.n	800845a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 f829 	bl	8008464 <USBH_HandleControl>
 8008412:	4603      	mov	r3, r0
 8008414:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008416:	7dfb      	ldrb	r3, [r7, #23]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <USBH_CtlReq+0x70>
 800841c:	7dfb      	ldrb	r3, [r7, #23]
 800841e:	2b03      	cmp	r3, #3
 8008420:	d106      	bne.n	8008430 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2201      	movs	r2, #1
 8008426:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	761a      	strb	r2, [r3, #24]
 800842e:	e005      	b.n	800843c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008430:	7dfb      	ldrb	r3, [r7, #23]
 8008432:	2b02      	cmp	r3, #2
 8008434:	d102      	bne.n	800843c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2201      	movs	r2, #1
 800843a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2203      	movs	r2, #3
 8008440:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008450:	2300      	movs	r3, #0
 8008452:	2200      	movs	r2, #0
 8008454:	f000 fd1e 	bl	8008e94 <osMessageQueuePut>
      break;
 8008458:	bf00      	nop
  }
  return status;
 800845a:	7dfb      	ldrb	r3, [r7, #23]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af02      	add	r7, sp, #8
 800846a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800846c:	2301      	movs	r3, #1
 800846e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008470:	2300      	movs	r3, #0
 8008472:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	7e1b      	ldrb	r3, [r3, #24]
 8008478:	3b01      	subs	r3, #1
 800847a:	2b0a      	cmp	r3, #10
 800847c:	f200 8229 	bhi.w	80088d2 <USBH_HandleControl+0x46e>
 8008480:	a201      	add	r2, pc, #4	@ (adr r2, 8008488 <USBH_HandleControl+0x24>)
 8008482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008486:	bf00      	nop
 8008488:	080084b5 	.word	0x080084b5
 800848c:	080084cf 	.word	0x080084cf
 8008490:	08008571 	.word	0x08008571
 8008494:	08008597 	.word	0x08008597
 8008498:	08008623 	.word	0x08008623
 800849c:	0800864d 	.word	0x0800864d
 80084a0:	0800870f 	.word	0x0800870f
 80084a4:	08008731 	.word	0x08008731
 80084a8:	080087c3 	.word	0x080087c3
 80084ac:	080087e9 	.word	0x080087e9
 80084b0:	0800887b 	.word	0x0800887b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f103 0110 	add.w	r1, r3, #16
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	795b      	ldrb	r3, [r3, #5]
 80084be:	461a      	mov	r2, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fa17 	bl	80088f4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2202      	movs	r2, #2
 80084ca:	761a      	strb	r2, [r3, #24]
      break;
 80084cc:	e20c      	b.n	80088e8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	795b      	ldrb	r3, [r3, #5]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f003 fd33 	bl	800bf40 <USBH_LL_GetURBState>
 80084da:	4603      	mov	r3, r0
 80084dc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d12c      	bne.n	800853e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	7c1b      	ldrb	r3, [r3, #16]
 80084e8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80084ec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	8adb      	ldrh	r3, [r3, #22]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00a      	beq.n	800850c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80084f6:	7b7b      	ldrb	r3, [r7, #13]
 80084f8:	2b80      	cmp	r3, #128	@ 0x80
 80084fa:	d103      	bne.n	8008504 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2203      	movs	r2, #3
 8008500:	761a      	strb	r2, [r3, #24]
 8008502:	e00d      	b.n	8008520 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2205      	movs	r2, #5
 8008508:	761a      	strb	r2, [r3, #24]
 800850a:	e009      	b.n	8008520 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800850c:	7b7b      	ldrb	r3, [r7, #13]
 800850e:	2b80      	cmp	r3, #128	@ 0x80
 8008510:	d103      	bne.n	800851a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2209      	movs	r2, #9
 8008516:	761a      	strb	r2, [r3, #24]
 8008518:	e002      	b.n	8008520 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2207      	movs	r2, #7
 800851e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2203      	movs	r2, #3
 8008524:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008534:	2300      	movs	r3, #0
 8008536:	2200      	movs	r2, #0
 8008538:	f000 fcac 	bl	8008e94 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800853c:	e1cb      	b.n	80088d6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800853e:	7bbb      	ldrb	r3, [r7, #14]
 8008540:	2b04      	cmp	r3, #4
 8008542:	d003      	beq.n	800854c <USBH_HandleControl+0xe8>
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	2b02      	cmp	r3, #2
 8008548:	f040 81c5 	bne.w	80088d6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	220b      	movs	r2, #11
 8008550:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2203      	movs	r2, #3
 8008556:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008566:	2300      	movs	r3, #0
 8008568:	2200      	movs	r2, #0
 800856a:	f000 fc93 	bl	8008e94 <osMessageQueuePut>
      break;
 800856e:	e1b2      	b.n	80088d6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008576:	b29a      	uxth	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6899      	ldr	r1, [r3, #8]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	899a      	ldrh	r2, [r3, #12]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	791b      	ldrb	r3, [r3, #4]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f9f2 	bl	8008972 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2204      	movs	r2, #4
 8008592:	761a      	strb	r2, [r3, #24]
      break;
 8008594:	e1a8      	b.n	80088e8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	791b      	ldrb	r3, [r3, #4]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f003 fccf 	bl	800bf40 <USBH_LL_GetURBState>
 80085a2:	4603      	mov	r3, r0
 80085a4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d110      	bne.n	80085ce <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2209      	movs	r2, #9
 80085b0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2203      	movs	r2, #3
 80085b6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80085c6:	2300      	movs	r3, #0
 80085c8:	2200      	movs	r2, #0
 80085ca:	f000 fc63 	bl	8008e94 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	2b05      	cmp	r3, #5
 80085d2:	d110      	bne.n	80085f6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80085d4:	2303      	movs	r3, #3
 80085d6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2203      	movs	r2, #3
 80085dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80085ec:	2300      	movs	r3, #0
 80085ee:	2200      	movs	r2, #0
 80085f0:	f000 fc50 	bl	8008e94 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085f4:	e171      	b.n	80088da <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	2b04      	cmp	r3, #4
 80085fa:	f040 816e 	bne.w	80088da <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	220b      	movs	r2, #11
 8008602:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2203      	movs	r2, #3
 8008608:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008618:	2300      	movs	r3, #0
 800861a:	2200      	movs	r2, #0
 800861c:	f000 fc3a 	bl	8008e94 <osMessageQueuePut>
      break;
 8008620:	e15b      	b.n	80088da <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6899      	ldr	r1, [r3, #8]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	899a      	ldrh	r2, [r3, #12]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	795b      	ldrb	r3, [r3, #5]
 800862e:	2001      	movs	r0, #1
 8008630:	9000      	str	r0, [sp, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f978 	bl	8008928 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800863e:	b29a      	uxth	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2206      	movs	r2, #6
 8008648:	761a      	strb	r2, [r3, #24]
      break;
 800864a:	e14d      	b.n	80088e8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	795b      	ldrb	r3, [r3, #5]
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f003 fc74 	bl	800bf40 <USBH_LL_GetURBState>
 8008658:	4603      	mov	r3, r0
 800865a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d111      	bne.n	8008686 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2207      	movs	r2, #7
 8008666:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2203      	movs	r2, #3
 800866c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800867c:	2300      	movs	r3, #0
 800867e:	2200      	movs	r2, #0
 8008680:	f000 fc08 	bl	8008e94 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008684:	e12b      	b.n	80088de <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	2b05      	cmp	r3, #5
 800868a:	d113      	bne.n	80086b4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	220c      	movs	r2, #12
 8008690:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008692:	2303      	movs	r3, #3
 8008694:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2203      	movs	r2, #3
 800869a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80086aa:	2300      	movs	r3, #0
 80086ac:	2200      	movs	r2, #0
 80086ae:	f000 fbf1 	bl	8008e94 <osMessageQueuePut>
      break;
 80086b2:	e114      	b.n	80088de <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d111      	bne.n	80086de <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2205      	movs	r2, #5
 80086be:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2203      	movs	r2, #3
 80086c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80086d4:	2300      	movs	r3, #0
 80086d6:	2200      	movs	r2, #0
 80086d8:	f000 fbdc 	bl	8008e94 <osMessageQueuePut>
      break;
 80086dc:	e0ff      	b.n	80088de <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	f040 80fc 	bne.w	80088de <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	220b      	movs	r2, #11
 80086ea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80086ec:	2302      	movs	r3, #2
 80086ee:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2203      	movs	r2, #3
 80086f4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008704:	2300      	movs	r3, #0
 8008706:	2200      	movs	r2, #0
 8008708:	f000 fbc4 	bl	8008e94 <osMessageQueuePut>
      break;
 800870c:	e0e7      	b.n	80088de <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	791b      	ldrb	r3, [r3, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	2100      	movs	r1, #0
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f92b 	bl	8008972 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008722:	b29a      	uxth	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2208      	movs	r2, #8
 800872c:	761a      	strb	r2, [r3, #24]

      break;
 800872e:	e0db      	b.n	80088e8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	791b      	ldrb	r3, [r3, #4]
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f003 fc02 	bl	800bf40 <USBH_LL_GetURBState>
 800873c:	4603      	mov	r3, r0
 800873e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d113      	bne.n	800876e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	220d      	movs	r2, #13
 800874a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2203      	movs	r2, #3
 8008754:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008764:	2300      	movs	r3, #0
 8008766:	2200      	movs	r2, #0
 8008768:	f000 fb94 	bl	8008e94 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800876c:	e0b9      	b.n	80088e2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	2b04      	cmp	r3, #4
 8008772:	d111      	bne.n	8008798 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	220b      	movs	r2, #11
 8008778:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2203      	movs	r2, #3
 800877e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800878e:	2300      	movs	r3, #0
 8008790:	2200      	movs	r2, #0
 8008792:	f000 fb7f 	bl	8008e94 <osMessageQueuePut>
      break;
 8008796:	e0a4      	b.n	80088e2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	2b05      	cmp	r3, #5
 800879c:	f040 80a1 	bne.w	80088e2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80087a0:	2303      	movs	r3, #3
 80087a2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2203      	movs	r2, #3
 80087a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80087b8:	2300      	movs	r3, #0
 80087ba:	2200      	movs	r2, #0
 80087bc:	f000 fb6a 	bl	8008e94 <osMessageQueuePut>
      break;
 80087c0:	e08f      	b.n	80088e2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	795b      	ldrb	r3, [r3, #5]
 80087c6:	2201      	movs	r2, #1
 80087c8:	9200      	str	r2, [sp, #0]
 80087ca:	2200      	movs	r2, #0
 80087cc:	2100      	movs	r1, #0
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f8aa 	bl	8008928 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80087da:	b29a      	uxth	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	220a      	movs	r2, #10
 80087e4:	761a      	strb	r2, [r3, #24]
      break;
 80087e6:	e07f      	b.n	80088e8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	795b      	ldrb	r3, [r3, #5]
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f003 fba6 	bl	800bf40 <USBH_LL_GetURBState>
 80087f4:	4603      	mov	r3, r0
 80087f6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d113      	bne.n	8008826 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	220d      	movs	r2, #13
 8008806:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2203      	movs	r2, #3
 800880c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800881c:	2300      	movs	r3, #0
 800881e:	2200      	movs	r2, #0
 8008820:	f000 fb38 	bl	8008e94 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008824:	e05f      	b.n	80088e6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d111      	bne.n	8008850 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2209      	movs	r2, #9
 8008830:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2203      	movs	r2, #3
 8008836:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008846:	2300      	movs	r3, #0
 8008848:	2200      	movs	r2, #0
 800884a:	f000 fb23 	bl	8008e94 <osMessageQueuePut>
      break;
 800884e:	e04a      	b.n	80088e6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008850:	7bbb      	ldrb	r3, [r7, #14]
 8008852:	2b04      	cmp	r3, #4
 8008854:	d147      	bne.n	80088e6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	220b      	movs	r2, #11
 800885a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2203      	movs	r2, #3
 8008860:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008870:	2300      	movs	r3, #0
 8008872:	2200      	movs	r2, #0
 8008874:	f000 fb0e 	bl	8008e94 <osMessageQueuePut>
      break;
 8008878:	e035      	b.n	80088e6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	7e5b      	ldrb	r3, [r3, #25]
 800887e:	3301      	adds	r3, #1
 8008880:	b2da      	uxtb	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	765a      	strb	r2, [r3, #25]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	7e5b      	ldrb	r3, [r3, #25]
 800888a:	2b02      	cmp	r3, #2
 800888c:	d806      	bhi.n	800889c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800889a:	e025      	b.n	80088e8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80088a2:	2106      	movs	r1, #6
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	795b      	ldrb	r3, [r3, #5]
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f90d 	bl	8008ad4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	791b      	ldrb	r3, [r3, #4]
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f907 	bl	8008ad4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80088cc:	2302      	movs	r3, #2
 80088ce:	73fb      	strb	r3, [r7, #15]
      break;
 80088d0:	e00a      	b.n	80088e8 <USBH_HandleControl+0x484>

    default:
      break;
 80088d2:	bf00      	nop
 80088d4:	e008      	b.n	80088e8 <USBH_HandleControl+0x484>
      break;
 80088d6:	bf00      	nop
 80088d8:	e006      	b.n	80088e8 <USBH_HandleControl+0x484>
      break;
 80088da:	bf00      	nop
 80088dc:	e004      	b.n	80088e8 <USBH_HandleControl+0x484>
      break;
 80088de:	bf00      	nop
 80088e0:	e002      	b.n	80088e8 <USBH_HandleControl+0x484>
      break;
 80088e2:	bf00      	nop
 80088e4:	e000      	b.n	80088e8 <USBH_HandleControl+0x484>
      break;
 80088e6:	bf00      	nop
  }

  return status;
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop

080088f4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af04      	add	r7, sp, #16
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	4613      	mov	r3, r2
 8008900:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008902:	79f9      	ldrb	r1, [r7, #7]
 8008904:	2300      	movs	r3, #0
 8008906:	9303      	str	r3, [sp, #12]
 8008908:	2308      	movs	r3, #8
 800890a:	9302      	str	r3, [sp, #8]
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	9301      	str	r3, [sp, #4]
 8008910:	2300      	movs	r3, #0
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	2300      	movs	r3, #0
 8008916:	2200      	movs	r2, #0
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f003 fae0 	bl	800bede <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b088      	sub	sp, #32
 800892c:	af04      	add	r7, sp, #16
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	4611      	mov	r1, r2
 8008934:	461a      	mov	r2, r3
 8008936:	460b      	mov	r3, r1
 8008938:	80fb      	strh	r3, [r7, #6]
 800893a:	4613      	mov	r3, r2
 800893c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008944:	2b00      	cmp	r3, #0
 8008946:	d001      	beq.n	800894c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008948:	2300      	movs	r3, #0
 800894a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800894c:	7979      	ldrb	r1, [r7, #5]
 800894e:	7e3b      	ldrb	r3, [r7, #24]
 8008950:	9303      	str	r3, [sp, #12]
 8008952:	88fb      	ldrh	r3, [r7, #6]
 8008954:	9302      	str	r3, [sp, #8]
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	2301      	movs	r3, #1
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	2300      	movs	r3, #0
 8008960:	2200      	movs	r2, #0
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f003 fabb 	bl	800bede <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b088      	sub	sp, #32
 8008976:	af04      	add	r7, sp, #16
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	4611      	mov	r1, r2
 800897e:	461a      	mov	r2, r3
 8008980:	460b      	mov	r3, r1
 8008982:	80fb      	strh	r3, [r7, #6]
 8008984:	4613      	mov	r3, r2
 8008986:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008988:	7979      	ldrb	r1, [r7, #5]
 800898a:	2300      	movs	r3, #0
 800898c:	9303      	str	r3, [sp, #12]
 800898e:	88fb      	ldrh	r3, [r7, #6]
 8008990:	9302      	str	r3, [sp, #8]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	2301      	movs	r3, #1
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	2300      	movs	r3, #0
 800899c:	2201      	movs	r2, #1
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f003 fa9d 	bl	800bede <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80089a4:	2300      	movs	r3, #0

}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b088      	sub	sp, #32
 80089b2:	af04      	add	r7, sp, #16
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	4611      	mov	r1, r2
 80089ba:	461a      	mov	r2, r3
 80089bc:	460b      	mov	r3, r1
 80089be:	80fb      	strh	r3, [r7, #6]
 80089c0:	4613      	mov	r3, r2
 80089c2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089d2:	7979      	ldrb	r1, [r7, #5]
 80089d4:	7e3b      	ldrb	r3, [r7, #24]
 80089d6:	9303      	str	r3, [sp, #12]
 80089d8:	88fb      	ldrh	r3, [r7, #6]
 80089da:	9302      	str	r3, [sp, #8]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	2301      	movs	r3, #1
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	2302      	movs	r3, #2
 80089e6:	2200      	movs	r2, #0
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f003 fa78 	bl	800bede <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af04      	add	r7, sp, #16
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	4611      	mov	r1, r2
 8008a04:	461a      	mov	r2, r3
 8008a06:	460b      	mov	r3, r1
 8008a08:	80fb      	strh	r3, [r7, #6]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a0e:	7979      	ldrb	r1, [r7, #5]
 8008a10:	2300      	movs	r3, #0
 8008a12:	9303      	str	r3, [sp, #12]
 8008a14:	88fb      	ldrh	r3, [r7, #6]
 8008a16:	9302      	str	r3, [sp, #8]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	9301      	str	r3, [sp, #4]
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	2302      	movs	r3, #2
 8008a22:	2201      	movs	r2, #1
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f003 fa5a 	bl	800bede <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af04      	add	r7, sp, #16
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	4611      	mov	r1, r2
 8008a40:	461a      	mov	r2, r3
 8008a42:	4603      	mov	r3, r0
 8008a44:	70fb      	strb	r3, [r7, #3]
 8008a46:	460b      	mov	r3, r1
 8008a48:	70bb      	strb	r3, [r7, #2]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008a4e:	7878      	ldrb	r0, [r7, #1]
 8008a50:	78ba      	ldrb	r2, [r7, #2]
 8008a52:	78f9      	ldrb	r1, [r7, #3]
 8008a54:	8b3b      	ldrh	r3, [r7, #24]
 8008a56:	9302      	str	r3, [sp, #8]
 8008a58:	7d3b      	ldrb	r3, [r7, #20]
 8008a5a:	9301      	str	r3, [sp, #4]
 8008a5c:	7c3b      	ldrb	r3, [r7, #16]
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	4603      	mov	r3, r0
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f003 f9ed 	bl	800be42 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008a7e:	78fb      	ldrb	r3, [r7, #3]
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f003 fa0c 	bl	800bea0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f836 	bl	8008b10 <USBH_GetFreePipe>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008aa8:	89fb      	ldrh	r3, [r7, #14]
 8008aaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d00a      	beq.n	8008ac8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008ab2:	78fa      	ldrb	r2, [r7, #3]
 8008ab4:	89fb      	ldrh	r3, [r7, #14]
 8008ab6:	f003 030f 	and.w	r3, r3, #15
 8008aba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008abe:	6879      	ldr	r1, [r7, #4]
 8008ac0:	33e0      	adds	r3, #224	@ 0xe0
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	440b      	add	r3, r1
 8008ac6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008ac8:	89fb      	ldrh	r3, [r7, #14]
 8008aca:	b2db      	uxtb	r3, r3
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	2b0f      	cmp	r3, #15
 8008ae4:	d80d      	bhi.n	8008b02 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008ae6:	78fb      	ldrb	r3, [r7, #3]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	33e0      	adds	r3, #224	@ 0xe0
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	78fb      	ldrb	r3, [r7, #3]
 8008af4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	33e0      	adds	r3, #224	@ 0xe0
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	440b      	add	r3, r1
 8008b00:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73fb      	strb	r3, [r7, #15]
 8008b20:	e00f      	b.n	8008b42 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	33e0      	adds	r3, #224	@ 0xe0
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d102      	bne.n	8008b3c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	e007      	b.n	8008b4c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	73fb      	strb	r3, [r7, #15]
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	2b0f      	cmp	r3, #15
 8008b46:	d9ec      	bls.n	8008b22 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008b48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <__NVIC_SetPriority>:
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	6039      	str	r1, [r7, #0]
 8008b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	db0a      	blt.n	8008b82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	490c      	ldr	r1, [pc, #48]	@ (8008ba4 <__NVIC_SetPriority+0x4c>)
 8008b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b76:	0112      	lsls	r2, r2, #4
 8008b78:	b2d2      	uxtb	r2, r2
 8008b7a:	440b      	add	r3, r1
 8008b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008b80:	e00a      	b.n	8008b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	4908      	ldr	r1, [pc, #32]	@ (8008ba8 <__NVIC_SetPriority+0x50>)
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	f003 030f 	and.w	r3, r3, #15
 8008b8e:	3b04      	subs	r3, #4
 8008b90:	0112      	lsls	r2, r2, #4
 8008b92:	b2d2      	uxtb	r2, r2
 8008b94:	440b      	add	r3, r1
 8008b96:	761a      	strb	r2, [r3, #24]
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	e000e100 	.word	0xe000e100
 8008ba8:	e000ed00 	.word	0xe000ed00

08008bac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	f06f 0004 	mvn.w	r0, #4
 8008bb6:	f7ff ffcf 	bl	8008b58 <__NVIC_SetPriority>
#endif
}
 8008bba:	bf00      	nop
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bc6:	f3ef 8305 	mrs	r3, IPSR
 8008bca:	603b      	str	r3, [r7, #0]
  return(result);
 8008bcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008bd2:	f06f 0305 	mvn.w	r3, #5
 8008bd6:	607b      	str	r3, [r7, #4]
 8008bd8:	e00c      	b.n	8008bf4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008bda:	4b0a      	ldr	r3, [pc, #40]	@ (8008c04 <osKernelInitialize+0x44>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d105      	bne.n	8008bee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008be2:	4b08      	ldr	r3, [pc, #32]	@ (8008c04 <osKernelInitialize+0x44>)
 8008be4:	2201      	movs	r2, #1
 8008be6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	607b      	str	r3, [r7, #4]
 8008bec:	e002      	b.n	8008bf4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008bee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008bf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008bf4:	687b      	ldr	r3, [r7, #4]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	20000218 	.word	0x20000218

08008c08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c0e:	f3ef 8305 	mrs	r3, IPSR
 8008c12:	603b      	str	r3, [r7, #0]
  return(result);
 8008c14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008c1a:	f06f 0305 	mvn.w	r3, #5
 8008c1e:	607b      	str	r3, [r7, #4]
 8008c20:	e010      	b.n	8008c44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008c22:	4b0b      	ldr	r3, [pc, #44]	@ (8008c50 <osKernelStart+0x48>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d109      	bne.n	8008c3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008c2a:	f7ff ffbf 	bl	8008bac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008c2e:	4b08      	ldr	r3, [pc, #32]	@ (8008c50 <osKernelStart+0x48>)
 8008c30:	2202      	movs	r2, #2
 8008c32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008c34:	f001 fa68 	bl	800a108 <vTaskStartScheduler>
      stat = osOK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	607b      	str	r3, [r7, #4]
 8008c3c:	e002      	b.n	8008c44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008c3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c44:	687b      	ldr	r3, [r7, #4]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	20000218 	.word	0x20000218

08008c54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08e      	sub	sp, #56	@ 0x38
 8008c58:	af04      	add	r7, sp, #16
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008c60:	2300      	movs	r3, #0
 8008c62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c64:	f3ef 8305 	mrs	r3, IPSR
 8008c68:	617b      	str	r3, [r7, #20]
  return(result);
 8008c6a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d17e      	bne.n	8008d6e <osThreadNew+0x11a>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d07b      	beq.n	8008d6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008c76:	2380      	movs	r3, #128	@ 0x80
 8008c78:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008c7a:	2318      	movs	r3, #24
 8008c7c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008c82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d045      	beq.n	8008d1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <osThreadNew+0x48>
        name = attr->name;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d002      	beq.n	8008caa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d008      	beq.n	8008cc2 <osThreadNew+0x6e>
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	2b38      	cmp	r3, #56	@ 0x38
 8008cb4:	d805      	bhi.n	8008cc2 <osThreadNew+0x6e>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <osThreadNew+0x72>
        return (NULL);
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e054      	b.n	8008d70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	089b      	lsrs	r3, r3, #2
 8008cd4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00e      	beq.n	8008cfc <osThreadNew+0xa8>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	2b5b      	cmp	r3, #91	@ 0x5b
 8008ce4:	d90a      	bls.n	8008cfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d006      	beq.n	8008cfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <osThreadNew+0xa8>
        mem = 1;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	61bb      	str	r3, [r7, #24]
 8008cfa:	e010      	b.n	8008d1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10c      	bne.n	8008d1e <osThreadNew+0xca>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d108      	bne.n	8008d1e <osThreadNew+0xca>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d104      	bne.n	8008d1e <osThreadNew+0xca>
          mem = 0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	61bb      	str	r3, [r7, #24]
 8008d18:	e001      	b.n	8008d1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d110      	bne.n	8008d46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d2c:	9202      	str	r2, [sp, #8]
 8008d2e:	9301      	str	r3, [sp, #4]
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	6a3a      	ldr	r2, [r7, #32]
 8008d38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f001 f808 	bl	8009d50 <xTaskCreateStatic>
 8008d40:	4603      	mov	r3, r0
 8008d42:	613b      	str	r3, [r7, #16]
 8008d44:	e013      	b.n	8008d6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d110      	bne.n	8008d6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	f107 0310 	add.w	r3, r7, #16
 8008d54:	9301      	str	r3, [sp, #4]
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f001 f856 	bl	8009e10 <xTaskCreate>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d001      	beq.n	8008d6e <osThreadNew+0x11a>
            hTask = NULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008d6e:	693b      	ldr	r3, [r7, #16]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3728      	adds	r7, #40	@ 0x28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d80:	f3ef 8305 	mrs	r3, IPSR
 8008d84:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <osDelay+0x1c>
    stat = osErrorISR;
 8008d8c:	f06f 0305 	mvn.w	r3, #5
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	e007      	b.n	8008da4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 f97c 	bl	800a09c <vTaskDelay>
    }
  }

  return (stat);
 8008da4:	68fb      	ldr	r3, [r7, #12]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b08a      	sub	sp, #40	@ 0x28
 8008db2:	af02      	add	r7, sp, #8
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dbe:	f3ef 8305 	mrs	r3, IPSR
 8008dc2:	613b      	str	r3, [r7, #16]
  return(result);
 8008dc4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d15f      	bne.n	8008e8a <osMessageQueueNew+0xdc>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d05c      	beq.n	8008e8a <osMessageQueueNew+0xdc>
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d059      	beq.n	8008e8a <osMessageQueueNew+0xdc>
    mem = -1;
 8008dd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008dda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d029      	beq.n	8008e36 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d012      	beq.n	8008e10 <osMessageQueueNew+0x62>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	2b4f      	cmp	r3, #79	@ 0x4f
 8008df0:	d90e      	bls.n	8008e10 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00a      	beq.n	8008e10 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	695a      	ldr	r2, [r3, #20]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	68b9      	ldr	r1, [r7, #8]
 8008e02:	fb01 f303 	mul.w	r3, r1, r3
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d302      	bcc.n	8008e10 <osMessageQueueNew+0x62>
        mem = 1;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	61bb      	str	r3, [r7, #24]
 8008e0e:	e014      	b.n	8008e3a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d110      	bne.n	8008e3a <osMessageQueueNew+0x8c>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10c      	bne.n	8008e3a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d108      	bne.n	8008e3a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d104      	bne.n	8008e3a <osMessageQueueNew+0x8c>
          mem = 0;
 8008e30:	2300      	movs	r3, #0
 8008e32:	61bb      	str	r3, [r7, #24]
 8008e34:	e001      	b.n	8008e3a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d10b      	bne.n	8008e58 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	691a      	ldr	r2, [r3, #16]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	2100      	movs	r1, #0
 8008e4a:	9100      	str	r1, [sp, #0]
 8008e4c:	68b9      	ldr	r1, [r7, #8]
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 fa30 	bl	80092b4 <xQueueGenericCreateStatic>
 8008e54:	61f8      	str	r0, [r7, #28]
 8008e56:	e008      	b.n	8008e6a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d105      	bne.n	8008e6a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008e5e:	2200      	movs	r2, #0
 8008e60:	68b9      	ldr	r1, [r7, #8]
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 faa3 	bl	80093ae <xQueueGenericCreate>
 8008e68:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00c      	beq.n	8008e8a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <osMessageQueueNew+0xd0>
        name = attr->name;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	617b      	str	r3, [r7, #20]
 8008e7c:	e001      	b.n	8008e82 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008e82:	6979      	ldr	r1, [r7, #20]
 8008e84:	69f8      	ldr	r0, [r7, #28]
 8008e86:	f000 ff05 	bl	8009c94 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008e8a:	69fb      	ldr	r3, [r7, #28]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3720      	adds	r7, #32
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	603b      	str	r3, [r7, #0]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eac:	f3ef 8305 	mrs	r3, IPSR
 8008eb0:	617b      	str	r3, [r7, #20]
  return(result);
 8008eb2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d028      	beq.n	8008f0a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d005      	beq.n	8008eca <osMessageQueuePut+0x36>
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <osMessageQueuePut+0x36>
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008eca:	f06f 0303 	mvn.w	r3, #3
 8008ece:	61fb      	str	r3, [r7, #28]
 8008ed0:	e038      	b.n	8008f44 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008ed6:	f107 0210 	add.w	r2, r7, #16
 8008eda:	2300      	movs	r3, #0
 8008edc:	68b9      	ldr	r1, [r7, #8]
 8008ede:	69b8      	ldr	r0, [r7, #24]
 8008ee0:	f000 fbc6 	bl	8009670 <xQueueGenericSendFromISR>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d003      	beq.n	8008ef2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008eea:	f06f 0302 	mvn.w	r3, #2
 8008eee:	61fb      	str	r3, [r7, #28]
 8008ef0:	e028      	b.n	8008f44 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d025      	beq.n	8008f44 <osMessageQueuePut+0xb0>
 8008ef8:	4b15      	ldr	r3, [pc, #84]	@ (8008f50 <osMessageQueuePut+0xbc>)
 8008efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	e01c      	b.n	8008f44 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <osMessageQueuePut+0x82>
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d103      	bne.n	8008f1e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008f16:	f06f 0303 	mvn.w	r3, #3
 8008f1a:	61fb      	str	r3, [r7, #28]
 8008f1c:	e012      	b.n	8008f44 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008f1e:	2300      	movs	r3, #0
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	68b9      	ldr	r1, [r7, #8]
 8008f24:	69b8      	ldr	r0, [r7, #24]
 8008f26:	f000 faa1 	bl	800946c <xQueueGenericSend>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d009      	beq.n	8008f44 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008f36:	f06f 0301 	mvn.w	r3, #1
 8008f3a:	61fb      	str	r3, [r7, #28]
 8008f3c:	e002      	b.n	8008f44 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008f3e:	f06f 0302 	mvn.w	r3, #2
 8008f42:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008f44:	69fb      	ldr	r3, [r7, #28]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3720      	adds	r7, #32
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	e000ed04 	.word	0xe000ed04

08008f54 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b088      	sub	sp, #32
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
 8008f60:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f6a:	f3ef 8305 	mrs	r3, IPSR
 8008f6e:	617b      	str	r3, [r7, #20]
  return(result);
 8008f70:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d028      	beq.n	8008fc8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d005      	beq.n	8008f88 <osMessageQueueGet+0x34>
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <osMessageQueueGet+0x34>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d003      	beq.n	8008f90 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008f88:	f06f 0303 	mvn.w	r3, #3
 8008f8c:	61fb      	str	r3, [r7, #28]
 8008f8e:	e037      	b.n	8009000 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008f90:	2300      	movs	r3, #0
 8008f92:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008f94:	f107 0310 	add.w	r3, r7, #16
 8008f98:	461a      	mov	r2, r3
 8008f9a:	68b9      	ldr	r1, [r7, #8]
 8008f9c:	69b8      	ldr	r0, [r7, #24]
 8008f9e:	f000 fce7 	bl	8009970 <xQueueReceiveFromISR>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d003      	beq.n	8008fb0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008fa8:	f06f 0302 	mvn.w	r3, #2
 8008fac:	61fb      	str	r3, [r7, #28]
 8008fae:	e027      	b.n	8009000 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d024      	beq.n	8009000 <osMessageQueueGet+0xac>
 8008fb6:	4b15      	ldr	r3, [pc, #84]	@ (800900c <osMessageQueueGet+0xb8>)
 8008fb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	f3bf 8f6f 	isb	sy
 8008fc6:	e01b      	b.n	8009000 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d002      	beq.n	8008fd4 <osMessageQueueGet+0x80>
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d103      	bne.n	8008fdc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008fd4:	f06f 0303 	mvn.w	r3, #3
 8008fd8:	61fb      	str	r3, [r7, #28]
 8008fda:	e011      	b.n	8009000 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008fdc:	683a      	ldr	r2, [r7, #0]
 8008fde:	68b9      	ldr	r1, [r7, #8]
 8008fe0:	69b8      	ldr	r0, [r7, #24]
 8008fe2:	f000 fbe3 	bl	80097ac <xQueueReceive>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d009      	beq.n	8009000 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008ff2:	f06f 0301 	mvn.w	r3, #1
 8008ff6:	61fb      	str	r3, [r7, #28]
 8008ff8:	e002      	b.n	8009000 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008ffa:	f06f 0302 	mvn.w	r3, #2
 8008ffe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009000:	69fb      	ldr	r3, [r7, #28]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3720      	adds	r7, #32
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	e000ed04 	.word	0xe000ed04

08009010 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4a07      	ldr	r2, [pc, #28]	@ (800903c <vApplicationGetIdleTaskMemory+0x2c>)
 8009020:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	4a06      	ldr	r2, [pc, #24]	@ (8009040 <vApplicationGetIdleTaskMemory+0x30>)
 8009026:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2280      	movs	r2, #128	@ 0x80
 800902c:	601a      	str	r2, [r3, #0]
}
 800902e:	bf00      	nop
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	2000021c 	.word	0x2000021c
 8009040:	20000278 	.word	0x20000278

08009044 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4a07      	ldr	r2, [pc, #28]	@ (8009070 <vApplicationGetTimerTaskMemory+0x2c>)
 8009054:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	4a06      	ldr	r2, [pc, #24]	@ (8009074 <vApplicationGetTimerTaskMemory+0x30>)
 800905a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009062:	601a      	str	r2, [r3, #0]
}
 8009064:	bf00      	nop
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	20000478 	.word	0x20000478
 8009074:	200004d4 	.word	0x200004d4

08009078 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f103 0208 	add.w	r2, r3, #8
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009090:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f103 0208 	add.w	r2, r3, #8
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f103 0208 	add.w	r2, r3, #8
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090c6:	bf00      	nop
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090d2:	b480      	push	{r7}
 80090d4:	b085      	sub	sp, #20
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	683a      	ldr	r2, [r7, #0]
 80090f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	601a      	str	r2, [r3, #0]
}
 800910e:	bf00      	nop
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800911a:	b480      	push	{r7}
 800911c:	b085      	sub	sp, #20
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009130:	d103      	bne.n	800913a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	e00c      	b.n	8009154 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	3308      	adds	r3, #8
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	e002      	b.n	8009148 <vListInsert+0x2e>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	429a      	cmp	r2, r3
 8009152:	d2f6      	bcs.n	8009142 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	685a      	ldr	r2, [r3, #4]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	601a      	str	r2, [r3, #0]
}
 8009180:	bf00      	nop
 8009182:	3714      	adds	r7, #20
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	6892      	ldr	r2, [r2, #8]
 80091a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	6852      	ldr	r2, [r2, #4]
 80091ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d103      	bne.n	80091c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689a      	ldr	r2, [r3, #8]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	1e5a      	subs	r2, r3, #1
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3714      	adds	r7, #20
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10b      	bne.n	800920c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009206:	bf00      	nop
 8009208:	bf00      	nop
 800920a:	e7fd      	b.n	8009208 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800920c:	f002 f934 	bl	800b478 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009218:	68f9      	ldr	r1, [r7, #12]
 800921a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800921c:	fb01 f303 	mul.w	r3, r1, r3
 8009220:	441a      	add	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800923c:	3b01      	subs	r3, #1
 800923e:	68f9      	ldr	r1, [r7, #12]
 8009240:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009242:	fb01 f303 	mul.w	r3, r1, r3
 8009246:	441a      	add	r2, r3
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	22ff      	movs	r2, #255	@ 0xff
 8009250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	22ff      	movs	r2, #255	@ 0xff
 8009258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d114      	bne.n	800928c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d01a      	beq.n	80092a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3310      	adds	r3, #16
 800926e:	4618      	mov	r0, r3
 8009270:	f001 f9d8 	bl	800a624 <xTaskRemoveFromEventList>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d012      	beq.n	80092a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800927a:	4b0d      	ldr	r3, [pc, #52]	@ (80092b0 <xQueueGenericReset+0xd0>)
 800927c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009280:	601a      	str	r2, [r3, #0]
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	e009      	b.n	80092a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	3310      	adds	r3, #16
 8009290:	4618      	mov	r0, r3
 8009292:	f7ff fef1 	bl	8009078 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3324      	adds	r3, #36	@ 0x24
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff feec 	bl	8009078 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80092a0:	f002 f91c 	bl	800b4dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80092a4:	2301      	movs	r3, #1
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	e000ed04 	.word	0xe000ed04

080092b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b08e      	sub	sp, #56	@ 0x38
 80092b8:	af02      	add	r7, sp, #8
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10b      	bne.n	80092e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80092c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80092da:	bf00      	nop
 80092dc:	bf00      	nop
 80092de:	e7fd      	b.n	80092dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10b      	bne.n	80092fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80092e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80092f8:	bf00      	nop
 80092fa:	bf00      	nop
 80092fc:	e7fd      	b.n	80092fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <xQueueGenericCreateStatic+0x56>
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <xQueueGenericCreateStatic+0x5a>
 800930a:	2301      	movs	r3, #1
 800930c:	e000      	b.n	8009310 <xQueueGenericCreateStatic+0x5c>
 800930e:	2300      	movs	r3, #0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10b      	bne.n	800932c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	623b      	str	r3, [r7, #32]
}
 8009326:	bf00      	nop
 8009328:	bf00      	nop
 800932a:	e7fd      	b.n	8009328 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d102      	bne.n	8009338 <xQueueGenericCreateStatic+0x84>
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d101      	bne.n	800933c <xQueueGenericCreateStatic+0x88>
 8009338:	2301      	movs	r3, #1
 800933a:	e000      	b.n	800933e <xQueueGenericCreateStatic+0x8a>
 800933c:	2300      	movs	r3, #0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10b      	bne.n	800935a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	61fb      	str	r3, [r7, #28]
}
 8009354:	bf00      	nop
 8009356:	bf00      	nop
 8009358:	e7fd      	b.n	8009356 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800935a:	2350      	movs	r3, #80	@ 0x50
 800935c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b50      	cmp	r3, #80	@ 0x50
 8009362:	d00b      	beq.n	800937c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	61bb      	str	r3, [r7, #24]
}
 8009376:	bf00      	nop
 8009378:	bf00      	nop
 800937a:	e7fd      	b.n	8009378 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800937c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00d      	beq.n	80093a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009390:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	4613      	mov	r3, r2
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	68b9      	ldr	r1, [r7, #8]
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 f840 	bl	8009424 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80093a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3730      	adds	r7, #48	@ 0x30
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b08a      	sub	sp, #40	@ 0x28
 80093b2:	af02      	add	r7, sp, #8
 80093b4:	60f8      	str	r0, [r7, #12]
 80093b6:	60b9      	str	r1, [r7, #8]
 80093b8:	4613      	mov	r3, r2
 80093ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10b      	bne.n	80093da <xQueueGenericCreate+0x2c>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	613b      	str	r3, [r7, #16]
}
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop
 80093d8:	e7fd      	b.n	80093d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	fb02 f303 	mul.w	r3, r2, r3
 80093e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	3350      	adds	r3, #80	@ 0x50
 80093e8:	4618      	mov	r0, r3
 80093ea:	f002 f967 	bl	800b6bc <pvPortMalloc>
 80093ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d011      	beq.n	800941a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	3350      	adds	r3, #80	@ 0x50
 80093fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009408:	79fa      	ldrb	r2, [r7, #7]
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	4613      	mov	r3, r2
 8009410:	697a      	ldr	r2, [r7, #20]
 8009412:	68b9      	ldr	r1, [r7, #8]
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f000 f805 	bl	8009424 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800941a:	69bb      	ldr	r3, [r7, #24]
	}
 800941c:	4618      	mov	r0, r3
 800941e:	3720      	adds	r7, #32
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d103      	bne.n	8009440 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	69ba      	ldr	r2, [r7, #24]
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	e002      	b.n	8009446 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009452:	2101      	movs	r1, #1
 8009454:	69b8      	ldr	r0, [r7, #24]
 8009456:	f7ff fec3 	bl	80091e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	78fa      	ldrb	r2, [r7, #3]
 800945e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009462:	bf00      	nop
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
	...

0800946c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b08e      	sub	sp, #56	@ 0x38
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
 8009478:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800947a:	2300      	movs	r3, #0
 800947c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10b      	bne.n	80094a0 <xQueueGenericSend+0x34>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800949a:	bf00      	nop
 800949c:	bf00      	nop
 800949e:	e7fd      	b.n	800949c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d103      	bne.n	80094ae <xQueueGenericSend+0x42>
 80094a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d101      	bne.n	80094b2 <xQueueGenericSend+0x46>
 80094ae:	2301      	movs	r3, #1
 80094b0:	e000      	b.n	80094b4 <xQueueGenericSend+0x48>
 80094b2:	2300      	movs	r3, #0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10b      	bne.n	80094d0 <xQueueGenericSend+0x64>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80094ca:	bf00      	nop
 80094cc:	bf00      	nop
 80094ce:	e7fd      	b.n	80094cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d103      	bne.n	80094de <xQueueGenericSend+0x72>
 80094d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d101      	bne.n	80094e2 <xQueueGenericSend+0x76>
 80094de:	2301      	movs	r3, #1
 80094e0:	e000      	b.n	80094e4 <xQueueGenericSend+0x78>
 80094e2:	2300      	movs	r3, #0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10b      	bne.n	8009500 <xQueueGenericSend+0x94>
	__asm volatile
 80094e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	623b      	str	r3, [r7, #32]
}
 80094fa:	bf00      	nop
 80094fc:	bf00      	nop
 80094fe:	e7fd      	b.n	80094fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009500:	f001 fa50 	bl	800a9a4 <xTaskGetSchedulerState>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d102      	bne.n	8009510 <xQueueGenericSend+0xa4>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d101      	bne.n	8009514 <xQueueGenericSend+0xa8>
 8009510:	2301      	movs	r3, #1
 8009512:	e000      	b.n	8009516 <xQueueGenericSend+0xaa>
 8009514:	2300      	movs	r3, #0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10b      	bne.n	8009532 <xQueueGenericSend+0xc6>
	__asm volatile
 800951a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951e:	f383 8811 	msr	BASEPRI, r3
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	61fb      	str	r3, [r7, #28]
}
 800952c:	bf00      	nop
 800952e:	bf00      	nop
 8009530:	e7fd      	b.n	800952e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009532:	f001 ffa1 	bl	800b478 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800953a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800953e:	429a      	cmp	r2, r3
 8009540:	d302      	bcc.n	8009548 <xQueueGenericSend+0xdc>
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2b02      	cmp	r3, #2
 8009546:	d129      	bne.n	800959c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	68b9      	ldr	r1, [r7, #8]
 800954c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800954e:	f000 fa91 	bl	8009a74 <prvCopyDataToQueue>
 8009552:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009558:	2b00      	cmp	r3, #0
 800955a:	d010      	beq.n	800957e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800955c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955e:	3324      	adds	r3, #36	@ 0x24
 8009560:	4618      	mov	r0, r3
 8009562:	f001 f85f 	bl	800a624 <xTaskRemoveFromEventList>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d013      	beq.n	8009594 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800956c:	4b3f      	ldr	r3, [pc, #252]	@ (800966c <xQueueGenericSend+0x200>)
 800956e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	e00a      	b.n	8009594 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800957e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009580:	2b00      	cmp	r3, #0
 8009582:	d007      	beq.n	8009594 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009584:	4b39      	ldr	r3, [pc, #228]	@ (800966c <xQueueGenericSend+0x200>)
 8009586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800958a:	601a      	str	r2, [r3, #0]
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009594:	f001 ffa2 	bl	800b4dc <vPortExitCritical>
				return pdPASS;
 8009598:	2301      	movs	r3, #1
 800959a:	e063      	b.n	8009664 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d103      	bne.n	80095aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095a2:	f001 ff9b 	bl	800b4dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095a6:	2300      	movs	r3, #0
 80095a8:	e05c      	b.n	8009664 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d106      	bne.n	80095be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095b0:	f107 0314 	add.w	r3, r7, #20
 80095b4:	4618      	mov	r0, r3
 80095b6:	f001 f899 	bl	800a6ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095ba:	2301      	movs	r3, #1
 80095bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095be:	f001 ff8d 	bl	800b4dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095c2:	f000 fe09 	bl	800a1d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095c6:	f001 ff57 	bl	800b478 <vPortEnterCritical>
 80095ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095d0:	b25b      	sxtb	r3, r3
 80095d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095d6:	d103      	bne.n	80095e0 <xQueueGenericSend+0x174>
 80095d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095e6:	b25b      	sxtb	r3, r3
 80095e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095ec:	d103      	bne.n	80095f6 <xQueueGenericSend+0x18a>
 80095ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095f6:	f001 ff71 	bl	800b4dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095fa:	1d3a      	adds	r2, r7, #4
 80095fc:	f107 0314 	add.w	r3, r7, #20
 8009600:	4611      	mov	r1, r2
 8009602:	4618      	mov	r0, r3
 8009604:	f001 f888 	bl	800a718 <xTaskCheckForTimeOut>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d124      	bne.n	8009658 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800960e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009610:	f000 fb28 	bl	8009c64 <prvIsQueueFull>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d018      	beq.n	800964c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800961a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961c:	3310      	adds	r3, #16
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	4611      	mov	r1, r2
 8009622:	4618      	mov	r0, r3
 8009624:	f000 ffac 	bl	800a580 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800962a:	f000 fab3 	bl	8009b94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800962e:	f000 fde1 	bl	800a1f4 <xTaskResumeAll>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	f47f af7c 	bne.w	8009532 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800963a:	4b0c      	ldr	r3, [pc, #48]	@ (800966c <xQueueGenericSend+0x200>)
 800963c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	e772      	b.n	8009532 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800964c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800964e:	f000 faa1 	bl	8009b94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009652:	f000 fdcf 	bl	800a1f4 <xTaskResumeAll>
 8009656:	e76c      	b.n	8009532 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009658:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800965a:	f000 fa9b 	bl	8009b94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800965e:	f000 fdc9 	bl	800a1f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009662:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009664:	4618      	mov	r0, r3
 8009666:	3738      	adds	r7, #56	@ 0x38
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	e000ed04 	.word	0xe000ed04

08009670 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b090      	sub	sp, #64	@ 0x40
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10b      	bne.n	80096a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800969a:	bf00      	nop
 800969c:	bf00      	nop
 800969e:	e7fd      	b.n	800969c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d103      	bne.n	80096ae <xQueueGenericSendFromISR+0x3e>
 80096a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <xQueueGenericSendFromISR+0x42>
 80096ae:	2301      	movs	r3, #1
 80096b0:	e000      	b.n	80096b4 <xQueueGenericSendFromISR+0x44>
 80096b2:	2300      	movs	r3, #0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10b      	bne.n	80096d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80096b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80096ca:	bf00      	nop
 80096cc:	bf00      	nop
 80096ce:	e7fd      	b.n	80096cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d103      	bne.n	80096de <xQueueGenericSendFromISR+0x6e>
 80096d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d101      	bne.n	80096e2 <xQueueGenericSendFromISR+0x72>
 80096de:	2301      	movs	r3, #1
 80096e0:	e000      	b.n	80096e4 <xQueueGenericSendFromISR+0x74>
 80096e2:	2300      	movs	r3, #0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10b      	bne.n	8009700 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80096e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	623b      	str	r3, [r7, #32]
}
 80096fa:	bf00      	nop
 80096fc:	bf00      	nop
 80096fe:	e7fd      	b.n	80096fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009700:	f001 ff9a 	bl	800b638 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009704:	f3ef 8211 	mrs	r2, BASEPRI
 8009708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	61fa      	str	r2, [r7, #28]
 800971a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800971c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800971e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009722:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009728:	429a      	cmp	r2, r3
 800972a:	d302      	bcc.n	8009732 <xQueueGenericSendFromISR+0xc2>
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b02      	cmp	r3, #2
 8009730:	d12f      	bne.n	8009792 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009734:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009738:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800973c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009740:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	68b9      	ldr	r1, [r7, #8]
 8009746:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009748:	f000 f994 	bl	8009a74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800974c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009750:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009754:	d112      	bne.n	800977c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800975a:	2b00      	cmp	r3, #0
 800975c:	d016      	beq.n	800978c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800975e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009760:	3324      	adds	r3, #36	@ 0x24
 8009762:	4618      	mov	r0, r3
 8009764:	f000 ff5e 	bl	800a624 <xTaskRemoveFromEventList>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00e      	beq.n	800978c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00b      	beq.n	800978c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	e007      	b.n	800978c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800977c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009780:	3301      	adds	r3, #1
 8009782:	b2db      	uxtb	r3, r3
 8009784:	b25a      	sxtb	r2, r3
 8009786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800978c:	2301      	movs	r3, #1
 800978e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009790:	e001      	b.n	8009796 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009792:	2300      	movs	r3, #0
 8009794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009798:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3740      	adds	r7, #64	@ 0x40
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08c      	sub	sp, #48	@ 0x30
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097b8:	2300      	movs	r3, #0
 80097ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10b      	bne.n	80097de <xQueueReceive+0x32>
	__asm volatile
 80097c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ca:	f383 8811 	msr	BASEPRI, r3
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f3bf 8f4f 	dsb	sy
 80097d6:	623b      	str	r3, [r7, #32]
}
 80097d8:	bf00      	nop
 80097da:	bf00      	nop
 80097dc:	e7fd      	b.n	80097da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d103      	bne.n	80097ec <xQueueReceive+0x40>
 80097e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d101      	bne.n	80097f0 <xQueueReceive+0x44>
 80097ec:	2301      	movs	r3, #1
 80097ee:	e000      	b.n	80097f2 <xQueueReceive+0x46>
 80097f0:	2300      	movs	r3, #0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10b      	bne.n	800980e <xQueueReceive+0x62>
	__asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	61fb      	str	r3, [r7, #28]
}
 8009808:	bf00      	nop
 800980a:	bf00      	nop
 800980c:	e7fd      	b.n	800980a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800980e:	f001 f8c9 	bl	800a9a4 <xTaskGetSchedulerState>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d102      	bne.n	800981e <xQueueReceive+0x72>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <xQueueReceive+0x76>
 800981e:	2301      	movs	r3, #1
 8009820:	e000      	b.n	8009824 <xQueueReceive+0x78>
 8009822:	2300      	movs	r3, #0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10b      	bne.n	8009840 <xQueueReceive+0x94>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	61bb      	str	r3, [r7, #24]
}
 800983a:	bf00      	nop
 800983c:	bf00      	nop
 800983e:	e7fd      	b.n	800983c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009840:	f001 fe1a 	bl	800b478 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009848:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800984a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984c:	2b00      	cmp	r3, #0
 800984e:	d01f      	beq.n	8009890 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009850:	68b9      	ldr	r1, [r7, #8]
 8009852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009854:	f000 f978 	bl	8009b48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985a:	1e5a      	subs	r2, r3, #1
 800985c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00f      	beq.n	8009888 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986a:	3310      	adds	r3, #16
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fed9 	bl	800a624 <xTaskRemoveFromEventList>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d007      	beq.n	8009888 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009878:	4b3c      	ldr	r3, [pc, #240]	@ (800996c <xQueueReceive+0x1c0>)
 800987a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009888:	f001 fe28 	bl	800b4dc <vPortExitCritical>
				return pdPASS;
 800988c:	2301      	movs	r3, #1
 800988e:	e069      	b.n	8009964 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d103      	bne.n	800989e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009896:	f001 fe21 	bl	800b4dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800989a:	2300      	movs	r3, #0
 800989c:	e062      	b.n	8009964 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800989e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d106      	bne.n	80098b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098a4:	f107 0310 	add.w	r3, r7, #16
 80098a8:	4618      	mov	r0, r3
 80098aa:	f000 ff1f 	bl	800a6ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098ae:	2301      	movs	r3, #1
 80098b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098b2:	f001 fe13 	bl	800b4dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098b6:	f000 fc8f 	bl	800a1d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098ba:	f001 fddd 	bl	800b478 <vPortEnterCritical>
 80098be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098c4:	b25b      	sxtb	r3, r3
 80098c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098ca:	d103      	bne.n	80098d4 <xQueueReceive+0x128>
 80098cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098da:	b25b      	sxtb	r3, r3
 80098dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098e0:	d103      	bne.n	80098ea <xQueueReceive+0x13e>
 80098e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098ea:	f001 fdf7 	bl	800b4dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098ee:	1d3a      	adds	r2, r7, #4
 80098f0:	f107 0310 	add.w	r3, r7, #16
 80098f4:	4611      	mov	r1, r2
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 ff0e 	bl	800a718 <xTaskCheckForTimeOut>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d123      	bne.n	800994a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009904:	f000 f998 	bl	8009c38 <prvIsQueueEmpty>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d017      	beq.n	800993e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800990e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009910:	3324      	adds	r3, #36	@ 0x24
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	4611      	mov	r1, r2
 8009916:	4618      	mov	r0, r3
 8009918:	f000 fe32 	bl	800a580 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800991c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800991e:	f000 f939 	bl	8009b94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009922:	f000 fc67 	bl	800a1f4 <xTaskResumeAll>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d189      	bne.n	8009840 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800992c:	4b0f      	ldr	r3, [pc, #60]	@ (800996c <xQueueReceive+0x1c0>)
 800992e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	e780      	b.n	8009840 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800993e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009940:	f000 f928 	bl	8009b94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009944:	f000 fc56 	bl	800a1f4 <xTaskResumeAll>
 8009948:	e77a      	b.n	8009840 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800994a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800994c:	f000 f922 	bl	8009b94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009950:	f000 fc50 	bl	800a1f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009954:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009956:	f000 f96f 	bl	8009c38 <prvIsQueueEmpty>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	f43f af6f 	beq.w	8009840 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009962:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009964:	4618      	mov	r0, r3
 8009966:	3730      	adds	r7, #48	@ 0x30
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	e000ed04 	.word	0xe000ed04

08009970 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08e      	sub	sp, #56	@ 0x38
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10b      	bne.n	800999e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800998a:	f383 8811 	msr	BASEPRI, r3
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	623b      	str	r3, [r7, #32]
}
 8009998:	bf00      	nop
 800999a:	bf00      	nop
 800999c:	e7fd      	b.n	800999a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d103      	bne.n	80099ac <xQueueReceiveFromISR+0x3c>
 80099a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d101      	bne.n	80099b0 <xQueueReceiveFromISR+0x40>
 80099ac:	2301      	movs	r3, #1
 80099ae:	e000      	b.n	80099b2 <xQueueReceiveFromISR+0x42>
 80099b0:	2300      	movs	r3, #0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10b      	bne.n	80099ce <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80099b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
 80099c6:	61fb      	str	r3, [r7, #28]
}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	e7fd      	b.n	80099ca <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099ce:	f001 fe33 	bl	800b638 <vPortValidateInterruptPriority>
	__asm volatile
 80099d2:	f3ef 8211 	mrs	r2, BASEPRI
 80099d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	61ba      	str	r2, [r7, #24]
 80099e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80099ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d02f      	beq.n	8009a5a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80099fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a04:	68b9      	ldr	r1, [r7, #8]
 8009a06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a08:	f000 f89e 	bl	8009b48 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0e:	1e5a      	subs	r2, r3, #1
 8009a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a12:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009a14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009a18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a1c:	d112      	bne.n	8009a44 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d016      	beq.n	8009a54 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a28:	3310      	adds	r3, #16
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 fdfa 	bl	800a624 <xTaskRemoveFromEventList>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00e      	beq.n	8009a54 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00b      	beq.n	8009a54 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	e007      	b.n	8009a54 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a48:	3301      	adds	r3, #1
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	b25a      	sxtb	r2, r3
 8009a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009a54:	2301      	movs	r3, #1
 8009a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a58:	e001      	b.n	8009a5e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a60:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	f383 8811 	msr	BASEPRI, r3
}
 8009a68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3738      	adds	r7, #56	@ 0x38
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a80:	2300      	movs	r3, #0
 8009a82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10d      	bne.n	8009aae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d14d      	bne.n	8009b36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 ff9e 	bl	800a9e0 <xTaskPriorityDisinherit>
 8009aa4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	609a      	str	r2, [r3, #8]
 8009aac:	e043      	b.n	8009b36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d119      	bne.n	8009ae8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6858      	ldr	r0, [r3, #4]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009abc:	461a      	mov	r2, r3
 8009abe:	68b9      	ldr	r1, [r7, #8]
 8009ac0:	f002 fbf0 	bl	800c2a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009acc:	441a      	add	r2, r3
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d32b      	bcc.n	8009b36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	605a      	str	r2, [r3, #4]
 8009ae6:	e026      	b.n	8009b36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	68d8      	ldr	r0, [r3, #12]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009af0:	461a      	mov	r2, r3
 8009af2:	68b9      	ldr	r1, [r7, #8]
 8009af4:	f002 fbd6 	bl	800c2a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	68da      	ldr	r2, [r3, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b00:	425b      	negs	r3, r3
 8009b02:	441a      	add	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	68da      	ldr	r2, [r3, #12]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d207      	bcs.n	8009b24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	689a      	ldr	r2, [r3, #8]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b1c:	425b      	negs	r3, r3
 8009b1e:	441a      	add	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d105      	bne.n	8009b36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009b3e:	697b      	ldr	r3, [r7, #20]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3718      	adds	r7, #24
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d018      	beq.n	8009b8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	68da      	ldr	r2, [r3, #12]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b62:	441a      	add	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	68da      	ldr	r2, [r3, #12]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d303      	bcc.n	8009b7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	68d9      	ldr	r1, [r3, #12]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b84:	461a      	mov	r2, r3
 8009b86:	6838      	ldr	r0, [r7, #0]
 8009b88:	f002 fb8c 	bl	800c2a4 <memcpy>
	}
}
 8009b8c:	bf00      	nop
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b9c:	f001 fc6c 	bl	800b478 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ba6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ba8:	e011      	b.n	8009bce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d012      	beq.n	8009bd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3324      	adds	r3, #36	@ 0x24
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f000 fd34 	bl	800a624 <xTaskRemoveFromEventList>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009bc2:	f000 fe0d 	bl	800a7e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009bc6:	7bfb      	ldrb	r3, [r7, #15]
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	dce9      	bgt.n	8009baa <prvUnlockQueue+0x16>
 8009bd6:	e000      	b.n	8009bda <prvUnlockQueue+0x46>
					break;
 8009bd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	22ff      	movs	r2, #255	@ 0xff
 8009bde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009be2:	f001 fc7b 	bl	800b4dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009be6:	f001 fc47 	bl	800b478 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009bf0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bf2:	e011      	b.n	8009c18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d012      	beq.n	8009c22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	3310      	adds	r3, #16
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 fd0f 	bl	800a624 <xTaskRemoveFromEventList>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d001      	beq.n	8009c10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c0c:	f000 fde8 	bl	800a7e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c10:	7bbb      	ldrb	r3, [r7, #14]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	dce9      	bgt.n	8009bf4 <prvUnlockQueue+0x60>
 8009c20:	e000      	b.n	8009c24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	22ff      	movs	r2, #255	@ 0xff
 8009c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009c2c:	f001 fc56 	bl	800b4dc <vPortExitCritical>
}
 8009c30:	bf00      	nop
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c40:	f001 fc1a 	bl	800b478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d102      	bne.n	8009c52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	e001      	b.n	8009c56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c52:	2300      	movs	r3, #0
 8009c54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c56:	f001 fc41 	bl	800b4dc <vPortExitCritical>

	return xReturn;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c6c:	f001 fc04 	bl	800b478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d102      	bne.n	8009c82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	e001      	b.n	8009c86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c82:	2300      	movs	r3, #0
 8009c84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c86:	f001 fc29 	bl	800b4dc <vPortExitCritical>

	return xReturn;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60fb      	str	r3, [r7, #12]
 8009ca2:	e014      	b.n	8009cce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ca4:	4a0f      	ldr	r2, [pc, #60]	@ (8009ce4 <vQueueAddToRegistry+0x50>)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10b      	bne.n	8009cc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009cb0:	490c      	ldr	r1, [pc, #48]	@ (8009ce4 <vQueueAddToRegistry+0x50>)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009cba:	4a0a      	ldr	r2, [pc, #40]	@ (8009ce4 <vQueueAddToRegistry+0x50>)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	00db      	lsls	r3, r3, #3
 8009cc0:	4413      	add	r3, r2
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009cc6:	e006      	b.n	8009cd6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	60fb      	str	r3, [r7, #12]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b07      	cmp	r3, #7
 8009cd2:	d9e7      	bls.n	8009ca4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	200008d4 	.word	0x200008d4

08009ce8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009cf8:	f001 fbbe 	bl	800b478 <vPortEnterCritical>
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d02:	b25b      	sxtb	r3, r3
 8009d04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d08:	d103      	bne.n	8009d12 <vQueueWaitForMessageRestricted+0x2a>
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d18:	b25b      	sxtb	r3, r3
 8009d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d1e:	d103      	bne.n	8009d28 <vQueueWaitForMessageRestricted+0x40>
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d28:	f001 fbd8 	bl	800b4dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d106      	bne.n	8009d42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	3324      	adds	r3, #36	@ 0x24
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	68b9      	ldr	r1, [r7, #8]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f000 fc45 	bl	800a5cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d42:	6978      	ldr	r0, [r7, #20]
 8009d44:	f7ff ff26 	bl	8009b94 <prvUnlockQueue>
	}
 8009d48:	bf00      	nop
 8009d4a:	3718      	adds	r7, #24
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b08e      	sub	sp, #56	@ 0x38
 8009d54:	af04      	add	r7, sp, #16
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
 8009d5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10b      	bne.n	8009d7c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	623b      	str	r3, [r7, #32]
}
 8009d76:	bf00      	nop
 8009d78:	bf00      	nop
 8009d7a:	e7fd      	b.n	8009d78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10b      	bne.n	8009d9a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	61fb      	str	r3, [r7, #28]
}
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop
 8009d98:	e7fd      	b.n	8009d96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d9a:	235c      	movs	r3, #92	@ 0x5c
 8009d9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	2b5c      	cmp	r3, #92	@ 0x5c
 8009da2:	d00b      	beq.n	8009dbc <xTaskCreateStatic+0x6c>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	61bb      	str	r3, [r7, #24]
}
 8009db6:	bf00      	nop
 8009db8:	bf00      	nop
 8009dba:	e7fd      	b.n	8009db8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009dbc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d01e      	beq.n	8009e02 <xTaskCreateStatic+0xb2>
 8009dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d01b      	beq.n	8009e02 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dcc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009dd2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009ddc:	2300      	movs	r3, #0
 8009dde:	9303      	str	r3, [sp, #12]
 8009de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de2:	9302      	str	r3, [sp, #8]
 8009de4:	f107 0314 	add.w	r3, r7, #20
 8009de8:	9301      	str	r3, [sp, #4]
 8009dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	68b9      	ldr	r1, [r7, #8]
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f000 f850 	bl	8009e9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dfa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009dfc:	f000 f8de 	bl	8009fbc <prvAddNewTaskToReadyList>
 8009e00:	e001      	b.n	8009e06 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009e02:	2300      	movs	r3, #0
 8009e04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e06:	697b      	ldr	r3, [r7, #20]
	}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3728      	adds	r7, #40	@ 0x28
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b08c      	sub	sp, #48	@ 0x30
 8009e14:	af04      	add	r7, sp, #16
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	603b      	str	r3, [r7, #0]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e20:	88fb      	ldrh	r3, [r7, #6]
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4618      	mov	r0, r3
 8009e26:	f001 fc49 	bl	800b6bc <pvPortMalloc>
 8009e2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00e      	beq.n	8009e50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e32:	205c      	movs	r0, #92	@ 0x5c
 8009e34:	f001 fc42 	bl	800b6bc <pvPortMalloc>
 8009e38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d003      	beq.n	8009e48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	697a      	ldr	r2, [r7, #20]
 8009e44:	631a      	str	r2, [r3, #48]	@ 0x30
 8009e46:	e005      	b.n	8009e54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e48:	6978      	ldr	r0, [r7, #20]
 8009e4a:	f001 fd05 	bl	800b858 <vPortFree>
 8009e4e:	e001      	b.n	8009e54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e50:	2300      	movs	r3, #0
 8009e52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d017      	beq.n	8009e8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e62:	88fa      	ldrh	r2, [r7, #6]
 8009e64:	2300      	movs	r3, #0
 8009e66:	9303      	str	r3, [sp, #12]
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	9302      	str	r3, [sp, #8]
 8009e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e6e:	9301      	str	r3, [sp, #4]
 8009e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	68b9      	ldr	r1, [r7, #8]
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f000 f80e 	bl	8009e9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e7e:	69f8      	ldr	r0, [r7, #28]
 8009e80:	f000 f89c 	bl	8009fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e84:	2301      	movs	r3, #1
 8009e86:	61bb      	str	r3, [r7, #24]
 8009e88:	e002      	b.n	8009e90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e90:	69bb      	ldr	r3, [r7, #24]
	}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3720      	adds	r7, #32
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b088      	sub	sp, #32
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	60f8      	str	r0, [r7, #12]
 8009ea2:	60b9      	str	r1, [r7, #8]
 8009ea4:	607a      	str	r2, [r7, #4]
 8009ea6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eaa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	21a5      	movs	r1, #165	@ 0xa5
 8009eb4:	f002 f9b2 	bl	800c21c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	f023 0307 	bic.w	r3, r3, #7
 8009ed0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	f003 0307 	and.w	r3, r3, #7
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00b      	beq.n	8009ef4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	617b      	str	r3, [r7, #20]
}
 8009eee:	bf00      	nop
 8009ef0:	bf00      	nop
 8009ef2:	e7fd      	b.n	8009ef0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d01f      	beq.n	8009f3a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009efa:	2300      	movs	r3, #0
 8009efc:	61fb      	str	r3, [r7, #28]
 8009efe:	e012      	b.n	8009f26 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	4413      	add	r3, r2
 8009f06:	7819      	ldrb	r1, [r3, #0]
 8009f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	3334      	adds	r3, #52	@ 0x34
 8009f10:	460a      	mov	r2, r1
 8009f12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	4413      	add	r3, r2
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d006      	beq.n	8009f2e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	3301      	adds	r3, #1
 8009f24:	61fb      	str	r3, [r7, #28]
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	2b0f      	cmp	r3, #15
 8009f2a:	d9e9      	bls.n	8009f00 <prvInitialiseNewTask+0x66>
 8009f2c:	e000      	b.n	8009f30 <prvInitialiseNewTask+0x96>
			{
				break;
 8009f2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009f38:	e003      	b.n	8009f42 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f44:	2b37      	cmp	r3, #55	@ 0x37
 8009f46:	d901      	bls.n	8009f4c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f48:	2337      	movs	r3, #55	@ 0x37
 8009f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f50:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f56:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f60:	3304      	adds	r3, #4
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7ff f8a8 	bl	80090b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6a:	3318      	adds	r3, #24
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7ff f8a3 	bl	80090b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f86:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	68f9      	ldr	r1, [r7, #12]
 8009f9a:	69b8      	ldr	r0, [r7, #24]
 8009f9c:	f001 f93e 	bl	800b21c <pxPortInitialiseStack>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fb2:	bf00      	nop
 8009fb4:	3720      	adds	r7, #32
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009fc4:	f001 fa58 	bl	800b478 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009fc8:	4b2d      	ldr	r3, [pc, #180]	@ (800a080 <prvAddNewTaskToReadyList+0xc4>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	4a2c      	ldr	r2, [pc, #176]	@ (800a080 <prvAddNewTaskToReadyList+0xc4>)
 8009fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009fd2:	4b2c      	ldr	r3, [pc, #176]	@ (800a084 <prvAddNewTaskToReadyList+0xc8>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d109      	bne.n	8009fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009fda:	4a2a      	ldr	r2, [pc, #168]	@ (800a084 <prvAddNewTaskToReadyList+0xc8>)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009fe0:	4b27      	ldr	r3, [pc, #156]	@ (800a080 <prvAddNewTaskToReadyList+0xc4>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d110      	bne.n	800a00a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009fe8:	f000 fc1e 	bl	800a828 <prvInitialiseTaskLists>
 8009fec:	e00d      	b.n	800a00a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009fee:	4b26      	ldr	r3, [pc, #152]	@ (800a088 <prvAddNewTaskToReadyList+0xcc>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d109      	bne.n	800a00a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ff6:	4b23      	ldr	r3, [pc, #140]	@ (800a084 <prvAddNewTaskToReadyList+0xc8>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a000:	429a      	cmp	r2, r3
 800a002:	d802      	bhi.n	800a00a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a004:	4a1f      	ldr	r2, [pc, #124]	@ (800a084 <prvAddNewTaskToReadyList+0xc8>)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a00a:	4b20      	ldr	r3, [pc, #128]	@ (800a08c <prvAddNewTaskToReadyList+0xd0>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	3301      	adds	r3, #1
 800a010:	4a1e      	ldr	r2, [pc, #120]	@ (800a08c <prvAddNewTaskToReadyList+0xd0>)
 800a012:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a014:	4b1d      	ldr	r3, [pc, #116]	@ (800a08c <prvAddNewTaskToReadyList+0xd0>)
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a020:	4b1b      	ldr	r3, [pc, #108]	@ (800a090 <prvAddNewTaskToReadyList+0xd4>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	429a      	cmp	r2, r3
 800a026:	d903      	bls.n	800a030 <prvAddNewTaskToReadyList+0x74>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a02c:	4a18      	ldr	r2, [pc, #96]	@ (800a090 <prvAddNewTaskToReadyList+0xd4>)
 800a02e:	6013      	str	r3, [r2, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a034:	4613      	mov	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4a15      	ldr	r2, [pc, #84]	@ (800a094 <prvAddNewTaskToReadyList+0xd8>)
 800a03e:	441a      	add	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	3304      	adds	r3, #4
 800a044:	4619      	mov	r1, r3
 800a046:	4610      	mov	r0, r2
 800a048:	f7ff f843 	bl	80090d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a04c:	f001 fa46 	bl	800b4dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a050:	4b0d      	ldr	r3, [pc, #52]	@ (800a088 <prvAddNewTaskToReadyList+0xcc>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00e      	beq.n	800a076 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a058:	4b0a      	ldr	r3, [pc, #40]	@ (800a084 <prvAddNewTaskToReadyList+0xc8>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a062:	429a      	cmp	r2, r3
 800a064:	d207      	bcs.n	800a076 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a066:	4b0c      	ldr	r3, [pc, #48]	@ (800a098 <prvAddNewTaskToReadyList+0xdc>)
 800a068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a076:	bf00      	nop
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20000de8 	.word	0x20000de8
 800a084:	20000914 	.word	0x20000914
 800a088:	20000df4 	.word	0x20000df4
 800a08c:	20000e04 	.word	0x20000e04
 800a090:	20000df0 	.word	0x20000df0
 800a094:	20000918 	.word	0x20000918
 800a098:	e000ed04 	.word	0xe000ed04

0800a09c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d018      	beq.n	800a0e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a0ae:	4b14      	ldr	r3, [pc, #80]	@ (800a100 <vTaskDelay+0x64>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00b      	beq.n	800a0ce <vTaskDelay+0x32>
	__asm volatile
 800a0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	60bb      	str	r3, [r7, #8]
}
 800a0c8:	bf00      	nop
 800a0ca:	bf00      	nop
 800a0cc:	e7fd      	b.n	800a0ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a0ce:	f000 f883 	bl	800a1d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fcf3 	bl	800aac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a0da:	f000 f88b 	bl	800a1f4 <xTaskResumeAll>
 800a0de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d107      	bne.n	800a0f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a0e6:	4b07      	ldr	r3, [pc, #28]	@ (800a104 <vTaskDelay+0x68>)
 800a0e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0f6:	bf00      	nop
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	20000e10 	.word	0x20000e10
 800a104:	e000ed04 	.word	0xe000ed04

0800a108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08a      	sub	sp, #40	@ 0x28
 800a10c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a10e:	2300      	movs	r3, #0
 800a110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a112:	2300      	movs	r3, #0
 800a114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a116:	463a      	mov	r2, r7
 800a118:	1d39      	adds	r1, r7, #4
 800a11a:	f107 0308 	add.w	r3, r7, #8
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe ff76 	bl	8009010 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	9202      	str	r2, [sp, #8]
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	2300      	movs	r3, #0
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	2300      	movs	r3, #0
 800a134:	460a      	mov	r2, r1
 800a136:	4922      	ldr	r1, [pc, #136]	@ (800a1c0 <vTaskStartScheduler+0xb8>)
 800a138:	4822      	ldr	r0, [pc, #136]	@ (800a1c4 <vTaskStartScheduler+0xbc>)
 800a13a:	f7ff fe09 	bl	8009d50 <xTaskCreateStatic>
 800a13e:	4603      	mov	r3, r0
 800a140:	4a21      	ldr	r2, [pc, #132]	@ (800a1c8 <vTaskStartScheduler+0xc0>)
 800a142:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a144:	4b20      	ldr	r3, [pc, #128]	@ (800a1c8 <vTaskStartScheduler+0xc0>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d002      	beq.n	800a152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a14c:	2301      	movs	r3, #1
 800a14e:	617b      	str	r3, [r7, #20]
 800a150:	e001      	b.n	800a156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a152:	2300      	movs	r3, #0
 800a154:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d102      	bne.n	800a162 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a15c:	f000 fd04 	bl	800ab68 <xTimerCreateTimerTask>
 800a160:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d116      	bne.n	800a196 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16c:	f383 8811 	msr	BASEPRI, r3
 800a170:	f3bf 8f6f 	isb	sy
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	613b      	str	r3, [r7, #16]
}
 800a17a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a17c:	4b13      	ldr	r3, [pc, #76]	@ (800a1cc <vTaskStartScheduler+0xc4>)
 800a17e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a182:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a184:	4b12      	ldr	r3, [pc, #72]	@ (800a1d0 <vTaskStartScheduler+0xc8>)
 800a186:	2201      	movs	r2, #1
 800a188:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a18a:	4b12      	ldr	r3, [pc, #72]	@ (800a1d4 <vTaskStartScheduler+0xcc>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a190:	f001 f8ce 	bl	800b330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a194:	e00f      	b.n	800a1b6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a19c:	d10b      	bne.n	800a1b6 <vTaskStartScheduler+0xae>
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	60fb      	str	r3, [r7, #12]
}
 800a1b0:	bf00      	nop
 800a1b2:	bf00      	nop
 800a1b4:	e7fd      	b.n	800a1b2 <vTaskStartScheduler+0xaa>
}
 800a1b6:	bf00      	nop
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	0800c3b8 	.word	0x0800c3b8
 800a1c4:	0800a7f9 	.word	0x0800a7f9
 800a1c8:	20000e0c 	.word	0x20000e0c
 800a1cc:	20000e08 	.word	0x20000e08
 800a1d0:	20000df4 	.word	0x20000df4
 800a1d4:	20000dec 	.word	0x20000dec

0800a1d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a1d8:	b480      	push	{r7}
 800a1da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a1dc:	4b04      	ldr	r3, [pc, #16]	@ (800a1f0 <vTaskSuspendAll+0x18>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	4a03      	ldr	r2, [pc, #12]	@ (800a1f0 <vTaskSuspendAll+0x18>)
 800a1e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a1e6:	bf00      	nop
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr
 800a1f0:	20000e10 	.word	0x20000e10

0800a1f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a1fe:	2300      	movs	r3, #0
 800a200:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a202:	4b42      	ldr	r3, [pc, #264]	@ (800a30c <xTaskResumeAll+0x118>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10b      	bne.n	800a222 <xTaskResumeAll+0x2e>
	__asm volatile
 800a20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	603b      	str	r3, [r7, #0]
}
 800a21c:	bf00      	nop
 800a21e:	bf00      	nop
 800a220:	e7fd      	b.n	800a21e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a222:	f001 f929 	bl	800b478 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a226:	4b39      	ldr	r3, [pc, #228]	@ (800a30c <xTaskResumeAll+0x118>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	4a37      	ldr	r2, [pc, #220]	@ (800a30c <xTaskResumeAll+0x118>)
 800a22e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a230:	4b36      	ldr	r3, [pc, #216]	@ (800a30c <xTaskResumeAll+0x118>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d162      	bne.n	800a2fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a238:	4b35      	ldr	r3, [pc, #212]	@ (800a310 <xTaskResumeAll+0x11c>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d05e      	beq.n	800a2fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a240:	e02f      	b.n	800a2a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a242:	4b34      	ldr	r3, [pc, #208]	@ (800a314 <xTaskResumeAll+0x120>)
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3318      	adds	r3, #24
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fe ff9c 	bl	800918c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	3304      	adds	r3, #4
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fe ff97 	bl	800918c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a262:	4b2d      	ldr	r3, [pc, #180]	@ (800a318 <xTaskResumeAll+0x124>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	429a      	cmp	r2, r3
 800a268:	d903      	bls.n	800a272 <xTaskResumeAll+0x7e>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a26e:	4a2a      	ldr	r2, [pc, #168]	@ (800a318 <xTaskResumeAll+0x124>)
 800a270:	6013      	str	r3, [r2, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a276:	4613      	mov	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4a27      	ldr	r2, [pc, #156]	@ (800a31c <xTaskResumeAll+0x128>)
 800a280:	441a      	add	r2, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	3304      	adds	r3, #4
 800a286:	4619      	mov	r1, r3
 800a288:	4610      	mov	r0, r2
 800a28a:	f7fe ff22 	bl	80090d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a292:	4b23      	ldr	r3, [pc, #140]	@ (800a320 <xTaskResumeAll+0x12c>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a298:	429a      	cmp	r2, r3
 800a29a:	d302      	bcc.n	800a2a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a29c:	4b21      	ldr	r3, [pc, #132]	@ (800a324 <xTaskResumeAll+0x130>)
 800a29e:	2201      	movs	r2, #1
 800a2a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2a2:	4b1c      	ldr	r3, [pc, #112]	@ (800a314 <xTaskResumeAll+0x120>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1cb      	bne.n	800a242 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d001      	beq.n	800a2b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a2b0:	f000 fb58 	bl	800a964 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a2b4:	4b1c      	ldr	r3, [pc, #112]	@ (800a328 <xTaskResumeAll+0x134>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d010      	beq.n	800a2e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a2c0:	f000 f846 	bl	800a350 <xTaskIncrementTick>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a2ca:	4b16      	ldr	r3, [pc, #88]	@ (800a324 <xTaskResumeAll+0x130>)
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1f1      	bne.n	800a2c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a2dc:	4b12      	ldr	r3, [pc, #72]	@ (800a328 <xTaskResumeAll+0x134>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a2e2:	4b10      	ldr	r3, [pc, #64]	@ (800a324 <xTaskResumeAll+0x130>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d009      	beq.n	800a2fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a2ee:	4b0f      	ldr	r3, [pc, #60]	@ (800a32c <xTaskResumeAll+0x138>)
 800a2f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	f3bf 8f4f 	dsb	sy
 800a2fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2fe:	f001 f8ed 	bl	800b4dc <vPortExitCritical>

	return xAlreadyYielded;
 800a302:	68bb      	ldr	r3, [r7, #8]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	20000e10 	.word	0x20000e10
 800a310:	20000de8 	.word	0x20000de8
 800a314:	20000da8 	.word	0x20000da8
 800a318:	20000df0 	.word	0x20000df0
 800a31c:	20000918 	.word	0x20000918
 800a320:	20000914 	.word	0x20000914
 800a324:	20000dfc 	.word	0x20000dfc
 800a328:	20000df8 	.word	0x20000df8
 800a32c:	e000ed04 	.word	0xe000ed04

0800a330 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a336:	4b05      	ldr	r3, [pc, #20]	@ (800a34c <xTaskGetTickCount+0x1c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a33c:	687b      	ldr	r3, [r7, #4]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	20000dec 	.word	0x20000dec

0800a350 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a356:	2300      	movs	r3, #0
 800a358:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a35a:	4b4f      	ldr	r3, [pc, #316]	@ (800a498 <xTaskIncrementTick+0x148>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f040 8090 	bne.w	800a484 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a364:	4b4d      	ldr	r3, [pc, #308]	@ (800a49c <xTaskIncrementTick+0x14c>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3301      	adds	r3, #1
 800a36a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a36c:	4a4b      	ldr	r2, [pc, #300]	@ (800a49c <xTaskIncrementTick+0x14c>)
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d121      	bne.n	800a3bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a378:	4b49      	ldr	r3, [pc, #292]	@ (800a4a0 <xTaskIncrementTick+0x150>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00b      	beq.n	800a39a <xTaskIncrementTick+0x4a>
	__asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	603b      	str	r3, [r7, #0]
}
 800a394:	bf00      	nop
 800a396:	bf00      	nop
 800a398:	e7fd      	b.n	800a396 <xTaskIncrementTick+0x46>
 800a39a:	4b41      	ldr	r3, [pc, #260]	@ (800a4a0 <xTaskIncrementTick+0x150>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	4b40      	ldr	r3, [pc, #256]	@ (800a4a4 <xTaskIncrementTick+0x154>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a3e      	ldr	r2, [pc, #248]	@ (800a4a0 <xTaskIncrementTick+0x150>)
 800a3a6:	6013      	str	r3, [r2, #0]
 800a3a8:	4a3e      	ldr	r2, [pc, #248]	@ (800a4a4 <xTaskIncrementTick+0x154>)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6013      	str	r3, [r2, #0]
 800a3ae:	4b3e      	ldr	r3, [pc, #248]	@ (800a4a8 <xTaskIncrementTick+0x158>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	4a3c      	ldr	r2, [pc, #240]	@ (800a4a8 <xTaskIncrementTick+0x158>)
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	f000 fad4 	bl	800a964 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a3bc:	4b3b      	ldr	r3, [pc, #236]	@ (800a4ac <xTaskIncrementTick+0x15c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d349      	bcc.n	800a45a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3c6:	4b36      	ldr	r3, [pc, #216]	@ (800a4a0 <xTaskIncrementTick+0x150>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d104      	bne.n	800a3da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3d0:	4b36      	ldr	r3, [pc, #216]	@ (800a4ac <xTaskIncrementTick+0x15c>)
 800a3d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3d6:	601a      	str	r2, [r3, #0]
					break;
 800a3d8:	e03f      	b.n	800a45a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3da:	4b31      	ldr	r3, [pc, #196]	@ (800a4a0 <xTaskIncrementTick+0x150>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d203      	bcs.n	800a3fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a3f2:	4a2e      	ldr	r2, [pc, #184]	@ (800a4ac <xTaskIncrementTick+0x15c>)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a3f8:	e02f      	b.n	800a45a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fe fec4 	bl	800918c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d004      	beq.n	800a416 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	3318      	adds	r3, #24
 800a410:	4618      	mov	r0, r3
 800a412:	f7fe febb 	bl	800918c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a41a:	4b25      	ldr	r3, [pc, #148]	@ (800a4b0 <xTaskIncrementTick+0x160>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d903      	bls.n	800a42a <xTaskIncrementTick+0xda>
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a426:	4a22      	ldr	r2, [pc, #136]	@ (800a4b0 <xTaskIncrementTick+0x160>)
 800a428:	6013      	str	r3, [r2, #0]
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a42e:	4613      	mov	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4413      	add	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	4a1f      	ldr	r2, [pc, #124]	@ (800a4b4 <xTaskIncrementTick+0x164>)
 800a438:	441a      	add	r2, r3
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	3304      	adds	r3, #4
 800a43e:	4619      	mov	r1, r3
 800a440:	4610      	mov	r0, r2
 800a442:	f7fe fe46 	bl	80090d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a44a:	4b1b      	ldr	r3, [pc, #108]	@ (800a4b8 <xTaskIncrementTick+0x168>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a450:	429a      	cmp	r2, r3
 800a452:	d3b8      	bcc.n	800a3c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a454:	2301      	movs	r3, #1
 800a456:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a458:	e7b5      	b.n	800a3c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a45a:	4b17      	ldr	r3, [pc, #92]	@ (800a4b8 <xTaskIncrementTick+0x168>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a460:	4914      	ldr	r1, [pc, #80]	@ (800a4b4 <xTaskIncrementTick+0x164>)
 800a462:	4613      	mov	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	440b      	add	r3, r1
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d901      	bls.n	800a476 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a472:	2301      	movs	r3, #1
 800a474:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a476:	4b11      	ldr	r3, [pc, #68]	@ (800a4bc <xTaskIncrementTick+0x16c>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d007      	beq.n	800a48e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a47e:	2301      	movs	r3, #1
 800a480:	617b      	str	r3, [r7, #20]
 800a482:	e004      	b.n	800a48e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a484:	4b0e      	ldr	r3, [pc, #56]	@ (800a4c0 <xTaskIncrementTick+0x170>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3301      	adds	r3, #1
 800a48a:	4a0d      	ldr	r2, [pc, #52]	@ (800a4c0 <xTaskIncrementTick+0x170>)
 800a48c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a48e:	697b      	ldr	r3, [r7, #20]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3718      	adds	r7, #24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	20000e10 	.word	0x20000e10
 800a49c:	20000dec 	.word	0x20000dec
 800a4a0:	20000da0 	.word	0x20000da0
 800a4a4:	20000da4 	.word	0x20000da4
 800a4a8:	20000e00 	.word	0x20000e00
 800a4ac:	20000e08 	.word	0x20000e08
 800a4b0:	20000df0 	.word	0x20000df0
 800a4b4:	20000918 	.word	0x20000918
 800a4b8:	20000914 	.word	0x20000914
 800a4bc:	20000dfc 	.word	0x20000dfc
 800a4c0:	20000df8 	.word	0x20000df8

0800a4c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a4ca:	4b28      	ldr	r3, [pc, #160]	@ (800a56c <vTaskSwitchContext+0xa8>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d003      	beq.n	800a4da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a4d2:	4b27      	ldr	r3, [pc, #156]	@ (800a570 <vTaskSwitchContext+0xac>)
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a4d8:	e042      	b.n	800a560 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a4da:	4b25      	ldr	r3, [pc, #148]	@ (800a570 <vTaskSwitchContext+0xac>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4e0:	4b24      	ldr	r3, [pc, #144]	@ (800a574 <vTaskSwitchContext+0xb0>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	60fb      	str	r3, [r7, #12]
 800a4e6:	e011      	b.n	800a50c <vTaskSwitchContext+0x48>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10b      	bne.n	800a506 <vTaskSwitchContext+0x42>
	__asm volatile
 800a4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	607b      	str	r3, [r7, #4]
}
 800a500:	bf00      	nop
 800a502:	bf00      	nop
 800a504:	e7fd      	b.n	800a502 <vTaskSwitchContext+0x3e>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3b01      	subs	r3, #1
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	491a      	ldr	r1, [pc, #104]	@ (800a578 <vTaskSwitchContext+0xb4>)
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	4613      	mov	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	440b      	add	r3, r1
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d0e3      	beq.n	800a4e8 <vTaskSwitchContext+0x24>
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	4613      	mov	r3, r2
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4a13      	ldr	r2, [pc, #76]	@ (800a578 <vTaskSwitchContext+0xb4>)
 800a52c:	4413      	add	r3, r2
 800a52e:	60bb      	str	r3, [r7, #8]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	685a      	ldr	r2, [r3, #4]
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	605a      	str	r2, [r3, #4]
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	685a      	ldr	r2, [r3, #4]
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	3308      	adds	r3, #8
 800a542:	429a      	cmp	r2, r3
 800a544:	d104      	bne.n	800a550 <vTaskSwitchContext+0x8c>
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	605a      	str	r2, [r3, #4]
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	4a09      	ldr	r2, [pc, #36]	@ (800a57c <vTaskSwitchContext+0xb8>)
 800a558:	6013      	str	r3, [r2, #0]
 800a55a:	4a06      	ldr	r2, [pc, #24]	@ (800a574 <vTaskSwitchContext+0xb0>)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6013      	str	r3, [r2, #0]
}
 800a560:	bf00      	nop
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	20000e10 	.word	0x20000e10
 800a570:	20000dfc 	.word	0x20000dfc
 800a574:	20000df0 	.word	0x20000df0
 800a578:	20000918 	.word	0x20000918
 800a57c:	20000914 	.word	0x20000914

0800a580 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10b      	bne.n	800a5a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	60fb      	str	r3, [r7, #12]
}
 800a5a2:	bf00      	nop
 800a5a4:	bf00      	nop
 800a5a6:	e7fd      	b.n	800a5a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5a8:	4b07      	ldr	r3, [pc, #28]	@ (800a5c8 <vTaskPlaceOnEventList+0x48>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3318      	adds	r3, #24
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f7fe fdb2 	bl	800911a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a5b6:	2101      	movs	r1, #1
 800a5b8:	6838      	ldr	r0, [r7, #0]
 800a5ba:	f000 fa81 	bl	800aac0 <prvAddCurrentTaskToDelayedList>
}
 800a5be:	bf00      	nop
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	20000914 	.word	0x20000914

0800a5cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10b      	bne.n	800a5f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	617b      	str	r3, [r7, #20]
}
 800a5f0:	bf00      	nop
 800a5f2:	bf00      	nop
 800a5f4:	e7fd      	b.n	800a5f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a620 <vTaskPlaceOnEventListRestricted+0x54>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	3318      	adds	r3, #24
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f7fe fd67 	bl	80090d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d002      	beq.n	800a610 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a60a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a60e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a610:	6879      	ldr	r1, [r7, #4]
 800a612:	68b8      	ldr	r0, [r7, #8]
 800a614:	f000 fa54 	bl	800aac0 <prvAddCurrentTaskToDelayedList>
	}
 800a618:	bf00      	nop
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	20000914 	.word	0x20000914

0800a624 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10b      	bne.n	800a652 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	60fb      	str	r3, [r7, #12]
}
 800a64c:	bf00      	nop
 800a64e:	bf00      	nop
 800a650:	e7fd      	b.n	800a64e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	3318      	adds	r3, #24
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe fd98 	bl	800918c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a65c:	4b1d      	ldr	r3, [pc, #116]	@ (800a6d4 <xTaskRemoveFromEventList+0xb0>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d11d      	bne.n	800a6a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	3304      	adds	r3, #4
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fe fd8f 	bl	800918c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a672:	4b19      	ldr	r3, [pc, #100]	@ (800a6d8 <xTaskRemoveFromEventList+0xb4>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	429a      	cmp	r2, r3
 800a678:	d903      	bls.n	800a682 <xTaskRemoveFromEventList+0x5e>
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a67e:	4a16      	ldr	r2, [pc, #88]	@ (800a6d8 <xTaskRemoveFromEventList+0xb4>)
 800a680:	6013      	str	r3, [r2, #0]
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a686:	4613      	mov	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4413      	add	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4a13      	ldr	r2, [pc, #76]	@ (800a6dc <xTaskRemoveFromEventList+0xb8>)
 800a690:	441a      	add	r2, r3
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	3304      	adds	r3, #4
 800a696:	4619      	mov	r1, r3
 800a698:	4610      	mov	r0, r2
 800a69a:	f7fe fd1a 	bl	80090d2 <vListInsertEnd>
 800a69e:	e005      	b.n	800a6ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	3318      	adds	r3, #24
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	480e      	ldr	r0, [pc, #56]	@ (800a6e0 <xTaskRemoveFromEventList+0xbc>)
 800a6a8:	f7fe fd13 	bl	80090d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a6e4 <xTaskRemoveFromEventList+0xc0>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d905      	bls.n	800a6c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a6be:	4b0a      	ldr	r3, [pc, #40]	@ (800a6e8 <xTaskRemoveFromEventList+0xc4>)
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	601a      	str	r2, [r3, #0]
 800a6c4:	e001      	b.n	800a6ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a6ca:	697b      	ldr	r3, [r7, #20]
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3718      	adds	r7, #24
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	20000e10 	.word	0x20000e10
 800a6d8:	20000df0 	.word	0x20000df0
 800a6dc:	20000918 	.word	0x20000918
 800a6e0:	20000da8 	.word	0x20000da8
 800a6e4:	20000914 	.word	0x20000914
 800a6e8:	20000dfc 	.word	0x20000dfc

0800a6ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6f4:	4b06      	ldr	r3, [pc, #24]	@ (800a710 <vTaskInternalSetTimeOutState+0x24>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6fc:	4b05      	ldr	r3, [pc, #20]	@ (800a714 <vTaskInternalSetTimeOutState+0x28>)
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	605a      	str	r2, [r3, #4]
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr
 800a710:	20000e00 	.word	0x20000e00
 800a714:	20000dec 	.word	0x20000dec

0800a718 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10b      	bne.n	800a740 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	613b      	str	r3, [r7, #16]
}
 800a73a:	bf00      	nop
 800a73c:	bf00      	nop
 800a73e:	e7fd      	b.n	800a73c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10b      	bne.n	800a75e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	60fb      	str	r3, [r7, #12]
}
 800a758:	bf00      	nop
 800a75a:	bf00      	nop
 800a75c:	e7fd      	b.n	800a75a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a75e:	f000 fe8b 	bl	800b478 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a762:	4b1d      	ldr	r3, [pc, #116]	@ (800a7d8 <xTaskCheckForTimeOut+0xc0>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	69ba      	ldr	r2, [r7, #24]
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a77a:	d102      	bne.n	800a782 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a77c:	2300      	movs	r3, #0
 800a77e:	61fb      	str	r3, [r7, #28]
 800a780:	e023      	b.n	800a7ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	4b15      	ldr	r3, [pc, #84]	@ (800a7dc <xTaskCheckForTimeOut+0xc4>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d007      	beq.n	800a79e <xTaskCheckForTimeOut+0x86>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	69ba      	ldr	r2, [r7, #24]
 800a794:	429a      	cmp	r2, r3
 800a796:	d302      	bcc.n	800a79e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a798:	2301      	movs	r3, #1
 800a79a:	61fb      	str	r3, [r7, #28]
 800a79c:	e015      	b.n	800a7ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d20b      	bcs.n	800a7c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	1ad2      	subs	r2, r2, r3
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7ff ff99 	bl	800a6ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	61fb      	str	r3, [r7, #28]
 800a7be:	e004      	b.n	800a7ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a7ca:	f000 fe87 	bl	800b4dc <vPortExitCritical>

	return xReturn;
 800a7ce:	69fb      	ldr	r3, [r7, #28]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3720      	adds	r7, #32
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	20000dec 	.word	0x20000dec
 800a7dc:	20000e00 	.word	0x20000e00

0800a7e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a7e4:	4b03      	ldr	r3, [pc, #12]	@ (800a7f4 <vTaskMissedYield+0x14>)
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	601a      	str	r2, [r3, #0]
}
 800a7ea:	bf00      	nop
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr
 800a7f4:	20000dfc 	.word	0x20000dfc

0800a7f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a800:	f000 f852 	bl	800a8a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a804:	4b06      	ldr	r3, [pc, #24]	@ (800a820 <prvIdleTask+0x28>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d9f9      	bls.n	800a800 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a80c:	4b05      	ldr	r3, [pc, #20]	@ (800a824 <prvIdleTask+0x2c>)
 800a80e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a81c:	e7f0      	b.n	800a800 <prvIdleTask+0x8>
 800a81e:	bf00      	nop
 800a820:	20000918 	.word	0x20000918
 800a824:	e000ed04 	.word	0xe000ed04

0800a828 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a82e:	2300      	movs	r3, #0
 800a830:	607b      	str	r3, [r7, #4]
 800a832:	e00c      	b.n	800a84e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	4613      	mov	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4a12      	ldr	r2, [pc, #72]	@ (800a888 <prvInitialiseTaskLists+0x60>)
 800a840:	4413      	add	r3, r2
 800a842:	4618      	mov	r0, r3
 800a844:	f7fe fc18 	bl	8009078 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	3301      	adds	r3, #1
 800a84c:	607b      	str	r3, [r7, #4]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b37      	cmp	r3, #55	@ 0x37
 800a852:	d9ef      	bls.n	800a834 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a854:	480d      	ldr	r0, [pc, #52]	@ (800a88c <prvInitialiseTaskLists+0x64>)
 800a856:	f7fe fc0f 	bl	8009078 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a85a:	480d      	ldr	r0, [pc, #52]	@ (800a890 <prvInitialiseTaskLists+0x68>)
 800a85c:	f7fe fc0c 	bl	8009078 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a860:	480c      	ldr	r0, [pc, #48]	@ (800a894 <prvInitialiseTaskLists+0x6c>)
 800a862:	f7fe fc09 	bl	8009078 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a866:	480c      	ldr	r0, [pc, #48]	@ (800a898 <prvInitialiseTaskLists+0x70>)
 800a868:	f7fe fc06 	bl	8009078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a86c:	480b      	ldr	r0, [pc, #44]	@ (800a89c <prvInitialiseTaskLists+0x74>)
 800a86e:	f7fe fc03 	bl	8009078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a872:	4b0b      	ldr	r3, [pc, #44]	@ (800a8a0 <prvInitialiseTaskLists+0x78>)
 800a874:	4a05      	ldr	r2, [pc, #20]	@ (800a88c <prvInitialiseTaskLists+0x64>)
 800a876:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a878:	4b0a      	ldr	r3, [pc, #40]	@ (800a8a4 <prvInitialiseTaskLists+0x7c>)
 800a87a:	4a05      	ldr	r2, [pc, #20]	@ (800a890 <prvInitialiseTaskLists+0x68>)
 800a87c:	601a      	str	r2, [r3, #0]
}
 800a87e:	bf00      	nop
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	20000918 	.word	0x20000918
 800a88c:	20000d78 	.word	0x20000d78
 800a890:	20000d8c 	.word	0x20000d8c
 800a894:	20000da8 	.word	0x20000da8
 800a898:	20000dbc 	.word	0x20000dbc
 800a89c:	20000dd4 	.word	0x20000dd4
 800a8a0:	20000da0 	.word	0x20000da0
 800a8a4:	20000da4 	.word	0x20000da4

0800a8a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8ae:	e019      	b.n	800a8e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a8b0:	f000 fde2 	bl	800b478 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8b4:	4b10      	ldr	r3, [pc, #64]	@ (800a8f8 <prvCheckTasksWaitingTermination+0x50>)
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	3304      	adds	r3, #4
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fe fc63 	bl	800918c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a8c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a8fc <prvCheckTasksWaitingTermination+0x54>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	4a0b      	ldr	r2, [pc, #44]	@ (800a8fc <prvCheckTasksWaitingTermination+0x54>)
 800a8ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a8d0:	4b0b      	ldr	r3, [pc, #44]	@ (800a900 <prvCheckTasksWaitingTermination+0x58>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	4a0a      	ldr	r2, [pc, #40]	@ (800a900 <prvCheckTasksWaitingTermination+0x58>)
 800a8d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a8da:	f000 fdff 	bl	800b4dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f810 	bl	800a904 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8e4:	4b06      	ldr	r3, [pc, #24]	@ (800a900 <prvCheckTasksWaitingTermination+0x58>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e1      	bne.n	800a8b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a8ec:	bf00      	nop
 800a8ee:	bf00      	nop
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	20000dbc 	.word	0x20000dbc
 800a8fc:	20000de8 	.word	0x20000de8
 800a900:	20000dd0 	.word	0x20000dd0

0800a904 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a912:	2b00      	cmp	r3, #0
 800a914:	d108      	bne.n	800a928 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 ff9c 	bl	800b858 <vPortFree>
				vPortFree( pxTCB );
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 ff99 	bl	800b858 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a926:	e019      	b.n	800a95c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d103      	bne.n	800a93a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 ff90 	bl	800b858 <vPortFree>
	}
 800a938:	e010      	b.n	800a95c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a940:	2b02      	cmp	r3, #2
 800a942:	d00b      	beq.n	800a95c <prvDeleteTCB+0x58>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	60fb      	str	r3, [r7, #12]
}
 800a956:	bf00      	nop
 800a958:	bf00      	nop
 800a95a:	e7fd      	b.n	800a958 <prvDeleteTCB+0x54>
	}
 800a95c:	bf00      	nop
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a96a:	4b0c      	ldr	r3, [pc, #48]	@ (800a99c <prvResetNextTaskUnblockTime+0x38>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d104      	bne.n	800a97e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a974:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a0 <prvResetNextTaskUnblockTime+0x3c>)
 800a976:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a97a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a97c:	e008      	b.n	800a990 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a97e:	4b07      	ldr	r3, [pc, #28]	@ (800a99c <prvResetNextTaskUnblockTime+0x38>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	4a04      	ldr	r2, [pc, #16]	@ (800a9a0 <prvResetNextTaskUnblockTime+0x3c>)
 800a98e:	6013      	str	r3, [r2, #0]
}
 800a990:	bf00      	nop
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	20000da0 	.word	0x20000da0
 800a9a0:	20000e08 	.word	0x20000e08

0800a9a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a9aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a9d8 <xTaskGetSchedulerState+0x34>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d102      	bne.n	800a9b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	607b      	str	r3, [r7, #4]
 800a9b6:	e008      	b.n	800a9ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9b8:	4b08      	ldr	r3, [pc, #32]	@ (800a9dc <xTaskGetSchedulerState+0x38>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d102      	bne.n	800a9c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	607b      	str	r3, [r7, #4]
 800a9c4:	e001      	b.n	800a9ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a9ca:	687b      	ldr	r3, [r7, #4]
	}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr
 800a9d8:	20000df4 	.word	0x20000df4
 800a9dc:	20000e10 	.word	0x20000e10

0800a9e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d058      	beq.n	800aaa8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9f6:	4b2f      	ldr	r3, [pc, #188]	@ (800aab4 <xTaskPriorityDisinherit+0xd4>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d00b      	beq.n	800aa18 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	60fb      	str	r3, [r7, #12]
}
 800aa12:	bf00      	nop
 800aa14:	bf00      	nop
 800aa16:	e7fd      	b.n	800aa14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10b      	bne.n	800aa38 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800aa20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	60bb      	str	r3, [r7, #8]
}
 800aa32:	bf00      	nop
 800aa34:	bf00      	nop
 800aa36:	e7fd      	b.n	800aa34 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa3c:	1e5a      	subs	r2, r3, #1
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d02c      	beq.n	800aaa8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d128      	bne.n	800aaa8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	3304      	adds	r3, #4
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fe fb96 	bl	800918c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa78:	4b0f      	ldr	r3, [pc, #60]	@ (800aab8 <xTaskPriorityDisinherit+0xd8>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d903      	bls.n	800aa88 <xTaskPriorityDisinherit+0xa8>
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa84:	4a0c      	ldr	r2, [pc, #48]	@ (800aab8 <xTaskPriorityDisinherit+0xd8>)
 800aa86:	6013      	str	r3, [r2, #0]
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4413      	add	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4a09      	ldr	r2, [pc, #36]	@ (800aabc <xTaskPriorityDisinherit+0xdc>)
 800aa96:	441a      	add	r2, r3
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	f7fe fb17 	bl	80090d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aaa8:	697b      	ldr	r3, [r7, #20]
	}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	20000914 	.word	0x20000914
 800aab8:	20000df0 	.word	0x20000df0
 800aabc:	20000918 	.word	0x20000918

0800aac0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aaca:	4b21      	ldr	r3, [pc, #132]	@ (800ab50 <prvAddCurrentTaskToDelayedList+0x90>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aad0:	4b20      	ldr	r3, [pc, #128]	@ (800ab54 <prvAddCurrentTaskToDelayedList+0x94>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3304      	adds	r3, #4
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fe fb58 	bl	800918c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aae2:	d10a      	bne.n	800aafa <prvAddCurrentTaskToDelayedList+0x3a>
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d007      	beq.n	800aafa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaea:	4b1a      	ldr	r3, [pc, #104]	@ (800ab54 <prvAddCurrentTaskToDelayedList+0x94>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	3304      	adds	r3, #4
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4819      	ldr	r0, [pc, #100]	@ (800ab58 <prvAddCurrentTaskToDelayedList+0x98>)
 800aaf4:	f7fe faed 	bl	80090d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aaf8:	e026      	b.n	800ab48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4413      	add	r3, r2
 800ab00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab02:	4b14      	ldr	r3, [pc, #80]	@ (800ab54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d209      	bcs.n	800ab26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab12:	4b12      	ldr	r3, [pc, #72]	@ (800ab5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	4b0f      	ldr	r3, [pc, #60]	@ (800ab54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	4610      	mov	r0, r2
 800ab20:	f7fe fafb 	bl	800911a <vListInsert>
}
 800ab24:	e010      	b.n	800ab48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab26:	4b0e      	ldr	r3, [pc, #56]	@ (800ab60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ab54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	3304      	adds	r3, #4
 800ab30:	4619      	mov	r1, r3
 800ab32:	4610      	mov	r0, r2
 800ab34:	f7fe faf1 	bl	800911a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab38:	4b0a      	ldr	r3, [pc, #40]	@ (800ab64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d202      	bcs.n	800ab48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ab42:	4a08      	ldr	r2, [pc, #32]	@ (800ab64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	6013      	str	r3, [r2, #0]
}
 800ab48:	bf00      	nop
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	20000dec 	.word	0x20000dec
 800ab54:	20000914 	.word	0x20000914
 800ab58:	20000dd4 	.word	0x20000dd4
 800ab5c:	20000da4 	.word	0x20000da4
 800ab60:	20000da0 	.word	0x20000da0
 800ab64:	20000e08 	.word	0x20000e08

0800ab68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b08a      	sub	sp, #40	@ 0x28
 800ab6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab72:	f000 fb13 	bl	800b19c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab76:	4b1d      	ldr	r3, [pc, #116]	@ (800abec <xTimerCreateTimerTask+0x84>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d021      	beq.n	800abc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab82:	2300      	movs	r3, #0
 800ab84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab86:	1d3a      	adds	r2, r7, #4
 800ab88:	f107 0108 	add.w	r1, r7, #8
 800ab8c:	f107 030c 	add.w	r3, r7, #12
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7fe fa57 	bl	8009044 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab96:	6879      	ldr	r1, [r7, #4]
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	9202      	str	r2, [sp, #8]
 800ab9e:	9301      	str	r3, [sp, #4]
 800aba0:	2302      	movs	r3, #2
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	2300      	movs	r3, #0
 800aba6:	460a      	mov	r2, r1
 800aba8:	4911      	ldr	r1, [pc, #68]	@ (800abf0 <xTimerCreateTimerTask+0x88>)
 800abaa:	4812      	ldr	r0, [pc, #72]	@ (800abf4 <xTimerCreateTimerTask+0x8c>)
 800abac:	f7ff f8d0 	bl	8009d50 <xTaskCreateStatic>
 800abb0:	4603      	mov	r3, r0
 800abb2:	4a11      	ldr	r2, [pc, #68]	@ (800abf8 <xTimerCreateTimerTask+0x90>)
 800abb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800abb6:	4b10      	ldr	r3, [pc, #64]	@ (800abf8 <xTimerCreateTimerTask+0x90>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d001      	beq.n	800abc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800abbe:	2301      	movs	r3, #1
 800abc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10b      	bne.n	800abe0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800abc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abcc:	f383 8811 	msr	BASEPRI, r3
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	613b      	str	r3, [r7, #16]
}
 800abda:	bf00      	nop
 800abdc:	bf00      	nop
 800abde:	e7fd      	b.n	800abdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800abe0:	697b      	ldr	r3, [r7, #20]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3718      	adds	r7, #24
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	20000e44 	.word	0x20000e44
 800abf0:	0800c3c0 	.word	0x0800c3c0
 800abf4:	0800ad35 	.word	0x0800ad35
 800abf8:	20000e48 	.word	0x20000e48

0800abfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b08a      	sub	sp, #40	@ 0x28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
 800ac08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10b      	bne.n	800ac2c <xTimerGenericCommand+0x30>
	__asm volatile
 800ac14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac18:	f383 8811 	msr	BASEPRI, r3
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	623b      	str	r3, [r7, #32]
}
 800ac26:	bf00      	nop
 800ac28:	bf00      	nop
 800ac2a:	e7fd      	b.n	800ac28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ac2c:	4b19      	ldr	r3, [pc, #100]	@ (800ac94 <xTimerGenericCommand+0x98>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d02a      	beq.n	800ac8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	2b05      	cmp	r3, #5
 800ac44:	dc18      	bgt.n	800ac78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ac46:	f7ff fead 	bl	800a9a4 <xTaskGetSchedulerState>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	d109      	bne.n	800ac64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ac50:	4b10      	ldr	r3, [pc, #64]	@ (800ac94 <xTimerGenericCommand+0x98>)
 800ac52:	6818      	ldr	r0, [r3, #0]
 800ac54:	f107 0110 	add.w	r1, r7, #16
 800ac58:	2300      	movs	r3, #0
 800ac5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac5c:	f7fe fc06 	bl	800946c <xQueueGenericSend>
 800ac60:	6278      	str	r0, [r7, #36]	@ 0x24
 800ac62:	e012      	b.n	800ac8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac64:	4b0b      	ldr	r3, [pc, #44]	@ (800ac94 <xTimerGenericCommand+0x98>)
 800ac66:	6818      	ldr	r0, [r3, #0]
 800ac68:	f107 0110 	add.w	r1, r7, #16
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f7fe fbfc 	bl	800946c <xQueueGenericSend>
 800ac74:	6278      	str	r0, [r7, #36]	@ 0x24
 800ac76:	e008      	b.n	800ac8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac78:	4b06      	ldr	r3, [pc, #24]	@ (800ac94 <xTimerGenericCommand+0x98>)
 800ac7a:	6818      	ldr	r0, [r3, #0]
 800ac7c:	f107 0110 	add.w	r1, r7, #16
 800ac80:	2300      	movs	r3, #0
 800ac82:	683a      	ldr	r2, [r7, #0]
 800ac84:	f7fe fcf4 	bl	8009670 <xQueueGenericSendFromISR>
 800ac88:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3728      	adds	r7, #40	@ 0x28
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	20000e44 	.word	0x20000e44

0800ac98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b088      	sub	sp, #32
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aca2:	4b23      	ldr	r3, [pc, #140]	@ (800ad30 <prvProcessExpiredTimer+0x98>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	3304      	adds	r3, #4
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fe fa6b 	bl	800918c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acbc:	f003 0304 	and.w	r3, r3, #4
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d023      	beq.n	800ad0c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	699a      	ldr	r2, [r3, #24]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	18d1      	adds	r1, r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	6978      	ldr	r0, [r7, #20]
 800acd2:	f000 f8d5 	bl	800ae80 <prvInsertTimerInActiveList>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d020      	beq.n	800ad1e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800acdc:	2300      	movs	r3, #0
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	2300      	movs	r3, #0
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	2100      	movs	r1, #0
 800ace6:	6978      	ldr	r0, [r7, #20]
 800ace8:	f7ff ff88 	bl	800abfc <xTimerGenericCommand>
 800acec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d114      	bne.n	800ad1e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800acf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	60fb      	str	r3, [r7, #12]
}
 800ad06:	bf00      	nop
 800ad08:	bf00      	nop
 800ad0a:	e7fd      	b.n	800ad08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad12:	f023 0301 	bic.w	r3, r3, #1
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	6978      	ldr	r0, [r7, #20]
 800ad24:	4798      	blx	r3
}
 800ad26:	bf00      	nop
 800ad28:	3718      	adds	r7, #24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20000e3c 	.word	0x20000e3c

0800ad34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad3c:	f107 0308 	add.w	r3, r7, #8
 800ad40:	4618      	mov	r0, r3
 800ad42:	f000 f859 	bl	800adf8 <prvGetNextExpireTime>
 800ad46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f000 f805 	bl	800ad5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ad52:	f000 f8d7 	bl	800af04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad56:	bf00      	nop
 800ad58:	e7f0      	b.n	800ad3c <prvTimerTask+0x8>
	...

0800ad5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad66:	f7ff fa37 	bl	800a1d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad6a:	f107 0308 	add.w	r3, r7, #8
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 f866 	bl	800ae40 <prvSampleTimeNow>
 800ad74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d130      	bne.n	800adde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10a      	bne.n	800ad98 <prvProcessTimerOrBlockTask+0x3c>
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d806      	bhi.n	800ad98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad8a:	f7ff fa33 	bl	800a1f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad8e:	68f9      	ldr	r1, [r7, #12]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f7ff ff81 	bl	800ac98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad96:	e024      	b.n	800ade2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d008      	beq.n	800adb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad9e:	4b13      	ldr	r3, [pc, #76]	@ (800adec <prvProcessTimerOrBlockTask+0x90>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <prvProcessTimerOrBlockTask+0x50>
 800ada8:	2301      	movs	r3, #1
 800adaa:	e000      	b.n	800adae <prvProcessTimerOrBlockTask+0x52>
 800adac:	2300      	movs	r3, #0
 800adae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800adb0:	4b0f      	ldr	r3, [pc, #60]	@ (800adf0 <prvProcessTimerOrBlockTask+0x94>)
 800adb2:	6818      	ldr	r0, [r3, #0]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	4619      	mov	r1, r3
 800adbe:	f7fe ff93 	bl	8009ce8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800adc2:	f7ff fa17 	bl	800a1f4 <xTaskResumeAll>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10a      	bne.n	800ade2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800adcc:	4b09      	ldr	r3, [pc, #36]	@ (800adf4 <prvProcessTimerOrBlockTask+0x98>)
 800adce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800add2:	601a      	str	r2, [r3, #0]
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	f3bf 8f6f 	isb	sy
}
 800addc:	e001      	b.n	800ade2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800adde:	f7ff fa09 	bl	800a1f4 <xTaskResumeAll>
}
 800ade2:	bf00      	nop
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20000e40 	.word	0x20000e40
 800adf0:	20000e44 	.word	0x20000e44
 800adf4:	e000ed04 	.word	0xe000ed04

0800adf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ae00:	4b0e      	ldr	r3, [pc, #56]	@ (800ae3c <prvGetNextExpireTime+0x44>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <prvGetNextExpireTime+0x16>
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	e000      	b.n	800ae10 <prvGetNextExpireTime+0x18>
 800ae0e:	2200      	movs	r2, #0
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d105      	bne.n	800ae28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae1c:	4b07      	ldr	r3, [pc, #28]	@ (800ae3c <prvGetNextExpireTime+0x44>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	60fb      	str	r3, [r7, #12]
 800ae26:	e001      	b.n	800ae2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3714      	adds	r7, #20
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	20000e3c 	.word	0x20000e3c

0800ae40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ae48:	f7ff fa72 	bl	800a330 <xTaskGetTickCount>
 800ae4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ae4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ae7c <prvSampleTimeNow+0x3c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d205      	bcs.n	800ae64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ae58:	f000 f93a 	bl	800b0d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	601a      	str	r2, [r3, #0]
 800ae62:	e002      	b.n	800ae6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae6a:	4a04      	ldr	r2, [pc, #16]	@ (800ae7c <prvSampleTimeNow+0x3c>)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae70:	68fb      	ldr	r3, [r7, #12]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	20000e4c 	.word	0x20000e4c

0800ae80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
 800ae8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d812      	bhi.n	800aecc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	1ad2      	subs	r2, r2, r3
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d302      	bcc.n	800aeba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	617b      	str	r3, [r7, #20]
 800aeb8:	e01b      	b.n	800aef2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aeba:	4b10      	ldr	r3, [pc, #64]	@ (800aefc <prvInsertTimerInActiveList+0x7c>)
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	3304      	adds	r3, #4
 800aec2:	4619      	mov	r1, r3
 800aec4:	4610      	mov	r0, r2
 800aec6:	f7fe f928 	bl	800911a <vListInsert>
 800aeca:	e012      	b.n	800aef2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d206      	bcs.n	800aee2 <prvInsertTimerInActiveList+0x62>
 800aed4:	68ba      	ldr	r2, [r7, #8]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d302      	bcc.n	800aee2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aedc:	2301      	movs	r3, #1
 800aede:	617b      	str	r3, [r7, #20]
 800aee0:	e007      	b.n	800aef2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aee2:	4b07      	ldr	r3, [pc, #28]	@ (800af00 <prvInsertTimerInActiveList+0x80>)
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3304      	adds	r3, #4
 800aeea:	4619      	mov	r1, r3
 800aeec:	4610      	mov	r0, r2
 800aeee:	f7fe f914 	bl	800911a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aef2:	697b      	ldr	r3, [r7, #20]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3718      	adds	r7, #24
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	20000e40 	.word	0x20000e40
 800af00:	20000e3c 	.word	0x20000e3c

0800af04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b08e      	sub	sp, #56	@ 0x38
 800af08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af0a:	e0ce      	b.n	800b0aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	da19      	bge.n	800af46 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800af12:	1d3b      	adds	r3, r7, #4
 800af14:	3304      	adds	r3, #4
 800af16:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800af18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10b      	bne.n	800af36 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	61fb      	str	r3, [r7, #28]
}
 800af30:	bf00      	nop
 800af32:	bf00      	nop
 800af34:	e7fd      	b.n	800af32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800af36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af3c:	6850      	ldr	r0, [r2, #4]
 800af3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af40:	6892      	ldr	r2, [r2, #8]
 800af42:	4611      	mov	r1, r2
 800af44:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f2c0 80ae 	blt.w	800b0aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d004      	beq.n	800af64 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af5c:	3304      	adds	r3, #4
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fe f914 	bl	800918c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af64:	463b      	mov	r3, r7
 800af66:	4618      	mov	r0, r3
 800af68:	f7ff ff6a 	bl	800ae40 <prvSampleTimeNow>
 800af6c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2b09      	cmp	r3, #9
 800af72:	f200 8097 	bhi.w	800b0a4 <prvProcessReceivedCommands+0x1a0>
 800af76:	a201      	add	r2, pc, #4	@ (adr r2, 800af7c <prvProcessReceivedCommands+0x78>)
 800af78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7c:	0800afa5 	.word	0x0800afa5
 800af80:	0800afa5 	.word	0x0800afa5
 800af84:	0800afa5 	.word	0x0800afa5
 800af88:	0800b01b 	.word	0x0800b01b
 800af8c:	0800b02f 	.word	0x0800b02f
 800af90:	0800b07b 	.word	0x0800b07b
 800af94:	0800afa5 	.word	0x0800afa5
 800af98:	0800afa5 	.word	0x0800afa5
 800af9c:	0800b01b 	.word	0x0800b01b
 800afa0:	0800b02f 	.word	0x0800b02f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afaa:	f043 0301 	orr.w	r3, r3, #1
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afba:	699b      	ldr	r3, [r3, #24]
 800afbc:	18d1      	adds	r1, r2, r3
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afc4:	f7ff ff5c 	bl	800ae80 <prvInsertTimerInActiveList>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d06c      	beq.n	800b0a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd0:	6a1b      	ldr	r3, [r3, #32]
 800afd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afdc:	f003 0304 	and.w	r3, r3, #4
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d061      	beq.n	800b0a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800afe4:	68ba      	ldr	r2, [r7, #8]
 800afe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	441a      	add	r2, r3
 800afec:	2300      	movs	r3, #0
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	2300      	movs	r3, #0
 800aff2:	2100      	movs	r1, #0
 800aff4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aff6:	f7ff fe01 	bl	800abfc <xTimerGenericCommand>
 800affa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800affc:	6a3b      	ldr	r3, [r7, #32]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d152      	bne.n	800b0a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b006:	f383 8811 	msr	BASEPRI, r3
 800b00a:	f3bf 8f6f 	isb	sy
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	61bb      	str	r3, [r7, #24]
}
 800b014:	bf00      	nop
 800b016:	bf00      	nop
 800b018:	e7fd      	b.n	800b016 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b01c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b020:	f023 0301 	bic.w	r3, r3, #1
 800b024:	b2da      	uxtb	r2, r3
 800b026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b028:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b02c:	e03d      	b.n	800b0aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b034:	f043 0301 	orr.w	r3, r3, #1
 800b038:	b2da      	uxtb	r2, r3
 800b03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b03c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b044:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b048:	699b      	ldr	r3, [r3, #24]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10b      	bne.n	800b066 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	617b      	str	r3, [r7, #20]
}
 800b060:	bf00      	nop
 800b062:	bf00      	nop
 800b064:	e7fd      	b.n	800b062 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b068:	699a      	ldr	r2, [r3, #24]
 800b06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06c:	18d1      	adds	r1, r2, r3
 800b06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b074:	f7ff ff04 	bl	800ae80 <prvInsertTimerInActiveList>
					break;
 800b078:	e017      	b.n	800b0aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b07c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b080:	f003 0302 	and.w	r3, r3, #2
 800b084:	2b00      	cmp	r3, #0
 800b086:	d103      	bne.n	800b090 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b088:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b08a:	f000 fbe5 	bl	800b858 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b08e:	e00c      	b.n	800b0aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b092:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b096:	f023 0301 	bic.w	r3, r3, #1
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b09e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b0a2:	e002      	b.n	800b0aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b0a4:	bf00      	nop
 800b0a6:	e000      	b.n	800b0aa <prvProcessReceivedCommands+0x1a6>
					break;
 800b0a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0aa:	4b08      	ldr	r3, [pc, #32]	@ (800b0cc <prvProcessReceivedCommands+0x1c8>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	1d39      	adds	r1, r7, #4
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fe fb7a 	bl	80097ac <xQueueReceive>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f47f af26 	bne.w	800af0c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b0c0:	bf00      	nop
 800b0c2:	bf00      	nop
 800b0c4:	3730      	adds	r7, #48	@ 0x30
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	20000e44 	.word	0x20000e44

0800b0d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b088      	sub	sp, #32
 800b0d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0d6:	e049      	b.n	800b16c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0d8:	4b2e      	ldr	r3, [pc, #184]	@ (800b194 <prvSwitchTimerLists+0xc4>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0e2:	4b2c      	ldr	r3, [pc, #176]	@ (800b194 <prvSwitchTimerLists+0xc4>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	3304      	adds	r3, #4
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fe f84b 	bl	800918c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b104:	f003 0304 	and.w	r3, r3, #4
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d02f      	beq.n	800b16c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	4413      	add	r3, r2
 800b114:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b116:	68ba      	ldr	r2, [r7, #8]
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d90e      	bls.n	800b13c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b12a:	4b1a      	ldr	r3, [pc, #104]	@ (800b194 <prvSwitchTimerLists+0xc4>)
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3304      	adds	r3, #4
 800b132:	4619      	mov	r1, r3
 800b134:	4610      	mov	r0, r2
 800b136:	f7fd fff0 	bl	800911a <vListInsert>
 800b13a:	e017      	b.n	800b16c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b13c:	2300      	movs	r3, #0
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	2300      	movs	r3, #0
 800b142:	693a      	ldr	r2, [r7, #16]
 800b144:	2100      	movs	r1, #0
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f7ff fd58 	bl	800abfc <xTimerGenericCommand>
 800b14c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10b      	bne.n	800b16c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b158:	f383 8811 	msr	BASEPRI, r3
 800b15c:	f3bf 8f6f 	isb	sy
 800b160:	f3bf 8f4f 	dsb	sy
 800b164:	603b      	str	r3, [r7, #0]
}
 800b166:	bf00      	nop
 800b168:	bf00      	nop
 800b16a:	e7fd      	b.n	800b168 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b16c:	4b09      	ldr	r3, [pc, #36]	@ (800b194 <prvSwitchTimerLists+0xc4>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d1b0      	bne.n	800b0d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b176:	4b07      	ldr	r3, [pc, #28]	@ (800b194 <prvSwitchTimerLists+0xc4>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b17c:	4b06      	ldr	r3, [pc, #24]	@ (800b198 <prvSwitchTimerLists+0xc8>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a04      	ldr	r2, [pc, #16]	@ (800b194 <prvSwitchTimerLists+0xc4>)
 800b182:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b184:	4a04      	ldr	r2, [pc, #16]	@ (800b198 <prvSwitchTimerLists+0xc8>)
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	6013      	str	r3, [r2, #0]
}
 800b18a:	bf00      	nop
 800b18c:	3718      	adds	r7, #24
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20000e3c 	.word	0x20000e3c
 800b198:	20000e40 	.word	0x20000e40

0800b19c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b1a2:	f000 f969 	bl	800b478 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b1a6:	4b15      	ldr	r3, [pc, #84]	@ (800b1fc <prvCheckForValidListAndQueue+0x60>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d120      	bne.n	800b1f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b1ae:	4814      	ldr	r0, [pc, #80]	@ (800b200 <prvCheckForValidListAndQueue+0x64>)
 800b1b0:	f7fd ff62 	bl	8009078 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b1b4:	4813      	ldr	r0, [pc, #76]	@ (800b204 <prvCheckForValidListAndQueue+0x68>)
 800b1b6:	f7fd ff5f 	bl	8009078 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b1ba:	4b13      	ldr	r3, [pc, #76]	@ (800b208 <prvCheckForValidListAndQueue+0x6c>)
 800b1bc:	4a10      	ldr	r2, [pc, #64]	@ (800b200 <prvCheckForValidListAndQueue+0x64>)
 800b1be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b1c0:	4b12      	ldr	r3, [pc, #72]	@ (800b20c <prvCheckForValidListAndQueue+0x70>)
 800b1c2:	4a10      	ldr	r2, [pc, #64]	@ (800b204 <prvCheckForValidListAndQueue+0x68>)
 800b1c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	4b11      	ldr	r3, [pc, #68]	@ (800b210 <prvCheckForValidListAndQueue+0x74>)
 800b1cc:	4a11      	ldr	r2, [pc, #68]	@ (800b214 <prvCheckForValidListAndQueue+0x78>)
 800b1ce:	2110      	movs	r1, #16
 800b1d0:	200a      	movs	r0, #10
 800b1d2:	f7fe f86f 	bl	80092b4 <xQueueGenericCreateStatic>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	4a08      	ldr	r2, [pc, #32]	@ (800b1fc <prvCheckForValidListAndQueue+0x60>)
 800b1da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b1dc:	4b07      	ldr	r3, [pc, #28]	@ (800b1fc <prvCheckForValidListAndQueue+0x60>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d005      	beq.n	800b1f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b1e4:	4b05      	ldr	r3, [pc, #20]	@ (800b1fc <prvCheckForValidListAndQueue+0x60>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	490b      	ldr	r1, [pc, #44]	@ (800b218 <prvCheckForValidListAndQueue+0x7c>)
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe fd52 	bl	8009c94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1f0:	f000 f974 	bl	800b4dc <vPortExitCritical>
}
 800b1f4:	bf00      	nop
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20000e44 	.word	0x20000e44
 800b200:	20000e14 	.word	0x20000e14
 800b204:	20000e28 	.word	0x20000e28
 800b208:	20000e3c 	.word	0x20000e3c
 800b20c:	20000e40 	.word	0x20000e40
 800b210:	20000ef0 	.word	0x20000ef0
 800b214:	20000e50 	.word	0x20000e50
 800b218:	0800c3c8 	.word	0x0800c3c8

0800b21c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	3b04      	subs	r3, #4
 800b22c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	3b04      	subs	r3, #4
 800b23a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	f023 0201 	bic.w	r2, r3, #1
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	3b04      	subs	r3, #4
 800b24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b24c:	4a0c      	ldr	r2, [pc, #48]	@ (800b280 <pxPortInitialiseStack+0x64>)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	3b14      	subs	r3, #20
 800b256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3b04      	subs	r3, #4
 800b262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f06f 0202 	mvn.w	r2, #2
 800b26a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	3b20      	subs	r3, #32
 800b270:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b272:	68fb      	ldr	r3, [r7, #12]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3714      	adds	r7, #20
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr
 800b280:	0800b285 	.word	0x0800b285

0800b284 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b28e:	4b13      	ldr	r3, [pc, #76]	@ (800b2dc <prvTaskExitError+0x58>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b296:	d00b      	beq.n	800b2b0 <prvTaskExitError+0x2c>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	60fb      	str	r3, [r7, #12]
}
 800b2aa:	bf00      	nop
 800b2ac:	bf00      	nop
 800b2ae:	e7fd      	b.n	800b2ac <prvTaskExitError+0x28>
	__asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	60bb      	str	r3, [r7, #8]
}
 800b2c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b2c4:	bf00      	nop
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d0fc      	beq.n	800b2c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b2cc:	bf00      	nop
 800b2ce:	bf00      	nop
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	2000002c 	.word	0x2000002c

0800b2e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b2e0:	4b07      	ldr	r3, [pc, #28]	@ (800b300 <pxCurrentTCBConst2>)
 800b2e2:	6819      	ldr	r1, [r3, #0]
 800b2e4:	6808      	ldr	r0, [r1, #0]
 800b2e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ea:	f380 8809 	msr	PSP, r0
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f04f 0000 	mov.w	r0, #0
 800b2f6:	f380 8811 	msr	BASEPRI, r0
 800b2fa:	4770      	bx	lr
 800b2fc:	f3af 8000 	nop.w

0800b300 <pxCurrentTCBConst2>:
 800b300:	20000914 	.word	0x20000914
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b304:	bf00      	nop
 800b306:	bf00      	nop

0800b308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b308:	4808      	ldr	r0, [pc, #32]	@ (800b32c <prvPortStartFirstTask+0x24>)
 800b30a:	6800      	ldr	r0, [r0, #0]
 800b30c:	6800      	ldr	r0, [r0, #0]
 800b30e:	f380 8808 	msr	MSP, r0
 800b312:	f04f 0000 	mov.w	r0, #0
 800b316:	f380 8814 	msr	CONTROL, r0
 800b31a:	b662      	cpsie	i
 800b31c:	b661      	cpsie	f
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	df00      	svc	0
 800b328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b32a:	bf00      	nop
 800b32c:	e000ed08 	.word	0xe000ed08

0800b330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b336:	4b47      	ldr	r3, [pc, #284]	@ (800b454 <xPortStartScheduler+0x124>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a47      	ldr	r2, [pc, #284]	@ (800b458 <xPortStartScheduler+0x128>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d10b      	bne.n	800b358 <xPortStartScheduler+0x28>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	613b      	str	r3, [r7, #16]
}
 800b352:	bf00      	nop
 800b354:	bf00      	nop
 800b356:	e7fd      	b.n	800b354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b358:	4b3e      	ldr	r3, [pc, #248]	@ (800b454 <xPortStartScheduler+0x124>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a3f      	ldr	r2, [pc, #252]	@ (800b45c <xPortStartScheduler+0x12c>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d10b      	bne.n	800b37a <xPortStartScheduler+0x4a>
	__asm volatile
 800b362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	60fb      	str	r3, [r7, #12]
}
 800b374:	bf00      	nop
 800b376:	bf00      	nop
 800b378:	e7fd      	b.n	800b376 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b37a:	4b39      	ldr	r3, [pc, #228]	@ (800b460 <xPortStartScheduler+0x130>)
 800b37c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	b2db      	uxtb	r3, r3
 800b384:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	22ff      	movs	r2, #255	@ 0xff
 800b38a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	b2db      	uxtb	r3, r3
 800b392:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b394:	78fb      	ldrb	r3, [r7, #3]
 800b396:	b2db      	uxtb	r3, r3
 800b398:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b39c:	b2da      	uxtb	r2, r3
 800b39e:	4b31      	ldr	r3, [pc, #196]	@ (800b464 <xPortStartScheduler+0x134>)
 800b3a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b3a2:	4b31      	ldr	r3, [pc, #196]	@ (800b468 <xPortStartScheduler+0x138>)
 800b3a4:	2207      	movs	r2, #7
 800b3a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3a8:	e009      	b.n	800b3be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b3aa:	4b2f      	ldr	r3, [pc, #188]	@ (800b468 <xPortStartScheduler+0x138>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	4a2d      	ldr	r2, [pc, #180]	@ (800b468 <xPortStartScheduler+0x138>)
 800b3b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b3b4:	78fb      	ldrb	r3, [r7, #3]
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	005b      	lsls	r3, r3, #1
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3be:	78fb      	ldrb	r3, [r7, #3]
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3c6:	2b80      	cmp	r3, #128	@ 0x80
 800b3c8:	d0ef      	beq.n	800b3aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b3ca:	4b27      	ldr	r3, [pc, #156]	@ (800b468 <xPortStartScheduler+0x138>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f1c3 0307 	rsb	r3, r3, #7
 800b3d2:	2b04      	cmp	r3, #4
 800b3d4:	d00b      	beq.n	800b3ee <xPortStartScheduler+0xbe>
	__asm volatile
 800b3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3da:	f383 8811 	msr	BASEPRI, r3
 800b3de:	f3bf 8f6f 	isb	sy
 800b3e2:	f3bf 8f4f 	dsb	sy
 800b3e6:	60bb      	str	r3, [r7, #8]
}
 800b3e8:	bf00      	nop
 800b3ea:	bf00      	nop
 800b3ec:	e7fd      	b.n	800b3ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3ee:	4b1e      	ldr	r3, [pc, #120]	@ (800b468 <xPortStartScheduler+0x138>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	021b      	lsls	r3, r3, #8
 800b3f4:	4a1c      	ldr	r2, [pc, #112]	@ (800b468 <xPortStartScheduler+0x138>)
 800b3f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b3f8:	4b1b      	ldr	r3, [pc, #108]	@ (800b468 <xPortStartScheduler+0x138>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b400:	4a19      	ldr	r2, [pc, #100]	@ (800b468 <xPortStartScheduler+0x138>)
 800b402:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	b2da      	uxtb	r2, r3
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b40c:	4b17      	ldr	r3, [pc, #92]	@ (800b46c <xPortStartScheduler+0x13c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a16      	ldr	r2, [pc, #88]	@ (800b46c <xPortStartScheduler+0x13c>)
 800b412:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b416:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b418:	4b14      	ldr	r3, [pc, #80]	@ (800b46c <xPortStartScheduler+0x13c>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a13      	ldr	r2, [pc, #76]	@ (800b46c <xPortStartScheduler+0x13c>)
 800b41e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b422:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b424:	f000 f8da 	bl	800b5dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b428:	4b11      	ldr	r3, [pc, #68]	@ (800b470 <xPortStartScheduler+0x140>)
 800b42a:	2200      	movs	r2, #0
 800b42c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b42e:	f000 f8f9 	bl	800b624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b432:	4b10      	ldr	r3, [pc, #64]	@ (800b474 <xPortStartScheduler+0x144>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a0f      	ldr	r2, [pc, #60]	@ (800b474 <xPortStartScheduler+0x144>)
 800b438:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b43c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b43e:	f7ff ff63 	bl	800b308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b442:	f7ff f83f 	bl	800a4c4 <vTaskSwitchContext>
	prvTaskExitError();
 800b446:	f7ff ff1d 	bl	800b284 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3718      	adds	r7, #24
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	e000ed00 	.word	0xe000ed00
 800b458:	410fc271 	.word	0x410fc271
 800b45c:	410fc270 	.word	0x410fc270
 800b460:	e000e400 	.word	0xe000e400
 800b464:	20000f40 	.word	0x20000f40
 800b468:	20000f44 	.word	0x20000f44
 800b46c:	e000ed20 	.word	0xe000ed20
 800b470:	2000002c 	.word	0x2000002c
 800b474:	e000ef34 	.word	0xe000ef34

0800b478 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
	__asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	607b      	str	r3, [r7, #4]
}
 800b490:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b492:	4b10      	ldr	r3, [pc, #64]	@ (800b4d4 <vPortEnterCritical+0x5c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3301      	adds	r3, #1
 800b498:	4a0e      	ldr	r2, [pc, #56]	@ (800b4d4 <vPortEnterCritical+0x5c>)
 800b49a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b49c:	4b0d      	ldr	r3, [pc, #52]	@ (800b4d4 <vPortEnterCritical+0x5c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d110      	bne.n	800b4c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b4a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b4d8 <vPortEnterCritical+0x60>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00b      	beq.n	800b4c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	603b      	str	r3, [r7, #0]
}
 800b4c0:	bf00      	nop
 800b4c2:	bf00      	nop
 800b4c4:	e7fd      	b.n	800b4c2 <vPortEnterCritical+0x4a>
	}
}
 800b4c6:	bf00      	nop
 800b4c8:	370c      	adds	r7, #12
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	2000002c 	.word	0x2000002c
 800b4d8:	e000ed04 	.word	0xe000ed04

0800b4dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b4e2:	4b12      	ldr	r3, [pc, #72]	@ (800b52c <vPortExitCritical+0x50>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d10b      	bne.n	800b502 <vPortExitCritical+0x26>
	__asm volatile
 800b4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	607b      	str	r3, [r7, #4]
}
 800b4fc:	bf00      	nop
 800b4fe:	bf00      	nop
 800b500:	e7fd      	b.n	800b4fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b502:	4b0a      	ldr	r3, [pc, #40]	@ (800b52c <vPortExitCritical+0x50>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	3b01      	subs	r3, #1
 800b508:	4a08      	ldr	r2, [pc, #32]	@ (800b52c <vPortExitCritical+0x50>)
 800b50a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b50c:	4b07      	ldr	r3, [pc, #28]	@ (800b52c <vPortExitCritical+0x50>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d105      	bne.n	800b520 <vPortExitCritical+0x44>
 800b514:	2300      	movs	r3, #0
 800b516:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	f383 8811 	msr	BASEPRI, r3
}
 800b51e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr
 800b52c:	2000002c 	.word	0x2000002c

0800b530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b530:	f3ef 8009 	mrs	r0, PSP
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	4b15      	ldr	r3, [pc, #84]	@ (800b590 <pxCurrentTCBConst>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	f01e 0f10 	tst.w	lr, #16
 800b540:	bf08      	it	eq
 800b542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54a:	6010      	str	r0, [r2, #0]
 800b54c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b550:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b554:	f380 8811 	msr	BASEPRI, r0
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f7fe ffb0 	bl	800a4c4 <vTaskSwitchContext>
 800b564:	f04f 0000 	mov.w	r0, #0
 800b568:	f380 8811 	msr	BASEPRI, r0
 800b56c:	bc09      	pop	{r0, r3}
 800b56e:	6819      	ldr	r1, [r3, #0]
 800b570:	6808      	ldr	r0, [r1, #0]
 800b572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b576:	f01e 0f10 	tst.w	lr, #16
 800b57a:	bf08      	it	eq
 800b57c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b580:	f380 8809 	msr	PSP, r0
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	f3af 8000 	nop.w

0800b590 <pxCurrentTCBConst>:
 800b590:	20000914 	.word	0x20000914
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b594:	bf00      	nop
 800b596:	bf00      	nop

0800b598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
	__asm volatile
 800b59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a2:	f383 8811 	msr	BASEPRI, r3
 800b5a6:	f3bf 8f6f 	isb	sy
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	607b      	str	r3, [r7, #4]
}
 800b5b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b5b2:	f7fe fecd 	bl	800a350 <xTaskIncrementTick>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d003      	beq.n	800b5c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b5bc:	4b06      	ldr	r3, [pc, #24]	@ (800b5d8 <xPortSysTickHandler+0x40>)
 800b5be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5c2:	601a      	str	r2, [r3, #0]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	f383 8811 	msr	BASEPRI, r3
}
 800b5ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b5d0:	bf00      	nop
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	e000ed04 	.word	0xe000ed04

0800b5dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b5dc:	b480      	push	{r7}
 800b5de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5e0:	4b0b      	ldr	r3, [pc, #44]	@ (800b610 <vPortSetupTimerInterrupt+0x34>)
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b614 <vPortSetupTimerInterrupt+0x38>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b618 <vPortSetupTimerInterrupt+0x3c>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a0a      	ldr	r2, [pc, #40]	@ (800b61c <vPortSetupTimerInterrupt+0x40>)
 800b5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5f6:	099b      	lsrs	r3, r3, #6
 800b5f8:	4a09      	ldr	r2, [pc, #36]	@ (800b620 <vPortSetupTimerInterrupt+0x44>)
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b5fe:	4b04      	ldr	r3, [pc, #16]	@ (800b610 <vPortSetupTimerInterrupt+0x34>)
 800b600:	2207      	movs	r2, #7
 800b602:	601a      	str	r2, [r3, #0]
}
 800b604:	bf00      	nop
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	e000e010 	.word	0xe000e010
 800b614:	e000e018 	.word	0xe000e018
 800b618:	20000000 	.word	0x20000000
 800b61c:	10624dd3 	.word	0x10624dd3
 800b620:	e000e014 	.word	0xe000e014

0800b624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b624:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b634 <vPortEnableVFP+0x10>
 800b628:	6801      	ldr	r1, [r0, #0]
 800b62a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b62e:	6001      	str	r1, [r0, #0]
 800b630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b632:	bf00      	nop
 800b634:	e000ed88 	.word	0xe000ed88

0800b638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b63e:	f3ef 8305 	mrs	r3, IPSR
 800b642:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b0f      	cmp	r3, #15
 800b648:	d915      	bls.n	800b676 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b64a:	4a18      	ldr	r2, [pc, #96]	@ (800b6ac <vPortValidateInterruptPriority+0x74>)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	4413      	add	r3, r2
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b654:	4b16      	ldr	r3, [pc, #88]	@ (800b6b0 <vPortValidateInterruptPriority+0x78>)
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	7afa      	ldrb	r2, [r7, #11]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d20b      	bcs.n	800b676 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	607b      	str	r3, [r7, #4]
}
 800b670:	bf00      	nop
 800b672:	bf00      	nop
 800b674:	e7fd      	b.n	800b672 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b676:	4b0f      	ldr	r3, [pc, #60]	@ (800b6b4 <vPortValidateInterruptPriority+0x7c>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b67e:	4b0e      	ldr	r3, [pc, #56]	@ (800b6b8 <vPortValidateInterruptPriority+0x80>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	429a      	cmp	r2, r3
 800b684:	d90b      	bls.n	800b69e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68a:	f383 8811 	msr	BASEPRI, r3
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	603b      	str	r3, [r7, #0]
}
 800b698:	bf00      	nop
 800b69a:	bf00      	nop
 800b69c:	e7fd      	b.n	800b69a <vPortValidateInterruptPriority+0x62>
	}
 800b69e:	bf00      	nop
 800b6a0:	3714      	adds	r7, #20
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	e000e3f0 	.word	0xe000e3f0
 800b6b0:	20000f40 	.word	0x20000f40
 800b6b4:	e000ed0c 	.word	0xe000ed0c
 800b6b8:	20000f44 	.word	0x20000f44

0800b6bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b08a      	sub	sp, #40	@ 0x28
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b6c8:	f7fe fd86 	bl	800a1d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b6cc:	4b5c      	ldr	r3, [pc, #368]	@ (800b840 <pvPortMalloc+0x184>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d101      	bne.n	800b6d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b6d4:	f000 f924 	bl	800b920 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b6d8:	4b5a      	ldr	r3, [pc, #360]	@ (800b844 <pvPortMalloc+0x188>)
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4013      	ands	r3, r2
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f040 8095 	bne.w	800b810 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d01e      	beq.n	800b72a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b6ec:	2208      	movs	r2, #8
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f003 0307 	and.w	r3, r3, #7
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d015      	beq.n	800b72a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f023 0307 	bic.w	r3, r3, #7
 800b704:	3308      	adds	r3, #8
 800b706:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f003 0307 	and.w	r3, r3, #7
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00b      	beq.n	800b72a <pvPortMalloc+0x6e>
	__asm volatile
 800b712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b716:	f383 8811 	msr	BASEPRI, r3
 800b71a:	f3bf 8f6f 	isb	sy
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	617b      	str	r3, [r7, #20]
}
 800b724:	bf00      	nop
 800b726:	bf00      	nop
 800b728:	e7fd      	b.n	800b726 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d06f      	beq.n	800b810 <pvPortMalloc+0x154>
 800b730:	4b45      	ldr	r3, [pc, #276]	@ (800b848 <pvPortMalloc+0x18c>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	429a      	cmp	r2, r3
 800b738:	d86a      	bhi.n	800b810 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b73a:	4b44      	ldr	r3, [pc, #272]	@ (800b84c <pvPortMalloc+0x190>)
 800b73c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b73e:	4b43      	ldr	r3, [pc, #268]	@ (800b84c <pvPortMalloc+0x190>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b744:	e004      	b.n	800b750 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b748:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	429a      	cmp	r2, r3
 800b758:	d903      	bls.n	800b762 <pvPortMalloc+0xa6>
 800b75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1f1      	bne.n	800b746 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b762:	4b37      	ldr	r3, [pc, #220]	@ (800b840 <pvPortMalloc+0x184>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b768:	429a      	cmp	r2, r3
 800b76a:	d051      	beq.n	800b810 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b76c:	6a3b      	ldr	r3, [r7, #32]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2208      	movs	r2, #8
 800b772:	4413      	add	r3, r2
 800b774:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	6a3b      	ldr	r3, [r7, #32]
 800b77c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b780:	685a      	ldr	r2, [r3, #4]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	1ad2      	subs	r2, r2, r3
 800b786:	2308      	movs	r3, #8
 800b788:	005b      	lsls	r3, r3, #1
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d920      	bls.n	800b7d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b78e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4413      	add	r3, r2
 800b794:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	f003 0307 	and.w	r3, r3, #7
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00b      	beq.n	800b7b8 <pvPortMalloc+0xfc>
	__asm volatile
 800b7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	613b      	str	r3, [r7, #16]
}
 800b7b2:	bf00      	nop
 800b7b4:	bf00      	nop
 800b7b6:	e7fd      	b.n	800b7b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ba:	685a      	ldr	r2, [r3, #4]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	1ad2      	subs	r2, r2, r3
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b7ca:	69b8      	ldr	r0, [r7, #24]
 800b7cc:	f000 f90a 	bl	800b9e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b7d0:	4b1d      	ldr	r3, [pc, #116]	@ (800b848 <pvPortMalloc+0x18c>)
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	1ad3      	subs	r3, r2, r3
 800b7da:	4a1b      	ldr	r2, [pc, #108]	@ (800b848 <pvPortMalloc+0x18c>)
 800b7dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b7de:	4b1a      	ldr	r3, [pc, #104]	@ (800b848 <pvPortMalloc+0x18c>)
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	4b1b      	ldr	r3, [pc, #108]	@ (800b850 <pvPortMalloc+0x194>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d203      	bcs.n	800b7f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b7ea:	4b17      	ldr	r3, [pc, #92]	@ (800b848 <pvPortMalloc+0x18c>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a18      	ldr	r2, [pc, #96]	@ (800b850 <pvPortMalloc+0x194>)
 800b7f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f4:	685a      	ldr	r2, [r3, #4]
 800b7f6:	4b13      	ldr	r3, [pc, #76]	@ (800b844 <pvPortMalloc+0x188>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	431a      	orrs	r2, r3
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b802:	2200      	movs	r2, #0
 800b804:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b806:	4b13      	ldr	r3, [pc, #76]	@ (800b854 <pvPortMalloc+0x198>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	3301      	adds	r3, #1
 800b80c:	4a11      	ldr	r2, [pc, #68]	@ (800b854 <pvPortMalloc+0x198>)
 800b80e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b810:	f7fe fcf0 	bl	800a1f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	f003 0307 	and.w	r3, r3, #7
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00b      	beq.n	800b836 <pvPortMalloc+0x17a>
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	60fb      	str	r3, [r7, #12]
}
 800b830:	bf00      	nop
 800b832:	bf00      	nop
 800b834:	e7fd      	b.n	800b832 <pvPortMalloc+0x176>
	return pvReturn;
 800b836:	69fb      	ldr	r3, [r7, #28]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3728      	adds	r7, #40	@ 0x28
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	20004b50 	.word	0x20004b50
 800b844:	20004b64 	.word	0x20004b64
 800b848:	20004b54 	.word	0x20004b54
 800b84c:	20004b48 	.word	0x20004b48
 800b850:	20004b58 	.word	0x20004b58
 800b854:	20004b5c 	.word	0x20004b5c

0800b858 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d04f      	beq.n	800b90a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b86a:	2308      	movs	r3, #8
 800b86c:	425b      	negs	r3, r3
 800b86e:	697a      	ldr	r2, [r7, #20]
 800b870:	4413      	add	r3, r2
 800b872:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	685a      	ldr	r2, [r3, #4]
 800b87c:	4b25      	ldr	r3, [pc, #148]	@ (800b914 <vPortFree+0xbc>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4013      	ands	r3, r2
 800b882:	2b00      	cmp	r3, #0
 800b884:	d10b      	bne.n	800b89e <vPortFree+0x46>
	__asm volatile
 800b886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b88a:	f383 8811 	msr	BASEPRI, r3
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f3bf 8f4f 	dsb	sy
 800b896:	60fb      	str	r3, [r7, #12]
}
 800b898:	bf00      	nop
 800b89a:	bf00      	nop
 800b89c:	e7fd      	b.n	800b89a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00b      	beq.n	800b8be <vPortFree+0x66>
	__asm volatile
 800b8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8aa:	f383 8811 	msr	BASEPRI, r3
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	60bb      	str	r3, [r7, #8]
}
 800b8b8:	bf00      	nop
 800b8ba:	bf00      	nop
 800b8bc:	e7fd      	b.n	800b8ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	685a      	ldr	r2, [r3, #4]
 800b8c2:	4b14      	ldr	r3, [pc, #80]	@ (800b914 <vPortFree+0xbc>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4013      	ands	r3, r2
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d01e      	beq.n	800b90a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d11a      	bne.n	800b90a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	685a      	ldr	r2, [r3, #4]
 800b8d8:	4b0e      	ldr	r3, [pc, #56]	@ (800b914 <vPortFree+0xbc>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	43db      	mvns	r3, r3
 800b8de:	401a      	ands	r2, r3
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b8e4:	f7fe fc78 	bl	800a1d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	685a      	ldr	r2, [r3, #4]
 800b8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b918 <vPortFree+0xc0>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	4a09      	ldr	r2, [pc, #36]	@ (800b918 <vPortFree+0xc0>)
 800b8f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b8f6:	6938      	ldr	r0, [r7, #16]
 800b8f8:	f000 f874 	bl	800b9e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b8fc:	4b07      	ldr	r3, [pc, #28]	@ (800b91c <vPortFree+0xc4>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	3301      	adds	r3, #1
 800b902:	4a06      	ldr	r2, [pc, #24]	@ (800b91c <vPortFree+0xc4>)
 800b904:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b906:	f7fe fc75 	bl	800a1f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b90a:	bf00      	nop
 800b90c:	3718      	adds	r7, #24
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	20004b64 	.word	0x20004b64
 800b918:	20004b54 	.word	0x20004b54
 800b91c:	20004b60 	.word	0x20004b60

0800b920 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b926:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b92a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b92c:	4b27      	ldr	r3, [pc, #156]	@ (800b9cc <prvHeapInit+0xac>)
 800b92e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f003 0307 	and.w	r3, r3, #7
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00c      	beq.n	800b954 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3307      	adds	r3, #7
 800b93e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f023 0307 	bic.w	r3, r3, #7
 800b946:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	1ad3      	subs	r3, r2, r3
 800b94e:	4a1f      	ldr	r2, [pc, #124]	@ (800b9cc <prvHeapInit+0xac>)
 800b950:	4413      	add	r3, r2
 800b952:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b958:	4a1d      	ldr	r2, [pc, #116]	@ (800b9d0 <prvHeapInit+0xb0>)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b95e:	4b1c      	ldr	r3, [pc, #112]	@ (800b9d0 <prvHeapInit+0xb0>)
 800b960:	2200      	movs	r2, #0
 800b962:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	68ba      	ldr	r2, [r7, #8]
 800b968:	4413      	add	r3, r2
 800b96a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b96c:	2208      	movs	r2, #8
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	1a9b      	subs	r3, r3, r2
 800b972:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f023 0307 	bic.w	r3, r3, #7
 800b97a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	4a15      	ldr	r2, [pc, #84]	@ (800b9d4 <prvHeapInit+0xb4>)
 800b980:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b982:	4b14      	ldr	r3, [pc, #80]	@ (800b9d4 <prvHeapInit+0xb4>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2200      	movs	r2, #0
 800b988:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b98a:	4b12      	ldr	r3, [pc, #72]	@ (800b9d4 <prvHeapInit+0xb4>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2200      	movs	r2, #0
 800b990:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	1ad2      	subs	r2, r2, r3
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b9a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b9d4 <prvHeapInit+0xb4>)
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	4a0a      	ldr	r2, [pc, #40]	@ (800b9d8 <prvHeapInit+0xb8>)
 800b9ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	4a09      	ldr	r2, [pc, #36]	@ (800b9dc <prvHeapInit+0xbc>)
 800b9b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b9b8:	4b09      	ldr	r3, [pc, #36]	@ (800b9e0 <prvHeapInit+0xc0>)
 800b9ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b9be:	601a      	str	r2, [r3, #0]
}
 800b9c0:	bf00      	nop
 800b9c2:	3714      	adds	r7, #20
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	20000f48 	.word	0x20000f48
 800b9d0:	20004b48 	.word	0x20004b48
 800b9d4:	20004b50 	.word	0x20004b50
 800b9d8:	20004b58 	.word	0x20004b58
 800b9dc:	20004b54 	.word	0x20004b54
 800b9e0:	20004b64 	.word	0x20004b64

0800b9e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b9ec:	4b28      	ldr	r3, [pc, #160]	@ (800ba90 <prvInsertBlockIntoFreeList+0xac>)
 800b9ee:	60fb      	str	r3, [r7, #12]
 800b9f0:	e002      	b.n	800b9f8 <prvInsertBlockIntoFreeList+0x14>
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	60fb      	str	r3, [r7, #12]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d8f7      	bhi.n	800b9f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d108      	bne.n	800ba26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	685a      	ldr	r2, [r3, #4]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	441a      	add	r2, r3
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	441a      	add	r2, r3
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d118      	bne.n	800ba6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	4b15      	ldr	r3, [pc, #84]	@ (800ba94 <prvInsertBlockIntoFreeList+0xb0>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d00d      	beq.n	800ba62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	685a      	ldr	r2, [r3, #4]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	441a      	add	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	601a      	str	r2, [r3, #0]
 800ba60:	e008      	b.n	800ba74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba62:	4b0c      	ldr	r3, [pc, #48]	@ (800ba94 <prvInsertBlockIntoFreeList+0xb0>)
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	601a      	str	r2, [r3, #0]
 800ba6a:	e003      	b.n	800ba74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d002      	beq.n	800ba82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba82:	bf00      	nop
 800ba84:	3714      	adds	r7, #20
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	20004b48 	.word	0x20004b48
 800ba94:	20004b50 	.word	0x20004b50

0800ba98 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	490e      	ldr	r1, [pc, #56]	@ (800bad8 <MX_USB_HOST_Init+0x40>)
 800baa0:	480e      	ldr	r0, [pc, #56]	@ (800badc <MX_USB_HOST_Init+0x44>)
 800baa2:	f7fb f945 	bl	8006d30 <USBH_Init>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d001      	beq.n	800bab0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800baac:	f7f4 ffc8 	bl	8000a40 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bab0:	490b      	ldr	r1, [pc, #44]	@ (800bae0 <MX_USB_HOST_Init+0x48>)
 800bab2:	480a      	ldr	r0, [pc, #40]	@ (800badc <MX_USB_HOST_Init+0x44>)
 800bab4:	f7fb fa0b 	bl	8006ece <USBH_RegisterClass>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b00      	cmp	r3, #0
 800babc:	d001      	beq.n	800bac2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800babe:	f7f4 ffbf 	bl	8000a40 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bac2:	4806      	ldr	r0, [pc, #24]	@ (800badc <MX_USB_HOST_Init+0x44>)
 800bac4:	f7fb fa8f 	bl	8006fe6 <USBH_Start>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d001      	beq.n	800bad2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bace:	f7f4 ffb7 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bad2:	bf00      	nop
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	0800bae5 	.word	0x0800bae5
 800badc:	20004b68 	.word	0x20004b68
 800bae0:	2000000c 	.word	0x2000000c

0800bae4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	460b      	mov	r3, r1
 800baee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800baf0:	78fb      	ldrb	r3, [r7, #3]
 800baf2:	3b01      	subs	r3, #1
 800baf4:	2b04      	cmp	r3, #4
 800baf6:	d819      	bhi.n	800bb2c <USBH_UserProcess+0x48>
 800baf8:	a201      	add	r2, pc, #4	@ (adr r2, 800bb00 <USBH_UserProcess+0x1c>)
 800bafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafe:	bf00      	nop
 800bb00:	0800bb2d 	.word	0x0800bb2d
 800bb04:	0800bb1d 	.word	0x0800bb1d
 800bb08:	0800bb2d 	.word	0x0800bb2d
 800bb0c:	0800bb25 	.word	0x0800bb25
 800bb10:	0800bb15 	.word	0x0800bb15
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bb14:	4b09      	ldr	r3, [pc, #36]	@ (800bb3c <USBH_UserProcess+0x58>)
 800bb16:	2203      	movs	r2, #3
 800bb18:	701a      	strb	r2, [r3, #0]
  break;
 800bb1a:	e008      	b.n	800bb2e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bb1c:	4b07      	ldr	r3, [pc, #28]	@ (800bb3c <USBH_UserProcess+0x58>)
 800bb1e:	2202      	movs	r2, #2
 800bb20:	701a      	strb	r2, [r3, #0]
  break;
 800bb22:	e004      	b.n	800bb2e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bb24:	4b05      	ldr	r3, [pc, #20]	@ (800bb3c <USBH_UserProcess+0x58>)
 800bb26:	2201      	movs	r2, #1
 800bb28:	701a      	strb	r2, [r3, #0]
  break;
 800bb2a:	e000      	b.n	800bb2e <USBH_UserProcess+0x4a>

  default:
  break;
 800bb2c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bb2e:	bf00      	nop
 800bb30:	370c      	adds	r7, #12
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	20004f4c 	.word	0x20004f4c

0800bb40 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b08a      	sub	sp, #40	@ 0x28
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb48:	f107 0314 	add.w	r3, r7, #20
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	601a      	str	r2, [r3, #0]
 800bb50:	605a      	str	r2, [r3, #4]
 800bb52:	609a      	str	r2, [r3, #8]
 800bb54:	60da      	str	r2, [r3, #12]
 800bb56:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb60:	d147      	bne.n	800bbf2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb62:	2300      	movs	r3, #0
 800bb64:	613b      	str	r3, [r7, #16]
 800bb66:	4b25      	ldr	r3, [pc, #148]	@ (800bbfc <HAL_HCD_MspInit+0xbc>)
 800bb68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb6a:	4a24      	ldr	r2, [pc, #144]	@ (800bbfc <HAL_HCD_MspInit+0xbc>)
 800bb6c:	f043 0301 	orr.w	r3, r3, #1
 800bb70:	6313      	str	r3, [r2, #48]	@ 0x30
 800bb72:	4b22      	ldr	r3, [pc, #136]	@ (800bbfc <HAL_HCD_MspInit+0xbc>)
 800bb74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	613b      	str	r3, [r7, #16]
 800bb7c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bb7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bb84:	2300      	movs	r3, #0
 800bb86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bb8c:	f107 0314 	add.w	r3, r7, #20
 800bb90:	4619      	mov	r1, r3
 800bb92:	481b      	ldr	r0, [pc, #108]	@ (800bc00 <HAL_HCD_MspInit+0xc0>)
 800bb94:	f7f5 fb04 	bl	80011a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bb98:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800bb9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb9e:	2302      	movs	r3, #2
 800bba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bba2:	2300      	movs	r3, #0
 800bba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bba6:	2300      	movs	r3, #0
 800bba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bbaa:	230a      	movs	r3, #10
 800bbac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbae:	f107 0314 	add.w	r3, r7, #20
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	4812      	ldr	r0, [pc, #72]	@ (800bc00 <HAL_HCD_MspInit+0xc0>)
 800bbb6:	f7f5 faf3 	bl	80011a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bbba:	4b10      	ldr	r3, [pc, #64]	@ (800bbfc <HAL_HCD_MspInit+0xbc>)
 800bbbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbbe:	4a0f      	ldr	r2, [pc, #60]	@ (800bbfc <HAL_HCD_MspInit+0xbc>)
 800bbc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbc4:	6353      	str	r3, [r2, #52]	@ 0x34
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	60fb      	str	r3, [r7, #12]
 800bbca:	4b0c      	ldr	r3, [pc, #48]	@ (800bbfc <HAL_HCD_MspInit+0xbc>)
 800bbcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbce:	4a0b      	ldr	r2, [pc, #44]	@ (800bbfc <HAL_HCD_MspInit+0xbc>)
 800bbd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bbd4:	6453      	str	r3, [r2, #68]	@ 0x44
 800bbd6:	4b09      	ldr	r3, [pc, #36]	@ (800bbfc <HAL_HCD_MspInit+0xbc>)
 800bbd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bbde:	60fb      	str	r3, [r7, #12]
 800bbe0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	2105      	movs	r1, #5
 800bbe6:	2043      	movs	r0, #67	@ 0x43
 800bbe8:	f7f5 faa3 	bl	8001132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bbec:	2043      	movs	r0, #67	@ 0x43
 800bbee:	f7f5 fabc 	bl	800116a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bbf2:	bf00      	nop
 800bbf4:	3728      	adds	r7, #40	@ 0x28
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	40023800 	.word	0x40023800
 800bc00:	40020000 	.word	0x40020000

0800bc04 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7fb fe99 	bl	800794a <USBH_LL_IncTimer>
}
 800bc18:	bf00      	nop
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fb fedd 	bl	80079ee <USBH_LL_Connect>
}
 800bc34:	bf00      	nop
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fb fef2 	bl	8007a34 <USBH_LL_Disconnect>
}
 800bc50:	bf00      	nop
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	460b      	mov	r3, r1
 800bc62:	70fb      	strb	r3, [r7, #3]
 800bc64:	4613      	mov	r3, r2
 800bc66:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fb ff29 	bl	8007ac6 <USBH_LL_NotifyURBChange>
#endif
}
 800bc74:	bf00      	nop
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7fb fe87 	bl	800799e <USBH_LL_PortEnabled>
}
 800bc90:	bf00      	nop
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7fb fe93 	bl	80079d2 <USBH_LL_PortDisabled>
}
 800bcac:	bf00      	nop
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d12a      	bne.n	800bd1c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bcc6:	4a18      	ldr	r2, [pc, #96]	@ (800bd28 <USBH_LL_Init+0x74>)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a15      	ldr	r2, [pc, #84]	@ (800bd28 <USBH_LL_Init+0x74>)
 800bcd2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bcd6:	4b14      	ldr	r3, [pc, #80]	@ (800bd28 <USBH_LL_Init+0x74>)
 800bcd8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bcdc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bcde:	4b12      	ldr	r3, [pc, #72]	@ (800bd28 <USBH_LL_Init+0x74>)
 800bce0:	2208      	movs	r2, #8
 800bce2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bce4:	4b10      	ldr	r3, [pc, #64]	@ (800bd28 <USBH_LL_Init+0x74>)
 800bce6:	2201      	movs	r2, #1
 800bce8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bcea:	4b0f      	ldr	r3, [pc, #60]	@ (800bd28 <USBH_LL_Init+0x74>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bcf0:	4b0d      	ldr	r3, [pc, #52]	@ (800bd28 <USBH_LL_Init+0x74>)
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bcf6:	4b0c      	ldr	r3, [pc, #48]	@ (800bd28 <USBH_LL_Init+0x74>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bcfc:	480a      	ldr	r0, [pc, #40]	@ (800bd28 <USBH_LL_Init+0x74>)
 800bcfe:	f7f5 fc04 	bl	800150a <HAL_HCD_Init>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d001      	beq.n	800bd0c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bd08:	f7f4 fe9a 	bl	8000a40 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bd0c:	4806      	ldr	r0, [pc, #24]	@ (800bd28 <USBH_LL_Init+0x74>)
 800bd0e:	f7f6 f865 	bl	8001ddc <HAL_HCD_GetCurrentFrame>
 800bd12:	4603      	mov	r3, r0
 800bd14:	4619      	mov	r1, r3
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f7fb fe08 	bl	800792c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3708      	adds	r7, #8
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	20004f50 	.word	0x20004f50

0800bd2c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7f5 ffd2 	bl	8001cec <HAL_HCD_Start>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f000 f95e 	bl	800c010 <USBH_Get_USB_Status>
 800bd54:	4603      	mov	r3, r0
 800bd56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd58:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b084      	sub	sp, #16
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7f5 ffda 	bl	8001d32 <HAL_HCD_Stop>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd82:	7bfb      	ldrb	r3, [r7, #15]
 800bd84:	4618      	mov	r0, r3
 800bd86:	f000 f943 	bl	800c010 <USBH_Get_USB_Status>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bda0:	2301      	movs	r3, #1
 800bda2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7f6 f824 	bl	8001df8 <HAL_HCD_GetCurrentSpeed>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	d00c      	beq.n	800bdd0 <USBH_LL_GetSpeed+0x38>
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d80d      	bhi.n	800bdd6 <USBH_LL_GetSpeed+0x3e>
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d002      	beq.n	800bdc4 <USBH_LL_GetSpeed+0x2c>
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d003      	beq.n	800bdca <USBH_LL_GetSpeed+0x32>
 800bdc2:	e008      	b.n	800bdd6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc8:	e008      	b.n	800bddc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	73fb      	strb	r3, [r7, #15]
    break;
 800bdce:	e005      	b.n	800bddc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bdd0:	2302      	movs	r3, #2
 800bdd2:	73fb      	strb	r3, [r7, #15]
    break;
 800bdd4:	e002      	b.n	800bddc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	73fb      	strb	r3, [r7, #15]
    break;
 800bdda:	bf00      	nop
  }
  return  speed;
 800bddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b084      	sub	sp, #16
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7f5 ffb5 	bl	8001d6c <HAL_HCD_ResetPort>
 800be02:	4603      	mov	r3, r0
 800be04:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be06:	7bfb      	ldrb	r3, [r7, #15]
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 f901 	bl	800c010 <USBH_Get_USB_Status>
 800be0e:	4603      	mov	r3, r0
 800be10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be12:	7bbb      	ldrb	r3, [r7, #14]
}
 800be14:	4618      	mov	r0, r3
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	460b      	mov	r3, r1
 800be26:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be2e:	78fa      	ldrb	r2, [r7, #3]
 800be30:	4611      	mov	r1, r2
 800be32:	4618      	mov	r0, r3
 800be34:	f7f5 ffbd 	bl	8001db2 <HAL_HCD_HC_GetXferCount>
 800be38:	4603      	mov	r3, r0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800be42:	b590      	push	{r4, r7, lr}
 800be44:	b089      	sub	sp, #36	@ 0x24
 800be46:	af04      	add	r7, sp, #16
 800be48:	6078      	str	r0, [r7, #4]
 800be4a:	4608      	mov	r0, r1
 800be4c:	4611      	mov	r1, r2
 800be4e:	461a      	mov	r2, r3
 800be50:	4603      	mov	r3, r0
 800be52:	70fb      	strb	r3, [r7, #3]
 800be54:	460b      	mov	r3, r1
 800be56:	70bb      	strb	r3, [r7, #2]
 800be58:	4613      	mov	r3, r2
 800be5a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be5c:	2300      	movs	r3, #0
 800be5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be60:	2300      	movs	r3, #0
 800be62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800be6a:	787c      	ldrb	r4, [r7, #1]
 800be6c:	78ba      	ldrb	r2, [r7, #2]
 800be6e:	78f9      	ldrb	r1, [r7, #3]
 800be70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800be72:	9302      	str	r3, [sp, #8]
 800be74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800be78:	9301      	str	r3, [sp, #4]
 800be7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	4623      	mov	r3, r4
 800be82:	f7f5 fba9 	bl	80015d8 <HAL_HCD_HC_Init>
 800be86:	4603      	mov	r3, r0
 800be88:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f000 f8bf 	bl	800c010 <USBH_Get_USB_Status>
 800be92:	4603      	mov	r3, r0
 800be94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be96:	7bbb      	ldrb	r3, [r7, #14]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3714      	adds	r7, #20
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd90      	pop	{r4, r7, pc}

0800bea0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	460b      	mov	r3, r1
 800beaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beac:	2300      	movs	r3, #0
 800beae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800beba:	78fa      	ldrb	r2, [r7, #3]
 800bebc:	4611      	mov	r1, r2
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7f5 fc42 	bl	8001748 <HAL_HCD_HC_Halt>
 800bec4:	4603      	mov	r3, r0
 800bec6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bec8:	7bfb      	ldrb	r3, [r7, #15]
 800beca:	4618      	mov	r0, r3
 800becc:	f000 f8a0 	bl	800c010 <USBH_Get_USB_Status>
 800bed0:	4603      	mov	r3, r0
 800bed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bed4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bede:	b590      	push	{r4, r7, lr}
 800bee0:	b089      	sub	sp, #36	@ 0x24
 800bee2:	af04      	add	r7, sp, #16
 800bee4:	6078      	str	r0, [r7, #4]
 800bee6:	4608      	mov	r0, r1
 800bee8:	4611      	mov	r1, r2
 800beea:	461a      	mov	r2, r3
 800beec:	4603      	mov	r3, r0
 800beee:	70fb      	strb	r3, [r7, #3]
 800bef0:	460b      	mov	r3, r1
 800bef2:	70bb      	strb	r3, [r7, #2]
 800bef4:	4613      	mov	r3, r2
 800bef6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bf06:	787c      	ldrb	r4, [r7, #1]
 800bf08:	78ba      	ldrb	r2, [r7, #2]
 800bf0a:	78f9      	ldrb	r1, [r7, #3]
 800bf0c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bf10:	9303      	str	r3, [sp, #12]
 800bf12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bf14:	9302      	str	r3, [sp, #8]
 800bf16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf18:	9301      	str	r3, [sp, #4]
 800bf1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	4623      	mov	r3, r4
 800bf22:	f7f5 fc35 	bl	8001790 <HAL_HCD_HC_SubmitRequest>
 800bf26:	4603      	mov	r3, r0
 800bf28:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bf2a:	7bfb      	ldrb	r3, [r7, #15]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f000 f86f 	bl	800c010 <USBH_Get_USB_Status>
 800bf32:	4603      	mov	r3, r0
 800bf34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf36:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3714      	adds	r7, #20
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd90      	pop	{r4, r7, pc}

0800bf40 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bf52:	78fa      	ldrb	r2, [r7, #3]
 800bf54:	4611      	mov	r1, r2
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7f5 ff16 	bl	8001d88 <HAL_HCD_HC_GetURBState>
 800bf5c:	4603      	mov	r3, r0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b082      	sub	sp, #8
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
 800bf6e:	460b      	mov	r3, r1
 800bf70:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d103      	bne.n	800bf84 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bf7c:	78fb      	ldrb	r3, [r7, #3]
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f000 f872 	bl	800c068 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bf84:	20c8      	movs	r0, #200	@ 0xc8
 800bf86:	f7f4 ffd5 	bl	8000f34 <HAL_Delay>
  return USBH_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	70fb      	strb	r3, [r7, #3]
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bfaa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bfac:	78fa      	ldrb	r2, [r7, #3]
 800bfae:	68f9      	ldr	r1, [r7, #12]
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	011b      	lsls	r3, r3, #4
 800bfb4:	1a9b      	subs	r3, r3, r2
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	440b      	add	r3, r1
 800bfba:	3317      	adds	r3, #23
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00a      	beq.n	800bfd8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bfc2:	78fa      	ldrb	r2, [r7, #3]
 800bfc4:	68f9      	ldr	r1, [r7, #12]
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	011b      	lsls	r3, r3, #4
 800bfca:	1a9b      	subs	r3, r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	440b      	add	r3, r1
 800bfd0:	333c      	adds	r3, #60	@ 0x3c
 800bfd2:	78ba      	ldrb	r2, [r7, #2]
 800bfd4:	701a      	strb	r2, [r3, #0]
 800bfd6:	e009      	b.n	800bfec <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bfd8:	78fa      	ldrb	r2, [r7, #3]
 800bfda:	68f9      	ldr	r1, [r7, #12]
 800bfdc:	4613      	mov	r3, r2
 800bfde:	011b      	lsls	r3, r3, #4
 800bfe0:	1a9b      	subs	r3, r3, r2
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	440b      	add	r3, r1
 800bfe6:	333d      	adds	r3, #61	@ 0x3d
 800bfe8:	78ba      	ldrb	r2, [r7, #2]
 800bfea:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3714      	adds	r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr

0800bffa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b082      	sub	sp, #8
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7f4 ff96 	bl	8000f34 <HAL_Delay>
}
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	4603      	mov	r3, r0
 800c018:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c01e:	79fb      	ldrb	r3, [r7, #7]
 800c020:	2b03      	cmp	r3, #3
 800c022:	d817      	bhi.n	800c054 <USBH_Get_USB_Status+0x44>
 800c024:	a201      	add	r2, pc, #4	@ (adr r2, 800c02c <USBH_Get_USB_Status+0x1c>)
 800c026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c02a:	bf00      	nop
 800c02c:	0800c03d 	.word	0x0800c03d
 800c030:	0800c043 	.word	0x0800c043
 800c034:	0800c049 	.word	0x0800c049
 800c038:	0800c04f 	.word	0x0800c04f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	73fb      	strb	r3, [r7, #15]
    break;
 800c040:	e00b      	b.n	800c05a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c042:	2302      	movs	r3, #2
 800c044:	73fb      	strb	r3, [r7, #15]
    break;
 800c046:	e008      	b.n	800c05a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c048:	2301      	movs	r3, #1
 800c04a:	73fb      	strb	r3, [r7, #15]
    break;
 800c04c:	e005      	b.n	800c05a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c04e:	2302      	movs	r3, #2
 800c050:	73fb      	strb	r3, [r7, #15]
    break;
 800c052:	e002      	b.n	800c05a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c054:	2302      	movs	r3, #2
 800c056:	73fb      	strb	r3, [r7, #15]
    break;
 800c058:	bf00      	nop
  }
  return usb_status;
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	4603      	mov	r3, r0
 800c070:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c072:	79fb      	ldrb	r3, [r7, #7]
 800c074:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c076:	79fb      	ldrb	r3, [r7, #7]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d102      	bne.n	800c082 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c07c:	2300      	movs	r3, #0
 800c07e:	73fb      	strb	r3, [r7, #15]
 800c080:	e001      	b.n	800c086 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c082:	2301      	movs	r3, #1
 800c084:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c086:	7bfb      	ldrb	r3, [r7, #15]
 800c088:	461a      	mov	r2, r3
 800c08a:	2101      	movs	r1, #1
 800c08c:	4803      	ldr	r0, [pc, #12]	@ (800c09c <MX_DriverVbusFS+0x34>)
 800c08e:	f7f5 fa23 	bl	80014d8 <HAL_GPIO_WritePin>
}
 800c092:	bf00      	nop
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	40020800 	.word	0x40020800

0800c0a0 <malloc>:
 800c0a0:	4b02      	ldr	r3, [pc, #8]	@ (800c0ac <malloc+0xc>)
 800c0a2:	4601      	mov	r1, r0
 800c0a4:	6818      	ldr	r0, [r3, #0]
 800c0a6:	f000 b82d 	b.w	800c104 <_malloc_r>
 800c0aa:	bf00      	nop
 800c0ac:	20000030 	.word	0x20000030

0800c0b0 <free>:
 800c0b0:	4b02      	ldr	r3, [pc, #8]	@ (800c0bc <free+0xc>)
 800c0b2:	4601      	mov	r1, r0
 800c0b4:	6818      	ldr	r0, [r3, #0]
 800c0b6:	f000 b903 	b.w	800c2c0 <_free_r>
 800c0ba:	bf00      	nop
 800c0bc:	20000030 	.word	0x20000030

0800c0c0 <sbrk_aligned>:
 800c0c0:	b570      	push	{r4, r5, r6, lr}
 800c0c2:	4e0f      	ldr	r6, [pc, #60]	@ (800c100 <sbrk_aligned+0x40>)
 800c0c4:	460c      	mov	r4, r1
 800c0c6:	6831      	ldr	r1, [r6, #0]
 800c0c8:	4605      	mov	r5, r0
 800c0ca:	b911      	cbnz	r1, 800c0d2 <sbrk_aligned+0x12>
 800c0cc:	f000 f8ae 	bl	800c22c <_sbrk_r>
 800c0d0:	6030      	str	r0, [r6, #0]
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	f000 f8a9 	bl	800c22c <_sbrk_r>
 800c0da:	1c43      	adds	r3, r0, #1
 800c0dc:	d103      	bne.n	800c0e6 <sbrk_aligned+0x26>
 800c0de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	bd70      	pop	{r4, r5, r6, pc}
 800c0e6:	1cc4      	adds	r4, r0, #3
 800c0e8:	f024 0403 	bic.w	r4, r4, #3
 800c0ec:	42a0      	cmp	r0, r4
 800c0ee:	d0f8      	beq.n	800c0e2 <sbrk_aligned+0x22>
 800c0f0:	1a21      	subs	r1, r4, r0
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	f000 f89a 	bl	800c22c <_sbrk_r>
 800c0f8:	3001      	adds	r0, #1
 800c0fa:	d1f2      	bne.n	800c0e2 <sbrk_aligned+0x22>
 800c0fc:	e7ef      	b.n	800c0de <sbrk_aligned+0x1e>
 800c0fe:	bf00      	nop
 800c100:	20005330 	.word	0x20005330

0800c104 <_malloc_r>:
 800c104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c108:	1ccd      	adds	r5, r1, #3
 800c10a:	f025 0503 	bic.w	r5, r5, #3
 800c10e:	3508      	adds	r5, #8
 800c110:	2d0c      	cmp	r5, #12
 800c112:	bf38      	it	cc
 800c114:	250c      	movcc	r5, #12
 800c116:	2d00      	cmp	r5, #0
 800c118:	4606      	mov	r6, r0
 800c11a:	db01      	blt.n	800c120 <_malloc_r+0x1c>
 800c11c:	42a9      	cmp	r1, r5
 800c11e:	d904      	bls.n	800c12a <_malloc_r+0x26>
 800c120:	230c      	movs	r3, #12
 800c122:	6033      	str	r3, [r6, #0]
 800c124:	2000      	movs	r0, #0
 800c126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c12a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c200 <_malloc_r+0xfc>
 800c12e:	f000 f869 	bl	800c204 <__malloc_lock>
 800c132:	f8d8 3000 	ldr.w	r3, [r8]
 800c136:	461c      	mov	r4, r3
 800c138:	bb44      	cbnz	r4, 800c18c <_malloc_r+0x88>
 800c13a:	4629      	mov	r1, r5
 800c13c:	4630      	mov	r0, r6
 800c13e:	f7ff ffbf 	bl	800c0c0 <sbrk_aligned>
 800c142:	1c43      	adds	r3, r0, #1
 800c144:	4604      	mov	r4, r0
 800c146:	d158      	bne.n	800c1fa <_malloc_r+0xf6>
 800c148:	f8d8 4000 	ldr.w	r4, [r8]
 800c14c:	4627      	mov	r7, r4
 800c14e:	2f00      	cmp	r7, #0
 800c150:	d143      	bne.n	800c1da <_malloc_r+0xd6>
 800c152:	2c00      	cmp	r4, #0
 800c154:	d04b      	beq.n	800c1ee <_malloc_r+0xea>
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	4639      	mov	r1, r7
 800c15a:	4630      	mov	r0, r6
 800c15c:	eb04 0903 	add.w	r9, r4, r3
 800c160:	f000 f864 	bl	800c22c <_sbrk_r>
 800c164:	4581      	cmp	r9, r0
 800c166:	d142      	bne.n	800c1ee <_malloc_r+0xea>
 800c168:	6821      	ldr	r1, [r4, #0]
 800c16a:	1a6d      	subs	r5, r5, r1
 800c16c:	4629      	mov	r1, r5
 800c16e:	4630      	mov	r0, r6
 800c170:	f7ff ffa6 	bl	800c0c0 <sbrk_aligned>
 800c174:	3001      	adds	r0, #1
 800c176:	d03a      	beq.n	800c1ee <_malloc_r+0xea>
 800c178:	6823      	ldr	r3, [r4, #0]
 800c17a:	442b      	add	r3, r5
 800c17c:	6023      	str	r3, [r4, #0]
 800c17e:	f8d8 3000 	ldr.w	r3, [r8]
 800c182:	685a      	ldr	r2, [r3, #4]
 800c184:	bb62      	cbnz	r2, 800c1e0 <_malloc_r+0xdc>
 800c186:	f8c8 7000 	str.w	r7, [r8]
 800c18a:	e00f      	b.n	800c1ac <_malloc_r+0xa8>
 800c18c:	6822      	ldr	r2, [r4, #0]
 800c18e:	1b52      	subs	r2, r2, r5
 800c190:	d420      	bmi.n	800c1d4 <_malloc_r+0xd0>
 800c192:	2a0b      	cmp	r2, #11
 800c194:	d917      	bls.n	800c1c6 <_malloc_r+0xc2>
 800c196:	1961      	adds	r1, r4, r5
 800c198:	42a3      	cmp	r3, r4
 800c19a:	6025      	str	r5, [r4, #0]
 800c19c:	bf18      	it	ne
 800c19e:	6059      	strne	r1, [r3, #4]
 800c1a0:	6863      	ldr	r3, [r4, #4]
 800c1a2:	bf08      	it	eq
 800c1a4:	f8c8 1000 	streq.w	r1, [r8]
 800c1a8:	5162      	str	r2, [r4, r5]
 800c1aa:	604b      	str	r3, [r1, #4]
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f000 f82f 	bl	800c210 <__malloc_unlock>
 800c1b2:	f104 000b 	add.w	r0, r4, #11
 800c1b6:	1d23      	adds	r3, r4, #4
 800c1b8:	f020 0007 	bic.w	r0, r0, #7
 800c1bc:	1ac2      	subs	r2, r0, r3
 800c1be:	bf1c      	itt	ne
 800c1c0:	1a1b      	subne	r3, r3, r0
 800c1c2:	50a3      	strne	r3, [r4, r2]
 800c1c4:	e7af      	b.n	800c126 <_malloc_r+0x22>
 800c1c6:	6862      	ldr	r2, [r4, #4]
 800c1c8:	42a3      	cmp	r3, r4
 800c1ca:	bf0c      	ite	eq
 800c1cc:	f8c8 2000 	streq.w	r2, [r8]
 800c1d0:	605a      	strne	r2, [r3, #4]
 800c1d2:	e7eb      	b.n	800c1ac <_malloc_r+0xa8>
 800c1d4:	4623      	mov	r3, r4
 800c1d6:	6864      	ldr	r4, [r4, #4]
 800c1d8:	e7ae      	b.n	800c138 <_malloc_r+0x34>
 800c1da:	463c      	mov	r4, r7
 800c1dc:	687f      	ldr	r7, [r7, #4]
 800c1de:	e7b6      	b.n	800c14e <_malloc_r+0x4a>
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	42a3      	cmp	r3, r4
 800c1e6:	d1fb      	bne.n	800c1e0 <_malloc_r+0xdc>
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	6053      	str	r3, [r2, #4]
 800c1ec:	e7de      	b.n	800c1ac <_malloc_r+0xa8>
 800c1ee:	230c      	movs	r3, #12
 800c1f0:	6033      	str	r3, [r6, #0]
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f000 f80c 	bl	800c210 <__malloc_unlock>
 800c1f8:	e794      	b.n	800c124 <_malloc_r+0x20>
 800c1fa:	6005      	str	r5, [r0, #0]
 800c1fc:	e7d6      	b.n	800c1ac <_malloc_r+0xa8>
 800c1fe:	bf00      	nop
 800c200:	20005334 	.word	0x20005334

0800c204 <__malloc_lock>:
 800c204:	4801      	ldr	r0, [pc, #4]	@ (800c20c <__malloc_lock+0x8>)
 800c206:	f000 b84b 	b.w	800c2a0 <__retarget_lock_acquire_recursive>
 800c20a:	bf00      	nop
 800c20c:	20005470 	.word	0x20005470

0800c210 <__malloc_unlock>:
 800c210:	4801      	ldr	r0, [pc, #4]	@ (800c218 <__malloc_unlock+0x8>)
 800c212:	f000 b846 	b.w	800c2a2 <__retarget_lock_release_recursive>
 800c216:	bf00      	nop
 800c218:	20005470 	.word	0x20005470

0800c21c <memset>:
 800c21c:	4402      	add	r2, r0
 800c21e:	4603      	mov	r3, r0
 800c220:	4293      	cmp	r3, r2
 800c222:	d100      	bne.n	800c226 <memset+0xa>
 800c224:	4770      	bx	lr
 800c226:	f803 1b01 	strb.w	r1, [r3], #1
 800c22a:	e7f9      	b.n	800c220 <memset+0x4>

0800c22c <_sbrk_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4d06      	ldr	r5, [pc, #24]	@ (800c248 <_sbrk_r+0x1c>)
 800c230:	2300      	movs	r3, #0
 800c232:	4604      	mov	r4, r0
 800c234:	4608      	mov	r0, r1
 800c236:	602b      	str	r3, [r5, #0]
 800c238:	f7f4 fd98 	bl	8000d6c <_sbrk>
 800c23c:	1c43      	adds	r3, r0, #1
 800c23e:	d102      	bne.n	800c246 <_sbrk_r+0x1a>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	b103      	cbz	r3, 800c246 <_sbrk_r+0x1a>
 800c244:	6023      	str	r3, [r4, #0]
 800c246:	bd38      	pop	{r3, r4, r5, pc}
 800c248:	20005474 	.word	0x20005474

0800c24c <__errno>:
 800c24c:	4b01      	ldr	r3, [pc, #4]	@ (800c254 <__errno+0x8>)
 800c24e:	6818      	ldr	r0, [r3, #0]
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	20000030 	.word	0x20000030

0800c258 <__libc_init_array>:
 800c258:	b570      	push	{r4, r5, r6, lr}
 800c25a:	4d0d      	ldr	r5, [pc, #52]	@ (800c290 <__libc_init_array+0x38>)
 800c25c:	4c0d      	ldr	r4, [pc, #52]	@ (800c294 <__libc_init_array+0x3c>)
 800c25e:	1b64      	subs	r4, r4, r5
 800c260:	10a4      	asrs	r4, r4, #2
 800c262:	2600      	movs	r6, #0
 800c264:	42a6      	cmp	r6, r4
 800c266:	d109      	bne.n	800c27c <__libc_init_array+0x24>
 800c268:	4d0b      	ldr	r5, [pc, #44]	@ (800c298 <__libc_init_array+0x40>)
 800c26a:	4c0c      	ldr	r4, [pc, #48]	@ (800c29c <__libc_init_array+0x44>)
 800c26c:	f000 f872 	bl	800c354 <_init>
 800c270:	1b64      	subs	r4, r4, r5
 800c272:	10a4      	asrs	r4, r4, #2
 800c274:	2600      	movs	r6, #0
 800c276:	42a6      	cmp	r6, r4
 800c278:	d105      	bne.n	800c286 <__libc_init_array+0x2e>
 800c27a:	bd70      	pop	{r4, r5, r6, pc}
 800c27c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c280:	4798      	blx	r3
 800c282:	3601      	adds	r6, #1
 800c284:	e7ee      	b.n	800c264 <__libc_init_array+0xc>
 800c286:	f855 3b04 	ldr.w	r3, [r5], #4
 800c28a:	4798      	blx	r3
 800c28c:	3601      	adds	r6, #1
 800c28e:	e7f2      	b.n	800c276 <__libc_init_array+0x1e>
 800c290:	0800c48c 	.word	0x0800c48c
 800c294:	0800c48c 	.word	0x0800c48c
 800c298:	0800c48c 	.word	0x0800c48c
 800c29c:	0800c490 	.word	0x0800c490

0800c2a0 <__retarget_lock_acquire_recursive>:
 800c2a0:	4770      	bx	lr

0800c2a2 <__retarget_lock_release_recursive>:
 800c2a2:	4770      	bx	lr

0800c2a4 <memcpy>:
 800c2a4:	440a      	add	r2, r1
 800c2a6:	4291      	cmp	r1, r2
 800c2a8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c2ac:	d100      	bne.n	800c2b0 <memcpy+0xc>
 800c2ae:	4770      	bx	lr
 800c2b0:	b510      	push	{r4, lr}
 800c2b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2ba:	4291      	cmp	r1, r2
 800c2bc:	d1f9      	bne.n	800c2b2 <memcpy+0xe>
 800c2be:	bd10      	pop	{r4, pc}

0800c2c0 <_free_r>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	4605      	mov	r5, r0
 800c2c4:	2900      	cmp	r1, #0
 800c2c6:	d041      	beq.n	800c34c <_free_r+0x8c>
 800c2c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2cc:	1f0c      	subs	r4, r1, #4
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	bfb8      	it	lt
 800c2d2:	18e4      	addlt	r4, r4, r3
 800c2d4:	f7ff ff96 	bl	800c204 <__malloc_lock>
 800c2d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c350 <_free_r+0x90>)
 800c2da:	6813      	ldr	r3, [r2, #0]
 800c2dc:	b933      	cbnz	r3, 800c2ec <_free_r+0x2c>
 800c2de:	6063      	str	r3, [r4, #4]
 800c2e0:	6014      	str	r4, [r2, #0]
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2e8:	f7ff bf92 	b.w	800c210 <__malloc_unlock>
 800c2ec:	42a3      	cmp	r3, r4
 800c2ee:	d908      	bls.n	800c302 <_free_r+0x42>
 800c2f0:	6820      	ldr	r0, [r4, #0]
 800c2f2:	1821      	adds	r1, r4, r0
 800c2f4:	428b      	cmp	r3, r1
 800c2f6:	bf01      	itttt	eq
 800c2f8:	6819      	ldreq	r1, [r3, #0]
 800c2fa:	685b      	ldreq	r3, [r3, #4]
 800c2fc:	1809      	addeq	r1, r1, r0
 800c2fe:	6021      	streq	r1, [r4, #0]
 800c300:	e7ed      	b.n	800c2de <_free_r+0x1e>
 800c302:	461a      	mov	r2, r3
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	b10b      	cbz	r3, 800c30c <_free_r+0x4c>
 800c308:	42a3      	cmp	r3, r4
 800c30a:	d9fa      	bls.n	800c302 <_free_r+0x42>
 800c30c:	6811      	ldr	r1, [r2, #0]
 800c30e:	1850      	adds	r0, r2, r1
 800c310:	42a0      	cmp	r0, r4
 800c312:	d10b      	bne.n	800c32c <_free_r+0x6c>
 800c314:	6820      	ldr	r0, [r4, #0]
 800c316:	4401      	add	r1, r0
 800c318:	1850      	adds	r0, r2, r1
 800c31a:	4283      	cmp	r3, r0
 800c31c:	6011      	str	r1, [r2, #0]
 800c31e:	d1e0      	bne.n	800c2e2 <_free_r+0x22>
 800c320:	6818      	ldr	r0, [r3, #0]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	6053      	str	r3, [r2, #4]
 800c326:	4408      	add	r0, r1
 800c328:	6010      	str	r0, [r2, #0]
 800c32a:	e7da      	b.n	800c2e2 <_free_r+0x22>
 800c32c:	d902      	bls.n	800c334 <_free_r+0x74>
 800c32e:	230c      	movs	r3, #12
 800c330:	602b      	str	r3, [r5, #0]
 800c332:	e7d6      	b.n	800c2e2 <_free_r+0x22>
 800c334:	6820      	ldr	r0, [r4, #0]
 800c336:	1821      	adds	r1, r4, r0
 800c338:	428b      	cmp	r3, r1
 800c33a:	bf04      	itt	eq
 800c33c:	6819      	ldreq	r1, [r3, #0]
 800c33e:	685b      	ldreq	r3, [r3, #4]
 800c340:	6063      	str	r3, [r4, #4]
 800c342:	bf04      	itt	eq
 800c344:	1809      	addeq	r1, r1, r0
 800c346:	6021      	streq	r1, [r4, #0]
 800c348:	6054      	str	r4, [r2, #4]
 800c34a:	e7ca      	b.n	800c2e2 <_free_r+0x22>
 800c34c:	bd38      	pop	{r3, r4, r5, pc}
 800c34e:	bf00      	nop
 800c350:	20005334 	.word	0x20005334

0800c354 <_init>:
 800c354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c356:	bf00      	nop
 800c358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c35a:	bc08      	pop	{r3}
 800c35c:	469e      	mov	lr, r3
 800c35e:	4770      	bx	lr

0800c360 <_fini>:
 800c360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c362:	bf00      	nop
 800c364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c366:	bc08      	pop	{r3}
 800c368:	469e      	mov	lr, r3
 800c36a:	4770      	bx	lr
