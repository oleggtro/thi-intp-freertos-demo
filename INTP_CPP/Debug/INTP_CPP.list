
INTP_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c11c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800c2ac  0800c2ac  0000d2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c31c  0800c31c  0000e080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c31c  0800c31c  0000d31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c324  0800c324  0000e080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c324  0800c324  0000d324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c328  0800c328  0000d328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800c32c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e080  2**0
                  CONTENTS
 10 .bss          000053e8  20000080  20000080  0000e080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005468  20005468  0000e080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023518  00000000  00000000  0000e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053d6  00000000  00000000  000315c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ea0  00000000  00000000  000369a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017a9  00000000  00000000  00038840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006a19  00000000  00000000  00039fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025e04  00000000  00000000  00040a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de761  00000000  00000000  00066806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00144f67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008598  00000000  00000000  00144fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0014d544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c294 	.word	0x0800c294

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800c294 	.word	0x0800c294

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fc64 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f81e 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f950 	bl	8000770 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f884 	bl	80005dc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f8b0 	bl	8000638 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8de 	bl	8000698 <MX_SPI1_Init>
  MX_TIM7_Init();
 80004dc:	f000 f912 	bl	8000704 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e0:	f008 fb0e 	bl	8008b00 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e4:	4a05      	ldr	r2, [pc, #20]	@ (80004fc <main+0x3c>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	4805      	ldr	r0, [pc, #20]	@ (8000500 <main+0x40>)
 80004ea:	f008 fb53 	bl	8008b94 <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a04      	ldr	r2, [pc, #16]	@ (8000504 <main+0x44>)
 80004f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f4:	f008 fb28 	bl	8008b48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <main+0x38>
 80004fc:	0800c2e0 	.word	0x0800c2e0
 8000500:	0800096d 	.word	0x0800096d
 8000504:	200001d8 	.word	0x200001d8

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	@ 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	@ 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f00b fe20 	bl	800c15c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	@ (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	@ (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	@ 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	@ (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	@ (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	@ (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	@ (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000580:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fe74 	bl	800427c <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059a:	f000 f9f1 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2105      	movs	r1, #5
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 f8d5 	bl	800476c <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c8:	f000 f9da 	bl	8000980 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	@ 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	@ (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	@ (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	@ (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	@ (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <MX_I2C1_Init+0x50>)
 800061a:	f003 f84b 	bl	80036b4 <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 f9ac 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000009c 	.word	0x2000009c
 8000630:	40005400 	.word	0x40005400
 8000634:	000186a0 	.word	0x000186a0

08000638 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800063c:	4b13      	ldr	r3, [pc, #76]	@ (800068c <MX_I2S3_Init+0x54>)
 800063e:	4a14      	ldr	r2, [pc, #80]	@ (8000690 <MX_I2S3_Init+0x58>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <MX_I2S3_Init+0x54>)
 8000644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000648:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800064a:	4b10      	ldr	r3, [pc, #64]	@ (800068c <MX_I2S3_Init+0x54>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <MX_I2S3_Init+0x54>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800065c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800065e:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <MX_I2S3_Init+0x54>)
 8000660:	4a0c      	ldr	r2, [pc, #48]	@ (8000694 <MX_I2S3_Init+0x5c>)
 8000662:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000664:	4b09      	ldr	r3, [pc, #36]	@ (800068c <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800066a:	4b08      	ldr	r3, [pc, #32]	@ (800068c <MX_I2S3_Init+0x54>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_I2S3_Init+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <MX_I2S3_Init+0x54>)
 8000678:	f003 f960 	bl	800393c <HAL_I2S_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000682:	f000 f97d 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200000f0 	.word	0x200000f0
 8000690:	40003c00 	.word	0x40003c00
 8000694:	00017700 	.word	0x00017700

08000698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800069c:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <MX_SPI1_Init+0x64>)
 800069e:	4a18      	ldr	r2, [pc, #96]	@ (8000700 <MX_SPI1_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006aa:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006ea:	f004 fb8d 	bl	8004e08 <HAL_SPI_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f4:	f000 f944 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000138 	.word	0x20000138
 8000700:	40013000 	.word	0x40013000

08000704 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <MX_TIM7_Init+0x64>)
 8000714:	4a15      	ldr	r2, [pc, #84]	@ (800076c <MX_TIM7_Init+0x68>)
 8000716:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_TIM7_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_TIM7_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000724:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <MX_TIM7_Init+0x64>)
 8000726:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800072a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_TIM7_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000732:	480d      	ldr	r0, [pc, #52]	@ (8000768 <MX_TIM7_Init+0x64>)
 8000734:	f004 fbf1 	bl	8004f1a <HAL_TIM_Base_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800073e:	f000 f91f 	bl	8000980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <MX_TIM7_Init+0x64>)
 8000750:	f004 fcde 	bl	8005110 <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800075a:	f000 f911 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000190 	.word	0x20000190
 800076c:	40001400 	.word	0x40001400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	@ 0x30
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
 800078a:	4b72      	ldr	r3, [pc, #456]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a71      	ldr	r2, [pc, #452]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 8000790:	f043 0310 	orr.w	r3, r3, #16
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b6f      	ldr	r3, [pc, #444]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0310 	and.w	r3, r3, #16
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	4b6b      	ldr	r3, [pc, #428]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a6a      	ldr	r2, [pc, #424]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b68      	ldr	r3, [pc, #416]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b64      	ldr	r3, [pc, #400]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a63      	ldr	r2, [pc, #396]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b61      	ldr	r3, [pc, #388]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b5d      	ldr	r3, [pc, #372]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a5c      	ldr	r2, [pc, #368]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b5a      	ldr	r3, [pc, #360]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b56      	ldr	r3, [pc, #344]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a55      	ldr	r2, [pc, #340]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b53      	ldr	r3, [pc, #332]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b4f      	ldr	r3, [pc, #316]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a4e      	ldr	r2, [pc, #312]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b4c      	ldr	r3, [pc, #304]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2108      	movs	r1, #8
 8000832:	4849      	ldr	r0, [pc, #292]	@ (8000958 <MX_GPIO_Init+0x1e8>)
 8000834:	f000 fdf0 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2101      	movs	r1, #1
 800083c:	4847      	ldr	r0, [pc, #284]	@ (800095c <MX_GPIO_Init+0x1ec>)
 800083e:	f000 fdeb 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000842:	2200      	movs	r2, #0
 8000844:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000848:	4845      	ldr	r0, [pc, #276]	@ (8000960 <MX_GPIO_Init+0x1f0>)
 800084a:	f000 fde5 	bl	8001418 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800084e:	2308      	movs	r3, #8
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	483c      	ldr	r0, [pc, #240]	@ (8000958 <MX_GPIO_Init+0x1e8>)
 8000866:	f000 fc3b 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800086a:	2301      	movs	r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4836      	ldr	r0, [pc, #216]	@ (800095c <MX_GPIO_Init+0x1ec>)
 8000882:	f000 fc2d 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000886:	2308      	movs	r3, #8
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000896:	2305      	movs	r3, #5
 8000898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	482e      	ldr	r0, [pc, #184]	@ (800095c <MX_GPIO_Init+0x1ec>)
 80008a2:	f000 fc1d 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008aa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	482a      	ldr	r0, [pc, #168]	@ (8000964 <MX_GPIO_Init+0x1f4>)
 80008bc:	f000 fc10 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c0:	2304      	movs	r3, #4
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4825      	ldr	r0, [pc, #148]	@ (8000968 <MX_GPIO_Init+0x1f8>)
 80008d4:	f000 fc04 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ea:	2305      	movs	r3, #5
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	481c      	ldr	r0, [pc, #112]	@ (8000968 <MX_GPIO_Init+0x1f8>)
 80008f6:	f000 fbf3 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4813      	ldr	r0, [pc, #76]	@ (8000960 <MX_GPIO_Init+0x1f0>)
 8000914:	f000 fbe4 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000918:	2320      	movs	r3, #32
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	@ (8000960 <MX_GPIO_Init+0x1f0>)
 800092c:	f000 fbd8 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000930:	2302      	movs	r3, #2
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000934:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <MX_GPIO_Init+0x1e8>)
 8000946:	f000 fbcb 	bl	80010e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094a:	bf00      	nop
 800094c:	3730      	adds	r7, #48	@ 0x30
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40021000 	.word	0x40021000
 800095c:	40020800 	.word	0x40020800
 8000960:	40020c00 	.word	0x40020c00
 8000964:	40020000 	.word	0x40020000
 8000968:	40020400 	.word	0x40020400

0800096c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000974:	f00b f830 	bl	800b9d8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000978:	2001      	movs	r0, #1
 800097a:	f008 f99d 	bl	8008cb8 <osDelay>
 800097e:	e7fb      	b.n	8000978 <StartDefaultTask+0xc>

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <Error_Handler+0x8>

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <HAL_MspInit+0x54>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	4a11      	ldr	r2, [pc, #68]	@ (80009e0 <HAL_MspInit+0x54>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <HAL_MspInit+0x54>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <HAL_MspInit+0x54>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <HAL_MspInit+0x54>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_MspInit+0x54>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	210f      	movs	r1, #15
 80009ce:	f06f 0001 	mvn.w	r0, #1
 80009d2:	f000 fb4e 	bl	8001072 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	@ (8000a68 <HAL_I2C_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12c      	bne.n	8000a60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a17      	ldr	r2, [pc, #92]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a22:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a28:	2312      	movs	r3, #18
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a34:	2304      	movs	r3, #4
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <HAL_I2C_MspInit+0x8c>)
 8000a40:	f000 fb4e 	bl	80010e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4c:	4a07      	ldr	r2, [pc, #28]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	@ 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400

08000a74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	@ 0x38
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a31      	ldr	r2, [pc, #196]	@ (8000b64 <HAL_I2S_MspInit+0xf0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d15a      	bne.n	8000b5a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000aa8:	23c0      	movs	r3, #192	@ 0xc0
 8000aaa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f004 f865 	bl	8004b84 <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ac0:	f7ff ff5e 	bl	8000980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	4b27      	ldr	r3, [pc, #156]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000acc:	4a26      	ldr	r2, [pc, #152]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ad2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad4:	4b24      	ldr	r3, [pc, #144]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b20      	ldr	r3, [pc, #128]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b04:	4a18      	ldr	r2, [pc, #96]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0c:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b28:	2306      	movs	r3, #6
 8000b2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	480e      	ldr	r0, [pc, #56]	@ (8000b6c <HAL_I2S_MspInit+0xf8>)
 8000b34:	f000 fad4 	bl	80010e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b38:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <HAL_I2S_MspInit+0xfc>)
 8000b56:	f000 fac3 	bl	80010e0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3738      	adds	r7, #56	@ 0x38
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40003c00 	.word	0x40003c00
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020800 	.word	0x40020800

08000b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	@ 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	@ (8000bf8 <HAL_SPI_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12b      	bne.n	8000bee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <HAL_SPI_MspInit+0x88>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	4a17      	ldr	r2, [pc, #92]	@ (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000baa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a10      	ldr	r2, [pc, #64]	@ (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bce:	23e0      	movs	r3, #224	@ 0xe0
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bde:	2305      	movs	r3, #5
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <HAL_SPI_MspInit+0x8c>)
 8000bea:	f000 fa79 	bl	80010e0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	@ 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40013000 	.word	0x40013000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0b      	ldr	r2, [pc, #44]	@ (8000c40 <HAL_TIM_Base_MspInit+0x3c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d10d      	bne.n	8000c32 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <HAL_TIM_Base_MspInit+0x40>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	4a09      	ldr	r2, [pc, #36]	@ (8000c44 <HAL_TIM_Base_MspInit+0x40>)
 8000c20:	f043 0320 	orr.w	r3, r3, #32
 8000c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c26:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <HAL_TIM_Base_MspInit+0x40>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f003 0320 	and.w	r3, r3, #32
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40001400 	.word	0x40001400
 8000c44:	40023800 	.word	0x40023800

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <NMI_Handler+0x4>

08000c50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <MemManage_Handler+0x4>

08000c60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c82:	f000 f8d7 	bl	8000e34 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c86:	f009 fe2d 	bl	800a8e4 <xTaskGetSchedulerState>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d001      	beq.n	8000c94 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c90:	f00a fc22 	bl	800b4d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <OTG_FS_IRQHandler+0x10>)
 8000c9e:	f000 feb5 	bl	8001a0c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20004f40 	.word	0x20004f40

08000cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4a14      	ldr	r2, [pc, #80]	@ (8000d08 <_sbrk+0x5c>)
 8000cb6:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <_sbrk+0x60>)
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <_sbrk+0x64>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <_sbrk+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d207      	bcs.n	8000cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cdc:	f00b fa56 	bl	800c18c <__errno>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cea:	e009      	b.n	8000d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a05      	ldr	r2, [pc, #20]	@ (8000d10 <_sbrk+0x64>)
 8000cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20020000 	.word	0x20020000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	200001dc 	.word	0x200001dc
 8000d14:	20005468 	.word	0x20005468

08000d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d40:	f7ff ffea 	bl	8000d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d44:	480c      	ldr	r0, [pc, #48]	@ (8000d78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d46:	490d      	ldr	r1, [pc, #52]	@ (8000d7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d48:	4a0d      	ldr	r2, [pc, #52]	@ (8000d80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f00b fa15 	bl	800c198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6e:	f7ff fba7 	bl	80004c0 <main>
  bx  lr    
 8000d72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d80:	0800c32c 	.word	0x0800c32c
  ldr r2, =_sbss
 8000d84:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d88:	20005468 	.word	0x20005468

08000d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d94:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd0 <HAL_Init+0x40>)
 8000d9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da0:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <HAL_Init+0x40>)
 8000da6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	@ (8000dd0 <HAL_Init+0x40>)
 8000db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f94f 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	200f      	movs	r0, #15
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fde2 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023c00 	.word	0x40023c00

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f967 	bl	80010c6 <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e10:	f000 f92f 	bl	8001072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	200001e0 	.word	0x200001e0

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200001e0 	.word	0x200001e0

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff ffee 	bl	8000e5c <HAL_GetTick>
 8000e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e9a:	bf00      	nop
 8000e9c:	f7ff ffde 	bl	8000e5c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0b      	blt.n	8000f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 021f 	and.w	r2, r3, #31
 8000f38:	4907      	ldr	r1, [pc, #28]	@ (8000f58 <__NVIC_EnableIRQ+0x38>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	fa00 f202 	lsl.w	r2, r0, r2
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	@ (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	@ (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	@ 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	@ 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800103c:	f7ff ff8e 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff29 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff3e 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff8e 	bl	8000fb0 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5d 	bl	8000f5c <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff31 	bl	8000f20 <__NVIC_EnableIRQ>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffa2 	bl	8001018 <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	@ 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	e16b      	b.n	80013d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010fc:	2201      	movs	r2, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	429a      	cmp	r2, r3
 8001116:	f040 815a 	bne.w	80013ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d005      	beq.n	8001132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112e:	2b02      	cmp	r3, #2
 8001130:	d130      	bne.n	8001194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001168:	2201      	movs	r2, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	f003 0201 	and.w	r2, r3, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b03      	cmp	r3, #3
 800119e:	d017      	beq.n	80011d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d123      	bne.n	8001224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	220f      	movs	r2, #15
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3208      	adds	r2, #8
 800121e:	69b9      	ldr	r1, [r7, #24]
 8001220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0203 	and.w	r2, r3, #3
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80b4 	beq.w	80013ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b60      	ldr	r3, [pc, #384]	@ (80013ec <HAL_GPIO_Init+0x30c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	4a5f      	ldr	r2, [pc, #380]	@ (80013ec <HAL_GPIO_Init+0x30c>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001274:	6453      	str	r3, [r2, #68]	@ 0x44
 8001276:	4b5d      	ldr	r3, [pc, #372]	@ (80013ec <HAL_GPIO_Init+0x30c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001282:	4a5b      	ldr	r2, [pc, #364]	@ (80013f0 <HAL_GPIO_Init+0x310>)
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3302      	adds	r3, #2
 800128a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	220f      	movs	r2, #15
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a52      	ldr	r2, [pc, #328]	@ (80013f4 <HAL_GPIO_Init+0x314>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d02b      	beq.n	8001306 <HAL_GPIO_Init+0x226>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a51      	ldr	r2, [pc, #324]	@ (80013f8 <HAL_GPIO_Init+0x318>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d025      	beq.n	8001302 <HAL_GPIO_Init+0x222>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a50      	ldr	r2, [pc, #320]	@ (80013fc <HAL_GPIO_Init+0x31c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01f      	beq.n	80012fe <HAL_GPIO_Init+0x21e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001400 <HAL_GPIO_Init+0x320>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x21a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001404 <HAL_GPIO_Init+0x324>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x216>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001408 <HAL_GPIO_Init+0x328>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x212>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4c      	ldr	r2, [pc, #304]	@ (800140c <HAL_GPIO_Init+0x32c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x20e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001410 <HAL_GPIO_Init+0x330>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x20a>
 80012e6:	2307      	movs	r3, #7
 80012e8:	e00e      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012ea:	2308      	movs	r3, #8
 80012ec:	e00c      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012ee:	2306      	movs	r3, #6
 80012f0:	e00a      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012f2:	2305      	movs	r3, #5
 80012f4:	e008      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012f6:	2304      	movs	r3, #4
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e004      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012fe:	2302      	movs	r3, #2
 8001300:	e002      	b.n	8001308 <HAL_GPIO_Init+0x228>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x228>
 8001306:	2300      	movs	r3, #0
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	f002 0203 	and.w	r2, r2, #3
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	4093      	lsls	r3, r2
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001318:	4935      	ldr	r1, [pc, #212]	@ (80013f0 <HAL_GPIO_Init+0x310>)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001326:	4b3b      	ldr	r3, [pc, #236]	@ (8001414 <HAL_GPIO_Init+0x334>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134a:	4a32      	ldr	r2, [pc, #200]	@ (8001414 <HAL_GPIO_Init+0x334>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001350:	4b30      	ldr	r3, [pc, #192]	@ (8001414 <HAL_GPIO_Init+0x334>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001374:	4a27      	ldr	r2, [pc, #156]	@ (8001414 <HAL_GPIO_Init+0x334>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800137a:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <HAL_GPIO_Init+0x334>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800139e:	4a1d      	ldr	r2, [pc, #116]	@ (8001414 <HAL_GPIO_Init+0x334>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <HAL_GPIO_Init+0x334>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c8:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <HAL_GPIO_Init+0x334>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3301      	adds	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	2b0f      	cmp	r3, #15
 80013d8:	f67f ae90 	bls.w	80010fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3724      	adds	r7, #36	@ 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40013800 	.word	0x40013800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40021000 	.word	0x40021000
 8001408:	40021400 	.word	0x40021400
 800140c:	40021800 	.word	0x40021800
 8001410:	40021c00 	.word	0x40021c00
 8001414:	40013c00 	.word	0x40013c00

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001434:	e003      	b.n	800143e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af02      	add	r7, sp, #8
 8001450:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e059      	b.n	8001510 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f00a fb02 	bl	800ba80 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800148a:	d102      	bne.n	8001492 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f003 ff2b 	bl	80052f2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7c1a      	ldrb	r2, [r3, #16]
 80014a4:	f88d 2000 	strb.w	r2, [sp]
 80014a8:	3304      	adds	r3, #4
 80014aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ac:	f003 feac 	bl	8005208 <USB_CoreInit>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d005      	beq.n	80014c2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2202      	movs	r2, #2
 80014ba:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e026      	b.n	8001510 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2101      	movs	r1, #1
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 ff23 	bl	8005314 <USB_SetCurrentMode>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e017      	b.n	8001510 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7c1a      	ldrb	r2, [r3, #16]
 80014e8:	f88d 2000 	strb.w	r2, [sp]
 80014ec:	3304      	adds	r3, #4
 80014ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f0:	f004 f8c6 	bl	8005680 <USB_HostInit>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2202      	movs	r2, #2
 80014fe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e004      	b.n	8001510 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b08b      	sub	sp, #44	@ 0x2c
 800151c:	af04      	add	r7, sp, #16
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	4608      	mov	r0, r1
 8001522:	4611      	mov	r1, r2
 8001524:	461a      	mov	r2, r3
 8001526:	4603      	mov	r3, r0
 8001528:	70fb      	strb	r3, [r7, #3]
 800152a:	460b      	mov	r3, r1
 800152c:	70bb      	strb	r3, [r7, #2]
 800152e:	4613      	mov	r3, r2
 8001530:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001532:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001534:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_HCD_HC_Init+0x2c>
 8001540:	2302      	movs	r3, #2
 8001542:	e09d      	b.n	8001680 <HAL_HCD_HC_Init+0x168>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800154c:	78fa      	ldrb	r2, [r7, #3]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	3319      	adds	r3, #25
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001560:	78fa      	ldrb	r2, [r7, #3]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	3314      	adds	r3, #20
 8001570:	787a      	ldrb	r2, [r7, #1]
 8001572:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001574:	78fa      	ldrb	r2, [r7, #3]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	1a9b      	subs	r3, r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	3315      	adds	r3, #21
 8001584:	78fa      	ldrb	r2, [r7, #3]
 8001586:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001588:	78fa      	ldrb	r2, [r7, #3]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	3326      	adds	r3, #38	@ 0x26
 8001598:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800159c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	78bb      	ldrb	r3, [r7, #2]
 80015a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015a6:	b2d8      	uxtb	r0, r3
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	1a9b      	subs	r3, r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	3316      	adds	r3, #22
 80015b6:	4602      	mov	r2, r0
 80015b8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	4619      	mov	r1, r3
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fbc8 	bl	8001d54 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80015c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da0a      	bge.n	80015e2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015cc:	78fa      	ldrb	r2, [r7, #3]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	3317      	adds	r3, #23
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
 80015e0:	e009      	b.n	80015f6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	1a9b      	subs	r3, r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	3317      	adds	r3, #23
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 f9a4 	bl	8005948 <USB_GetHostSpeed>
 8001600:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001602:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001606:	2b01      	cmp	r3, #1
 8001608:	d10b      	bne.n	8001622 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800160a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_HCD_HC_Init+0x10a>
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d104      	bne.n	8001622 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	2bbc      	cmp	r3, #188	@ 0xbc
 800161c:	d901      	bls.n	8001622 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800161e:	23bc      	movs	r3, #188	@ 0xbc
 8001620:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001622:	78fa      	ldrb	r2, [r7, #3]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3318      	adds	r3, #24
 8001632:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001636:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	b298      	uxth	r0, r3
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	1a9b      	subs	r3, r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	3328      	adds	r3, #40	@ 0x28
 800164c:	4602      	mov	r2, r0
 800164e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	b29b      	uxth	r3, r3
 8001658:	787c      	ldrb	r4, [r7, #1]
 800165a:	78ba      	ldrb	r2, [r7, #2]
 800165c:	78f9      	ldrb	r1, [r7, #3]
 800165e:	9302      	str	r3, [sp, #8]
 8001660:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	4623      	mov	r3, r4
 800166e:	f004 f993 	bl	8005998 <USB_HC_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	371c      	adds	r7, #28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}

08001688 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_HCD_HC_Halt+0x1e>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e00f      	b.n	80016c6 <HAL_HCD_HC_Halt+0x3e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f004 fd25 	bl	8006106 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	4608      	mov	r0, r1
 80016da:	4611      	mov	r1, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	4603      	mov	r3, r0
 80016e0:	70fb      	strb	r3, [r7, #3]
 80016e2:	460b      	mov	r3, r1
 80016e4:	70bb      	strb	r3, [r7, #2]
 80016e6:	4613      	mov	r3, r2
 80016e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016ea:	78fa      	ldrb	r2, [r7, #3]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	1a9b      	subs	r3, r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	3317      	adds	r3, #23
 80016fa:	78ba      	ldrb	r2, [r7, #2]
 80016fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	1a9b      	subs	r3, r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	3326      	adds	r3, #38	@ 0x26
 800170e:	787a      	ldrb	r2, [r7, #1]
 8001710:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001712:	7c3b      	ldrb	r3, [r7, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d114      	bne.n	8001742 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	1a9b      	subs	r3, r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	332a      	adds	r3, #42	@ 0x2a
 8001728:	2203      	movs	r2, #3
 800172a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800172c:	78fa      	ldrb	r2, [r7, #3]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	1a9b      	subs	r3, r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	3319      	adds	r3, #25
 800173c:	7f3a      	ldrb	r2, [r7, #28]
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	e009      	b.n	8001756 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	1a9b      	subs	r3, r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	332a      	adds	r3, #42	@ 0x2a
 8001752:	2202      	movs	r2, #2
 8001754:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001756:	787b      	ldrb	r3, [r7, #1]
 8001758:	2b03      	cmp	r3, #3
 800175a:	f200 8102 	bhi.w	8001962 <HAL_HCD_HC_SubmitRequest+0x292>
 800175e:	a201      	add	r2, pc, #4	@ (adr r2, 8001764 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001764:	08001775 	.word	0x08001775
 8001768:	0800194d 	.word	0x0800194d
 800176c:	08001839 	.word	0x08001839
 8001770:	080018c3 	.word	0x080018c3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001774:	7c3b      	ldrb	r3, [r7, #16]
 8001776:	2b01      	cmp	r3, #1
 8001778:	f040 80f5 	bne.w	8001966 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800177c:	78bb      	ldrb	r3, [r7, #2]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d12d      	bne.n	80017de <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001782:	8b3b      	ldrh	r3, [r7, #24]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	333d      	adds	r3, #61	@ 0x3d
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	1a9b      	subs	r3, r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	333d      	adds	r3, #61	@ 0x3d
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10a      	bne.n	80017c8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	1a9b      	subs	r3, r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	332a      	adds	r3, #42	@ 0x2a
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80017c6:	e0ce      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	332a      	adds	r3, #42	@ 0x2a
 80017d8:	2202      	movs	r2, #2
 80017da:	701a      	strb	r2, [r3, #0]
      break;
 80017dc:	e0c3      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	1a9b      	subs	r3, r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	331a      	adds	r3, #26
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	f040 80b8 	bne.w	8001966 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	333c      	adds	r3, #60	@ 0x3c
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10a      	bne.n	8001822 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	332a      	adds	r3, #42	@ 0x2a
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
      break;
 8001820:	e0a1      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	1a9b      	subs	r3, r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	332a      	adds	r3, #42	@ 0x2a
 8001832:	2202      	movs	r2, #2
 8001834:	701a      	strb	r2, [r3, #0]
      break;
 8001836:	e096      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001838:	78bb      	ldrb	r3, [r7, #2]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d120      	bne.n	8001880 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	333d      	adds	r3, #61	@ 0x3d
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10a      	bne.n	800186a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	332a      	adds	r3, #42	@ 0x2a
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001868:	e07e      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	332a      	adds	r3, #42	@ 0x2a
 800187a:	2202      	movs	r2, #2
 800187c:	701a      	strb	r2, [r3, #0]
      break;
 800187e:	e073      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	333c      	adds	r3, #60	@ 0x3c
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10a      	bne.n	80018ac <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	332a      	adds	r3, #42	@ 0x2a
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
      break;
 80018aa:	e05d      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ac:	78fa      	ldrb	r2, [r7, #3]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	332a      	adds	r3, #42	@ 0x2a
 80018bc:	2202      	movs	r2, #2
 80018be:	701a      	strb	r2, [r3, #0]
      break;
 80018c0:	e052      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018c2:	78bb      	ldrb	r3, [r7, #2]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d120      	bne.n	800190a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	333d      	adds	r3, #61	@ 0x3d
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10a      	bne.n	80018f4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	332a      	adds	r3, #42	@ 0x2a
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018f2:	e039      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	332a      	adds	r3, #42	@ 0x2a
 8001904:	2202      	movs	r2, #2
 8001906:	701a      	strb	r2, [r3, #0]
      break;
 8001908:	e02e      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	333c      	adds	r3, #60	@ 0x3c
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10a      	bne.n	8001936 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	332a      	adds	r3, #42	@ 0x2a
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
      break;
 8001934:	e018      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	332a      	adds	r3, #42	@ 0x2a
 8001946:	2202      	movs	r2, #2
 8001948:	701a      	strb	r2, [r3, #0]
      break;
 800194a:	e00d      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	332a      	adds	r3, #42	@ 0x2a
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
      break;
 8001960:	e002      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001962:	bf00      	nop
 8001964:	e000      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001966:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	332c      	adds	r3, #44	@ 0x2c
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	8b39      	ldrh	r1, [r7, #24]
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	1a9b      	subs	r3, r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4403      	add	r3, r0
 800198c:	3334      	adds	r3, #52	@ 0x34
 800198e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	334c      	adds	r3, #76	@ 0x4c
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	3338      	adds	r3, #56	@ 0x38
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	3315      	adds	r3, #21
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	334d      	adds	r3, #77	@ 0x4d
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	4613      	mov	r3, r2
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	3310      	adds	r3, #16
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	1d19      	adds	r1, r3, #4
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	799b      	ldrb	r3, [r3, #6]
 80019fa:	461a      	mov	r2, r3
 80019fc:	f004 f8f8 	bl	8005bf0 <USB_HC_StartXfer>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop

08001a0c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f003 fdec 	bl	8005600 <USB_GetMode>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	f040 80fb 	bne.w	8001c26 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 fdaf 	bl	8005598 <USB_ReadInterrupts>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80f1 	beq.w	8001c24 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 fda6 	bl	8005598 <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a56:	d104      	bne.n	8001a62 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 fd96 	bl	8005598 <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a76:	d104      	bne.n	8001a82 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 fd86 	bl	8005598 <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001a96:	d104      	bne.n	8001aa2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001aa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 fd76 	bl	8005598 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d103      	bne.n	8001abe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2202      	movs	r2, #2
 8001abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 fd68 	bl	8005598 <USB_ReadInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ad2:	d120      	bne.n	8001b16 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001adc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d113      	bne.n	8001b16 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001aee:	2110      	movs	r1, #16
 8001af0:	6938      	ldr	r0, [r7, #16]
 8001af2:	f003 fc5b 	bl	80053ac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001af6:	6938      	ldr	r0, [r7, #16]
 8001af8:	f003 fc8a 	bl	8005410 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7a5b      	ldrb	r3, [r3, #9]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d105      	bne.n	8001b10 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 fe7c 	bl	8005808 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f00a f833 	bl	800bb7c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fd3c 	bl	8005598 <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b2a:	d102      	bne.n	8001b32 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f001 fd4d 	bl	80035cc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fd2e 	bl	8005598 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d106      	bne.n	8001b54 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f009 fffc 	bl	800bb44 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2208      	movs	r2, #8
 8001b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 fd1d 	bl	8005598 <USB_ReadInterrupts>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b68:	d139      	bne.n	8001bde <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 fab8 	bl	80060e4 <USB_HC_ReadInterrupt>
 8001b74:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e025      	b.n	8001bc8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d018      	beq.n	8001bc2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ba6:	d106      	bne.n	8001bb6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	4619      	mov	r1, r3
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f905 	bl	8001dbe <HCD_HC_IN_IRQHandler>
 8001bb4:	e005      	b.n	8001bc2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 ff67 	bl	8002a90 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	795b      	ldrb	r3, [r3, #5]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d3d3      	bcc.n	8001b7c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fcd8 	bl	8005598 <USB_ReadInterrupts>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	d101      	bne.n	8001bf6 <HAL_HCD_IRQHandler+0x1ea>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_HCD_IRQHandler+0x1ec>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d014      	beq.n	8001c26 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0210 	bic.w	r2, r2, #16
 8001c0a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f001 fbfe 	bl	800340e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699a      	ldr	r2, [r3, #24]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0210 	orr.w	r2, r2, #16
 8001c20:	619a      	str	r2, [r3, #24]
 8001c22:	e000      	b.n	8001c26 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c24:	bf00      	nop
    }
  }
}
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_HCD_Start+0x16>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e013      	b.n	8001c6a <HAL_HCD_Start+0x3e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2101      	movs	r1, #1
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 fe40 	bl	80058d6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 fb38 	bl	80052d0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_HCD_Stop+0x16>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e00d      	b.n	8001ca4 <HAL_HCD_Stop+0x32>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f004 fb93 	bl	80063c0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 fde2 	bl	8005882 <USB_ResetPort>
 8001cbe:	4603      	mov	r3, r0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	334c      	adds	r3, #76	@ 0x4c
 8001ce4:	781b      	ldrb	r3, [r3, #0]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cfe:	78fa      	ldrb	r2, [r7, #3]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	1a9b      	subs	r3, r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3338      	adds	r3, #56	@ 0x38
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f003 fe24 	bl	8005976 <USB_GetCurrentFrame>
 8001d2e:	4603      	mov	r3, r0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 fdff 	bl	8005948 <USB_GetHostSpeed>
 8001d4a:	4603      	mov	r3, r0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	331a      	adds	r3, #26
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	331b      	adds	r3, #27
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	3325      	adds	r3, #37	@ 0x25
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	3324      	adds	r3, #36	@ 0x24
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 fbee 	bl	80055be <USB_ReadChInterrupts>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d11a      	bne.n	8001e22 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001dfe:	78fa      	ldrb	r2, [r7, #3]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	1a9b      	subs	r3, r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	334d      	adds	r3, #77	@ 0x4d
 8001e0e:	2207      	movs	r2, #7
 8001e10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	78fa      	ldrb	r2, [r7, #3]
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 f973 	bl	8006106 <USB_HC_Halt>
 8001e20:	e09e      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	78fa      	ldrb	r2, [r7, #3]
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 fbc7 	bl	80055be <USB_ReadChInterrupts>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e3a:	d11b      	bne.n	8001e74 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	334d      	adds	r3, #77	@ 0x4d
 8001e60:	2208      	movs	r2, #8
 8001e62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f004 f94a 	bl	8006106 <USB_HC_Halt>
 8001e72:	e075      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	78fa      	ldrb	r2, [r7, #3]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 fb9e 	bl	80055be <USB_ReadChInterrupts>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d11a      	bne.n	8001ec2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	334d      	adds	r3, #77	@ 0x4d
 8001eae:	2206      	movs	r2, #6
 8001eb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f004 f923 	bl	8006106 <USB_HC_Halt>
 8001ec0:	e04e      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	78fa      	ldrb	r2, [r7, #3]
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 fb77 	bl	80055be <USB_ReadChInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eda:	d11b      	bne.n	8001f14 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001ef0:	78fa      	ldrb	r2, [r7, #3]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	334d      	adds	r3, #77	@ 0x4d
 8001f00:	2209      	movs	r2, #9
 8001f02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f004 f8fa 	bl	8006106 <USB_HC_Halt>
 8001f12:	e025      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 fb4e 	bl	80055be <USB_ReadChInterrupts>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f28:	2b80      	cmp	r3, #128	@ 0x80
 8001f2a:	d119      	bne.n	8001f60 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2380      	movs	r3, #128	@ 0x80
 8001f3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	334d      	adds	r3, #77	@ 0x4d
 8001f4e:	2207      	movs	r2, #7
 8001f50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	78fa      	ldrb	r2, [r7, #3]
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f004 f8d3 	bl	8006106 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fb28 	bl	80055be <USB_ReadChInterrupts>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f78:	d112      	bne.n	8001fa0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f004 f8bf 	bl	8006106 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f9a:	6093      	str	r3, [r2, #8]
 8001f9c:	f000 bd75 	b.w	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 fb08 	bl	80055be <USB_ReadChInterrupts>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	f040 8128 	bne.w	800220a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2320      	movs	r3, #32
 8001fca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	331b      	adds	r3, #27
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d119      	bne.n	8002016 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	331b      	adds	r3, #27
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	0151      	lsls	r1, r2, #5
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	440a      	add	r2, r1
 800200c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002014:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	799b      	ldrb	r3, [r3, #6]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01b      	beq.n	8002056 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	3330      	adds	r3, #48	@ 0x30
 800202e:	6819      	ldr	r1, [r3, #0]
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	015a      	lsls	r2, r3, #5
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4413      	add	r3, r2
 8002038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	1ac9      	subs	r1, r1, r3
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4403      	add	r3, r0
 8002052:	3338      	adds	r3, #56	@ 0x38
 8002054:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	334d      	adds	r3, #77	@ 0x4d
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	1a9b      	subs	r3, r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	3344      	adds	r3, #68	@ 0x44
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4413      	add	r3, r2
 8002086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800208a:	461a      	mov	r2, r3
 800208c:	2301      	movs	r3, #1
 800208e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	3326      	adds	r3, #38	@ 0x26
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	3326      	adds	r3, #38	@ 0x26
 80020b6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d110      	bne.n	80020de <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f004 f81e 	bl	8006106 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020d6:	461a      	mov	r2, r3
 80020d8:	2310      	movs	r3, #16
 80020da:	6093      	str	r3, [r2, #8]
 80020dc:	e03d      	b.n	800215a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3326      	adds	r3, #38	@ 0x26
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d00a      	beq.n	800210a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3326      	adds	r3, #38	@ 0x26
 8002104:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002106:	2b01      	cmp	r3, #1
 8002108:	d127      	bne.n	800215a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4413      	add	r3, r2
 8002112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	0151      	lsls	r1, r2, #5
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	440a      	add	r2, r1
 8002120:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002124:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002128:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	334c      	adds	r3, #76	@ 0x4c
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	334c      	adds	r3, #76	@ 0x4c
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	4619      	mov	r1, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f009 fd1f 	bl	800bb98 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	799b      	ldrb	r3, [r3, #6]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d13b      	bne.n	80021da <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	3338      	adds	r3, #56	@ 0x38
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4403      	add	r3, r0
 8002182:	3328      	adds	r3, #40	@ 0x28
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	440b      	add	r3, r1
 8002188:	1e59      	subs	r1, r3, #1
 800218a:	78fa      	ldrb	r2, [r7, #3]
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4403      	add	r3, r0
 8002198:	3328      	adds	r3, #40	@ 0x28
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	fbb1 f3f3 	udiv	r3, r1, r3
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 8470 	beq.w	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	333c      	adds	r3, #60	@ 0x3c
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	f083 0301 	eor.w	r3, r3, #1
 80021c2:	b2d8      	uxtb	r0, r3
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	333c      	adds	r3, #60	@ 0x3c
 80021d2:	4602      	mov	r2, r0
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	f000 bc58 	b.w	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80021da:	78fa      	ldrb	r2, [r7, #3]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	333c      	adds	r3, #60	@ 0x3c
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	f083 0301 	eor.w	r3, r3, #1
 80021f2:	b2d8      	uxtb	r0, r3
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	333c      	adds	r3, #60	@ 0x3c
 8002202:	4602      	mov	r2, r0
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	f000 bc40 	b.w	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f003 f9d3 	bl	80055be <USB_ReadChInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b20      	cmp	r3, #32
 8002220:	d131      	bne.n	8002286 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800222e:	461a      	mov	r2, r3
 8002230:	2320      	movs	r3, #32
 8002232:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	331a      	adds	r3, #26
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	f040 841f 	bne.w	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800224c:	78fa      	ldrb	r2, [r7, #3]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	331b      	adds	r3, #27
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	1a9b      	subs	r3, r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	334d      	adds	r3, #77	@ 0x4d
 8002270:	2203      	movs	r2, #3
 8002272:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f003 ff42 	bl	8006106 <USB_HC_Halt>
 8002282:	f000 bc02 	b.w	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f003 f995 	bl	80055be <USB_ReadChInterrupts>
 8002294:	4603      	mov	r3, r0
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b02      	cmp	r3, #2
 800229c:	f040 8305 	bne.w	80028aa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022ac:	461a      	mov	r2, r3
 80022ae:	2302      	movs	r3, #2
 80022b0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	334d      	adds	r3, #77	@ 0x4d
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d114      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	334d      	adds	r3, #77	@ 0x4d
 80022d8:	2202      	movs	r2, #2
 80022da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	334c      	adds	r3, #76	@ 0x4c
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e2cc      	b.n	800288c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	334d      	adds	r3, #77	@ 0x4d
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b06      	cmp	r3, #6
 8002306:	d114      	bne.n	8002332 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	334d      	adds	r3, #77	@ 0x4d
 8002318:	2202      	movs	r2, #2
 800231a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	334c      	adds	r3, #76	@ 0x4c
 800232c:	2205      	movs	r2, #5
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	e2ac      	b.n	800288c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	334d      	adds	r3, #77	@ 0x4d
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b07      	cmp	r3, #7
 8002346:	d00b      	beq.n	8002360 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	334d      	adds	r3, #77	@ 0x4d
 8002358:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800235a:	2b09      	cmp	r3, #9
 800235c:	f040 80a6 	bne.w	80024ac <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	334d      	adds	r3, #77	@ 0x4d
 8002370:	2202      	movs	r2, #2
 8002372:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3344      	adds	r3, #68	@ 0x44
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	1c59      	adds	r1, r3, #1
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4403      	add	r3, r0
 8002394:	3344      	adds	r3, #68	@ 0x44
 8002396:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	3344      	adds	r3, #68	@ 0x44
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d943      	bls.n	8002436 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	3344      	adds	r3, #68	@ 0x44
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	331a      	adds	r3, #26
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d123      	bne.n	8002420 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	331b      	adds	r3, #27
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	331c      	adds	r3, #28
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	0151      	lsls	r1, r2, #5
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	440a      	add	r2, r1
 8002416:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800241a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800241e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	334c      	adds	r3, #76	@ 0x4c
 8002430:	2204      	movs	r2, #4
 8002432:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002434:	e229      	b.n	800288a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	334c      	adds	r3, #76	@ 0x4c
 8002446:	2202      	movs	r2, #2
 8002448:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	3326      	adds	r3, #38	@ 0x26
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	3326      	adds	r3, #38	@ 0x26
 8002470:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002472:	2b02      	cmp	r3, #2
 8002474:	f040 8209 	bne.w	800288a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800248e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002496:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024a4:	461a      	mov	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024aa:	e1ee      	b.n	800288a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	334d      	adds	r3, #77	@ 0x4d
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b05      	cmp	r3, #5
 80024c0:	f040 80c8 	bne.w	8002654 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	334d      	adds	r3, #77	@ 0x4d
 80024d4:	2202      	movs	r2, #2
 80024d6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	331b      	adds	r3, #27
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	f040 81ce 	bne.w	800288c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	3326      	adds	r3, #38	@ 0x26
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d16b      	bne.n	80025de <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	3348      	adds	r3, #72	@ 0x48
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	1c59      	adds	r1, r3, #1
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4403      	add	r3, r0
 8002526:	3348      	adds	r3, #72	@ 0x48
 8002528:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	1a9b      	subs	r3, r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	3348      	adds	r3, #72	@ 0x48
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d943      	bls.n	80025c8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	3348      	adds	r3, #72	@ 0x48
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	331b      	adds	r3, #27
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3344      	adds	r3, #68	@ 0x44
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d809      	bhi.n	8002592 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	331c      	adds	r3, #28
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	0151      	lsls	r1, r2, #5
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	440a      	add	r2, r1
 80025a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025b0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	334c      	adds	r3, #76	@ 0x4c
 80025c2:	2204      	movs	r2, #4
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	e014      	b.n	80025f2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	334c      	adds	r3, #76	@ 0x4c
 80025d8:	2202      	movs	r2, #2
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	e009      	b.n	80025f2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	334c      	adds	r3, #76	@ 0x4c
 80025ee:	2202      	movs	r2, #2
 80025f0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	3326      	adds	r3, #38	@ 0x26
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00b      	beq.n	8002620 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	3326      	adds	r3, #38	@ 0x26
 8002618:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800261a:	2b02      	cmp	r3, #2
 800261c:	f040 8136 	bne.w	800288c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002636:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800263e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800264c:	461a      	mov	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e11b      	b.n	800288c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	334d      	adds	r3, #77	@ 0x4d
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b03      	cmp	r3, #3
 8002668:	f040 8081 	bne.w	800276e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	334d      	adds	r3, #77	@ 0x4d
 800267c:	2202      	movs	r2, #2
 800267e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	331b      	adds	r3, #27
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	f040 80fa 	bne.w	800288c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	334c      	adds	r3, #76	@ 0x4c
 80026a8:	2202      	movs	r2, #2
 80026aa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	0151      	lsls	r1, r2, #5
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	440a      	add	r2, r1
 80026c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ca:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	0151      	lsls	r1, r2, #5
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	440a      	add	r2, r1
 80026e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026ea:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	0151      	lsls	r1, r2, #5
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	440a      	add	r2, r1
 8002702:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002706:	f023 0320 	bic.w	r3, r3, #32
 800270a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	3326      	adds	r3, #38	@ 0x26
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3326      	adds	r3, #38	@ 0x26
 8002732:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002734:	2b02      	cmp	r3, #2
 8002736:	f040 80a9 	bne.w	800288c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002750:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002758:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4413      	add	r3, r2
 8002762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	e08e      	b.n	800288c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	334d      	adds	r3, #77	@ 0x4d
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d143      	bne.n	800280c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	334d      	adds	r3, #77	@ 0x4d
 8002794:	2202      	movs	r2, #2
 8002796:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	334c      	adds	r3, #76	@ 0x4c
 80027a8:	2202      	movs	r2, #2
 80027aa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	3326      	adds	r3, #38	@ 0x26
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	3326      	adds	r3, #38	@ 0x26
 80027d2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d159      	bne.n	800288c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027ee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027f6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002804:	461a      	mov	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e03f      	b.n	800288c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	334d      	adds	r3, #77	@ 0x4d
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b08      	cmp	r3, #8
 8002820:	d126      	bne.n	8002870 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	334d      	adds	r3, #77	@ 0x4d
 8002832:	2202      	movs	r2, #2
 8002834:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	3344      	adds	r3, #68	@ 0x44
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	1c59      	adds	r1, r3, #1
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4403      	add	r3, r0
 8002856:	3344      	adds	r3, #68	@ 0x44
 8002858:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	334c      	adds	r3, #76	@ 0x4c
 800286a:	2204      	movs	r2, #4
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	e00d      	b.n	800288c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	334d      	adds	r3, #77	@ 0x4d
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b02      	cmp	r3, #2
 8002884:	f000 8100 	beq.w	8002a88 <HCD_HC_IN_IRQHandler+0xcca>
 8002888:	e000      	b.n	800288c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800288a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	334c      	adds	r3, #76	@ 0x4c
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f009 f978 	bl	800bb98 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028a8:	e0ef      	b.n	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 fe83 	bl	80055be <USB_ReadChInterrupts>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028be:	2b40      	cmp	r3, #64	@ 0x40
 80028c0:	d12f      	bne.n	8002922 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ce:	461a      	mov	r2, r3
 80028d0:	2340      	movs	r3, #64	@ 0x40
 80028d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	334d      	adds	r3, #77	@ 0x4d
 80028e4:	2205      	movs	r2, #5
 80028e6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	331a      	adds	r3, #26
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d109      	bne.n	8002912 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3344      	adds	r3, #68	@ 0x44
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f003 fbf3 	bl	8006106 <USB_HC_Halt>
 8002920:	e0b3      	b.n	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f002 fe47 	bl	80055be <USB_ReadChInterrupts>
 8002930:	4603      	mov	r3, r0
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b10      	cmp	r3, #16
 8002938:	f040 80a7 	bne.w	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3326      	adds	r3, #38	@ 0x26
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d11b      	bne.n	800298a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	1a9b      	subs	r3, r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	3344      	adds	r3, #68	@ 0x44
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	334d      	adds	r3, #77	@ 0x4d
 8002976:	2204      	movs	r2, #4
 8002978:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f003 fbbf 	bl	8006106 <USB_HC_Halt>
 8002988:	e03f      	b.n	8002a0a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	3326      	adds	r3, #38	@ 0x26
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	3326      	adds	r3, #38	@ 0x26
 80029b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d129      	bne.n	8002a0a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	3344      	adds	r3, #68	@ 0x44
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	799b      	ldrb	r3, [r3, #6]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HCD_HC_IN_IRQHandler+0xc2a>
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	331b      	adds	r3, #27
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d110      	bne.n	8002a0a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	334d      	adds	r3, #77	@ 0x4d
 80029f8:	2204      	movs	r2, #4
 80029fa:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f003 fb7e 	bl	8006106 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	331b      	adds	r3, #27
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d129      	bne.n	8002a74 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	331b      	adds	r3, #27
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	0151      	lsls	r1, r2, #5
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	440a      	add	r2, r1
 8002a4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a52:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	0151      	lsls	r1, r2, #5
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	440a      	add	r2, r1
 8002a6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a6e:	f043 0320 	orr.w	r3, r3, #32
 8002a72:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a80:	461a      	mov	r2, r3
 8002a82:	2310      	movs	r3, #16
 8002a84:	6093      	str	r3, [r2, #8]
 8002a86:	e000      	b.n	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002a88:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 fd85 	bl	80055be <USB_ReadChInterrupts>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d11b      	bne.n	8002af6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aca:	461a      	mov	r2, r3
 8002acc:	2304      	movs	r3, #4
 8002ace:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	334d      	adds	r3, #77	@ 0x4d
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 fb0a 	bl	8006106 <USB_HC_Halt>
 8002af2:	f000 bc89 	b.w	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f002 fd5d 	bl	80055be <USB_ReadChInterrupts>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	f040 8082 	bne.w	8002c14 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2320      	movs	r3, #32
 8002b20:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	3319      	adds	r3, #25
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d124      	bne.n	8002b82 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	3319      	adds	r3, #25
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	334c      	adds	r3, #76	@ 0x4c
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	334d      	adds	r3, #77	@ 0x4d
 8002b70:	2203      	movs	r2, #3
 8002b72:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f003 fac2 	bl	8006106 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	331a      	adds	r3, #26
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	f040 8437 	bne.w	8003408 <HCD_HC_OUT_IRQHandler+0x978>
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	331b      	adds	r3, #27
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 842b 	bne.w	8003408 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3326      	adds	r3, #38	@ 0x26
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d009      	beq.n	8002bdc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	331b      	adds	r3, #27
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	334d      	adds	r3, #77	@ 0x4d
 8002bec:	2203      	movs	r2, #3
 8002bee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 fa84 	bl	8006106 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3344      	adds	r3, #68	@ 0x44
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e3f9      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	78fa      	ldrb	r2, [r7, #3]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f002 fcce 	bl	80055be <USB_ReadChInterrupts>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c2c:	d111      	bne.n	8002c52 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c40:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 fa5b 	bl	8006106 <USB_HC_Halt>
 8002c50:	e3da      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f002 fcaf 	bl	80055be <USB_ReadChInterrupts>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d168      	bne.n	8002d3c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	3344      	adds	r3, #68	@ 0x44
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 fc99 	bl	80055be <USB_ReadChInterrupts>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c92:	2b40      	cmp	r3, #64	@ 0x40
 8002c94:	d112      	bne.n	8002cbc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3319      	adds	r3, #25
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2340      	movs	r3, #64	@ 0x40
 8002cba:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	331b      	adds	r3, #27
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d019      	beq.n	8002d06 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	331b      	adds	r3, #27
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	0151      	lsls	r1, r2, #5
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	440a      	add	r2, r1
 8002cfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d04:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d12:	461a      	mov	r2, r3
 8002d14:	2301      	movs	r3, #1
 8002d16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	334d      	adds	r3, #77	@ 0x4d
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 f9e6 	bl	8006106 <USB_HC_Halt>
 8002d3a:	e365      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f002 fc3a 	bl	80055be <USB_ReadChInterrupts>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d50:	2b40      	cmp	r3, #64	@ 0x40
 8002d52:	d139      	bne.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	334d      	adds	r3, #77	@ 0x4d
 8002d64:	2205      	movs	r2, #5
 8002d66:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	331a      	adds	r3, #26
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3319      	adds	r3, #25
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3344      	adds	r3, #68	@ 0x44
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 f9a9 	bl	8006106 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2340      	movs	r3, #64	@ 0x40
 8002dc4:	6093      	str	r3, [r2, #8]
 8002dc6:	e31f      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f002 fbf4 	bl	80055be <USB_ReadChInterrupts>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d11a      	bne.n	8002e16 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dec:	461a      	mov	r2, r3
 8002dee:	2308      	movs	r3, #8
 8002df0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	334d      	adds	r3, #77	@ 0x4d
 8002e02:	2206      	movs	r2, #6
 8002e04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f003 f979 	bl	8006106 <USB_HC_Halt>
 8002e14:	e2f8      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f002 fbcd 	bl	80055be <USB_ReadChInterrupts>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d144      	bne.n	8002eb8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3344      	adds	r3, #68	@ 0x44
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	334d      	adds	r3, #77	@ 0x4d
 8002e52:	2204      	movs	r2, #4
 8002e54:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	3319      	adds	r3, #25
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d114      	bne.n	8002e96 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	3318      	adds	r3, #24
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	3319      	adds	r3, #25
 8002e92:	2201      	movs	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f003 f931 	bl	8006106 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2310      	movs	r3, #16
 8002eb4:	6093      	str	r3, [r2, #8]
 8002eb6:	e2a7      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f002 fb7c 	bl	80055be <USB_ReadChInterrupts>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ecc:	2b80      	cmp	r3, #128	@ 0x80
 8002ece:	f040 8083 	bne.w	8002fd8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	799b      	ldrb	r3, [r3, #6]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d111      	bne.n	8002efe <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	334d      	adds	r3, #77	@ 0x4d
 8002eea:	2207      	movs	r2, #7
 8002eec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f003 f905 	bl	8006106 <USB_HC_Halt>
 8002efc:	e062      	b.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3344      	adds	r3, #68	@ 0x44
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	1c59      	adds	r1, r3, #1
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4403      	add	r3, r0
 8002f1e:	3344      	adds	r3, #68	@ 0x44
 8002f20:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	3344      	adds	r3, #68	@ 0x44
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d922      	bls.n	8002f7e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	3344      	adds	r3, #68	@ 0x44
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	334c      	adds	r3, #76	@ 0x4c
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	334c      	adds	r3, #76	@ 0x4c
 8002f70:	781a      	ldrb	r2, [r3, #0]
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	4619      	mov	r1, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f008 fe0e 	bl	800bb98 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f7c:	e022      	b.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	334c      	adds	r3, #76	@ 0x4c
 8002f8e:	2202      	movs	r2, #2
 8002f90:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fa8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fb0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2380      	movs	r3, #128	@ 0x80
 8002fd4:	6093      	str	r3, [r2, #8]
 8002fd6:	e217      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f002 faec 	bl	80055be <USB_ReadChInterrupts>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff0:	d11b      	bne.n	800302a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	334d      	adds	r3, #77	@ 0x4d
 8003002:	2209      	movs	r2, #9
 8003004:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f003 f879 	bl	8006106 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003020:	461a      	mov	r2, r3
 8003022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003026:	6093      	str	r3, [r2, #8]
 8003028:	e1ee      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	4611      	mov	r1, r2
 8003032:	4618      	mov	r0, r3
 8003034:	f002 fac3 	bl	80055be <USB_ReadChInterrupts>
 8003038:	4603      	mov	r3, r0
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	f040 81df 	bne.w	8003402 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003050:	461a      	mov	r2, r3
 8003052:	2302      	movs	r3, #2
 8003054:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	334d      	adds	r3, #77	@ 0x4d
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	f040 8093 	bne.w	8003194 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	334d      	adds	r3, #77	@ 0x4d
 800307e:	2202      	movs	r2, #2
 8003080:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	334c      	adds	r3, #76	@ 0x4c
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	3326      	adds	r3, #38	@ 0x26
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d00b      	beq.n	80030c4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3326      	adds	r3, #38	@ 0x26
 80030bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030be:	2b03      	cmp	r3, #3
 80030c0:	f040 8190 	bne.w	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	799b      	ldrb	r3, [r3, #6]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d115      	bne.n	80030f8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	333d      	adds	r3, #61	@ 0x3d
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	f083 0301 	eor.w	r3, r3, #1
 80030e4:	b2d8      	uxtb	r0, r3
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	333d      	adds	r3, #61	@ 0x3d
 80030f4:	4602      	mov	r2, r0
 80030f6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	799b      	ldrb	r3, [r3, #6]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	f040 8171 	bne.w	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	3334      	adds	r3, #52	@ 0x34
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8165 	beq.w	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	3334      	adds	r3, #52	@ 0x34
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4403      	add	r3, r0
 800313a:	3328      	adds	r3, #40	@ 0x28
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	440b      	add	r3, r1
 8003140:	1e59      	subs	r1, r3, #1
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4403      	add	r3, r0
 8003150:	3328      	adds	r3, #40	@ 0x28
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	fbb1 f3f3 	udiv	r3, r1, r3
 8003158:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 813f 	beq.w	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	333d      	adds	r3, #61	@ 0x3d
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	f083 0301 	eor.w	r3, r3, #1
 800317e:	b2d8      	uxtb	r0, r3
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	333d      	adds	r3, #61	@ 0x3d
 800318e:	4602      	mov	r2, r0
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e127      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	334d      	adds	r3, #77	@ 0x4d
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d120      	bne.n	80031ec <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	334d      	adds	r3, #77	@ 0x4d
 80031ba:	2202      	movs	r2, #2
 80031bc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	331b      	adds	r3, #27
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	f040 8107 	bne.w	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	334c      	adds	r3, #76	@ 0x4c
 80031e6:	2202      	movs	r2, #2
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	e0fb      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	334d      	adds	r3, #77	@ 0x4d
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d13a      	bne.n	8003278 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	334d      	adds	r3, #77	@ 0x4d
 8003212:	2202      	movs	r2, #2
 8003214:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	334c      	adds	r3, #76	@ 0x4c
 8003226:	2202      	movs	r2, #2
 8003228:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	331b      	adds	r3, #27
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b01      	cmp	r3, #1
 800323e:	f040 80d1 	bne.w	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	331b      	adds	r3, #27
 8003252:	2200      	movs	r2, #0
 8003254:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	0151      	lsls	r1, r2, #5
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	440a      	add	r2, r1
 800326c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003274:	6053      	str	r3, [r2, #4]
 8003276:	e0b5      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	334d      	adds	r3, #77	@ 0x4d
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b05      	cmp	r3, #5
 800328c:	d114      	bne.n	80032b8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	334d      	adds	r3, #77	@ 0x4d
 800329e:	2202      	movs	r2, #2
 80032a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	334c      	adds	r3, #76	@ 0x4c
 80032b2:	2202      	movs	r2, #2
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e095      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	334d      	adds	r3, #77	@ 0x4d
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d114      	bne.n	80032f8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	334d      	adds	r3, #77	@ 0x4d
 80032de:	2202      	movs	r2, #2
 80032e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	334c      	adds	r3, #76	@ 0x4c
 80032f2:	2205      	movs	r2, #5
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	e075      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	334d      	adds	r3, #77	@ 0x4d
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b07      	cmp	r3, #7
 800330c:	d00a      	beq.n	8003324 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	334d      	adds	r3, #77	@ 0x4d
 800331e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003320:	2b09      	cmp	r3, #9
 8003322:	d170      	bne.n	8003406 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	334d      	adds	r3, #77	@ 0x4d
 8003334:	2202      	movs	r2, #2
 8003336:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3344      	adds	r3, #68	@ 0x44
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	1c59      	adds	r1, r3, #1
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4403      	add	r3, r0
 8003358:	3344      	adds	r3, #68	@ 0x44
 800335a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3344      	adds	r3, #68	@ 0x44
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d914      	bls.n	800339c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	3344      	adds	r3, #68	@ 0x44
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	334c      	adds	r3, #76	@ 0x4c
 8003396:	2204      	movs	r2, #4
 8003398:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800339a:	e022      	b.n	80033e2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	334c      	adds	r3, #76	@ 0x4c
 80033ac:	2202      	movs	r2, #2
 80033ae:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033c6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033ce:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033dc:	461a      	mov	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033e2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	334c      	adds	r3, #76	@ 0x4c
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	4619      	mov	r1, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f008 fbcc 	bl	800bb98 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003400:	e002      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003406:	bf00      	nop
  }
}
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b08a      	sub	sp, #40	@ 0x28
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	0c5b      	lsrs	r3, r3, #17
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003442:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d004      	beq.n	8003454 <HCD_RXQLVL_IRQHandler+0x46>
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b05      	cmp	r3, #5
 800344e:	f000 80b6 	beq.w	80035be <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003452:	e0b7      	b.n	80035c4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80b3 	beq.w	80035c2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	332c      	adds	r3, #44	@ 0x2c
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80a7 	beq.w	80035c2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3338      	adds	r3, #56	@ 0x38
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	18d1      	adds	r1, r2, r3
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4403      	add	r3, r0
 8003498:	3334      	adds	r3, #52	@ 0x34
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4299      	cmp	r1, r3
 800349e:	f200 8083 	bhi.w	80035a8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	332c      	adds	r3, #44	@ 0x2c
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	b292      	uxth	r2, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	f002 f813 	bl	80054e8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	332c      	adds	r3, #44	@ 0x2c
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	18d1      	adds	r1, r2, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4403      	add	r3, r0
 80034e6:	332c      	adds	r3, #44	@ 0x2c
 80034e8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	3338      	adds	r3, #56	@ 0x38
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	18d1      	adds	r1, r2, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4403      	add	r3, r0
 800350e:	3338      	adds	r3, #56	@ 0x38
 8003510:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	0cdb      	lsrs	r3, r3, #19
 8003522:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003526:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4613      	mov	r3, r2
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	3328      	adds	r3, #40	@ 0x28
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4293      	cmp	r3, r2
 8003540:	d13f      	bne.n	80035c2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d03c      	beq.n	80035c2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800355e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003566:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	4413      	add	r3, r2
 8003570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003574:	461a      	mov	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	333c      	adds	r3, #60	@ 0x3c
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	f083 0301 	eor.w	r3, r3, #1
 8003590:	b2d8      	uxtb	r0, r3
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	333c      	adds	r3, #60	@ 0x3c
 80035a2:	4602      	mov	r2, r0
 80035a4:	701a      	strb	r2, [r3, #0]
      break;
 80035a6:	e00c      	b.n	80035c2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	334c      	adds	r3, #76	@ 0x4c
 80035b8:	2204      	movs	r2, #4
 80035ba:	701a      	strb	r2, [r3, #0]
      break;
 80035bc:	e001      	b.n	80035c2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80035c2:	bf00      	nop
  }
}
 80035c4:	bf00      	nop
 80035c6:	3728      	adds	r7, #40	@ 0x28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80035f8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b02      	cmp	r3, #2
 8003602:	d10b      	bne.n	800361c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	d102      	bne.n	8003614 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f008 faa6 	bl	800bb60 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f043 0302 	orr.w	r3, r3, #2
 800361a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b08      	cmp	r3, #8
 8003624:	d132      	bne.n	800368c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f043 0308 	orr.w	r3, r3, #8
 800362c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b04      	cmp	r3, #4
 8003636:	d126      	bne.n	8003686 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	7a5b      	ldrb	r3, [r3, #9]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d113      	bne.n	8003668 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003646:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800364a:	d106      	bne.n	800365a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2102      	movs	r1, #2
 8003652:	4618      	mov	r0, r3
 8003654:	f002 f8d8 	bl	8005808 <USB_InitFSLSPClkSel>
 8003658:	e011      	b.n	800367e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2101      	movs	r1, #1
 8003660:	4618      	mov	r0, r3
 8003662:	f002 f8d1 	bl	8005808 <USB_InitFSLSPClkSel>
 8003666:	e00a      	b.n	800367e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	79db      	ldrb	r3, [r3, #7]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d106      	bne.n	800367e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003676:	461a      	mov	r2, r3
 8003678:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800367c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f008 fa9c 	bl	800bbbc <HAL_HCD_PortEnabled_Callback>
 8003684:	e002      	b.n	800368c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f008 faa6 	bl	800bbd8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b20      	cmp	r3, #32
 8003694:	d103      	bne.n	800369e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f043 0320 	orr.w	r3, r3, #32
 800369c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036a4:	461a      	mov	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	6013      	str	r3, [r2, #0]
}
 80036aa:	bf00      	nop
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e12b      	b.n	800391e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd f982 	bl	80009e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2224      	movs	r2, #36	@ 0x24
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003718:	f001 fa20 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 800371c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4a81      	ldr	r2, [pc, #516]	@ (8003928 <HAL_I2C_Init+0x274>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d807      	bhi.n	8003738 <HAL_I2C_Init+0x84>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4a80      	ldr	r2, [pc, #512]	@ (800392c <HAL_I2C_Init+0x278>)
 800372c:	4293      	cmp	r3, r2
 800372e:	bf94      	ite	ls
 8003730:	2301      	movls	r3, #1
 8003732:	2300      	movhi	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e006      	b.n	8003746 <HAL_I2C_Init+0x92>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a7d      	ldr	r2, [pc, #500]	@ (8003930 <HAL_I2C_Init+0x27c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	bf94      	ite	ls
 8003740:	2301      	movls	r3, #1
 8003742:	2300      	movhi	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0e7      	b.n	800391e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4a78      	ldr	r2, [pc, #480]	@ (8003934 <HAL_I2C_Init+0x280>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	0c9b      	lsrs	r3, r3, #18
 8003758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4a6a      	ldr	r2, [pc, #424]	@ (8003928 <HAL_I2C_Init+0x274>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d802      	bhi.n	8003788 <HAL_I2C_Init+0xd4>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	3301      	adds	r3, #1
 8003786:	e009      	b.n	800379c <HAL_I2C_Init+0xe8>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	4a69      	ldr	r2, [pc, #420]	@ (8003938 <HAL_I2C_Init+0x284>)
 8003794:	fba2 2303 	umull	r2, r3, r2, r3
 8003798:	099b      	lsrs	r3, r3, #6
 800379a:	3301      	adds	r3, #1
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	495c      	ldr	r1, [pc, #368]	@ (8003928 <HAL_I2C_Init+0x274>)
 80037b8:	428b      	cmp	r3, r1
 80037ba:	d819      	bhi.n	80037f0 <HAL_I2C_Init+0x13c>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1e59      	subs	r1, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ca:	1c59      	adds	r1, r3, #1
 80037cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037d0:	400b      	ands	r3, r1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_I2C_Init+0x138>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1e59      	subs	r1, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037e4:	3301      	adds	r3, #1
 80037e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ea:	e051      	b.n	8003890 <HAL_I2C_Init+0x1dc>
 80037ec:	2304      	movs	r3, #4
 80037ee:	e04f      	b.n	8003890 <HAL_I2C_Init+0x1dc>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d111      	bne.n	800381c <HAL_I2C_Init+0x168>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1e58      	subs	r0, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	440b      	add	r3, r1
 8003806:	fbb0 f3f3 	udiv	r3, r0, r3
 800380a:	3301      	adds	r3, #1
 800380c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e012      	b.n	8003842 <HAL_I2C_Init+0x18e>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1e58      	subs	r0, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	0099      	lsls	r1, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003832:	3301      	adds	r3, #1
 8003834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_Init+0x196>
 8003846:	2301      	movs	r3, #1
 8003848:	e022      	b.n	8003890 <HAL_I2C_Init+0x1dc>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10e      	bne.n	8003870 <HAL_I2C_Init+0x1bc>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1e58      	subs	r0, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	460b      	mov	r3, r1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	440b      	add	r3, r1
 8003860:	fbb0 f3f3 	udiv	r3, r0, r3
 8003864:	3301      	adds	r3, #1
 8003866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800386e:	e00f      	b.n	8003890 <HAL_I2C_Init+0x1dc>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1e58      	subs	r0, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	0099      	lsls	r1, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	fbb0 f3f3 	udiv	r3, r0, r3
 8003886:	3301      	adds	r3, #1
 8003888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	6809      	ldr	r1, [r1, #0]
 8003894:	4313      	orrs	r3, r2
 8003896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6911      	ldr	r1, [r2, #16]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68d2      	ldr	r2, [r2, #12]
 80038ca:	4311      	orrs	r1, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	000186a0 	.word	0x000186a0
 800392c:	001e847f 	.word	0x001e847f
 8003930:	003d08ff 	.word	0x003d08ff
 8003934:	431bde83 	.word	0x431bde83
 8003938:	10624dd3 	.word	0x10624dd3

0800393c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e128      	b.n	8003ba0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a90      	ldr	r2, [pc, #576]	@ (8003ba8 <HAL_I2S_Init+0x26c>)
 8003966:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7fd f883 	bl	8000a74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2202      	movs	r2, #2
 8003972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003984:	f023 030f 	bic.w	r3, r3, #15
 8003988:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2202      	movs	r2, #2
 8003990:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d060      	beq.n	8003a5c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039a2:	2310      	movs	r3, #16
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	e001      	b.n	80039ac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039a8:	2320      	movs	r3, #32
 80039aa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d802      	bhi.n	80039ba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039ba:	2001      	movs	r0, #1
 80039bc:	f001 f9c4 	bl	8004d48 <HAL_RCCEx_GetPeriphCLKFreq>
 80039c0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039ca:	d125      	bne.n	8003a18 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d010      	beq.n	80039f6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	fbb2 f2f3 	udiv	r2, r2, r3
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	461a      	mov	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f0:	3305      	adds	r3, #5
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	e01f      	b.n	8003a36 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	461a      	mov	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a12:	3305      	adds	r3, #5
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	e00e      	b.n	8003a36 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	461a      	mov	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	3305      	adds	r3, #5
 8003a34:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4a5c      	ldr	r2, [pc, #368]	@ (8003bac <HAL_I2S_Init+0x270>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	08db      	lsrs	r3, r3, #3
 8003a40:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	021b      	lsls	r3, r3, #8
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	e003      	b.n	8003a64 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d902      	bls.n	8003a70 <HAL_I2S_Init+0x134>
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2bff      	cmp	r3, #255	@ 0xff
 8003a6e:	d907      	bls.n	8003a80 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a74:	f043 0210 	orr.w	r2, r3, #16
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e08f      	b.n	8003ba0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	ea42 0103 	orr.w	r1, r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a9e:	f023 030f 	bic.w	r3, r3, #15
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6851      	ldr	r1, [r2, #4]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6892      	ldr	r2, [r2, #8]
 8003aaa:	4311      	orrs	r1, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68d2      	ldr	r2, [r2, #12]
 8003ab0:	4311      	orrs	r1, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6992      	ldr	r2, [r2, #24]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ac2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d161      	bne.n	8003b90 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a38      	ldr	r2, [pc, #224]	@ (8003bb0 <HAL_I2S_Init+0x274>)
 8003ad0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a37      	ldr	r2, [pc, #220]	@ (8003bb4 <HAL_I2S_Init+0x278>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d101      	bne.n	8003ae0 <HAL_I2S_Init+0x1a4>
 8003adc:	4b36      	ldr	r3, [pc, #216]	@ (8003bb8 <HAL_I2S_Init+0x27c>)
 8003ade:	e001      	b.n	8003ae4 <HAL_I2S_Init+0x1a8>
 8003ae0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6812      	ldr	r2, [r2, #0]
 8003aea:	4932      	ldr	r1, [pc, #200]	@ (8003bb4 <HAL_I2S_Init+0x278>)
 8003aec:	428a      	cmp	r2, r1
 8003aee:	d101      	bne.n	8003af4 <HAL_I2S_Init+0x1b8>
 8003af0:	4a31      	ldr	r2, [pc, #196]	@ (8003bb8 <HAL_I2S_Init+0x27c>)
 8003af2:	e001      	b.n	8003af8 <HAL_I2S_Init+0x1bc>
 8003af4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003af8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003afc:	f023 030f 	bic.w	r3, r3, #15
 8003b00:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb4 <HAL_I2S_Init+0x278>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d101      	bne.n	8003b10 <HAL_I2S_Init+0x1d4>
 8003b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb8 <HAL_I2S_Init+0x27c>)
 8003b0e:	e001      	b.n	8003b14 <HAL_I2S_Init+0x1d8>
 8003b10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b14:	2202      	movs	r2, #2
 8003b16:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a25      	ldr	r2, [pc, #148]	@ (8003bb4 <HAL_I2S_Init+0x278>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <HAL_I2S_Init+0x1ea>
 8003b22:	4b25      	ldr	r3, [pc, #148]	@ (8003bb8 <HAL_I2S_Init+0x27c>)
 8003b24:	e001      	b.n	8003b2a <HAL_I2S_Init+0x1ee>
 8003b26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b36:	d003      	beq.n	8003b40 <HAL_I2S_Init+0x204>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d103      	bne.n	8003b48 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	e001      	b.n	8003b4c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b56:	4313      	orrs	r3, r2
 8003b58:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b60:	4313      	orrs	r3, r2
 8003b62:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	897b      	ldrh	r3, [r7, #10]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b78:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a0d      	ldr	r2, [pc, #52]	@ (8003bb4 <HAL_I2S_Init+0x278>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d101      	bne.n	8003b88 <HAL_I2S_Init+0x24c>
 8003b84:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb8 <HAL_I2S_Init+0x27c>)
 8003b86:	e001      	b.n	8003b8c <HAL_I2S_Init+0x250>
 8003b88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b8c:	897a      	ldrh	r2, [r7, #10]
 8003b8e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	08003cb3 	.word	0x08003cb3
 8003bac:	cccccccd 	.word	0xcccccccd
 8003bb0:	08003dc9 	.word	0x08003dc9
 8003bb4:	40003800 	.word	0x40003800
 8003bb8:	40003400 	.word	0x40003400

08003bbc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	881a      	ldrh	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	1c9a      	adds	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10e      	bne.n	8003c4c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c3c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff ffb8 	bl	8003bbc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c66:	b292      	uxth	r2, r2
 8003c68:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6e:	1c9a      	adds	r2, r3, #2
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10e      	bne.n	8003caa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c9a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff93 	bl	8003bd0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b086      	sub	sp, #24
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d13a      	bne.n	8003d44 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d109      	bne.n	8003cec <I2S_IRQHandler+0x3a>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	d102      	bne.n	8003cec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ffb4 	bl	8003c54 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf2:	2b40      	cmp	r3, #64	@ 0x40
 8003cf4:	d126      	bne.n	8003d44 <I2S_IRQHandler+0x92>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d11f      	bne.n	8003d44 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d14:	2300      	movs	r3, #0
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d36:	f043 0202 	orr.w	r2, r3, #2
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff ff50 	bl	8003be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d136      	bne.n	8003dbe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d109      	bne.n	8003d6e <I2S_IRQHandler+0xbc>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d64:	2b80      	cmp	r3, #128	@ 0x80
 8003d66:	d102      	bne.n	8003d6e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ff45 	bl	8003bf8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d122      	bne.n	8003dbe <I2S_IRQHandler+0x10c>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d11b      	bne.n	8003dbe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d94:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db0:	f043 0204 	orr.w	r2, r3, #4
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff ff13 	bl	8003be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a92      	ldr	r2, [pc, #584]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d101      	bne.n	8003de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003de2:	4b92      	ldr	r3, [pc, #584]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003de4:	e001      	b.n	8003dea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003de6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a8b      	ldr	r2, [pc, #556]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d101      	bne.n	8003e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e00:	4b8a      	ldr	r3, [pc, #552]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e02:	e001      	b.n	8003e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e14:	d004      	beq.n	8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f040 8099 	bne.w	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d107      	bne.n	8003e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f925 	bl	8004084 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d107      	bne.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f9c8 	bl	80041e4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5a:	2b40      	cmp	r3, #64	@ 0x40
 8003e5c:	d13a      	bne.n	8003ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d035      	beq.n	8003ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e72:	4b6e      	ldr	r3, [pc, #440]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e74:	e001      	b.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4969      	ldr	r1, [pc, #420]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e82:	428b      	cmp	r3, r1
 8003e84:	d101      	bne.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e86:	4b69      	ldr	r3, [pc, #420]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e88:	e001      	b.n	8003e8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e92:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ea2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	f043 0202 	orr.w	r2, r3, #2
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fe88 	bl	8003be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	f040 80c3 	bne.w	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80bd 	beq.w	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003efa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a49      	ldr	r2, [pc, #292]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d101      	bne.n	8003f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f06:	4b49      	ldr	r3, [pc, #292]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f08:	e001      	b.n	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4944      	ldr	r1, [pc, #272]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f16:	428b      	cmp	r3, r1
 8003f18:	d101      	bne.n	8003f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f1a:	4b44      	ldr	r3, [pc, #272]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f1c:	e001      	b.n	8003f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f22:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f26:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f42:	f043 0204 	orr.w	r2, r3, #4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff fe4a 	bl	8003be4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f50:	e089      	b.n	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d107      	bne.n	8003f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8be 	bl	80040e8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d107      	bne.n	8003f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f8fd 	bl	8004180 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8c:	2b40      	cmp	r3, #64	@ 0x40
 8003f8e:	d12f      	bne.n	8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02a      	beq.n	8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fa8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1e      	ldr	r2, [pc, #120]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d101      	bne.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fb6:	e001      	b.n	8003fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003fb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4919      	ldr	r1, [pc, #100]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fc4:	428b      	cmp	r3, r1
 8003fc6:	d101      	bne.n	8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003fc8:	4b18      	ldr	r3, [pc, #96]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fca:	e001      	b.n	8003fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003fcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fd0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fd4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe2:	f043 0202 	orr.w	r2, r3, #2
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fdfa 	bl	8003be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d136      	bne.n	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d031      	beq.n	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a07      	ldr	r2, [pc, #28]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800400e:	4b07      	ldr	r3, [pc, #28]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004010:	e001      	b.n	8004016 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004012:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4902      	ldr	r1, [pc, #8]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800401e:	428b      	cmp	r3, r1
 8004020:	d106      	bne.n	8004030 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004022:	4b02      	ldr	r3, [pc, #8]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004024:	e006      	b.n	8004034 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004026:	bf00      	nop
 8004028:	40003800 	.word	0x40003800
 800402c:	40003400 	.word	0x40003400
 8004030:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004034:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004038:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004048:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004056:	f043 0204 	orr.w	r2, r3, #4
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff fdc0 	bl	8003be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004064:	e000      	b.n	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004066:	bf00      	nop
}
 8004068:	bf00      	nop
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	1c99      	adds	r1, r3, #2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6251      	str	r1, [r2, #36]	@ 0x24
 8004096:	881a      	ldrh	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d113      	bne.n	80040de <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ffc9 	bl	8004070 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	1c99      	adds	r1, r3, #2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6251      	str	r1, [r2, #36]	@ 0x24
 80040fa:	8819      	ldrh	r1, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1d      	ldr	r2, [pc, #116]	@ (8004178 <I2SEx_TxISR_I2SExt+0x90>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <I2SEx_TxISR_I2SExt+0x22>
 8004106:	4b1d      	ldr	r3, [pc, #116]	@ (800417c <I2SEx_TxISR_I2SExt+0x94>)
 8004108:	e001      	b.n	800410e <I2SEx_TxISR_I2SExt+0x26>
 800410a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800410e:	460a      	mov	r2, r1
 8004110:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d121      	bne.n	800416e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a12      	ldr	r2, [pc, #72]	@ (8004178 <I2SEx_TxISR_I2SExt+0x90>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d101      	bne.n	8004138 <I2SEx_TxISR_I2SExt+0x50>
 8004134:	4b11      	ldr	r3, [pc, #68]	@ (800417c <I2SEx_TxISR_I2SExt+0x94>)
 8004136:	e001      	b.n	800413c <I2SEx_TxISR_I2SExt+0x54>
 8004138:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	490d      	ldr	r1, [pc, #52]	@ (8004178 <I2SEx_TxISR_I2SExt+0x90>)
 8004144:	428b      	cmp	r3, r1
 8004146:	d101      	bne.n	800414c <I2SEx_TxISR_I2SExt+0x64>
 8004148:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <I2SEx_TxISR_I2SExt+0x94>)
 800414a:	e001      	b.n	8004150 <I2SEx_TxISR_I2SExt+0x68>
 800414c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004150:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004154:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff ff81 	bl	8004070 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40003800 	.word	0x40003800
 800417c:	40003400 	.word	0x40003400

08004180 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68d8      	ldr	r0, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004192:	1c99      	adds	r1, r3, #2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004198:	b282      	uxth	r2, r0
 800419a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d113      	bne.n	80041dc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041c2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ff4a 	bl	8004070 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a20      	ldr	r2, [pc, #128]	@ (8004274 <I2SEx_RxISR_I2SExt+0x90>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d101      	bne.n	80041fa <I2SEx_RxISR_I2SExt+0x16>
 80041f6:	4b20      	ldr	r3, [pc, #128]	@ (8004278 <I2SEx_RxISR_I2SExt+0x94>)
 80041f8:	e001      	b.n	80041fe <I2SEx_RxISR_I2SExt+0x1a>
 80041fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041fe:	68d8      	ldr	r0, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	1c99      	adds	r1, r3, #2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800420a:	b282      	uxth	r2, r0
 800420c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d121      	bne.n	800426a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a12      	ldr	r2, [pc, #72]	@ (8004274 <I2SEx_RxISR_I2SExt+0x90>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d101      	bne.n	8004234 <I2SEx_RxISR_I2SExt+0x50>
 8004230:	4b11      	ldr	r3, [pc, #68]	@ (8004278 <I2SEx_RxISR_I2SExt+0x94>)
 8004232:	e001      	b.n	8004238 <I2SEx_RxISR_I2SExt+0x54>
 8004234:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	490d      	ldr	r1, [pc, #52]	@ (8004274 <I2SEx_RxISR_I2SExt+0x90>)
 8004240:	428b      	cmp	r3, r1
 8004242:	d101      	bne.n	8004248 <I2SEx_RxISR_I2SExt+0x64>
 8004244:	4b0c      	ldr	r3, [pc, #48]	@ (8004278 <I2SEx_RxISR_I2SExt+0x94>)
 8004246:	e001      	b.n	800424c <I2SEx_RxISR_I2SExt+0x68>
 8004248:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800424c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004250:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d106      	bne.n	800426a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff ff03 	bl	8004070 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40003800 	.word	0x40003800
 8004278:	40003400 	.word	0x40003400

0800427c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e267      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d075      	beq.n	8004386 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800429a:	4b88      	ldr	r3, [pc, #544]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d00c      	beq.n	80042c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042a6:	4b85      	ldr	r3, [pc, #532]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d112      	bne.n	80042d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b2:	4b82      	ldr	r3, [pc, #520]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042be:	d10b      	bne.n	80042d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c0:	4b7e      	ldr	r3, [pc, #504]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d05b      	beq.n	8004384 <HAL_RCC_OscConfig+0x108>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d157      	bne.n	8004384 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e242      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042e0:	d106      	bne.n	80042f0 <HAL_RCC_OscConfig+0x74>
 80042e2:	4b76      	ldr	r3, [pc, #472]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a75      	ldr	r2, [pc, #468]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e01d      	b.n	800432c <HAL_RCC_OscConfig+0xb0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042f8:	d10c      	bne.n	8004314 <HAL_RCC_OscConfig+0x98>
 80042fa:	4b70      	ldr	r3, [pc, #448]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a6f      	ldr	r2, [pc, #444]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004300:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4b6d      	ldr	r3, [pc, #436]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a6c      	ldr	r2, [pc, #432]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 800430c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	e00b      	b.n	800432c <HAL_RCC_OscConfig+0xb0>
 8004314:	4b69      	ldr	r3, [pc, #420]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a68      	ldr	r2, [pc, #416]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 800431a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	4b66      	ldr	r3, [pc, #408]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a65      	ldr	r2, [pc, #404]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800432a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d013      	beq.n	800435c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fc fd92 	bl	8000e5c <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433c:	f7fc fd8e 	bl	8000e5c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	@ 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e207      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b5b      	ldr	r3, [pc, #364]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0xc0>
 800435a:	e014      	b.n	8004386 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7fc fd7e 	bl	8000e5c <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004364:	f7fc fd7a 	bl	8000e5c <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	@ 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e1f3      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004376:	4b51      	ldr	r3, [pc, #324]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0xe8>
 8004382:	e000      	b.n	8004386 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d063      	beq.n	800445a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004392:	4b4a      	ldr	r3, [pc, #296]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800439e:	4b47      	ldr	r3, [pc, #284]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d11c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043aa:	4b44      	ldr	r3, [pc, #272]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d116      	bne.n	80043e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	4b41      	ldr	r3, [pc, #260]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_RCC_OscConfig+0x152>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d001      	beq.n	80043ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e1c7      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ce:	4b3b      	ldr	r3, [pc, #236]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4937      	ldr	r1, [pc, #220]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	e03a      	b.n	800445a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d020      	beq.n	800442e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ec:	4b34      	ldr	r3, [pc, #208]	@ (80044c0 <HAL_RCC_OscConfig+0x244>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f2:	f7fc fd33 	bl	8000e5c <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043fa:	f7fc fd2f 	bl	8000e5c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e1a8      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440c:	4b2b      	ldr	r3, [pc, #172]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004418:	4b28      	ldr	r3, [pc, #160]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	4925      	ldr	r1, [pc, #148]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004428:	4313      	orrs	r3, r2
 800442a:	600b      	str	r3, [r1, #0]
 800442c:	e015      	b.n	800445a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800442e:	4b24      	ldr	r3, [pc, #144]	@ (80044c0 <HAL_RCC_OscConfig+0x244>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fc fd12 	bl	8000e5c <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443c:	f7fc fd0e 	bl	8000e5c <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e187      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444e:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d036      	beq.n	80044d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d016      	beq.n	800449c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800446e:	4b15      	ldr	r3, [pc, #84]	@ (80044c4 <HAL_RCC_OscConfig+0x248>)
 8004470:	2201      	movs	r2, #1
 8004472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fc fcf2 	bl	8000e5c <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800447c:	f7fc fcee 	bl	8000e5c <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e167      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448e:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f0      	beq.n	800447c <HAL_RCC_OscConfig+0x200>
 800449a:	e01b      	b.n	80044d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800449c:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <HAL_RCC_OscConfig+0x248>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a2:	f7fc fcdb 	bl	8000e5c <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a8:	e00e      	b.n	80044c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044aa:	f7fc fcd7 	bl	8000e5c <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d907      	bls.n	80044c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e150      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
 80044bc:	40023800 	.word	0x40023800
 80044c0:	42470000 	.word	0x42470000
 80044c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c8:	4b88      	ldr	r3, [pc, #544]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80044ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1ea      	bne.n	80044aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8097 	beq.w	8004610 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e6:	4b81      	ldr	r3, [pc, #516]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10f      	bne.n	8004512 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	4b7d      	ldr	r3, [pc, #500]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	4a7c      	ldr	r2, [pc, #496]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80044fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004500:	6413      	str	r3, [r2, #64]	@ 0x40
 8004502:	4b7a      	ldr	r3, [pc, #488]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800450a:	60bb      	str	r3, [r7, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450e:	2301      	movs	r3, #1
 8004510:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004512:	4b77      	ldr	r3, [pc, #476]	@ (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d118      	bne.n	8004550 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800451e:	4b74      	ldr	r3, [pc, #464]	@ (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a73      	ldr	r2, [pc, #460]	@ (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452a:	f7fc fc97 	bl	8000e5c <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004532:	f7fc fc93 	bl	8000e5c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e10c      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	4b6a      	ldr	r3, [pc, #424]	@ (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d106      	bne.n	8004566 <HAL_RCC_OscConfig+0x2ea>
 8004558:	4b64      	ldr	r3, [pc, #400]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800455a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455c:	4a63      	ldr	r2, [pc, #396]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	6713      	str	r3, [r2, #112]	@ 0x70
 8004564:	e01c      	b.n	80045a0 <HAL_RCC_OscConfig+0x324>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b05      	cmp	r3, #5
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0x30c>
 800456e:	4b5f      	ldr	r3, [pc, #380]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004572:	4a5e      	ldr	r2, [pc, #376]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004574:	f043 0304 	orr.w	r3, r3, #4
 8004578:	6713      	str	r3, [r2, #112]	@ 0x70
 800457a:	4b5c      	ldr	r3, [pc, #368]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457e:	4a5b      	ldr	r2, [pc, #364]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	6713      	str	r3, [r2, #112]	@ 0x70
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0x324>
 8004588:	4b58      	ldr	r3, [pc, #352]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458c:	4a57      	ldr	r2, [pc, #348]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	6713      	str	r3, [r2, #112]	@ 0x70
 8004594:	4b55      	ldr	r3, [pc, #340]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004598:	4a54      	ldr	r2, [pc, #336]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800459a:	f023 0304 	bic.w	r3, r3, #4
 800459e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d015      	beq.n	80045d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fc fc58 	bl	8000e5c <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b0:	f7fc fc54 	bl	8000e5c <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e0cb      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c6:	4b49      	ldr	r3, [pc, #292]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0ee      	beq.n	80045b0 <HAL_RCC_OscConfig+0x334>
 80045d2:	e014      	b.n	80045fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d4:	f7fc fc42 	bl	8000e5c <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045dc:	f7fc fc3e 	bl	8000e5c <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e0b5      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f2:	4b3e      	ldr	r3, [pc, #248]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1ee      	bne.n	80045dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d105      	bne.n	8004610 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004604:	4b39      	ldr	r3, [pc, #228]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004608:	4a38      	ldr	r2, [pc, #224]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800460a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800460e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80a1 	beq.w	800475c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800461a:	4b34      	ldr	r3, [pc, #208]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
 8004622:	2b08      	cmp	r3, #8
 8004624:	d05c      	beq.n	80046e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d141      	bne.n	80046b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800462e:	4b31      	ldr	r3, [pc, #196]	@ (80046f4 <HAL_RCC_OscConfig+0x478>)
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004634:	f7fc fc12 	bl	8000e5c <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800463c:	f7fc fc0e 	bl	8000e5c <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e087      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464e:	4b27      	ldr	r3, [pc, #156]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	019b      	lsls	r3, r3, #6
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	3b01      	subs	r3, #1
 8004674:	041b      	lsls	r3, r3, #16
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467c:	061b      	lsls	r3, r3, #24
 800467e:	491b      	ldr	r1, [pc, #108]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004680:	4313      	orrs	r3, r2
 8004682:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004684:	4b1b      	ldr	r3, [pc, #108]	@ (80046f4 <HAL_RCC_OscConfig+0x478>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468a:	f7fc fbe7 	bl	8000e5c <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004692:	f7fc fbe3 	bl	8000e5c <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e05c      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a4:	4b11      	ldr	r3, [pc, #68]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x416>
 80046b0:	e054      	b.n	800475c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b2:	4b10      	ldr	r3, [pc, #64]	@ (80046f4 <HAL_RCC_OscConfig+0x478>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fc fbd0 	bl	8000e5c <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fc fbcc 	bl	8000e5c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e045      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	4b06      	ldr	r3, [pc, #24]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x444>
 80046de:	e03d      	b.n	800475c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e038      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40007000 	.word	0x40007000
 80046f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004768 <HAL_RCC_OscConfig+0x4ec>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d028      	beq.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d121      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d11a      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004728:	4013      	ands	r3, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800472e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004730:	4293      	cmp	r3, r2
 8004732:	d111      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	3b01      	subs	r3, #1
 8004742:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d107      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40023800 	.word	0x40023800

0800476c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0cc      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004780:	4b68      	ldr	r3, [pc, #416]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d90c      	bls.n	80047a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	4b65      	ldr	r3, [pc, #404]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004796:	4b63      	ldr	r3, [pc, #396]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0b8      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d020      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c0:	4b59      	ldr	r3, [pc, #356]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4a58      	ldr	r2, [pc, #352]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047d8:	4b53      	ldr	r3, [pc, #332]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4a52      	ldr	r2, [pc, #328]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e4:	4b50      	ldr	r3, [pc, #320]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	494d      	ldr	r1, [pc, #308]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d044      	beq.n	800488c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	4b47      	ldr	r3, [pc, #284]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d119      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e07f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d003      	beq.n	800482a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004826:	2b03      	cmp	r3, #3
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482a:	4b3f      	ldr	r3, [pc, #252]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e06f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483a:	4b3b      	ldr	r3, [pc, #236]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e067      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800484a:	4b37      	ldr	r3, [pc, #220]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f023 0203 	bic.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4934      	ldr	r1, [pc, #208]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	4313      	orrs	r3, r2
 800485a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800485c:	f7fc fafe 	bl	8000e5c <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004862:	e00a      	b.n	800487a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004864:	f7fc fafa 	bl	8000e5c <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e04f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487a:	4b2b      	ldr	r3, [pc, #172]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 020c 	and.w	r2, r3, #12
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	429a      	cmp	r2, r3
 800488a:	d1eb      	bne.n	8004864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800488c:	4b25      	ldr	r3, [pc, #148]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d20c      	bcs.n	80048b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489a:	4b22      	ldr	r3, [pc, #136]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a2:	4b20      	ldr	r3, [pc, #128]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e032      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c0:	4b19      	ldr	r3, [pc, #100]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4916      	ldr	r1, [pc, #88]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048de:	4b12      	ldr	r3, [pc, #72]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	490e      	ldr	r1, [pc, #56]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048f2:	f000 f821 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 80048f6:	4602      	mov	r2, r0
 80048f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	490a      	ldr	r1, [pc, #40]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 8004904:	5ccb      	ldrb	r3, [r1, r3]
 8004906:	fa22 f303 	lsr.w	r3, r2, r3
 800490a:	4a09      	ldr	r2, [pc, #36]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800490e:	4b09      	ldr	r3, [pc, #36]	@ (8004934 <HAL_RCC_ClockConfig+0x1c8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7fc fa5e 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40023c00 	.word	0x40023c00
 8004928:	40023800 	.word	0x40023800
 800492c:	0800c304 	.word	0x0800c304
 8004930:	20000000 	.word	0x20000000
 8004934:	20000004 	.word	0x20000004

08004938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800493c:	b094      	sub	sp, #80	@ 0x50
 800493e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004950:	4b79      	ldr	r3, [pc, #484]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 030c 	and.w	r3, r3, #12
 8004958:	2b08      	cmp	r3, #8
 800495a:	d00d      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x40>
 800495c:	2b08      	cmp	r3, #8
 800495e:	f200 80e1 	bhi.w	8004b24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <HAL_RCC_GetSysClockFreq+0x34>
 8004966:	2b04      	cmp	r3, #4
 8004968:	d003      	beq.n	8004972 <HAL_RCC_GetSysClockFreq+0x3a>
 800496a:	e0db      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800496c:	4b73      	ldr	r3, [pc, #460]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x204>)
 800496e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004970:	e0db      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004972:	4b73      	ldr	r3, [pc, #460]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x208>)
 8004974:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004976:	e0d8      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004978:	4b6f      	ldr	r3, [pc, #444]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004980:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004982:	4b6d      	ldr	r3, [pc, #436]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d063      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800498e:	4b6a      	ldr	r3, [pc, #424]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	099b      	lsrs	r3, r3, #6
 8004994:	2200      	movs	r2, #0
 8004996:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004998:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800499a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80049a2:	2300      	movs	r3, #0
 80049a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049aa:	4622      	mov	r2, r4
 80049ac:	462b      	mov	r3, r5
 80049ae:	f04f 0000 	mov.w	r0, #0
 80049b2:	f04f 0100 	mov.w	r1, #0
 80049b6:	0159      	lsls	r1, r3, #5
 80049b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049bc:	0150      	lsls	r0, r2, #5
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4621      	mov	r1, r4
 80049c4:	1a51      	subs	r1, r2, r1
 80049c6:	6139      	str	r1, [r7, #16]
 80049c8:	4629      	mov	r1, r5
 80049ca:	eb63 0301 	sbc.w	r3, r3, r1
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049dc:	4659      	mov	r1, fp
 80049de:	018b      	lsls	r3, r1, #6
 80049e0:	4651      	mov	r1, sl
 80049e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049e6:	4651      	mov	r1, sl
 80049e8:	018a      	lsls	r2, r1, #6
 80049ea:	4651      	mov	r1, sl
 80049ec:	ebb2 0801 	subs.w	r8, r2, r1
 80049f0:	4659      	mov	r1, fp
 80049f2:	eb63 0901 	sbc.w	r9, r3, r1
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a0a:	4690      	mov	r8, r2
 8004a0c:	4699      	mov	r9, r3
 8004a0e:	4623      	mov	r3, r4
 8004a10:	eb18 0303 	adds.w	r3, r8, r3
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	462b      	mov	r3, r5
 8004a18:	eb49 0303 	adc.w	r3, r9, r3
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	024b      	lsls	r3, r1, #9
 8004a2e:	4621      	mov	r1, r4
 8004a30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a34:	4621      	mov	r1, r4
 8004a36:	024a      	lsls	r2, r1, #9
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a3e:	2200      	movs	r2, #0
 8004a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a48:	f7fb fbc2 	bl	80001d0 <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4613      	mov	r3, r2
 8004a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a54:	e058      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a56:	4b38      	ldr	r3, [pc, #224]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	099b      	lsrs	r3, r3, #6
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	4611      	mov	r1, r2
 8004a62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a66:	623b      	str	r3, [r7, #32]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a70:	4642      	mov	r2, r8
 8004a72:	464b      	mov	r3, r9
 8004a74:	f04f 0000 	mov.w	r0, #0
 8004a78:	f04f 0100 	mov.w	r1, #0
 8004a7c:	0159      	lsls	r1, r3, #5
 8004a7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a82:	0150      	lsls	r0, r2, #5
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4641      	mov	r1, r8
 8004a8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a8e:	4649      	mov	r1, r9
 8004a90:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004aa0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004aa4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004aa8:	ebb2 040a 	subs.w	r4, r2, sl
 8004aac:	eb63 050b 	sbc.w	r5, r3, fp
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	00eb      	lsls	r3, r5, #3
 8004aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004abe:	00e2      	lsls	r2, r4, #3
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	461d      	mov	r5, r3
 8004ac4:	4643      	mov	r3, r8
 8004ac6:	18e3      	adds	r3, r4, r3
 8004ac8:	603b      	str	r3, [r7, #0]
 8004aca:	464b      	mov	r3, r9
 8004acc:	eb45 0303 	adc.w	r3, r5, r3
 8004ad0:	607b      	str	r3, [r7, #4]
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ade:	4629      	mov	r1, r5
 8004ae0:	028b      	lsls	r3, r1, #10
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ae8:	4621      	mov	r1, r4
 8004aea:	028a      	lsls	r2, r1, #10
 8004aec:	4610      	mov	r0, r2
 8004aee:	4619      	mov	r1, r3
 8004af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004af2:	2200      	movs	r2, #0
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	61fa      	str	r2, [r7, #28]
 8004af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004afc:	f7fb fb68 	bl	80001d0 <__aeabi_uldivmod>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4613      	mov	r3, r2
 8004b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b08:	4b0b      	ldr	r3, [pc, #44]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	3301      	adds	r3, #1
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b22:	e002      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b24:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3750      	adds	r7, #80	@ 0x50
 8004b30:	46bd      	mov	sp, r7
 8004b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	007a1200 	.word	0x007a1200

08004b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b48:	4b03      	ldr	r3, [pc, #12]	@ (8004b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20000000 	.word	0x20000000

08004b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b60:	f7ff fff0 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0a9b      	lsrs	r3, r3, #10
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4903      	ldr	r1, [pc, #12]	@ (8004b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	0800c314 	.word	0x0800c314

08004b84 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d105      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d035      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bac:	4b62      	ldr	r3, [pc, #392]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bb2:	f7fc f953 	bl	8000e5c <HAL_GetTick>
 8004bb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bba:	f7fc f94f 	bl	8000e5c <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e0b0      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f0      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	019a      	lsls	r2, r3, #6
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	071b      	lsls	r3, r3, #28
 8004be4:	4955      	ldr	r1, [pc, #340]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bec:	4b52      	ldr	r3, [pc, #328]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bf2:	f7fc f933 	bl	8000e5c <HAL_GetTick>
 8004bf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bfa:	f7fc f92f 	bl	8000e5c <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e090      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0f0      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8083 	beq.w	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	4b44      	ldr	r3, [pc, #272]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	4a43      	ldr	r2, [pc, #268]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c36:	4b41      	ldr	r3, [pc, #260]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c42:	4b3f      	ldr	r3, [pc, #252]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a3e      	ldr	r2, [pc, #248]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c4e:	f7fc f905 	bl	8000e5c <HAL_GetTick>
 8004c52:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c54:	e008      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c56:	f7fc f901 	bl	8000e5c <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e062      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c68:	4b35      	ldr	r3, [pc, #212]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c74:	4b31      	ldr	r3, [pc, #196]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c7c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d02f      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d028      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c92:	4b2a      	ldr	r3, [pc, #168]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c9a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c9c:	4b29      	ldr	r3, [pc, #164]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca2:	4b28      	ldr	r3, [pc, #160]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ca8:	4a24      	ldr	r2, [pc, #144]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cae:	4b23      	ldr	r3, [pc, #140]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d114      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cba:	f7fc f8cf 	bl	8000e5c <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc0:	e00a      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc2:	f7fc f8cb 	bl	8000e5c <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e02a      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd8:	4b18      	ldr	r3, [pc, #96]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0ee      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cf0:	d10d      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004cf2:	4b12      	ldr	r3, [pc, #72]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d06:	490d      	ldr	r1, [pc, #52]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	608b      	str	r3, [r1, #8]
 8004d0c:	e005      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	4a0a      	ldr	r2, [pc, #40]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d14:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d18:	6093      	str	r3, [r2, #8]
 8004d1a:	4b08      	ldr	r3, [pc, #32]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d26:	4905      	ldr	r1, [pc, #20]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	42470068 	.word	0x42470068
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	40007000 	.word	0x40007000
 8004d44:	42470e40 	.word	0x42470e40

08004d48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d13f      	bne.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d66:	4b24      	ldr	r3, [pc, #144]	@ (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d006      	beq.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d7c:	d12f      	bne.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d80:	617b      	str	r3, [r7, #20]
          break;
 8004d82:	e02f      	b.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d84:	4b1c      	ldr	r3, [pc, #112]	@ (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d90:	d108      	bne.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d92:	4b19      	ldr	r3, [pc, #100]	@ (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d9a:	4a19      	ldr	r2, [pc, #100]	@ (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	e007      	b.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004da4:	4b14      	ldr	r3, [pc, #80]	@ (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dac:	4a15      	ldr	r2, [pc, #84]	@ (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004db4:	4b10      	ldr	r3, [pc, #64]	@ (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dba:	099b      	lsrs	r3, r3, #6
 8004dbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	fb02 f303 	mul.w	r3, r2, r3
 8004dc6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dce:	0f1b      	lsrs	r3, r3, #28
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dda:	617b      	str	r3, [r7, #20]
          break;
 8004ddc:	e002      	b.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]
          break;
 8004de2:	bf00      	nop
        }
      }
      break;
 8004de4:	e000      	b.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004de6:	bf00      	nop
    }
  }
  return frequency;
 8004de8:	697b      	ldr	r3, [r7, #20]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	00bb8000 	.word	0x00bb8000
 8004e00:	007a1200 	.word	0x007a1200
 8004e04:	00f42400 	.word	0x00f42400

08004e08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e07b      	b.n	8004f12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d108      	bne.n	8004e34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e2a:	d009      	beq.n	8004e40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	61da      	str	r2, [r3, #28]
 8004e32:	e005      	b.n	8004e40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fb fe8a 	bl	8000b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec4:	ea42 0103 	orr.w	r1, r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ecc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	0c1b      	lsrs	r3, r3, #16
 8004ede:	f003 0104 	and.w	r1, r3, #4
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee6:	f003 0210 	and.w	r2, r3, #16
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b082      	sub	sp, #8
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e041      	b.n	8004fb0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d106      	bne.n	8004f46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7fb fe5f 	bl	8000c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f000 f82d 	bl	8004fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a46      	ldr	r2, [pc, #280]	@ (80050e4 <TIM_Base_SetConfig+0x12c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d013      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd6:	d00f      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a43      	ldr	r2, [pc, #268]	@ (80050e8 <TIM_Base_SetConfig+0x130>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00b      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a42      	ldr	r2, [pc, #264]	@ (80050ec <TIM_Base_SetConfig+0x134>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d007      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a41      	ldr	r2, [pc, #260]	@ (80050f0 <TIM_Base_SetConfig+0x138>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a40      	ldr	r2, [pc, #256]	@ (80050f4 <TIM_Base_SetConfig+0x13c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d108      	bne.n	800500a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a35      	ldr	r2, [pc, #212]	@ (80050e4 <TIM_Base_SetConfig+0x12c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d02b      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005018:	d027      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a32      	ldr	r2, [pc, #200]	@ (80050e8 <TIM_Base_SetConfig+0x130>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d023      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a31      	ldr	r2, [pc, #196]	@ (80050ec <TIM_Base_SetConfig+0x134>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d01f      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a30      	ldr	r2, [pc, #192]	@ (80050f0 <TIM_Base_SetConfig+0x138>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d01b      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a2f      	ldr	r2, [pc, #188]	@ (80050f4 <TIM_Base_SetConfig+0x13c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d017      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a2e      	ldr	r2, [pc, #184]	@ (80050f8 <TIM_Base_SetConfig+0x140>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d013      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a2d      	ldr	r2, [pc, #180]	@ (80050fc <TIM_Base_SetConfig+0x144>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00f      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a2c      	ldr	r2, [pc, #176]	@ (8005100 <TIM_Base_SetConfig+0x148>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00b      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a2b      	ldr	r2, [pc, #172]	@ (8005104 <TIM_Base_SetConfig+0x14c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d007      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a2a      	ldr	r2, [pc, #168]	@ (8005108 <TIM_Base_SetConfig+0x150>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d003      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a29      	ldr	r2, [pc, #164]	@ (800510c <TIM_Base_SetConfig+0x154>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d108      	bne.n	800507c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a10      	ldr	r2, [pc, #64]	@ (80050e4 <TIM_Base_SetConfig+0x12c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_Base_SetConfig+0xf8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a12      	ldr	r2, [pc, #72]	@ (80050f4 <TIM_Base_SetConfig+0x13c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d103      	bne.n	80050b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d105      	bne.n	80050d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f023 0201 	bic.w	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	611a      	str	r2, [r3, #16]
  }
}
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40010000 	.word	0x40010000
 80050e8:	40000400 	.word	0x40000400
 80050ec:	40000800 	.word	0x40000800
 80050f0:	40000c00 	.word	0x40000c00
 80050f4:	40010400 	.word	0x40010400
 80050f8:	40014000 	.word	0x40014000
 80050fc:	40014400 	.word	0x40014400
 8005100:	40014800 	.word	0x40014800
 8005104:	40001800 	.word	0x40001800
 8005108:	40001c00 	.word	0x40001c00
 800510c:	40002000 	.word	0x40002000

08005110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005124:	2302      	movs	r3, #2
 8005126:	e05a      	b.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800514e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a21      	ldr	r2, [pc, #132]	@ (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d022      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005174:	d01d      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1d      	ldr	r2, [pc, #116]	@ (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d018      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1b      	ldr	r2, [pc, #108]	@ (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1a      	ldr	r2, [pc, #104]	@ (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00e      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a18      	ldr	r2, [pc, #96]	@ (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d009      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a17      	ldr	r2, [pc, #92]	@ (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d004      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a15      	ldr	r2, [pc, #84]	@ (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d10c      	bne.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40010000 	.word	0x40010000
 80051f0:	40000400 	.word	0x40000400
 80051f4:	40000800 	.word	0x40000800
 80051f8:	40000c00 	.word	0x40000c00
 80051fc:	40010400 	.word	0x40010400
 8005200:	40014000 	.word	0x40014000
 8005204:	40001800 	.word	0x40001800

08005208 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005208:	b084      	sub	sp, #16
 800520a:	b580      	push	{r7, lr}
 800520c:	b084      	sub	sp, #16
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	f107 001c 	add.w	r0, r7, #28
 8005216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800521a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800521e:	2b01      	cmp	r3, #1
 8005220:	d123      	bne.n	800526a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005226:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005236:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800524a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800524e:	2b01      	cmp	r3, #1
 8005250:	d105      	bne.n	800525e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f9dc 	bl	800561c <USB_CoreReset>
 8005264:	4603      	mov	r3, r0
 8005266:	73fb      	strb	r3, [r7, #15]
 8005268:	e01b      	b.n	80052a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f9d0 	bl	800561c <USB_CoreReset>
 800527c:	4603      	mov	r3, r0
 800527e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005280:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005284:	2b00      	cmp	r3, #0
 8005286:	d106      	bne.n	8005296 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	639a      	str	r2, [r3, #56]	@ 0x38
 8005294:	e005      	b.n	80052a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052a2:	7fbb      	ldrb	r3, [r7, #30]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d10b      	bne.n	80052c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f043 0206 	orr.w	r2, r3, #6
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f043 0220 	orr.w	r2, r3, #32
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052cc:	b004      	add	sp, #16
 80052ce:	4770      	bx	lr

080052d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f043 0201 	orr.w	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f023 0201 	bic.w	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d115      	bne.n	8005362 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005342:	200a      	movs	r0, #10
 8005344:	f7fb fd96 	bl	8000e74 <HAL_Delay>
      ms += 10U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	330a      	adds	r3, #10
 800534c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f956 	bl	8005600 <USB_GetMode>
 8005354:	4603      	mov	r3, r0
 8005356:	2b01      	cmp	r3, #1
 8005358:	d01e      	beq.n	8005398 <USB_SetCurrentMode+0x84>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2bc7      	cmp	r3, #199	@ 0xc7
 800535e:	d9f0      	bls.n	8005342 <USB_SetCurrentMode+0x2e>
 8005360:	e01a      	b.n	8005398 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d115      	bne.n	8005394 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005374:	200a      	movs	r0, #10
 8005376:	f7fb fd7d 	bl	8000e74 <HAL_Delay>
      ms += 10U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	330a      	adds	r3, #10
 800537e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f93d 	bl	8005600 <USB_GetMode>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <USB_SetCurrentMode+0x84>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005390:	d9f0      	bls.n	8005374 <USB_SetCurrentMode+0x60>
 8005392:	e001      	b.n	8005398 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e005      	b.n	80053a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2bc8      	cmp	r3, #200	@ 0xc8
 800539c:	d101      	bne.n	80053a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3301      	adds	r3, #1
 80053be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053c6:	d901      	bls.n	80053cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e01b      	b.n	8005404 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	daf2      	bge.n	80053ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	019b      	lsls	r3, r3, #6
 80053dc:	f043 0220 	orr.w	r2, r3, #32
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3301      	adds	r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053f0:	d901      	bls.n	80053f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e006      	b.n	8005404 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b20      	cmp	r3, #32
 8005400:	d0f0      	beq.n	80053e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3301      	adds	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005428:	d901      	bls.n	800542e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e018      	b.n	8005460 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	daf2      	bge.n	800541c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2210      	movs	r2, #16
 800543e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3301      	adds	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800544c:	d901      	bls.n	8005452 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e006      	b.n	8005460 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	2b10      	cmp	r3, #16
 800545c:	d0f0      	beq.n	8005440 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800546c:	b480      	push	{r7}
 800546e:	b089      	sub	sp, #36	@ 0x24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	4611      	mov	r1, r2
 8005478:	461a      	mov	r2, r3
 800547a:	460b      	mov	r3, r1
 800547c:	71fb      	strb	r3, [r7, #7]
 800547e:	4613      	mov	r3, r2
 8005480:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800548a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800548e:	2b00      	cmp	r3, #0
 8005490:	d123      	bne.n	80054da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005492:	88bb      	ldrh	r3, [r7, #4]
 8005494:	3303      	adds	r3, #3
 8005496:	089b      	lsrs	r3, r3, #2
 8005498:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800549a:	2300      	movs	r3, #0
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	e018      	b.n	80054d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	031a      	lsls	r2, r3, #12
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ac:	461a      	mov	r2, r3
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	3301      	adds	r3, #1
 80054b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	3301      	adds	r3, #1
 80054be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	3301      	adds	r3, #1
 80054c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	3301      	adds	r3, #1
 80054ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	3301      	adds	r3, #1
 80054d0:	61bb      	str	r3, [r7, #24]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d3e2      	bcc.n	80054a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3724      	adds	r7, #36	@ 0x24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b08b      	sub	sp, #44	@ 0x2c
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	4613      	mov	r3, r2
 80054f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80054fe:	88fb      	ldrh	r3, [r7, #6]
 8005500:	089b      	lsrs	r3, r3, #2
 8005502:	b29b      	uxth	r3, r3
 8005504:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005506:	88fb      	ldrh	r3, [r7, #6]
 8005508:	f003 0303 	and.w	r3, r3, #3
 800550c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800550e:	2300      	movs	r3, #0
 8005510:	623b      	str	r3, [r7, #32]
 8005512:	e014      	b.n	800553e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005522:	3301      	adds	r3, #1
 8005524:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	3301      	adds	r3, #1
 800552a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	3301      	adds	r3, #1
 8005530:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005534:	3301      	adds	r3, #1
 8005536:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	3301      	adds	r3, #1
 800553c:	623b      	str	r3, [r7, #32]
 800553e:	6a3a      	ldr	r2, [r7, #32]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	429a      	cmp	r2, r3
 8005544:	d3e6      	bcc.n	8005514 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005546:	8bfb      	ldrh	r3, [r7, #30]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01e      	beq.n	800558a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005556:	461a      	mov	r2, r3
 8005558:	f107 0310 	add.w	r3, r7, #16
 800555c:	6812      	ldr	r2, [r2, #0]
 800555e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	fa22 f303 	lsr.w	r3, r2, r3
 800556c:	b2da      	uxtb	r2, r3
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	701a      	strb	r2, [r3, #0]
      i++;
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	3301      	adds	r3, #1
 8005576:	623b      	str	r3, [r7, #32]
      pDest++;
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	3301      	adds	r3, #1
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800557e:	8bfb      	ldrh	r3, [r7, #30]
 8005580:	3b01      	subs	r3, #1
 8005582:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005584:	8bfb      	ldrh	r3, [r7, #30]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1ea      	bne.n	8005560 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800558c:	4618      	mov	r0, r3
 800558e:	372c      	adds	r7, #44	@ 0x2c
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4013      	ands	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055b0:	68fb      	ldr	r3, [r7, #12]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80055be:	b480      	push	{r7}
 80055c0:	b085      	sub	sp, #20
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	460b      	mov	r3, r1
 80055c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	4013      	ands	r3, r2
 80055f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055f2:	68bb      	ldr	r3, [r7, #8]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	f003 0301 	and.w	r3, r3, #1
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3301      	adds	r3, #1
 800562c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005634:	d901      	bls.n	800563a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e01b      	b.n	8005672 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	daf2      	bge.n	8005628 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f043 0201 	orr.w	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3301      	adds	r3, #1
 8005656:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800565e:	d901      	bls.n	8005664 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e006      	b.n	8005672 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b01      	cmp	r3, #1
 800566e:	d0f0      	beq.n	8005652 <USB_CoreReset+0x36>

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
	...

08005680 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005680:	b084      	sub	sp, #16
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800568e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056a0:	461a      	mov	r2, r3
 80056a2:	2300      	movs	r3, #0
 80056a4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d119      	bne.n	800570a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80056d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d10a      	bne.n	80056f4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80056ec:	f043 0304 	orr.w	r3, r3, #4
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	e014      	b.n	800571e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005702:	f023 0304 	bic.w	r3, r3, #4
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	e009      	b.n	800571e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005718:	f023 0304 	bic.w	r3, r3, #4
 800571c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800571e:	2110      	movs	r1, #16
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff fe43 	bl	80053ac <USB_FlushTxFifo>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff fe6d 	bl	8005410 <USB_FlushRxFifo>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005740:	2300      	movs	r3, #0
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	e015      	b.n	8005772 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4413      	add	r3, r2
 800574e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005752:	461a      	mov	r2, r3
 8005754:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005758:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4413      	add	r3, r2
 8005762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005766:	461a      	mov	r2, r3
 8005768:	2300      	movs	r3, #0
 800576a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	3301      	adds	r3, #1
 8005770:	613b      	str	r3, [r7, #16]
 8005772:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005776:	461a      	mov	r2, r3
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4293      	cmp	r3, r2
 800577c:	d3e3      	bcc.n	8005746 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800578a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a18      	ldr	r2, [pc, #96]	@ (80057f0 <USB_HostInit+0x170>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d10b      	bne.n	80057ac <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800579a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a15      	ldr	r2, [pc, #84]	@ (80057f4 <USB_HostInit+0x174>)
 80057a0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a14      	ldr	r2, [pc, #80]	@ (80057f8 <USB_HostInit+0x178>)
 80057a6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80057aa:	e009      	b.n	80057c0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2280      	movs	r2, #128	@ 0x80
 80057b0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a11      	ldr	r2, [pc, #68]	@ (80057fc <USB_HostInit+0x17c>)
 80057b6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a11      	ldr	r2, [pc, #68]	@ (8005800 <USB_HostInit+0x180>)
 80057bc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d105      	bne.n	80057d4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f043 0210 	orr.w	r2, r3, #16
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699a      	ldr	r2, [r3, #24]
 80057d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005804 <USB_HostInit+0x184>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80057e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ec:	b004      	add	sp, #16
 80057ee:	4770      	bx	lr
 80057f0:	40040000 	.word	0x40040000
 80057f4:	01000200 	.word	0x01000200
 80057f8:	00e00300 	.word	0x00e00300
 80057fc:	00600080 	.word	0x00600080
 8005800:	004000e0 	.word	0x004000e0
 8005804:	a3200008 	.word	0xa3200008

08005808 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005826:	f023 0303 	bic.w	r3, r3, #3
 800582a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	68f9      	ldr	r1, [r7, #12]
 800583c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005840:	4313      	orrs	r3, r2
 8005842:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d107      	bne.n	800585a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005850:	461a      	mov	r2, r3
 8005852:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005856:	6053      	str	r3, [r2, #4]
 8005858:	e00c      	b.n	8005874 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	2b02      	cmp	r3, #2
 800585e:	d107      	bne.n	8005870 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005866:	461a      	mov	r2, r3
 8005868:	f241 7370 	movw	r3, #6000	@ 0x1770
 800586c:	6053      	str	r3, [r2, #4]
 800586e:	e001      	b.n	8005874 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80058a2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80058ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80058b2:	2064      	movs	r0, #100	@ 0x64
 80058b4:	f7fb fade 	bl	8000e74 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80058c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058c4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80058c6:	200a      	movs	r0, #10
 80058c8:	f7fb fad4 	bl	8000e74 <HAL_Delay>

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	460b      	mov	r3, r1
 80058e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80058fa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d109      	bne.n	800591a <USB_DriveVbus+0x44>
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d106      	bne.n	800591a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005914:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005918:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005924:	d109      	bne.n	800593a <USB_DriveVbus+0x64>
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d106      	bne.n	800593a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005934:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005938:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	0c5b      	lsrs	r3, r3, #17
 8005966:	f003 0303 	and.w	r3, r3, #3
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	b29b      	uxth	r3, r3
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	4608      	mov	r0, r1
 80059a2:	4611      	mov	r1, r2
 80059a4:	461a      	mov	r2, r3
 80059a6:	4603      	mov	r3, r0
 80059a8:	70fb      	strb	r3, [r7, #3]
 80059aa:	460b      	mov	r3, r1
 80059ac:	70bb      	strb	r3, [r7, #2]
 80059ae:	4613      	mov	r3, r2
 80059b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059c6:	461a      	mov	r2, r3
 80059c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059cc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80059ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d87c      	bhi.n	8005ad0 <USB_HC_Init+0x138>
 80059d6:	a201      	add	r2, pc, #4	@ (adr r2, 80059dc <USB_HC_Init+0x44>)
 80059d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059dc:	080059ed 	.word	0x080059ed
 80059e0:	08005a93 	.word	0x08005a93
 80059e4:	080059ed 	.word	0x080059ed
 80059e8:	08005a55 	.word	0x08005a55
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80059ec:	78fb      	ldrb	r3, [r7, #3]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059f8:	461a      	mov	r2, r3
 80059fa:	f240 439d 	movw	r3, #1181	@ 0x49d
 80059fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	da10      	bge.n	8005a2a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	78fa      	ldrb	r2, [r7, #3]
 8005a18:	0151      	lsls	r1, r2, #5
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	440a      	add	r2, r1
 8005a1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a26:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005a28:	e055      	b.n	8005ad6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a6f      	ldr	r2, [pc, #444]	@ (8005bec <USB_HC_Init+0x254>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d151      	bne.n	8005ad6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	78fa      	ldrb	r2, [r7, #3]
 8005a42:	0151      	lsls	r1, r2, #5
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	440a      	add	r2, r1
 8005a48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a4c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005a50:	60d3      	str	r3, [r2, #12]
      break;
 8005a52:	e040      	b.n	8005ad6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a60:	461a      	mov	r2, r3
 8005a62:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005a66:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005a68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	da34      	bge.n	8005ada <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	78fa      	ldrb	r2, [r7, #3]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a8e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005a90:	e023      	b.n	8005ada <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f240 2325 	movw	r3, #549	@ 0x225
 8005aa4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005aa6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	da17      	bge.n	8005ade <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	78fa      	ldrb	r2, [r7, #3]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ac8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005acc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ace:	e006      	b.n	8005ade <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	77fb      	strb	r3, [r7, #31]
      break;
 8005ad4:	e004      	b.n	8005ae0 <USB_HC_Init+0x148>
      break;
 8005ad6:	bf00      	nop
 8005ad8:	e002      	b.n	8005ae0 <USB_HC_Init+0x148>
      break;
 8005ada:	bf00      	nop
 8005adc:	e000      	b.n	8005ae0 <USB_HC_Init+0x148>
      break;
 8005ade:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aec:	461a      	mov	r2, r3
 8005aee:	2300      	movs	r3, #0
 8005af0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	78fa      	ldrb	r2, [r7, #3]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b0c:	f043 0302 	orr.w	r3, r3, #2
 8005b10:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	f003 030f 	and.w	r3, r3, #15
 8005b20:	2101      	movs	r1, #1
 8005b22:	fa01 f303 	lsl.w	r3, r1, r3
 8005b26:	6939      	ldr	r1, [r7, #16]
 8005b28:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	da03      	bge.n	8005b4c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b48:	61bb      	str	r3, [r7, #24]
 8005b4a:	e001      	b.n	8005b50 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff fef9 	bl	8005948 <USB_GetHostSpeed>
 8005b56:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005b58:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d106      	bne.n	8005b6e <USB_HC_Init+0x1d6>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d003      	beq.n	8005b6e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005b66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	e001      	b.n	8005b72 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b72:	787b      	ldrb	r3, [r7, #1]
 8005b74:	059b      	lsls	r3, r3, #22
 8005b76:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b7a:	78bb      	ldrb	r3, [r7, #2]
 8005b7c:	02db      	lsls	r3, r3, #11
 8005b7e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b82:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b84:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005b88:	049b      	lsls	r3, r3, #18
 8005b8a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b8e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005b90:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005b92:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b96:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ba0:	78fa      	ldrb	r2, [r7, #3]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005bac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bb0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005bb2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d003      	beq.n	8005bc2 <USB_HC_Init+0x22a>
 8005bba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d10f      	bne.n	8005be2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	78fa      	ldrb	r2, [r7, #3]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bdc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005be0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005be2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3720      	adds	r7, #32
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40040000 	.word	0x40040000

08005bf0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08c      	sub	sp, #48	@ 0x30
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	785b      	ldrb	r3, [r3, #1]
 8005c06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005c08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c0c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4a5d      	ldr	r2, [pc, #372]	@ (8005d88 <USB_HC_StartXfer+0x198>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d12f      	bne.n	8005c76 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005c16:	79fb      	ldrb	r3, [r7, #7]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d11c      	bne.n	8005c56 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	7c9b      	ldrb	r3, [r3, #18]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <USB_HC_StartXfer+0x3c>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	7c9b      	ldrb	r3, [r3, #18]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d124      	bne.n	8005c76 <USB_HC_StartXfer+0x86>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	799b      	ldrb	r3, [r3, #6]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d120      	bne.n	8005c76 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	69fa      	ldr	r2, [r7, #28]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	6a3a      	ldr	r2, [r7, #32]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c52:	60d3      	str	r3, [r2, #12]
 8005c54:	e00f      	b.n	8005c76 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	791b      	ldrb	r3, [r3, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10b      	bne.n	8005c76 <USB_HC_StartXfer+0x86>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	795b      	ldrb	r3, [r3, #5]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d107      	bne.n	8005c76 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	785b      	ldrb	r3, [r3, #1]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fb6b 	bl	8006348 <USB_DoPing>
        return HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e232      	b.n	80060dc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	799b      	ldrb	r3, [r3, #6]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d158      	bne.n	8005d30 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	78db      	ldrb	r3, [r3, #3]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d007      	beq.n	8005c9a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005c8a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	8a92      	ldrh	r2, [r2, #20]
 8005c90:	fb03 f202 	mul.w	r2, r3, r2
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	61da      	str	r2, [r3, #28]
 8005c98:	e07c      	b.n	8005d94 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	7c9b      	ldrb	r3, [r3, #18]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d130      	bne.n	8005d04 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	2bbc      	cmp	r3, #188	@ 0xbc
 8005ca8:	d918      	bls.n	8005cdc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	8a9b      	ldrh	r3, [r3, #20]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d003      	beq.n	8005ccc <USB_HC_StartXfer+0xdc>
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d103      	bne.n	8005cd4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	60da      	str	r2, [r3, #12]
 8005cd2:	e05f      	b.n	8005d94 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	60da      	str	r2, [r3, #12]
 8005cda:	e05b      	b.n	8005d94 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	6a1a      	ldr	r2, [r3, #32]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d007      	beq.n	8005cfc <USB_HC_StartXfer+0x10c>
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d003      	beq.n	8005cfc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2204      	movs	r2, #4
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	e04b      	b.n	8005d94 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2203      	movs	r2, #3
 8005d00:	60da      	str	r2, [r3, #12]
 8005d02:	e047      	b.n	8005d94 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d10d      	bne.n	8005d26 <USB_HC_StartXfer+0x136>
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	8a92      	ldrh	r2, [r2, #20]
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d907      	bls.n	8005d26 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	8a92      	ldrh	r2, [r2, #20]
 8005d1c:	fb03 f202 	mul.w	r2, r3, r2
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	61da      	str	r2, [r3, #28]
 8005d24:	e036      	b.n	8005d94 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6a1a      	ldr	r2, [r3, #32]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	61da      	str	r2, [r3, #28]
 8005d2e:	e031      	b.n	8005d94 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d018      	beq.n	8005d6a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	8a92      	ldrh	r2, [r2, #20]
 8005d40:	4413      	add	r3, r2
 8005d42:	3b01      	subs	r3, #1
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	8a92      	ldrh	r2, [r2, #20]
 8005d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d4c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005d4e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005d50:	8b7b      	ldrh	r3, [r7, #26]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d90b      	bls.n	8005d6e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005d56:	8b7b      	ldrh	r3, [r7, #26]
 8005d58:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	8a92      	ldrh	r2, [r2, #20]
 8005d60:	fb03 f202 	mul.w	r2, r3, r2
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	61da      	str	r2, [r3, #28]
 8005d68:	e001      	b.n	8005d6e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	78db      	ldrb	r3, [r3, #3]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	8a92      	ldrh	r2, [r2, #20]
 8005d7c:	fb03 f202 	mul.w	r2, r3, r2
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	61da      	str	r2, [r3, #28]
 8005d84:	e006      	b.n	8005d94 <USB_HC_StartXfer+0x1a4>
 8005d86:	bf00      	nop
 8005d88:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	6a1a      	ldr	r2, [r3, #32]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d9e:	04d9      	lsls	r1, r3, #19
 8005da0:	4ba3      	ldr	r3, [pc, #652]	@ (8006030 <USB_HC_StartXfer+0x440>)
 8005da2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005da4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	7d9b      	ldrb	r3, [r3, #22]
 8005daa:	075b      	lsls	r3, r3, #29
 8005dac:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005db0:	69f9      	ldr	r1, [r7, #28]
 8005db2:	0148      	lsls	r0, r1, #5
 8005db4:	6a39      	ldr	r1, [r7, #32]
 8005db6:	4401      	add	r1, r0
 8005db8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005dbc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005dbe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6999      	ldr	r1, [r3, #24]
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd6:	460a      	mov	r2, r1
 8005dd8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bf0c      	ite	eq
 8005dea:	2301      	moveq	r3, #1
 8005dec:	2300      	movne	r3, #0
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69fa      	ldr	r2, [r7, #28]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	6a3a      	ldr	r2, [r7, #32]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e0c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e10:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	7e7b      	ldrb	r3, [r7, #25]
 8005e22:	075b      	lsls	r3, r3, #29
 8005e24:	69f9      	ldr	r1, [r7, #28]
 8005e26:	0148      	lsls	r0, r1, #5
 8005e28:	6a39      	ldr	r1, [r7, #32]
 8005e2a:	4401      	add	r1, r0
 8005e2c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005e30:	4313      	orrs	r3, r2
 8005e32:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	799b      	ldrb	r3, [r3, #6]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	f040 80c3 	bne.w	8005fc4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	7c5b      	ldrb	r3, [r3, #17]
 8005e42:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	0151      	lsls	r1, r2, #5
 8005e4e:	6a3a      	ldr	r2, [r7, #32]
 8005e50:	440a      	add	r2, r1
 8005e52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005e56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005e5a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	6a3a      	ldr	r2, [r7, #32]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e76:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005e7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	79db      	ldrb	r3, [r3, #7]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d123      	bne.n	8005ecc <USB_HC_StartXfer+0x2dc>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	78db      	ldrb	r3, [r3, #3]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d11f      	bne.n	8005ecc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	69fa      	ldr	r2, [r7, #28]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	6a3a      	ldr	r2, [r7, #32]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ea6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eaa:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	6a3a      	ldr	r2, [r7, #32]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eca:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	7c9b      	ldrb	r3, [r3, #18]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d003      	beq.n	8005edc <USB_HC_StartXfer+0x2ec>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	7c9b      	ldrb	r3, [r3, #18]
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d117      	bne.n	8005f0c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d113      	bne.n	8005f0c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	78db      	ldrb	r3, [r3, #3]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d10f      	bne.n	8005f0c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	0151      	lsls	r1, r2, #5
 8005efe:	6a3a      	ldr	r2, [r7, #32]
 8005f00:	440a      	add	r2, r1
 8005f02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f0a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	7c9b      	ldrb	r3, [r3, #18]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d162      	bne.n	8005fda <USB_HC_StartXfer+0x3ea>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	78db      	ldrb	r3, [r3, #3]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d15e      	bne.n	8005fda <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d858      	bhi.n	8005fd8 <USB_HC_StartXfer+0x3e8>
 8005f26:	a201      	add	r2, pc, #4	@ (adr r2, 8005f2c <USB_HC_StartXfer+0x33c>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005f3d 	.word	0x08005f3d
 8005f30:	08005f5f 	.word	0x08005f5f
 8005f34:	08005f81 	.word	0x08005f81
 8005f38:	08005fa3 	.word	0x08005fa3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	6a3a      	ldr	r2, [r7, #32]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f5a:	6053      	str	r3, [r2, #4]
          break;
 8005f5c:	e03d      	b.n	8005fda <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	6a3a      	ldr	r2, [r7, #32]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f78:	f043 030e 	orr.w	r3, r3, #14
 8005f7c:	6053      	str	r3, [r2, #4]
          break;
 8005f7e:	e02c      	b.n	8005fda <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	6a3a      	ldr	r2, [r7, #32]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f9e:	6053      	str	r3, [r2, #4]
          break;
 8005fa0:	e01b      	b.n	8005fda <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	6a3a      	ldr	r2, [r7, #32]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fc0:	6053      	str	r3, [r2, #4]
          break;
 8005fc2:	e00a      	b.n	8005fda <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	6053      	str	r3, [r2, #4]
 8005fd6:	e000      	b.n	8005fda <USB_HC_StartXfer+0x3ea>
          break;
 8005fd8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ff0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	78db      	ldrb	r3, [r3, #3]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d004      	beq.n	8006004 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	e003      	b.n	800600c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800600a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006012:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006020:	461a      	mov	r2, r3
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006026:	79fb      	ldrb	r3, [r7, #7]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	e055      	b.n	80060dc <USB_HC_StartXfer+0x4ec>
 8006030:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	78db      	ldrb	r3, [r3, #3]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d14e      	bne.n	80060da <USB_HC_StartXfer+0x4ea>
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d04a      	beq.n	80060da <USB_HC_StartXfer+0x4ea>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	79db      	ldrb	r3, [r3, #7]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d146      	bne.n	80060da <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	7c9b      	ldrb	r3, [r3, #18]
 8006050:	2b03      	cmp	r3, #3
 8006052:	d831      	bhi.n	80060b8 <USB_HC_StartXfer+0x4c8>
 8006054:	a201      	add	r2, pc, #4	@ (adr r2, 800605c <USB_HC_StartXfer+0x46c>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	0800606d 	.word	0x0800606d
 8006060:	08006091 	.word	0x08006091
 8006064:	0800606d 	.word	0x0800606d
 8006068:	08006091 	.word	0x08006091
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	3303      	adds	r3, #3
 8006072:	089b      	lsrs	r3, r3, #2
 8006074:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006076:	8afa      	ldrh	r2, [r7, #22]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607c:	b29b      	uxth	r3, r3
 800607e:	429a      	cmp	r2, r3
 8006080:	d91c      	bls.n	80060bc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	f043 0220 	orr.w	r2, r3, #32
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	619a      	str	r2, [r3, #24]
        }
        break;
 800608e:	e015      	b.n	80060bc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	3303      	adds	r3, #3
 8006096:	089b      	lsrs	r3, r3, #2
 8006098:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800609a:	8afa      	ldrh	r2, [r7, #22]
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d90a      	bls.n	80060c0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	619a      	str	r2, [r3, #24]
        }
        break;
 80060b6:	e003      	b.n	80060c0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80060b8:	bf00      	nop
 80060ba:	e002      	b.n	80060c2 <USB_HC_StartXfer+0x4d2>
        break;
 80060bc:	bf00      	nop
 80060be:	e000      	b.n	80060c2 <USB_HC_StartXfer+0x4d2>
        break;
 80060c0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6999      	ldr	r1, [r3, #24]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	785a      	ldrb	r2, [r3, #1]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2000      	movs	r0, #0
 80060d2:	9000      	str	r0, [sp, #0]
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f7ff f9c9 	bl	800546c <USB_WritePacket>
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3728      	adds	r7, #40	@ 0x28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	b29b      	uxth	r3, r3
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006106:	b480      	push	{r7}
 8006108:	b089      	sub	sp, #36	@ 0x24
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	460b      	mov	r3, r1
 8006110:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006116:	78fb      	ldrb	r3, [r7, #3]
 8006118:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	4413      	add	r3, r2
 8006126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	0c9b      	lsrs	r3, r3, #18
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4413      	add	r3, r2
 800613c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	0fdb      	lsrs	r3, r3, #31
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	4413      	add	r3, r2
 8006152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	0fdb      	lsrs	r3, r3, #31
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b20      	cmp	r3, #32
 800616a:	d10d      	bne.n	8006188 <USB_HC_Halt+0x82>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10a      	bne.n	8006188 <USB_HC_Halt+0x82>
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d002      	beq.n	8006184 <USB_HC_Halt+0x7e>
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b03      	cmp	r3, #3
 8006182:	d101      	bne.n	8006188 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	e0d8      	b.n	800633a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <USB_HC_Halt+0x8e>
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b02      	cmp	r3, #2
 8006192:	d173      	bne.n	800627c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	4413      	add	r3, r2
 800619c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061b2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 0320 	and.w	r3, r3, #32
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d14a      	bne.n	8006256 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d133      	bne.n	8006234 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061ea:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	440a      	add	r2, r1
 8006202:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006206:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800620a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	3301      	adds	r3, #1
 8006210:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006218:	d82e      	bhi.n	8006278 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	4413      	add	r3, r2
 8006222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800622c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006230:	d0ec      	beq.n	800620c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006232:	e081      	b.n	8006338 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	4413      	add	r3, r2
 800623c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	0151      	lsls	r1, r2, #5
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	440a      	add	r2, r1
 800624a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800624e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006252:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006254:	e070      	b.n	8006338 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4413      	add	r3, r2
 800625e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	69fa      	ldr	r2, [r7, #28]
 800626a:	440a      	add	r2, r1
 800626c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006270:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006274:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006276:	e05f      	b.n	8006338 <USB_HC_Halt+0x232>
            break;
 8006278:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800627a:	e05d      	b.n	8006338 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	4413      	add	r3, r2
 8006284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	0151      	lsls	r1, r2, #5
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	440a      	add	r2, r1
 8006292:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006296:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800629a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d133      	bne.n	8006314 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	0151      	lsls	r1, r2, #5
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	440a      	add	r2, r1
 80062c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	0151      	lsls	r1, r2, #5
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	440a      	add	r2, r1
 80062e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062ea:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	3301      	adds	r3, #1
 80062f0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062f8:	d81d      	bhi.n	8006336 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800630c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006310:	d0ec      	beq.n	80062ec <USB_HC_Halt+0x1e6>
 8006312:	e011      	b.n	8006338 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	440a      	add	r2, r1
 800632a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800632e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	e000      	b.n	8006338 <USB_HC_Halt+0x232>
          break;
 8006336:	bf00      	nop
    }
  }

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3724      	adds	r7, #36	@ 0x24
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
	...

08006348 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800635c:	2301      	movs	r3, #1
 800635e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	04da      	lsls	r2, r3, #19
 8006364:	4b15      	ldr	r3, [pc, #84]	@ (80063bc <USB_DoPing+0x74>)
 8006366:	4013      	ands	r3, r2
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	440a      	add	r2, r1
 8006370:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006374:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006378:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	4413      	add	r3, r2
 8006382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006390:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006398:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063a6:	461a      	mov	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	1ff80000 	.word	0x1ff80000

080063c0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fe ff8c 	bl	80052f2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063da:	2110      	movs	r1, #16
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7fe ffe5 	bl	80053ac <USB_FlushTxFifo>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff f80f 	bl	8005410 <USB_FlushRxFifo>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80063fc:	2300      	movs	r3, #0
 80063fe:	61bb      	str	r3, [r7, #24]
 8006400:	e01f      	b.n	8006442 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006418:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006420:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006428:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	4413      	add	r3, r2
 8006432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006436:	461a      	mov	r2, r3
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	3301      	adds	r3, #1
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	2b0f      	cmp	r3, #15
 8006446:	d9dc      	bls.n	8006402 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006448:	2300      	movs	r3, #0
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	e034      	b.n	80064b8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006464:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800646c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006474:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	4413      	add	r3, r2
 800647e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006482:	461a      	mov	r2, r3
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3301      	adds	r3, #1
 800648c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006494:	d80c      	bhi.n	80064b0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	4413      	add	r3, r2
 800649e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064ac:	d0ec      	beq.n	8006488 <USB_StopHost+0xc8>
 80064ae:	e000      	b.n	80064b2 <USB_StopHost+0xf2>
        break;
 80064b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	3301      	adds	r3, #1
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	2b0f      	cmp	r3, #15
 80064bc:	d9c7      	bls.n	800644e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064c4:	461a      	mov	r2, r3
 80064c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064d2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7fe fefb 	bl	80052d0 <USB_EnableGlobalInt>

  return ret;
 80064da:	7ffb      	ldrb	r3, [r7, #31]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3720      	adds	r7, #32
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80064e4:	b590      	push	{r4, r7, lr}
 80064e6:	b089      	sub	sp, #36	@ 0x24
 80064e8:	af04      	add	r7, sp, #16
 80064ea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80064ec:	2301      	movs	r3, #1
 80064ee:	2202      	movs	r2, #2
 80064f0:	2102      	movs	r1, #2
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fcd1 	bl	8006e9a <USBH_FindInterface>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	2bff      	cmp	r3, #255	@ 0xff
 8006500:	d002      	beq.n	8006508 <USBH_CDC_InterfaceInit+0x24>
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d901      	bls.n	800650c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006508:	2302      	movs	r3, #2
 800650a:	e13d      	b.n	8006788 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fca6 	bl	8006e62 <USBH_SelectInterface>
 8006516:	4603      	mov	r3, r0
 8006518:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006520:	2302      	movs	r3, #2
 8006522:	e131      	b.n	8006788 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800652a:	2050      	movs	r0, #80	@ 0x50
 800652c:	f005 fd58 	bl	800bfe0 <malloc>
 8006530:	4603      	mov	r3, r0
 8006532:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006544:	2302      	movs	r3, #2
 8006546:	e11f      	b.n	8006788 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006548:	2250      	movs	r2, #80	@ 0x50
 800654a:	2100      	movs	r1, #0
 800654c:	68b8      	ldr	r0, [r7, #8]
 800654e:	f005 fe05 	bl	800c15c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006552:	7bfb      	ldrb	r3, [r7, #15]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	211a      	movs	r1, #26
 8006558:	fb01 f303 	mul.w	r3, r1, r3
 800655c:	4413      	add	r3, r2
 800655e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	b25b      	sxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	da15      	bge.n	8006596 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	211a      	movs	r1, #26
 8006570:	fb01 f303 	mul.w	r3, r1, r3
 8006574:	4413      	add	r3, r2
 8006576:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800657a:	781a      	ldrb	r2, [r3, #0]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	211a      	movs	r1, #26
 8006586:	fb01 f303 	mul.w	r3, r1, r3
 800658a:	4413      	add	r3, r2
 800658c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006590:	881a      	ldrh	r2, [r3, #0]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	785b      	ldrb	r3, [r3, #1]
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f002 fa18 	bl	80089d2 <USBH_AllocPipe>
 80065a2:	4603      	mov	r3, r0
 80065a4:	461a      	mov	r2, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	7819      	ldrb	r1, [r3, #0]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	7858      	ldrb	r0, [r3, #1]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	8952      	ldrh	r2, [r2, #10]
 80065c2:	9202      	str	r2, [sp, #8]
 80065c4:	2203      	movs	r2, #3
 80065c6:	9201      	str	r2, [sp, #4]
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	4623      	mov	r3, r4
 80065cc:	4602      	mov	r2, r0
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f002 f9d0 	bl	8008974 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2200      	movs	r2, #0
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f005 fc79 	bl	800bed4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80065e2:	2300      	movs	r3, #0
 80065e4:	2200      	movs	r2, #0
 80065e6:	210a      	movs	r1, #10
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fc56 	bl	8006e9a <USBH_FindInterface>
 80065ee:	4603      	mov	r3, r0
 80065f0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	2bff      	cmp	r3, #255	@ 0xff
 80065f6:	d002      	beq.n	80065fe <USBH_CDC_InterfaceInit+0x11a>
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d901      	bls.n	8006602 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065fe:	2302      	movs	r3, #2
 8006600:	e0c2      	b.n	8006788 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	211a      	movs	r1, #26
 8006608:	fb01 f303 	mul.w	r3, r1, r3
 800660c:	4413      	add	r3, r2
 800660e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	b25b      	sxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	da16      	bge.n	8006648 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800661a:	7bfb      	ldrb	r3, [r7, #15]
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	211a      	movs	r1, #26
 8006620:	fb01 f303 	mul.w	r3, r1, r3
 8006624:	4413      	add	r3, r2
 8006626:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800662a:	781a      	ldrb	r2, [r3, #0]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	211a      	movs	r1, #26
 8006636:	fb01 f303 	mul.w	r3, r1, r3
 800663a:	4413      	add	r3, r2
 800663c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006640:	881a      	ldrh	r2, [r3, #0]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	835a      	strh	r2, [r3, #26]
 8006646:	e015      	b.n	8006674 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	211a      	movs	r1, #26
 800664e:	fb01 f303 	mul.w	r3, r1, r3
 8006652:	4413      	add	r3, r2
 8006654:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006658:	781a      	ldrb	r2, [r3, #0]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	211a      	movs	r1, #26
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	4413      	add	r3, r2
 800666a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800666e:	881a      	ldrh	r2, [r3, #0]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	211a      	movs	r1, #26
 800667a:	fb01 f303 	mul.w	r3, r1, r3
 800667e:	4413      	add	r3, r2
 8006680:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	b25b      	sxtb	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	da16      	bge.n	80066ba <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	211a      	movs	r1, #26
 8006692:	fb01 f303 	mul.w	r3, r1, r3
 8006696:	4413      	add	r3, r2
 8006698:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800669c:	781a      	ldrb	r2, [r3, #0]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	211a      	movs	r1, #26
 80066a8:	fb01 f303 	mul.w	r3, r1, r3
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80066b2:	881a      	ldrh	r2, [r3, #0]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	835a      	strh	r2, [r3, #26]
 80066b8:	e015      	b.n	80066e6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	211a      	movs	r1, #26
 80066c0:	fb01 f303 	mul.w	r3, r1, r3
 80066c4:	4413      	add	r3, r2
 80066c6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80066ca:	781a      	ldrb	r2, [r3, #0]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	211a      	movs	r1, #26
 80066d6:	fb01 f303 	mul.w	r3, r1, r3
 80066da:	4413      	add	r3, r2
 80066dc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80066e0:	881a      	ldrh	r2, [r3, #0]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	7b9b      	ldrb	r3, [r3, #14]
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f002 f970 	bl	80089d2 <USBH_AllocPipe>
 80066f2:	4603      	mov	r3, r0
 80066f4:	461a      	mov	r2, r3
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	7bdb      	ldrb	r3, [r3, #15]
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f002 f966 	bl	80089d2 <USBH_AllocPipe>
 8006706:	4603      	mov	r3, r0
 8006708:	461a      	mov	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	7b59      	ldrb	r1, [r3, #13]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	7b98      	ldrb	r0, [r3, #14]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	8b12      	ldrh	r2, [r2, #24]
 8006726:	9202      	str	r2, [sp, #8]
 8006728:	2202      	movs	r2, #2
 800672a:	9201      	str	r2, [sp, #4]
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	4623      	mov	r3, r4
 8006730:	4602      	mov	r2, r0
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f002 f91e 	bl	8008974 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	7b19      	ldrb	r1, [r3, #12]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	7bd8      	ldrb	r0, [r3, #15]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	8b52      	ldrh	r2, [r2, #26]
 8006750:	9202      	str	r2, [sp, #8]
 8006752:	2202      	movs	r2, #2
 8006754:	9201      	str	r2, [sp, #4]
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	4623      	mov	r3, r4
 800675a:	4602      	mov	r2, r0
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f002 f909 	bl	8008974 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	7b5b      	ldrb	r3, [r3, #13]
 800676e:	2200      	movs	r2, #0
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f005 fbae 	bl	800bed4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	7b1b      	ldrb	r3, [r3, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f005 fba7 	bl	800bed4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	bd90      	pop	{r4, r7, pc}

08006790 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00e      	beq.n	80067c8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f002 f8fe 	bl	80089b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f002 f929 	bl	8008a14 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	7b1b      	ldrb	r3, [r3, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00e      	beq.n	80067ee <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	7b1b      	ldrb	r3, [r3, #12]
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f002 f8eb 	bl	80089b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	7b1b      	ldrb	r3, [r3, #12]
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f002 f916 	bl	8008a14 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	7b5b      	ldrb	r3, [r3, #13]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00e      	beq.n	8006814 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	7b5b      	ldrb	r3, [r3, #13]
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f002 f8d8 	bl	80089b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	7b5b      	ldrb	r3, [r3, #13]
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f002 f903 	bl	8008a14 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00b      	beq.n	8006838 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	4618      	mov	r0, r3
 800682a:	f005 fbe1 	bl	800bff0 <free>
    phost->pActiveClass->pData = 0U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006834:	2200      	movs	r2, #0
 8006836:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3340      	adds	r3, #64	@ 0x40
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f8b1 	bl	80069c2 <GetLineCoding>
 8006860:	4603      	mov	r3, r0
 8006862:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006864:	7afb      	ldrb	r3, [r7, #11]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006870:	2102      	movs	r1, #2
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006876:	7afb      	ldrb	r3, [r7, #11]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006888:	2301      	movs	r3, #1
 800688a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d877      	bhi.n	8006994 <USBH_CDC_Process+0x114>
 80068a4:	a201      	add	r2, pc, #4	@ (adr r2, 80068ac <USBH_CDC_Process+0x2c>)
 80068a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068aa:	bf00      	nop
 80068ac:	080068c1 	.word	0x080068c1
 80068b0:	080068c7 	.word	0x080068c7
 80068b4:	080068f7 	.word	0x080068f7
 80068b8:	0800696b 	.word	0x0800696b
 80068bc:	08006979 	.word	0x08006979
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	73fb      	strb	r3, [r7, #15]
      break;
 80068c4:	e06d      	b.n	80069a2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f897 	bl	8006a00 <SetLineCoding>
 80068d2:	4603      	mov	r3, r0
 80068d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d104      	bne.n	80068e6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80068e4:	e058      	b.n	8006998 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80068e6:	7bbb      	ldrb	r3, [r7, #14]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d055      	beq.n	8006998 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2204      	movs	r2, #4
 80068f0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80068f4:	e050      	b.n	8006998 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	3340      	adds	r3, #64	@ 0x40
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f860 	bl	80069c2 <GetLineCoding>
 8006902:	4603      	mov	r3, r0
 8006904:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006906:	7bbb      	ldrb	r3, [r7, #14]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d126      	bne.n	800695a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800691e:	791b      	ldrb	r3, [r3, #4]
 8006920:	429a      	cmp	r2, r3
 8006922:	d13b      	bne.n	800699c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800692e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006930:	429a      	cmp	r2, r3
 8006932:	d133      	bne.n	800699c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800693e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006940:	429a      	cmp	r2, r3
 8006942:	d12b      	bne.n	800699c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800694c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800694e:	429a      	cmp	r2, r3
 8006950:	d124      	bne.n	800699c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f982 	bl	8006c5c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006958:	e020      	b.n	800699c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800695a:	7bbb      	ldrb	r3, [r7, #14]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d01d      	beq.n	800699c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2204      	movs	r2, #4
 8006964:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006968:	e018      	b.n	800699c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f867 	bl	8006a3e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f8f6 	bl	8006b62 <CDC_ProcessReception>
      break;
 8006976:	e014      	b.n	80069a2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006978:	2100      	movs	r1, #0
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f001 f984 	bl	8007c88 <USBH_ClrFeature>
 8006980:	4603      	mov	r3, r0
 8006982:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006992:	e005      	b.n	80069a0 <USBH_CDC_Process+0x120>

    default:
      break;
 8006994:	bf00      	nop
 8006996:	e004      	b.n	80069a2 <USBH_CDC_Process+0x122>
      break;
 8006998:	bf00      	nop
 800699a:	e002      	b.n	80069a2 <USBH_CDC_Process+0x122>
      break;
 800699c:	bf00      	nop
 800699e:	e000      	b.n	80069a2 <USBH_CDC_Process+0x122>
      break;
 80069a0:	bf00      	nop

  }

  return status;
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	22a1      	movs	r2, #161	@ 0xa1
 80069d0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2221      	movs	r2, #33	@ 0x21
 80069d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2207      	movs	r2, #7
 80069e8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2207      	movs	r2, #7
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fc7e 	bl	80082f2 <USBH_CtlReq>
 80069f6:	4603      	mov	r3, r0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2221      	movs	r2, #33	@ 0x21
 8006a0e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2220      	movs	r2, #32
 8006a14:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2207      	movs	r2, #7
 8006a26:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2207      	movs	r2, #7
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fc5f 	bl	80082f2 <USBH_CtlReq>
 8006a34:	4603      	mov	r3, r0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b086      	sub	sp, #24
 8006a42:	af02      	add	r7, sp, #8
 8006a44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a50:	2300      	movs	r3, #0
 8006a52:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d002      	beq.n	8006a64 <CDC_ProcessTransmission+0x26>
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d023      	beq.n	8006aaa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006a62:	e07a      	b.n	8006b5a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	8b12      	ldrh	r2, [r2, #24]
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d90b      	bls.n	8006a88 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	69d9      	ldr	r1, [r3, #28]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8b1a      	ldrh	r2, [r3, #24]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	7b5b      	ldrb	r3, [r3, #13]
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	9000      	str	r0, [sp, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 ff34 	bl	80088ee <USBH_BulkSendData>
 8006a86:	e00b      	b.n	8006aa0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	7b5b      	ldrb	r3, [r3, #13]
 8006a96:	2001      	movs	r0, #1
 8006a98:	9000      	str	r0, [sp, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 ff27 	bl	80088ee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006aa8:	e057      	b.n	8006b5a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	7b5b      	ldrb	r3, [r3, #13]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f005 f9e5 	bl	800be80 <USBH_LL_GetURBState>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006aba:	7afb      	ldrb	r3, [r7, #11]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d136      	bne.n	8006b2e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	8b12      	ldrh	r2, [r2, #24]
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d90e      	bls.n	8006aea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	8b12      	ldrh	r2, [r2, #24]
 8006ad4:	1a9a      	subs	r2, r3, r2
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	8b12      	ldrh	r2, [r2, #24]
 8006ae2:	441a      	add	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	61da      	str	r2, [r3, #28]
 8006ae8:	e002      	b.n	8006af0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8006b00:	e006      	b.n	8006b10 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f892 	bl	8006c34 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2204      	movs	r2, #4
 8006b14:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006b24:	2300      	movs	r3, #0
 8006b26:	2200      	movs	r2, #0
 8006b28:	f002 f954 	bl	8008dd4 <osMessageQueuePut>
      break;
 8006b2c:	e014      	b.n	8006b58 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006b2e:	7afb      	ldrb	r3, [r7, #11]
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d111      	bne.n	8006b58 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2204      	movs	r2, #4
 8006b40:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006b50:	2300      	movs	r3, #0
 8006b52:	2200      	movs	r2, #0
 8006b54:	f002 f93e 	bl	8008dd4 <osMessageQueuePut>
      break;
 8006b58:	bf00      	nop
  }
}
 8006b5a:	bf00      	nop
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d002      	beq.n	8006b88 <CDC_ProcessReception+0x26>
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d00e      	beq.n	8006ba4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006b86:	e051      	b.n	8006c2c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	6a19      	ldr	r1, [r3, #32]
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	8b5a      	ldrh	r2, [r3, #26]
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	7b1b      	ldrb	r3, [r3, #12]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 fecf 	bl	8008938 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2204      	movs	r2, #4
 8006b9e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006ba2:	e043      	b.n	8006c2c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	7b1b      	ldrb	r3, [r3, #12]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f005 f968 	bl	800be80 <USBH_LL_GetURBState>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006bb4:	7cfb      	ldrb	r3, [r7, #19]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d137      	bne.n	8006c2a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	7b1b      	ldrb	r3, [r3, #12]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f005 f8cb 	bl	800bd5c <USBH_LL_GetLastXferSize>
 8006bc6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d016      	beq.n	8006c00 <CDC_ProcessReception+0x9e>
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	8b5b      	ldrh	r3, [r3, #26]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d110      	bne.n	8006c00 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	1ad2      	subs	r2, r2, r3
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	6a1a      	ldr	r2, [r3, #32]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	441a      	add	r2, r3
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8006bfe:	e006      	b.n	8006c0e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f81d 	bl	8006c48 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2204      	movs	r2, #4
 8006c12:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006c22:	2300      	movs	r3, #0
 8006c24:	2200      	movs	r2, #0
 8006c26:	f002 f8d5 	bl	8008dd4 <osMessageQueuePut>
      break;
 8006c2a:	bf00      	nop
  }
}
 8006c2c:	bf00      	nop
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006c84:	2302      	movs	r3, #2
 8006c86:	e044      	b.n	8006d12 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	79fa      	ldrb	r2, [r7, #7]
 8006c8c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f841 	bl	8006d28 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2104      	movs	r1, #4
 8006cd8:	2010      	movs	r0, #16
 8006cda:	f002 f808 	bl	8008cee <osMessageQueueNew>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8006ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d1c <USBH_Init+0xac>)
 8006ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8006d20 <USBH_Init+0xb0>)
 8006cea:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8006cec:	4b0b      	ldr	r3, [pc, #44]	@ (8006d1c <USBH_Init+0xac>)
 8006cee:	2280      	movs	r2, #128	@ 0x80
 8006cf0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8006cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8006d1c <USBH_Init+0xac>)
 8006cf4:	2218      	movs	r2, #24
 8006cf6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006cf8:	4a08      	ldr	r2, [pc, #32]	@ (8006d1c <USBH_Init+0xac>)
 8006cfa:	68f9      	ldr	r1, [r7, #12]
 8006cfc:	4809      	ldr	r0, [pc, #36]	@ (8006d24 <USBH_Init+0xb4>)
 8006cfe:	f001 ff49 	bl	8008b94 <osThreadNew>
 8006d02:	4602      	mov	r2, r0
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f004 ff72 	bl	800bbf4 <USBH_LL_Init>

  return USBH_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	200001e4 	.word	0x200001e4
 8006d20:	0800c2bc 	.word	0x0800c2bc
 8006d24:	080079d9 	.word	0x080079d9

08006d28 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	e009      	b.n	8006d4e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	33e0      	adds	r3, #224	@ 0xe0
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	2200      	movs	r2, #0
 8006d46:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b0f      	cmp	r3, #15
 8006d52:	d9f2      	bls.n	8006d3a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	e009      	b.n	8006d6e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006d64:	2200      	movs	r2, #0
 8006d66:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d74:	d3f1      	bcc.n	8006d5a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2240      	movs	r2, #64	@ 0x40
 8006d9a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	331c      	adds	r3, #28
 8006dc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f005 f9c5 	bl	800c15c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006dd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ddc:	2100      	movs	r1, #0
 8006dde:	4618      	mov	r0, r3
 8006de0:	f005 f9bc 	bl	800c15c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006dea:	2212      	movs	r2, #18
 8006dec:	2100      	movs	r1, #0
 8006dee:	4618      	mov	r0, r3
 8006df0:	f005 f9b4 	bl	800c15c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006dfa:	223e      	movs	r2, #62	@ 0x3e
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f005 f9ac 	bl	800c15c <memset>

  return USBH_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b085      	sub	sp, #20
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d016      	beq.n	8006e50 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10e      	bne.n	8006e4a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006e32:	1c59      	adds	r1, r3, #1
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	33de      	adds	r3, #222	@ 0xde
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	73fb      	strb	r3, [r7, #15]
 8006e48:	e004      	b.n	8006e54 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	73fb      	strb	r3, [r7, #15]
 8006e4e:	e001      	b.n	8006e54 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e50:	2302      	movs	r3, #2
 8006e52:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b085      	sub	sp, #20
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006e78:	78fa      	ldrb	r2, [r7, #3]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d204      	bcs.n	8006e88 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	78fa      	ldrb	r2, [r7, #3]
 8006e82:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006e86:	e001      	b.n	8006e8c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b087      	sub	sp, #28
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	4608      	mov	r0, r1
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	70fb      	strb	r3, [r7, #3]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70bb      	strb	r3, [r7, #2]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006ec2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ec4:	e025      	b.n	8006f12 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	221a      	movs	r2, #26
 8006eca:	fb02 f303 	mul.w	r3, r2, r3
 8006ece:	3308      	adds	r3, #8
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3302      	adds	r3, #2
 8006ed6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	795b      	ldrb	r3, [r3, #5]
 8006edc:	78fa      	ldrb	r2, [r7, #3]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d002      	beq.n	8006ee8 <USBH_FindInterface+0x4e>
 8006ee2:	78fb      	ldrb	r3, [r7, #3]
 8006ee4:	2bff      	cmp	r3, #255	@ 0xff
 8006ee6:	d111      	bne.n	8006f0c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006eec:	78ba      	ldrb	r2, [r7, #2]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d002      	beq.n	8006ef8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ef2:	78bb      	ldrb	r3, [r7, #2]
 8006ef4:	2bff      	cmp	r3, #255	@ 0xff
 8006ef6:	d109      	bne.n	8006f0c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006efc:	787a      	ldrb	r2, [r7, #1]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d002      	beq.n	8006f08 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f02:	787b      	ldrb	r3, [r7, #1]
 8006f04:	2bff      	cmp	r3, #255	@ 0xff
 8006f06:	d101      	bne.n	8006f0c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	e006      	b.n	8006f1a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d9d6      	bls.n	8006ec6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f18:	23ff      	movs	r3, #255	@ 0xff
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f004 fe9c 	bl	800bc6c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006f34:	2101      	movs	r1, #1
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f004 ffb5 	bl	800bea6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
	...

08006f48 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af04      	add	r7, sp, #16
 8006f4e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006f50:	2302      	movs	r3, #2
 8006f52:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d102      	bne.n	8006f6a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2203      	movs	r2, #3
 8006f68:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b0b      	cmp	r3, #11
 8006f72:	f200 8244 	bhi.w	80073fe <USBH_Process+0x4b6>
 8006f76:	a201      	add	r2, pc, #4	@ (adr r2, 8006f7c <USBH_Process+0x34>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08006fad 	.word	0x08006fad
 8006f80:	08006ffb 	.word	0x08006ffb
 8006f84:	0800707f 	.word	0x0800707f
 8006f88:	0800737d 	.word	0x0800737d
 8006f8c:	080073ff 	.word	0x080073ff
 8006f90:	0800713b 	.word	0x0800713b
 8006f94:	08007307 	.word	0x08007307
 8006f98:	0800718d 	.word	0x0800718d
 8006f9c:	080071c9 	.word	0x080071c9
 8006fa0:	08007201 	.word	0x08007201
 8006fa4:	0800725f 	.word	0x0800725f
 8006fa8:	08007365 	.word	0x08007365
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 8224 	beq.w	8007402 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006fc0:	20c8      	movs	r0, #200	@ 0xc8
 8006fc2:	f004 ffba 	bl	800bf3a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f004 fead 	bl	800bd26 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f001 feee 	bl	8008dd4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006ff8:	e203      	b.n	8007402 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007000:	2b01      	cmp	r3, #1
 8007002:	d107      	bne.n	8007014 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	e025      	b.n	8007060 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800701a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800701e:	d914      	bls.n	800704a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007026:	3301      	adds	r3, #1
 8007028:	b2da      	uxtb	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007036:	2b03      	cmp	r3, #3
 8007038:	d903      	bls.n	8007042 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	220d      	movs	r2, #13
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	e00e      	b.n	8007060 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	e00a      	b.n	8007060 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007050:	f103 020a 	add.w	r2, r3, #10
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800705a:	200a      	movs	r0, #10
 800705c:	f004 ff6d 	bl	800bf3a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007074:	2300      	movs	r3, #0
 8007076:	2200      	movs	r2, #0
 8007078:	f001 feac 	bl	8008dd4 <osMessageQueuePut>
#endif
#endif
      break;
 800707c:	e1c8      	b.n	8007410 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d005      	beq.n	8007094 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800708e:	2104      	movs	r1, #4
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007094:	2064      	movs	r0, #100	@ 0x64
 8007096:	f004 ff50 	bl	800bf3a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f004 fe1c 	bl	800bcd8 <USBH_LL_GetSpeed>
 80070a0:	4603      	mov	r3, r0
 80070a2:	461a      	mov	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2205      	movs	r2, #5
 80070ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80070b0:	2100      	movs	r1, #0
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f001 fc8d 	bl	80089d2 <USBH_AllocPipe>
 80070b8:	4603      	mov	r3, r0
 80070ba:	461a      	mov	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80070c0:	2180      	movs	r1, #128	@ 0x80
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f001 fc85 	bl	80089d2 <USBH_AllocPipe>
 80070c8:	4603      	mov	r3, r0
 80070ca:	461a      	mov	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	7919      	ldrb	r1, [r3, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070e4:	9202      	str	r2, [sp, #8]
 80070e6:	2200      	movs	r2, #0
 80070e8:	9201      	str	r2, [sp, #4]
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	4603      	mov	r3, r0
 80070ee:	2280      	movs	r2, #128	@ 0x80
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f001 fc3f 	bl	8008974 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	7959      	ldrb	r1, [r3, #5]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800710a:	9202      	str	r2, [sp, #8]
 800710c:	2200      	movs	r2, #0
 800710e:	9201      	str	r2, [sp, #4]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	4603      	mov	r3, r0
 8007114:	2200      	movs	r2, #0
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 fc2c 	bl	8008974 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007130:	2300      	movs	r3, #0
 8007132:	2200      	movs	r2, #0
 8007134:	f001 fe4e 	bl	8008dd4 <osMessageQueuePut>
#endif
#endif
      break;
 8007138:	e16a      	b.n	8007410 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f96e 	bl	800741c <USBH_HandleEnum>
 8007140:	4603      	mov	r3, r0
 8007142:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	f040 815c 	bne.w	8007406 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800715c:	2b01      	cmp	r3, #1
 800715e:	d103      	bne.n	8007168 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2208      	movs	r2, #8
 8007164:	701a      	strb	r2, [r3, #0]
 8007166:	e002      	b.n	800716e <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2207      	movs	r2, #7
 800716c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2205      	movs	r2, #5
 8007172:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007182:	2300      	movs	r3, #0
 8007184:	2200      	movs	r2, #0
 8007186:	f001 fe25 	bl	8008dd4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800718a:	e13c      	b.n	8007406 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 8139 	beq.w	800740a <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800719e:	2101      	movs	r1, #1
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2208      	movs	r2, #8
 80071a8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2205      	movs	r2, #5
 80071ae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80071be:	2300      	movs	r3, #0
 80071c0:	2200      	movs	r2, #0
 80071c2:	f001 fe07 	bl	8008dd4 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80071c6:	e120      	b.n	800740a <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fd12 	bl	8007bfa <USBH_SetCfg>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d102      	bne.n	80071e2 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2209      	movs	r2, #9
 80071e0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80071f6:	2300      	movs	r3, #0
 80071f8:	2200      	movs	r2, #0
 80071fa:	f001 fdeb 	bl	8008dd4 <osMessageQueuePut>
#endif
#endif
      break;
 80071fe:	e107      	b.n	8007410 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b00      	cmp	r3, #0
 800720c:	d015      	beq.n	800723a <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800720e:	2101      	movs	r1, #1
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fd15 	bl	8007c40 <USBH_SetFeature>
 8007216:	4603      	mov	r3, r0
 8007218:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	d103      	bne.n	800722a <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	220a      	movs	r2, #10
 8007226:	701a      	strb	r2, [r3, #0]
 8007228:	e00a      	b.n	8007240 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b03      	cmp	r3, #3
 8007230:	d106      	bne.n	8007240 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	220a      	movs	r2, #10
 8007236:	701a      	strb	r2, [r3, #0]
 8007238:	e002      	b.n	8007240 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	220a      	movs	r2, #10
 800723e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007254:	2300      	movs	r3, #0
 8007256:	2200      	movs	r2, #0
 8007258:	f001 fdbc 	bl	8008dd4 <osMessageQueuePut>
#endif
#endif
      break;
 800725c:	e0d8      	b.n	8007410 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007264:	2b00      	cmp	r3, #0
 8007266:	d03f      	beq.n	80072e8 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007270:	2300      	movs	r3, #0
 8007272:	73fb      	strb	r3, [r7, #15]
 8007274:	e016      	b.n	80072a4 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007276:	7bfa      	ldrb	r2, [r7, #15]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	32de      	adds	r2, #222	@ 0xde
 800727c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007280:	791a      	ldrb	r2, [r3, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007288:	429a      	cmp	r2, r3
 800728a:	d108      	bne.n	800729e <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800728c:	7bfa      	ldrb	r2, [r7, #15]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	32de      	adds	r2, #222	@ 0xde
 8007292:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800729c:	e005      	b.n	80072aa <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	3301      	adds	r3, #1
 80072a2:	73fb      	strb	r3, [r7, #15]
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d0e5      	beq.n	8007276 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d016      	beq.n	80072e2 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	4798      	blx	r3
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d109      	bne.n	80072da <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2206      	movs	r2, #6
 80072ca:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80072d2:	2103      	movs	r1, #3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	4798      	blx	r3
 80072d8:	e006      	b.n	80072e8 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	220d      	movs	r2, #13
 80072de:	701a      	strb	r2, [r3, #0]
 80072e0:	e002      	b.n	80072e8 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	220d      	movs	r2, #13
 80072e6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2205      	movs	r2, #5
 80072ec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80072fc:	2300      	movs	r3, #0
 80072fe:	2200      	movs	r2, #0
 8007300:	f001 fd68 	bl	8008dd4 <osMessageQueuePut>
#endif
#endif
      break;
 8007304:	e084      	b.n	8007410 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800730c:	2b00      	cmp	r3, #0
 800730e:	d017      	beq.n	8007340 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	4798      	blx	r3
 800731c:	4603      	mov	r3, r0
 800731e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d103      	bne.n	8007330 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	220b      	movs	r2, #11
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	e00a      	b.n	8007346 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d106      	bne.n	8007346 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	220d      	movs	r2, #13
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	e002      	b.n	8007346 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	220d      	movs	r2, #13
 8007344:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2205      	movs	r2, #5
 800734a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800735a:	2300      	movs	r3, #0
 800735c:	2200      	movs	r2, #0
 800735e:	f001 fd39 	bl	8008dd4 <osMessageQueuePut>
#endif
#endif
      break;
 8007362:	e055      	b.n	8007410 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800736a:	2b00      	cmp	r3, #0
 800736c:	d04f      	beq.n	800740e <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	4798      	blx	r3
      }
      break;
 800737a:	e048      	b.n	800740e <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff fccf 	bl	8006d28 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d009      	beq.n	80073a8 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d005      	beq.n	80073be <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073b8:	2105      	movs	r1, #5
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d107      	bne.n	80073da <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7ff fda7 	bl	8006f26 <USBH_Start>
 80073d8:	e002      	b.n	80073e0 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f004 fc46 	bl	800bc6c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80073f4:	2300      	movs	r3, #0
 80073f6:	2200      	movs	r2, #0
 80073f8:	f001 fcec 	bl	8008dd4 <osMessageQueuePut>
#endif
#endif
      break;
 80073fc:	e008      	b.n	8007410 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80073fe:	bf00      	nop
 8007400:	e006      	b.n	8007410 <USBH_Process+0x4c8>
      break;
 8007402:	bf00      	nop
 8007404:	e004      	b.n	8007410 <USBH_Process+0x4c8>
      break;
 8007406:	bf00      	nop
 8007408:	e002      	b.n	8007410 <USBH_Process+0x4c8>
    break;
 800740a:	bf00      	nop
 800740c:	e000      	b.n	8007410 <USBH_Process+0x4c8>
      break;
 800740e:	bf00      	nop
  }
  return USBH_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop

0800741c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af04      	add	r7, sp, #16
 8007422:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007424:	2301      	movs	r3, #1
 8007426:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007428:	2301      	movs	r3, #1
 800742a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	785b      	ldrb	r3, [r3, #1]
 8007430:	2b07      	cmp	r3, #7
 8007432:	f200 8204 	bhi.w	800783e <USBH_HandleEnum+0x422>
 8007436:	a201      	add	r2, pc, #4	@ (adr r2, 800743c <USBH_HandleEnum+0x20>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	0800745d 	.word	0x0800745d
 8007440:	08007517 	.word	0x08007517
 8007444:	08007581 	.word	0x08007581
 8007448:	0800760b 	.word	0x0800760b
 800744c:	08007675 	.word	0x08007675
 8007450:	080076e5 	.word	0x080076e5
 8007454:	08007781 	.word	0x08007781
 8007458:	080077ff 	.word	0x080077ff
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800745c:	2108      	movs	r1, #8
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fae8 	bl	8007a34 <USBH_Get_DevDesc>
 8007464:	4603      	mov	r3, r0
 8007466:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007468:	7bbb      	ldrb	r3, [r7, #14]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d12e      	bne.n	80074cc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	7919      	ldrb	r1, [r3, #4]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007492:	9202      	str	r2, [sp, #8]
 8007494:	2200      	movs	r2, #0
 8007496:	9201      	str	r2, [sp, #4]
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	4603      	mov	r3, r0
 800749c:	2280      	movs	r2, #128	@ 0x80
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f001 fa68 	bl	8008974 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	7959      	ldrb	r1, [r3, #5]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074b8:	9202      	str	r2, [sp, #8]
 80074ba:	2200      	movs	r2, #0
 80074bc:	9201      	str	r2, [sp, #4]
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	4603      	mov	r3, r0
 80074c2:	2200      	movs	r2, #0
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 fa55 	bl	8008974 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80074ca:	e1ba      	b.n	8007842 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074cc:	7bbb      	ldrb	r3, [r7, #14]
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	f040 81b7 	bne.w	8007842 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80074da:	3301      	adds	r3, #1
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d903      	bls.n	80074f6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	220d      	movs	r2, #13
 80074f2:	701a      	strb	r2, [r3, #0]
      break;
 80074f4:	e1a5      	b.n	8007842 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	795b      	ldrb	r3, [r3, #5]
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 fa89 	bl	8008a14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	791b      	ldrb	r3, [r3, #4]
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f001 fa83 	bl	8008a14 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	701a      	strb	r2, [r3, #0]
      break;
 8007514:	e195      	b.n	8007842 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007516:	2112      	movs	r1, #18
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fa8b 	bl	8007a34 <USBH_Get_DevDesc>
 800751e:	4603      	mov	r3, r0
 8007520:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d103      	bne.n	8007530 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800752e:	e18a      	b.n	8007846 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	2b03      	cmp	r3, #3
 8007534:	f040 8187 	bne.w	8007846 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800753e:	3301      	adds	r3, #1
 8007540:	b2da      	uxtb	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800754e:	2b03      	cmp	r3, #3
 8007550:	d903      	bls.n	800755a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	220d      	movs	r2, #13
 8007556:	701a      	strb	r2, [r3, #0]
      break;
 8007558:	e175      	b.n	8007846 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	795b      	ldrb	r3, [r3, #5]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 fa57 	bl	8008a14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	791b      	ldrb	r3, [r3, #4]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 fa51 	bl	8008a14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	701a      	strb	r2, [r3, #0]
      break;
 800757e:	e162      	b.n	8007846 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007580:	2101      	movs	r1, #1
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fb15 	bl	8007bb2 <USBH_SetAddress>
 8007588:	4603      	mov	r3, r0
 800758a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800758c:	7bbb      	ldrb	r3, [r7, #14]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d130      	bne.n	80075f4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007592:	2002      	movs	r0, #2
 8007594:	f004 fcd1 	bl	800bf3a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2203      	movs	r2, #3
 80075a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	7919      	ldrb	r1, [r3, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80075ba:	9202      	str	r2, [sp, #8]
 80075bc:	2200      	movs	r2, #0
 80075be:	9201      	str	r2, [sp, #4]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	4603      	mov	r3, r0
 80075c4:	2280      	movs	r2, #128	@ 0x80
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 f9d4 	bl	8008974 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	7959      	ldrb	r1, [r3, #5]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075e0:	9202      	str	r2, [sp, #8]
 80075e2:	2200      	movs	r2, #0
 80075e4:	9201      	str	r2, [sp, #4]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	4603      	mov	r3, r0
 80075ea:	2200      	movs	r2, #0
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f001 f9c1 	bl	8008974 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80075f2:	e12a      	b.n	800784a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	f040 8127 	bne.w	800784a <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	220d      	movs	r2, #13
 8007600:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	705a      	strb	r2, [r3, #1]
      break;
 8007608:	e11f      	b.n	800784a <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800760a:	2109      	movs	r1, #9
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fa3d 	bl	8007a8c <USBH_Get_CfgDesc>
 8007612:	4603      	mov	r3, r0
 8007614:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d103      	bne.n	8007624 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2204      	movs	r2, #4
 8007620:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007622:	e114      	b.n	800784e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007624:	7bbb      	ldrb	r3, [r7, #14]
 8007626:	2b03      	cmp	r3, #3
 8007628:	f040 8111 	bne.w	800784e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007632:	3301      	adds	r3, #1
 8007634:	b2da      	uxtb	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007642:	2b03      	cmp	r3, #3
 8007644:	d903      	bls.n	800764e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	220d      	movs	r2, #13
 800764a:	701a      	strb	r2, [r3, #0]
      break;
 800764c:	e0ff      	b.n	800784e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	795b      	ldrb	r3, [r3, #5]
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f001 f9dd 	bl	8008a14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	791b      	ldrb	r3, [r3, #4]
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 f9d7 	bl	8008a14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	701a      	strb	r2, [r3, #0]
      break;
 8007672:	e0ec      	b.n	800784e <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fa05 	bl	8007a8c <USBH_Get_CfgDesc>
 8007682:	4603      	mov	r3, r0
 8007684:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d103      	bne.n	8007694 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2205      	movs	r2, #5
 8007690:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007692:	e0de      	b.n	8007852 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	2b03      	cmp	r3, #3
 8007698:	f040 80db 	bne.w	8007852 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80076a2:	3301      	adds	r3, #1
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d903      	bls.n	80076be <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	220d      	movs	r2, #13
 80076ba:	701a      	strb	r2, [r3, #0]
      break;
 80076bc:	e0c9      	b.n	8007852 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	795b      	ldrb	r3, [r3, #5]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 f9a5 	bl	8008a14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	791b      	ldrb	r3, [r3, #4]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 f99f 	bl	8008a14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	701a      	strb	r2, [r3, #0]
      break;
 80076e2:	e0b6      	b.n	8007852 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d036      	beq.n	800775c <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80076fa:	23ff      	movs	r3, #255	@ 0xff
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f9ef 	bl	8007ae0 <USBH_Get_StringDesc>
 8007702:	4603      	mov	r3, r0
 8007704:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d111      	bne.n	8007730 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2206      	movs	r2, #6
 8007710:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2205      	movs	r2, #5
 8007716:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007726:	2300      	movs	r3, #0
 8007728:	2200      	movs	r2, #0
 800772a:	f001 fb53 	bl	8008dd4 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800772e:	e092      	b.n	8007856 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	2b03      	cmp	r3, #3
 8007734:	f040 808f 	bne.w	8007856 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2206      	movs	r2, #6
 800773c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2205      	movs	r2, #5
 8007742:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007752:	2300      	movs	r3, #0
 8007754:	2200      	movs	r2, #0
 8007756:	f001 fb3d 	bl	8008dd4 <osMessageQueuePut>
      break;
 800775a:	e07c      	b.n	8007856 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2206      	movs	r2, #6
 8007760:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2205      	movs	r2, #5
 8007766:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007776:	2300      	movs	r3, #0
 8007778:	2200      	movs	r2, #0
 800777a:	f001 fb2b 	bl	8008dd4 <osMessageQueuePut>
      break;
 800777e:	e06a      	b.n	8007856 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007786:	2b00      	cmp	r3, #0
 8007788:	d027      	beq.n	80077da <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007796:	23ff      	movs	r3, #255	@ 0xff
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f9a1 	bl	8007ae0 <USBH_Get_StringDesc>
 800779e:	4603      	mov	r3, r0
 80077a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d103      	bne.n	80077b0 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2207      	movs	r2, #7
 80077ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077ae:	e054      	b.n	800785a <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d151      	bne.n	800785a <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2207      	movs	r2, #7
 80077ba:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2205      	movs	r2, #5
 80077c0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80077d0:	2300      	movs	r3, #0
 80077d2:	2200      	movs	r2, #0
 80077d4:	f001 fafe 	bl	8008dd4 <osMessageQueuePut>
      break;
 80077d8:	e03f      	b.n	800785a <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2207      	movs	r2, #7
 80077de:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2205      	movs	r2, #5
 80077e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80077f4:	2300      	movs	r3, #0
 80077f6:	2200      	movs	r2, #0
 80077f8:	f001 faec 	bl	8008dd4 <osMessageQueuePut>
      break;
 80077fc:	e02d      	b.n	800785a <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007804:	2b00      	cmp	r3, #0
 8007806:	d017      	beq.n	8007838 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007814:	23ff      	movs	r3, #255	@ 0xff
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f962 	bl	8007ae0 <USBH_Get_StringDesc>
 800781c:	4603      	mov	r3, r0
 800781e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d102      	bne.n	800782c <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800782a:	e018      	b.n	800785e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800782c:	7bbb      	ldrb	r3, [r7, #14]
 800782e:	2b03      	cmp	r3, #3
 8007830:	d115      	bne.n	800785e <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
      break;
 8007836:	e012      	b.n	800785e <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73fb      	strb	r3, [r7, #15]
      break;
 800783c:	e00f      	b.n	800785e <USBH_HandleEnum+0x442>

    default:
      break;
 800783e:	bf00      	nop
 8007840:	e00e      	b.n	8007860 <USBH_HandleEnum+0x444>
      break;
 8007842:	bf00      	nop
 8007844:	e00c      	b.n	8007860 <USBH_HandleEnum+0x444>
      break;
 8007846:	bf00      	nop
 8007848:	e00a      	b.n	8007860 <USBH_HandleEnum+0x444>
      break;
 800784a:	bf00      	nop
 800784c:	e008      	b.n	8007860 <USBH_HandleEnum+0x444>
      break;
 800784e:	bf00      	nop
 8007850:	e006      	b.n	8007860 <USBH_HandleEnum+0x444>
      break;
 8007852:	bf00      	nop
 8007854:	e004      	b.n	8007860 <USBH_HandleEnum+0x444>
      break;
 8007856:	bf00      	nop
 8007858:	e002      	b.n	8007860 <USBH_HandleEnum+0x444>
      break;
 800785a:	bf00      	nop
 800785c:	e000      	b.n	8007860 <USBH_HandleEnum+0x444>
      break;
 800785e:	bf00      	nop
  }
  return Status;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop

0800786c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f804 	bl	80078ae <USBH_HandleSof>
}
 80078a6:	bf00      	nop
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b0b      	cmp	r3, #11
 80078be:	d10a      	bne.n	80078d6 <USBH_HandleSof+0x28>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d005      	beq.n	80078d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
  }
}
 80078d6:	bf00      	nop
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007902:	2300      	movs	r3, #0
 8007904:	2200      	movs	r2, #0
 8007906:	f001 fa65 	bl	8008dd4 <osMessageQueuePut>
#endif
#endif

  return;
 800790a:	bf00      	nop
}
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007922:	bf00      	nop
}
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007962:	2300      	movs	r3, #0
 8007964:	2200      	movs	r2, #0
 8007966:	f001 fa35 	bl	8008dd4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f004 f984 	bl	800bca2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	791b      	ldrb	r3, [r3, #4]
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 f837 	bl	8008a14 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	795b      	ldrb	r3, [r3, #5]
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 f831 	bl	8008a14 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80079c6:	2300      	movs	r3, #0
 80079c8:	2200      	movs	r2, #0
 80079ca:	f001 fa03 	bl	8008dd4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80079ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079f0:	2200      	movs	r2, #0
 80079f2:	f001 fa4f 	bl	8008e94 <osMessageQueueGet>
 80079f6:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1f0      	bne.n	80079e0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff faa2 	bl	8006f48 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007a04:	e7ec      	b.n	80079e0 <USBH_Process_OS+0x8>

08007a06 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b082      	sub	sp, #8
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007a22:	2300      	movs	r3, #0
 8007a24:	2200      	movs	r2, #0
 8007a26:	f001 f9d5 	bl	8008dd4 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af02      	add	r7, sp, #8
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007a40:	887b      	ldrh	r3, [r7, #2]
 8007a42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a46:	d901      	bls.n	8007a4c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e01b      	b.n	8007a84 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007a52:	887b      	ldrh	r3, [r7, #2]
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	4613      	mov	r3, r2
 8007a58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f872 	bl	8007b48 <USBH_GetDescriptor>
 8007a64:	4603      	mov	r3, r0
 8007a66:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d109      	bne.n	8007a82 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007a74:	887a      	ldrh	r2, [r7, #2]
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f929 	bl	8007cd0 <USBH_ParseDevDesc>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	331c      	adds	r3, #28
 8007a9c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007a9e:	887b      	ldrh	r3, [r7, #2]
 8007aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aa4:	d901      	bls.n	8007aaa <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e016      	b.n	8007ad8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007aaa:	887b      	ldrh	r3, [r7, #2]
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f846 	bl	8007b48 <USBH_GetDescriptor>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d107      	bne.n	8007ad6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007ac6:	887b      	ldrh	r3, [r7, #2]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f9af 	bl	8007e30 <USBH_ParseCfgDesc>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af02      	add	r7, sp, #8
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	607a      	str	r2, [r7, #4]
 8007aea:	461a      	mov	r2, r3
 8007aec:	460b      	mov	r3, r1
 8007aee:	72fb      	strb	r3, [r7, #11]
 8007af0:	4613      	mov	r3, r2
 8007af2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007af4:	893b      	ldrh	r3, [r7, #8]
 8007af6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007afa:	d802      	bhi.n	8007b02 <USBH_Get_StringDesc+0x22>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e01c      	b.n	8007b40 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007b06:	7afb      	ldrb	r3, [r7, #11]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007b0e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007b16:	893b      	ldrh	r3, [r7, #8]
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 f812 	bl	8007b48 <USBH_GetDescriptor>
 8007b24:	4603      	mov	r3, r0
 8007b26:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d107      	bne.n	8007b3e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b34:	893a      	ldrh	r2, [r7, #8]
 8007b36:	6879      	ldr	r1, [r7, #4]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 fb8d 	bl	8008258 <USBH_ParseStringDesc>
  }

  return status;
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	607b      	str	r3, [r7, #4]
 8007b52:	460b      	mov	r3, r1
 8007b54:	72fb      	strb	r3, [r7, #11]
 8007b56:	4613      	mov	r3, r2
 8007b58:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	789b      	ldrb	r3, [r3, #2]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d11c      	bne.n	8007b9c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b62:	7afb      	ldrb	r3, [r7, #11]
 8007b64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2206      	movs	r2, #6
 8007b72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	893a      	ldrh	r2, [r7, #8]
 8007b78:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007b7a:	893b      	ldrh	r3, [r7, #8]
 8007b7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007b80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b84:	d104      	bne.n	8007b90 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f240 4209 	movw	r2, #1033	@ 0x409
 8007b8c:	829a      	strh	r2, [r3, #20]
 8007b8e:	e002      	b.n	8007b96 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8b3a      	ldrh	r2, [r7, #24]
 8007b9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007b9c:	8b3b      	ldrh	r3, [r7, #24]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 fba5 	bl	80082f2 <USBH_CtlReq>
 8007ba8:	4603      	mov	r3, r0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	789b      	ldrb	r3, [r3, #2]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d10f      	bne.n	8007be6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2205      	movs	r2, #5
 8007bd0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007bd2:	78fb      	ldrb	r3, [r7, #3]
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007be6:	2200      	movs	r2, #0
 8007be8:	2100      	movs	r1, #0
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fb81 	bl	80082f2 <USBH_CtlReq>
 8007bf0:	4603      	mov	r3, r0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	460b      	mov	r3, r1
 8007c04:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	789b      	ldrb	r3, [r3, #2]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d10e      	bne.n	8007c2c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2209      	movs	r2, #9
 8007c18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	887a      	ldrh	r2, [r7, #2]
 8007c1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2100      	movs	r1, #0
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fb5e 	bl	80082f2 <USBH_CtlReq>
 8007c36:	4603      	mov	r3, r0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	789b      	ldrb	r3, [r3, #2]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d10f      	bne.n	8007c74 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2203      	movs	r2, #3
 8007c5e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c74:	2200      	movs	r2, #0
 8007c76:	2100      	movs	r1, #0
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fb3a 	bl	80082f2 <USBH_CtlReq>
 8007c7e:	4603      	mov	r3, r0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	789b      	ldrb	r3, [r3, #2]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d10f      	bne.n	8007cbc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007cae:	78fb      	ldrb	r3, [r7, #3]
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fb16 	bl	80082f2 <USBH_CtlReq>
 8007cc6:	4603      	mov	r3, r0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007ce4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e094      	b.n	8007e1e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	781a      	ldrb	r2, [r3, #0]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	785a      	ldrb	r2, [r3, #1]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	3302      	adds	r3, #2
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	3303      	adds	r3, #3
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	4313      	orrs	r3, r2
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	791a      	ldrb	r2, [r3, #4]
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	795a      	ldrb	r2, [r3, #5]
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	799a      	ldrb	r2, [r3, #6]
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	79da      	ldrb	r2, [r3, #7]
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d004      	beq.n	8007d52 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d11b      	bne.n	8007d8a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	79db      	ldrb	r3, [r3, #7]
 8007d56:	2b20      	cmp	r3, #32
 8007d58:	dc0f      	bgt.n	8007d7a <USBH_ParseDevDesc+0xaa>
 8007d5a:	2b08      	cmp	r3, #8
 8007d5c:	db0f      	blt.n	8007d7e <USBH_ParseDevDesc+0xae>
 8007d5e:	3b08      	subs	r3, #8
 8007d60:	4a32      	ldr	r2, [pc, #200]	@ (8007e2c <USBH_ParseDevDesc+0x15c>)
 8007d62:	fa22 f303 	lsr.w	r3, r2, r3
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bf14      	ite	ne
 8007d6e:	2301      	movne	r3, #1
 8007d70:	2300      	moveq	r3, #0
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d106      	bne.n	8007d86 <USBH_ParseDevDesc+0xb6>
 8007d78:	e001      	b.n	8007d7e <USBH_ParseDevDesc+0xae>
 8007d7a:	2b40      	cmp	r3, #64	@ 0x40
 8007d7c:	d003      	beq.n	8007d86 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2208      	movs	r2, #8
 8007d82:	71da      	strb	r2, [r3, #7]
        break;
 8007d84:	e000      	b.n	8007d88 <USBH_ParseDevDesc+0xb8>
        break;
 8007d86:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007d88:	e00e      	b.n	8007da8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d107      	bne.n	8007da4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	79db      	ldrb	r3, [r3, #7]
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d005      	beq.n	8007da8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	2208      	movs	r2, #8
 8007da0:	71da      	strb	r2, [r3, #7]
 8007da2:	e001      	b.n	8007da8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007da4:	2303      	movs	r3, #3
 8007da6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007da8:	88fb      	ldrh	r3, [r7, #6]
 8007daa:	2b08      	cmp	r3, #8
 8007dac:	d936      	bls.n	8007e1c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	3308      	adds	r3, #8
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	3309      	adds	r3, #9
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	021b      	lsls	r3, r3, #8
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	330a      	adds	r3, #10
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	330b      	adds	r3, #11
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	330c      	adds	r3, #12
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	330d      	adds	r3, #13
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	021b      	lsls	r3, r3, #8
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	4313      	orrs	r3, r2
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	7b9a      	ldrb	r2, [r3, #14]
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	7bda      	ldrb	r2, [r3, #15]
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	7c1a      	ldrb	r2, [r3, #16]
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	7c5a      	ldrb	r2, [r3, #17]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	371c      	adds	r7, #28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	01000101 	.word	0x01000101

08007e30 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08c      	sub	sp, #48	@ 0x30
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007e44:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007e5e:	2302      	movs	r3, #2
 8007e60:	e0da      	b.n	8008018 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2b09      	cmp	r3, #9
 8007e6c:	d002      	beq.n	8007e74 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e70:	2209      	movs	r2, #9
 8007e72:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	781a      	ldrb	r2, [r3, #0]
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	785a      	ldrb	r2, [r3, #1]
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	3302      	adds	r3, #2
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	3303      	adds	r3, #3
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	021b      	lsls	r3, r3, #8
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	4313      	orrs	r3, r2
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e9e:	bf28      	it	cs
 8007ea0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	791a      	ldrb	r2, [r3, #4]
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	795a      	ldrb	r2, [r3, #5]
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	799a      	ldrb	r2, [r3, #6]
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	79da      	ldrb	r2, [r3, #7]
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	7a1a      	ldrb	r2, [r3, #8]
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007ed2:	88fb      	ldrh	r3, [r7, #6]
 8007ed4:	2b09      	cmp	r3, #9
 8007ed6:	f240 809d 	bls.w	8008014 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007eda:	2309      	movs	r3, #9
 8007edc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ee2:	e081      	b.n	8007fe8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ee4:	f107 0316 	add.w	r3, r7, #22
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007eec:	f000 f9e7 	bl	80082be <USBH_GetNextDesc>
 8007ef0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef4:	785b      	ldrb	r3, [r3, #1]
 8007ef6:	2b04      	cmp	r3, #4
 8007ef8:	d176      	bne.n	8007fe8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	2b09      	cmp	r3, #9
 8007f00:	d002      	beq.n	8007f08 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f04:	2209      	movs	r2, #9
 8007f06:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f0c:	221a      	movs	r2, #26
 8007f0e:	fb02 f303 	mul.w	r3, r2, r3
 8007f12:	3308      	adds	r3, #8
 8007f14:	6a3a      	ldr	r2, [r7, #32]
 8007f16:	4413      	add	r3, r2
 8007f18:	3302      	adds	r3, #2
 8007f1a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f1e:	69f8      	ldr	r0, [r7, #28]
 8007f20:	f000 f87e 	bl	8008020 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f2e:	e043      	b.n	8007fb8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f30:	f107 0316 	add.w	r3, r7, #22
 8007f34:	4619      	mov	r1, r3
 8007f36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f38:	f000 f9c1 	bl	80082be <USBH_GetNextDesc>
 8007f3c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f40:	785b      	ldrb	r3, [r3, #1]
 8007f42:	2b05      	cmp	r3, #5
 8007f44:	d138      	bne.n	8007fb8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	795b      	ldrb	r3, [r3, #5]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d113      	bne.n	8007f76 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d003      	beq.n	8007f5e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	799b      	ldrb	r3, [r3, #6]
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d10b      	bne.n	8007f76 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	79db      	ldrb	r3, [r3, #7]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10b      	bne.n	8007f7e <USBH_ParseCfgDesc+0x14e>
 8007f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b09      	cmp	r3, #9
 8007f6c:	d007      	beq.n	8007f7e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f70:	2209      	movs	r2, #9
 8007f72:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f74:	e003      	b.n	8007f7e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f78:	2207      	movs	r2, #7
 8007f7a:	701a      	strb	r2, [r3, #0]
 8007f7c:	e000      	b.n	8007f80 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f7e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007f80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f84:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007f88:	3201      	adds	r2, #1
 8007f8a:	00d2      	lsls	r2, r2, #3
 8007f8c:	211a      	movs	r1, #26
 8007f8e:	fb01 f303 	mul.w	r3, r1, r3
 8007f92:	4413      	add	r3, r2
 8007f94:	3308      	adds	r3, #8
 8007f96:	6a3a      	ldr	r2, [r7, #32]
 8007f98:	4413      	add	r3, r2
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fa0:	69b9      	ldr	r1, [r7, #24]
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 f870 	bl	8008088 <USBH_ParseEPDesc>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007fae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	791b      	ldrb	r3, [r3, #4]
 8007fbc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d204      	bcs.n	8007fce <USBH_ParseCfgDesc+0x19e>
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	885a      	ldrh	r2, [r3, #2]
 8007fc8:	8afb      	ldrh	r3, [r7, #22]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d8b0      	bhi.n	8007f30 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	791b      	ldrb	r3, [r3, #4]
 8007fd2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d201      	bcs.n	8007fde <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e01c      	b.n	8008018 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8007fde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d805      	bhi.n	8007ffc <USBH_ParseCfgDesc+0x1cc>
 8007ff0:	6a3b      	ldr	r3, [r7, #32]
 8007ff2:	885a      	ldrh	r2, [r3, #2]
 8007ff4:	8afb      	ldrh	r3, [r7, #22]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	f63f af74 	bhi.w	8007ee4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007ffc:	6a3b      	ldr	r3, [r7, #32]
 8007ffe:	791b      	ldrb	r3, [r3, #4]
 8008000:	2b02      	cmp	r3, #2
 8008002:	bf28      	it	cs
 8008004:	2302      	movcs	r3, #2
 8008006:	b2db      	uxtb	r3, r3
 8008008:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800800c:	429a      	cmp	r2, r3
 800800e:	d201      	bcs.n	8008014 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008010:	2303      	movs	r3, #3
 8008012:	e001      	b.n	8008018 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008014:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008018:	4618      	mov	r0, r3
 800801a:	3730      	adds	r7, #48	@ 0x30
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781a      	ldrb	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	785a      	ldrb	r2, [r3, #1]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	789a      	ldrb	r2, [r3, #2]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	78da      	ldrb	r2, [r3, #3]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	3304      	adds	r3, #4
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b02      	cmp	r3, #2
 8008052:	bf28      	it	cs
 8008054:	2302      	movcs	r3, #2
 8008056:	b2da      	uxtb	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	795a      	ldrb	r2, [r3, #5]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	799a      	ldrb	r2, [r3, #6]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	79da      	ldrb	r2, [r3, #7]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	7a1a      	ldrb	r2, [r3, #8]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	721a      	strb	r2, [r3, #8]
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	781a      	ldrb	r2, [r3, #0]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	785a      	ldrb	r2, [r3, #1]
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	789a      	ldrb	r2, [r3, #2]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	78da      	ldrb	r2, [r3, #3]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3304      	adds	r3, #4
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3305      	adds	r3, #5
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	021b      	lsls	r3, r3, #8
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	4313      	orrs	r3, r2
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	799a      	ldrb	r2, [r3, #6]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	889b      	ldrh	r3, [r3, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d009      	beq.n	80080f6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80080e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080ea:	d804      	bhi.n	80080f6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80080f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080f4:	d901      	bls.n	80080fa <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80080f6:	2303      	movs	r3, #3
 80080f8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008100:	2b00      	cmp	r3, #0
 8008102:	d136      	bne.n	8008172 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	78db      	ldrb	r3, [r3, #3]
 8008108:	f003 0303 	and.w	r3, r3, #3
 800810c:	2b02      	cmp	r3, #2
 800810e:	d108      	bne.n	8008122 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	889b      	ldrh	r3, [r3, #4]
 8008114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008118:	f240 8097 	bls.w	800824a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800811c:	2303      	movs	r3, #3
 800811e:	75fb      	strb	r3, [r7, #23]
 8008120:	e093      	b.n	800824a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	78db      	ldrb	r3, [r3, #3]
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d107      	bne.n	800813e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	889b      	ldrh	r3, [r3, #4]
 8008132:	2b40      	cmp	r3, #64	@ 0x40
 8008134:	f240 8089 	bls.w	800824a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008138:	2303      	movs	r3, #3
 800813a:	75fb      	strb	r3, [r7, #23]
 800813c:	e085      	b.n	800824a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	78db      	ldrb	r3, [r3, #3]
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	2b01      	cmp	r3, #1
 8008148:	d005      	beq.n	8008156 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	78db      	ldrb	r3, [r3, #3]
 800814e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008152:	2b03      	cmp	r3, #3
 8008154:	d10a      	bne.n	800816c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	799b      	ldrb	r3, [r3, #6]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <USBH_ParseEPDesc+0xde>
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	799b      	ldrb	r3, [r3, #6]
 8008162:	2b10      	cmp	r3, #16
 8008164:	d970      	bls.n	8008248 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008166:	2303      	movs	r3, #3
 8008168:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800816a:	e06d      	b.n	8008248 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800816c:	2303      	movs	r3, #3
 800816e:	75fb      	strb	r3, [r7, #23]
 8008170:	e06b      	b.n	800824a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008178:	2b01      	cmp	r3, #1
 800817a:	d13c      	bne.n	80081f6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	78db      	ldrb	r3, [r3, #3]
 8008180:	f003 0303 	and.w	r3, r3, #3
 8008184:	2b02      	cmp	r3, #2
 8008186:	d005      	beq.n	8008194 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	78db      	ldrb	r3, [r3, #3]
 800818c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008190:	2b00      	cmp	r3, #0
 8008192:	d106      	bne.n	80081a2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	889b      	ldrh	r3, [r3, #4]
 8008198:	2b40      	cmp	r3, #64	@ 0x40
 800819a:	d956      	bls.n	800824a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800819c:	2303      	movs	r3, #3
 800819e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80081a0:	e053      	b.n	800824a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	78db      	ldrb	r3, [r3, #3]
 80081a6:	f003 0303 	and.w	r3, r3, #3
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d10e      	bne.n	80081cc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	799b      	ldrb	r3, [r3, #6]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d007      	beq.n	80081c6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80081ba:	2b10      	cmp	r3, #16
 80081bc:	d803      	bhi.n	80081c6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80081c2:	2b40      	cmp	r3, #64	@ 0x40
 80081c4:	d941      	bls.n	800824a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80081c6:	2303      	movs	r3, #3
 80081c8:	75fb      	strb	r3, [r7, #23]
 80081ca:	e03e      	b.n	800824a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	78db      	ldrb	r3, [r3, #3]
 80081d0:	f003 0303 	and.w	r3, r3, #3
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d10b      	bne.n	80081f0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	799b      	ldrb	r3, [r3, #6]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d004      	beq.n	80081ea <USBH_ParseEPDesc+0x162>
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	889b      	ldrh	r3, [r3, #4]
 80081e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081e8:	d32f      	bcc.n	800824a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80081ea:	2303      	movs	r3, #3
 80081ec:	75fb      	strb	r3, [r7, #23]
 80081ee:	e02c      	b.n	800824a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80081f0:	2303      	movs	r3, #3
 80081f2:	75fb      	strb	r3, [r7, #23]
 80081f4:	e029      	b.n	800824a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d120      	bne.n	8008242 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	78db      	ldrb	r3, [r3, #3]
 8008204:	f003 0303 	and.w	r3, r3, #3
 8008208:	2b00      	cmp	r3, #0
 800820a:	d106      	bne.n	800821a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	889b      	ldrh	r3, [r3, #4]
 8008210:	2b08      	cmp	r3, #8
 8008212:	d01a      	beq.n	800824a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008214:	2303      	movs	r3, #3
 8008216:	75fb      	strb	r3, [r7, #23]
 8008218:	e017      	b.n	800824a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	78db      	ldrb	r3, [r3, #3]
 800821e:	f003 0303 	and.w	r3, r3, #3
 8008222:	2b03      	cmp	r3, #3
 8008224:	d10a      	bne.n	800823c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	799b      	ldrb	r3, [r3, #6]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <USBH_ParseEPDesc+0x1ae>
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	889b      	ldrh	r3, [r3, #4]
 8008232:	2b08      	cmp	r3, #8
 8008234:	d909      	bls.n	800824a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008236:	2303      	movs	r3, #3
 8008238:	75fb      	strb	r3, [r7, #23]
 800823a:	e006      	b.n	800824a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800823c:	2303      	movs	r3, #3
 800823e:	75fb      	strb	r3, [r7, #23]
 8008240:	e003      	b.n	800824a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008242:	2303      	movs	r3, #3
 8008244:	75fb      	strb	r3, [r7, #23]
 8008246:	e000      	b.n	800824a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008248:	bf00      	nop
  }

  return status;
 800824a:	7dfb      	ldrb	r3, [r7, #23]
}
 800824c:	4618      	mov	r0, r3
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	4613      	mov	r3, r2
 8008264:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3301      	adds	r3, #1
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b03      	cmp	r3, #3
 800826e:	d120      	bne.n	80082b2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	1e9a      	subs	r2, r3, #2
 8008276:	88fb      	ldrh	r3, [r7, #6]
 8008278:	4293      	cmp	r3, r2
 800827a:	bf28      	it	cs
 800827c:	4613      	movcs	r3, r2
 800827e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	3302      	adds	r3, #2
 8008284:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008286:	2300      	movs	r3, #0
 8008288:	82fb      	strh	r3, [r7, #22]
 800828a:	e00b      	b.n	80082a4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800828c:	8afb      	ldrh	r3, [r7, #22]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4413      	add	r3, r2
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	3301      	adds	r3, #1
 800829c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800829e:	8afb      	ldrh	r3, [r7, #22]
 80082a0:	3302      	adds	r3, #2
 80082a2:	82fb      	strh	r3, [r7, #22]
 80082a4:	8afa      	ldrh	r2, [r7, #22]
 80082a6:	8abb      	ldrh	r3, [r7, #20]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d3ef      	bcc.n	800828c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2200      	movs	r2, #0
 80082b0:	701a      	strb	r2, [r3, #0]
  }
}
 80082b2:	bf00      	nop
 80082b4:	371c      	adds	r7, #28
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80082be:	b480      	push	{r7}
 80082c0:	b085      	sub	sp, #20
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	7812      	ldrb	r2, [r2, #0]
 80082d0:	4413      	add	r3, r2
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4413      	add	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80082e4:	68fb      	ldr	r3, [r7, #12]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b086      	sub	sp, #24
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	60f8      	str	r0, [r7, #12]
 80082fa:	60b9      	str	r1, [r7, #8]
 80082fc:	4613      	mov	r3, r2
 80082fe:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008300:	2301      	movs	r3, #1
 8008302:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	789b      	ldrb	r3, [r3, #2]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d002      	beq.n	8008312 <USBH_CtlReq+0x20>
 800830c:	2b02      	cmp	r3, #2
 800830e:	d01d      	beq.n	800834c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008310:	e043      	b.n	800839a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	88fa      	ldrh	r2, [r7, #6]
 800831c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2201      	movs	r2, #1
 8008322:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2202      	movs	r2, #2
 8008328:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800832a:	2301      	movs	r3, #1
 800832c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2203      	movs	r2, #3
 8008332:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008342:	2300      	movs	r3, #0
 8008344:	2200      	movs	r2, #0
 8008346:	f000 fd45 	bl	8008dd4 <osMessageQueuePut>
      break;
 800834a:	e026      	b.n	800839a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 f829 	bl	80083a4 <USBH_HandleControl>
 8008352:	4603      	mov	r3, r0
 8008354:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008356:	7dfb      	ldrb	r3, [r7, #23]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <USBH_CtlReq+0x70>
 800835c:	7dfb      	ldrb	r3, [r7, #23]
 800835e:	2b03      	cmp	r3, #3
 8008360:	d106      	bne.n	8008370 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	761a      	strb	r2, [r3, #24]
 800836e:	e005      	b.n	800837c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008370:	7dfb      	ldrb	r3, [r7, #23]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d102      	bne.n	800837c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2201      	movs	r2, #1
 800837a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2203      	movs	r2, #3
 8008380:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008390:	2300      	movs	r3, #0
 8008392:	2200      	movs	r2, #0
 8008394:	f000 fd1e 	bl	8008dd4 <osMessageQueuePut>
      break;
 8008398:	bf00      	nop
  }
  return status;
 800839a:	7dfb      	ldrb	r3, [r7, #23]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80083ac:	2301      	movs	r3, #1
 80083ae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083b0:	2300      	movs	r3, #0
 80083b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	7e1b      	ldrb	r3, [r3, #24]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	2b0a      	cmp	r3, #10
 80083bc:	f200 8229 	bhi.w	8008812 <USBH_HandleControl+0x46e>
 80083c0:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <USBH_HandleControl+0x24>)
 80083c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c6:	bf00      	nop
 80083c8:	080083f5 	.word	0x080083f5
 80083cc:	0800840f 	.word	0x0800840f
 80083d0:	080084b1 	.word	0x080084b1
 80083d4:	080084d7 	.word	0x080084d7
 80083d8:	08008563 	.word	0x08008563
 80083dc:	0800858d 	.word	0x0800858d
 80083e0:	0800864f 	.word	0x0800864f
 80083e4:	08008671 	.word	0x08008671
 80083e8:	08008703 	.word	0x08008703
 80083ec:	08008729 	.word	0x08008729
 80083f0:	080087bb 	.word	0x080087bb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f103 0110 	add.w	r1, r3, #16
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	795b      	ldrb	r3, [r3, #5]
 80083fe:	461a      	mov	r2, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fa17 	bl	8008834 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2202      	movs	r2, #2
 800840a:	761a      	strb	r2, [r3, #24]
      break;
 800840c:	e20c      	b.n	8008828 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	795b      	ldrb	r3, [r3, #5]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f003 fd33 	bl	800be80 <USBH_LL_GetURBState>
 800841a:	4603      	mov	r3, r0
 800841c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d12c      	bne.n	800847e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	7c1b      	ldrb	r3, [r3, #16]
 8008428:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800842c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	8adb      	ldrh	r3, [r3, #22]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008436:	7b7b      	ldrb	r3, [r7, #13]
 8008438:	2b80      	cmp	r3, #128	@ 0x80
 800843a:	d103      	bne.n	8008444 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2203      	movs	r2, #3
 8008440:	761a      	strb	r2, [r3, #24]
 8008442:	e00d      	b.n	8008460 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2205      	movs	r2, #5
 8008448:	761a      	strb	r2, [r3, #24]
 800844a:	e009      	b.n	8008460 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800844c:	7b7b      	ldrb	r3, [r7, #13]
 800844e:	2b80      	cmp	r3, #128	@ 0x80
 8008450:	d103      	bne.n	800845a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2209      	movs	r2, #9
 8008456:	761a      	strb	r2, [r3, #24]
 8008458:	e002      	b.n	8008460 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2207      	movs	r2, #7
 800845e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2203      	movs	r2, #3
 8008464:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008474:	2300      	movs	r3, #0
 8008476:	2200      	movs	r2, #0
 8008478:	f000 fcac 	bl	8008dd4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800847c:	e1cb      	b.n	8008816 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	2b04      	cmp	r3, #4
 8008482:	d003      	beq.n	800848c <USBH_HandleControl+0xe8>
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	2b02      	cmp	r3, #2
 8008488:	f040 81c5 	bne.w	8008816 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	220b      	movs	r2, #11
 8008490:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2203      	movs	r2, #3
 8008496:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80084a6:	2300      	movs	r3, #0
 80084a8:	2200      	movs	r2, #0
 80084aa:	f000 fc93 	bl	8008dd4 <osMessageQueuePut>
      break;
 80084ae:	e1b2      	b.n	8008816 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6899      	ldr	r1, [r3, #8]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	899a      	ldrh	r2, [r3, #12]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	791b      	ldrb	r3, [r3, #4]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f9f2 	bl	80088b2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2204      	movs	r2, #4
 80084d2:	761a      	strb	r2, [r3, #24]
      break;
 80084d4:	e1a8      	b.n	8008828 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	791b      	ldrb	r3, [r3, #4]
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f003 fccf 	bl	800be80 <USBH_LL_GetURBState>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d110      	bne.n	800850e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2209      	movs	r2, #9
 80084f0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2203      	movs	r2, #3
 80084f6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008506:	2300      	movs	r3, #0
 8008508:	2200      	movs	r2, #0
 800850a:	f000 fc63 	bl	8008dd4 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	2b05      	cmp	r3, #5
 8008512:	d110      	bne.n	8008536 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008514:	2303      	movs	r3, #3
 8008516:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2203      	movs	r2, #3
 800851c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800852c:	2300      	movs	r3, #0
 800852e:	2200      	movs	r2, #0
 8008530:	f000 fc50 	bl	8008dd4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008534:	e171      	b.n	800881a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8008536:	7bbb      	ldrb	r3, [r7, #14]
 8008538:	2b04      	cmp	r3, #4
 800853a:	f040 816e 	bne.w	800881a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	220b      	movs	r2, #11
 8008542:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2203      	movs	r2, #3
 8008548:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008558:	2300      	movs	r3, #0
 800855a:	2200      	movs	r2, #0
 800855c:	f000 fc3a 	bl	8008dd4 <osMessageQueuePut>
      break;
 8008560:	e15b      	b.n	800881a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6899      	ldr	r1, [r3, #8]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	899a      	ldrh	r2, [r3, #12]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	795b      	ldrb	r3, [r3, #5]
 800856e:	2001      	movs	r0, #1
 8008570:	9000      	str	r0, [sp, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f978 	bl	8008868 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800857e:	b29a      	uxth	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2206      	movs	r2, #6
 8008588:	761a      	strb	r2, [r3, #24]
      break;
 800858a:	e14d      	b.n	8008828 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	795b      	ldrb	r3, [r3, #5]
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f003 fc74 	bl	800be80 <USBH_LL_GetURBState>
 8008598:	4603      	mov	r3, r0
 800859a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d111      	bne.n	80085c6 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2207      	movs	r2, #7
 80085a6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2203      	movs	r2, #3
 80085ac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80085bc:	2300      	movs	r3, #0
 80085be:	2200      	movs	r2, #0
 80085c0:	f000 fc08 	bl	8008dd4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085c4:	e12b      	b.n	800881e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	2b05      	cmp	r3, #5
 80085ca:	d113      	bne.n	80085f4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	220c      	movs	r2, #12
 80085d0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80085d2:	2303      	movs	r3, #3
 80085d4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2203      	movs	r2, #3
 80085da:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80085ea:	2300      	movs	r3, #0
 80085ec:	2200      	movs	r2, #0
 80085ee:	f000 fbf1 	bl	8008dd4 <osMessageQueuePut>
      break;
 80085f2:	e114      	b.n	800881e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d111      	bne.n	800861e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2205      	movs	r2, #5
 80085fe:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2203      	movs	r2, #3
 8008604:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008614:	2300      	movs	r3, #0
 8008616:	2200      	movs	r2, #0
 8008618:	f000 fbdc 	bl	8008dd4 <osMessageQueuePut>
      break;
 800861c:	e0ff      	b.n	800881e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	2b04      	cmp	r3, #4
 8008622:	f040 80fc 	bne.w	800881e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	220b      	movs	r2, #11
 800862a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800862c:	2302      	movs	r3, #2
 800862e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2203      	movs	r2, #3
 8008634:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008644:	2300      	movs	r3, #0
 8008646:	2200      	movs	r2, #0
 8008648:	f000 fbc4 	bl	8008dd4 <osMessageQueuePut>
      break;
 800864c:	e0e7      	b.n	800881e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	791b      	ldrb	r3, [r3, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	2100      	movs	r1, #0
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f92b 	bl	80088b2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008662:	b29a      	uxth	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2208      	movs	r2, #8
 800866c:	761a      	strb	r2, [r3, #24]

      break;
 800866e:	e0db      	b.n	8008828 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	791b      	ldrb	r3, [r3, #4]
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f003 fc02 	bl	800be80 <USBH_LL_GetURBState>
 800867c:	4603      	mov	r3, r0
 800867e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d113      	bne.n	80086ae <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	220d      	movs	r2, #13
 800868a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2203      	movs	r2, #3
 8008694:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80086a4:	2300      	movs	r3, #0
 80086a6:	2200      	movs	r2, #0
 80086a8:	f000 fb94 	bl	8008dd4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086ac:	e0b9      	b.n	8008822 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	d111      	bne.n	80086d8 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	220b      	movs	r2, #11
 80086b8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2203      	movs	r2, #3
 80086be:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80086ce:	2300      	movs	r3, #0
 80086d0:	2200      	movs	r2, #0
 80086d2:	f000 fb7f 	bl	8008dd4 <osMessageQueuePut>
      break;
 80086d6:	e0a4      	b.n	8008822 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	2b05      	cmp	r3, #5
 80086dc:	f040 80a1 	bne.w	8008822 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80086e0:	2303      	movs	r3, #3
 80086e2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2203      	movs	r2, #3
 80086e8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80086f8:	2300      	movs	r3, #0
 80086fa:	2200      	movs	r2, #0
 80086fc:	f000 fb6a 	bl	8008dd4 <osMessageQueuePut>
      break;
 8008700:	e08f      	b.n	8008822 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	795b      	ldrb	r3, [r3, #5]
 8008706:	2201      	movs	r2, #1
 8008708:	9200      	str	r2, [sp, #0]
 800870a:	2200      	movs	r2, #0
 800870c:	2100      	movs	r1, #0
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f8aa 	bl	8008868 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800871a:	b29a      	uxth	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	220a      	movs	r2, #10
 8008724:	761a      	strb	r2, [r3, #24]
      break;
 8008726:	e07f      	b.n	8008828 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	795b      	ldrb	r3, [r3, #5]
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f003 fba6 	bl	800be80 <USBH_LL_GetURBState>
 8008734:	4603      	mov	r3, r0
 8008736:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008738:	7bbb      	ldrb	r3, [r7, #14]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d113      	bne.n	8008766 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	220d      	movs	r2, #13
 8008746:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2203      	movs	r2, #3
 800874c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800875c:	2300      	movs	r3, #0
 800875e:	2200      	movs	r2, #0
 8008760:	f000 fb38 	bl	8008dd4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008764:	e05f      	b.n	8008826 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008766:	7bbb      	ldrb	r3, [r7, #14]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d111      	bne.n	8008790 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2209      	movs	r2, #9
 8008770:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2203      	movs	r2, #3
 8008776:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008786:	2300      	movs	r3, #0
 8008788:	2200      	movs	r2, #0
 800878a:	f000 fb23 	bl	8008dd4 <osMessageQueuePut>
      break;
 800878e:	e04a      	b.n	8008826 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	2b04      	cmp	r3, #4
 8008794:	d147      	bne.n	8008826 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	220b      	movs	r2, #11
 800879a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2203      	movs	r2, #3
 80087a0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80087b0:	2300      	movs	r3, #0
 80087b2:	2200      	movs	r2, #0
 80087b4:	f000 fb0e 	bl	8008dd4 <osMessageQueuePut>
      break;
 80087b8:	e035      	b.n	8008826 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	7e5b      	ldrb	r3, [r3, #25]
 80087be:	3301      	adds	r3, #1
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	765a      	strb	r2, [r3, #25]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	7e5b      	ldrb	r3, [r3, #25]
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d806      	bhi.n	80087dc <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80087da:	e025      	b.n	8008828 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087e2:	2106      	movs	r1, #6
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	795b      	ldrb	r3, [r3, #5]
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f90d 	bl	8008a14 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	791b      	ldrb	r3, [r3, #4]
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f907 	bl	8008a14 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800880c:	2302      	movs	r3, #2
 800880e:	73fb      	strb	r3, [r7, #15]
      break;
 8008810:	e00a      	b.n	8008828 <USBH_HandleControl+0x484>

    default:
      break;
 8008812:	bf00      	nop
 8008814:	e008      	b.n	8008828 <USBH_HandleControl+0x484>
      break;
 8008816:	bf00      	nop
 8008818:	e006      	b.n	8008828 <USBH_HandleControl+0x484>
      break;
 800881a:	bf00      	nop
 800881c:	e004      	b.n	8008828 <USBH_HandleControl+0x484>
      break;
 800881e:	bf00      	nop
 8008820:	e002      	b.n	8008828 <USBH_HandleControl+0x484>
      break;
 8008822:	bf00      	nop
 8008824:	e000      	b.n	8008828 <USBH_HandleControl+0x484>
      break;
 8008826:	bf00      	nop
  }

  return status;
 8008828:	7bfb      	ldrb	r3, [r7, #15]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop

08008834 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b088      	sub	sp, #32
 8008838:	af04      	add	r7, sp, #16
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	4613      	mov	r3, r2
 8008840:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008842:	79f9      	ldrb	r1, [r7, #7]
 8008844:	2300      	movs	r3, #0
 8008846:	9303      	str	r3, [sp, #12]
 8008848:	2308      	movs	r3, #8
 800884a:	9302      	str	r3, [sp, #8]
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	9301      	str	r3, [sp, #4]
 8008850:	2300      	movs	r3, #0
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	2300      	movs	r3, #0
 8008856:	2200      	movs	r2, #0
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f003 fae0 	bl	800be1e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b088      	sub	sp, #32
 800886c:	af04      	add	r7, sp, #16
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	4611      	mov	r1, r2
 8008874:	461a      	mov	r2, r3
 8008876:	460b      	mov	r3, r1
 8008878:	80fb      	strh	r3, [r7, #6]
 800887a:	4613      	mov	r3, r2
 800887c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008888:	2300      	movs	r3, #0
 800888a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800888c:	7979      	ldrb	r1, [r7, #5]
 800888e:	7e3b      	ldrb	r3, [r7, #24]
 8008890:	9303      	str	r3, [sp, #12]
 8008892:	88fb      	ldrh	r3, [r7, #6]
 8008894:	9302      	str	r3, [sp, #8]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	9301      	str	r3, [sp, #4]
 800889a:	2301      	movs	r3, #1
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	2300      	movs	r3, #0
 80088a0:	2200      	movs	r2, #0
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f003 fabb 	bl	800be1e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b088      	sub	sp, #32
 80088b6:	af04      	add	r7, sp, #16
 80088b8:	60f8      	str	r0, [r7, #12]
 80088ba:	60b9      	str	r1, [r7, #8]
 80088bc:	4611      	mov	r1, r2
 80088be:	461a      	mov	r2, r3
 80088c0:	460b      	mov	r3, r1
 80088c2:	80fb      	strh	r3, [r7, #6]
 80088c4:	4613      	mov	r3, r2
 80088c6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088c8:	7979      	ldrb	r1, [r7, #5]
 80088ca:	2300      	movs	r3, #0
 80088cc:	9303      	str	r3, [sp, #12]
 80088ce:	88fb      	ldrh	r3, [r7, #6]
 80088d0:	9302      	str	r3, [sp, #8]
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	2301      	movs	r3, #1
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	2300      	movs	r3, #0
 80088dc:	2201      	movs	r2, #1
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f003 fa9d 	bl	800be1e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80088e4:	2300      	movs	r3, #0

}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b088      	sub	sp, #32
 80088f2:	af04      	add	r7, sp, #16
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	4611      	mov	r1, r2
 80088fa:	461a      	mov	r2, r3
 80088fc:	460b      	mov	r3, r1
 80088fe:	80fb      	strh	r3, [r7, #6]
 8008900:	4613      	mov	r3, r2
 8008902:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008912:	7979      	ldrb	r1, [r7, #5]
 8008914:	7e3b      	ldrb	r3, [r7, #24]
 8008916:	9303      	str	r3, [sp, #12]
 8008918:	88fb      	ldrh	r3, [r7, #6]
 800891a:	9302      	str	r3, [sp, #8]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	9301      	str	r3, [sp, #4]
 8008920:	2301      	movs	r3, #1
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	2302      	movs	r3, #2
 8008926:	2200      	movs	r2, #0
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f003 fa78 	bl	800be1e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af04      	add	r7, sp, #16
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	4611      	mov	r1, r2
 8008944:	461a      	mov	r2, r3
 8008946:	460b      	mov	r3, r1
 8008948:	80fb      	strh	r3, [r7, #6]
 800894a:	4613      	mov	r3, r2
 800894c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800894e:	7979      	ldrb	r1, [r7, #5]
 8008950:	2300      	movs	r3, #0
 8008952:	9303      	str	r3, [sp, #12]
 8008954:	88fb      	ldrh	r3, [r7, #6]
 8008956:	9302      	str	r3, [sp, #8]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	9301      	str	r3, [sp, #4]
 800895c:	2301      	movs	r3, #1
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	2302      	movs	r3, #2
 8008962:	2201      	movs	r2, #1
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f003 fa5a 	bl	800be1e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af04      	add	r7, sp, #16
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	4608      	mov	r0, r1
 800897e:	4611      	mov	r1, r2
 8008980:	461a      	mov	r2, r3
 8008982:	4603      	mov	r3, r0
 8008984:	70fb      	strb	r3, [r7, #3]
 8008986:	460b      	mov	r3, r1
 8008988:	70bb      	strb	r3, [r7, #2]
 800898a:	4613      	mov	r3, r2
 800898c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800898e:	7878      	ldrb	r0, [r7, #1]
 8008990:	78ba      	ldrb	r2, [r7, #2]
 8008992:	78f9      	ldrb	r1, [r7, #3]
 8008994:	8b3b      	ldrh	r3, [r7, #24]
 8008996:	9302      	str	r3, [sp, #8]
 8008998:	7d3b      	ldrb	r3, [r7, #20]
 800899a:	9301      	str	r3, [sp, #4]
 800899c:	7c3b      	ldrb	r3, [r7, #16]
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	4603      	mov	r3, r0
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f003 f9ed 	bl	800bd82 <USBH_LL_OpenPipe>

  return USBH_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	460b      	mov	r3, r1
 80089bc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80089be:	78fb      	ldrb	r3, [r7, #3]
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f003 fa0c 	bl	800bde0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	460b      	mov	r3, r1
 80089dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f836 	bl	8008a50 <USBH_GetFreePipe>
 80089e4:	4603      	mov	r3, r0
 80089e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80089e8:	89fb      	ldrh	r3, [r7, #14]
 80089ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d00a      	beq.n	8008a08 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80089f2:	78fa      	ldrb	r2, [r7, #3]
 80089f4:	89fb      	ldrh	r3, [r7, #14]
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089fe:	6879      	ldr	r1, [r7, #4]
 8008a00:	33e0      	adds	r3, #224	@ 0xe0
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008a08:	89fb      	ldrh	r3, [r7, #14]
 8008a0a:	b2db      	uxtb	r3, r3
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008a20:	78fb      	ldrb	r3, [r7, #3]
 8008a22:	2b0f      	cmp	r3, #15
 8008a24:	d80d      	bhi.n	8008a42 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008a26:	78fb      	ldrb	r3, [r7, #3]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	33e0      	adds	r3, #224	@ 0xe0
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	78fb      	ldrb	r3, [r7, #3]
 8008a34:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a38:	6879      	ldr	r1, [r7, #4]
 8008a3a:	33e0      	adds	r3, #224	@ 0xe0
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	440b      	add	r3, r1
 8008a40:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73fb      	strb	r3, [r7, #15]
 8008a60:	e00f      	b.n	8008a82 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	33e0      	adds	r3, #224	@ 0xe0
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d102      	bne.n	8008a7c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	e007      	b.n	8008a8c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	73fb      	strb	r3, [r7, #15]
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
 8008a84:	2b0f      	cmp	r3, #15
 8008a86:	d9ec      	bls.n	8008a62 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008a88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <__NVIC_SetPriority>:
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	6039      	str	r1, [r7, #0]
 8008aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	db0a      	blt.n	8008ac2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	490c      	ldr	r1, [pc, #48]	@ (8008ae4 <__NVIC_SetPriority+0x4c>)
 8008ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ab6:	0112      	lsls	r2, r2, #4
 8008ab8:	b2d2      	uxtb	r2, r2
 8008aba:	440b      	add	r3, r1
 8008abc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008ac0:	e00a      	b.n	8008ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	4908      	ldr	r1, [pc, #32]	@ (8008ae8 <__NVIC_SetPriority+0x50>)
 8008ac8:	79fb      	ldrb	r3, [r7, #7]
 8008aca:	f003 030f 	and.w	r3, r3, #15
 8008ace:	3b04      	subs	r3, #4
 8008ad0:	0112      	lsls	r2, r2, #4
 8008ad2:	b2d2      	uxtb	r2, r2
 8008ad4:	440b      	add	r3, r1
 8008ad6:	761a      	strb	r2, [r3, #24]
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	e000e100 	.word	0xe000e100
 8008ae8:	e000ed00 	.word	0xe000ed00

08008aec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008af0:	2100      	movs	r1, #0
 8008af2:	f06f 0004 	mvn.w	r0, #4
 8008af6:	f7ff ffcf 	bl	8008a98 <__NVIC_SetPriority>
#endif
}
 8008afa:	bf00      	nop
 8008afc:	bd80      	pop	{r7, pc}
	...

08008b00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b06:	f3ef 8305 	mrs	r3, IPSR
 8008b0a:	603b      	str	r3, [r7, #0]
  return(result);
 8008b0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008b12:	f06f 0305 	mvn.w	r3, #5
 8008b16:	607b      	str	r3, [r7, #4]
 8008b18:	e00c      	b.n	8008b34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8008b44 <osKernelInitialize+0x44>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d105      	bne.n	8008b2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008b22:	4b08      	ldr	r3, [pc, #32]	@ (8008b44 <osKernelInitialize+0x44>)
 8008b24:	2201      	movs	r2, #1
 8008b26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	607b      	str	r3, [r7, #4]
 8008b2c:	e002      	b.n	8008b34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008b2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008b34:	687b      	ldr	r3, [r7, #4]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	20000208 	.word	0x20000208

08008b48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b4e:	f3ef 8305 	mrs	r3, IPSR
 8008b52:	603b      	str	r3, [r7, #0]
  return(result);
 8008b54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008b5a:	f06f 0305 	mvn.w	r3, #5
 8008b5e:	607b      	str	r3, [r7, #4]
 8008b60:	e010      	b.n	8008b84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008b62:	4b0b      	ldr	r3, [pc, #44]	@ (8008b90 <osKernelStart+0x48>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d109      	bne.n	8008b7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008b6a:	f7ff ffbf 	bl	8008aec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008b6e:	4b08      	ldr	r3, [pc, #32]	@ (8008b90 <osKernelStart+0x48>)
 8008b70:	2202      	movs	r2, #2
 8008b72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008b74:	f001 fa68 	bl	800a048 <vTaskStartScheduler>
      stat = osOK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	607b      	str	r3, [r7, #4]
 8008b7c:	e002      	b.n	8008b84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008b7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008b84:	687b      	ldr	r3, [r7, #4]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20000208 	.word	0x20000208

08008b94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08e      	sub	sp, #56	@ 0x38
 8008b98:	af04      	add	r7, sp, #16
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ba4:	f3ef 8305 	mrs	r3, IPSR
 8008ba8:	617b      	str	r3, [r7, #20]
  return(result);
 8008baa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d17e      	bne.n	8008cae <osThreadNew+0x11a>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d07b      	beq.n	8008cae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008bb6:	2380      	movs	r3, #128	@ 0x80
 8008bb8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008bba:	2318      	movs	r3, #24
 8008bbc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008bc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008bc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d045      	beq.n	8008c5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d002      	beq.n	8008bdc <osThreadNew+0x48>
        name = attr->name;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d008      	beq.n	8008c02 <osThreadNew+0x6e>
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	2b38      	cmp	r3, #56	@ 0x38
 8008bf4:	d805      	bhi.n	8008c02 <osThreadNew+0x6e>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <osThreadNew+0x72>
        return (NULL);
 8008c02:	2300      	movs	r3, #0
 8008c04:	e054      	b.n	8008cb0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	089b      	lsrs	r3, r3, #2
 8008c14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00e      	beq.n	8008c3c <osThreadNew+0xa8>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	2b5b      	cmp	r3, #91	@ 0x5b
 8008c24:	d90a      	bls.n	8008c3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d006      	beq.n	8008c3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <osThreadNew+0xa8>
        mem = 1;
 8008c36:	2301      	movs	r3, #1
 8008c38:	61bb      	str	r3, [r7, #24]
 8008c3a:	e010      	b.n	8008c5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10c      	bne.n	8008c5e <osThreadNew+0xca>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d108      	bne.n	8008c5e <osThreadNew+0xca>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d104      	bne.n	8008c5e <osThreadNew+0xca>
          mem = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	61bb      	str	r3, [r7, #24]
 8008c58:	e001      	b.n	8008c5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d110      	bne.n	8008c86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008c6c:	9202      	str	r2, [sp, #8]
 8008c6e:	9301      	str	r3, [sp, #4]
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	6a3a      	ldr	r2, [r7, #32]
 8008c78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f001 f808 	bl	8009c90 <xTaskCreateStatic>
 8008c80:	4603      	mov	r3, r0
 8008c82:	613b      	str	r3, [r7, #16]
 8008c84:	e013      	b.n	8008cae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d110      	bne.n	8008cae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	f107 0310 	add.w	r3, r7, #16
 8008c94:	9301      	str	r3, [sp, #4]
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f001 f856 	bl	8009d50 <xTaskCreate>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d001      	beq.n	8008cae <osThreadNew+0x11a>
            hTask = NULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008cae:	693b      	ldr	r3, [r7, #16]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3728      	adds	r7, #40	@ 0x28
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cc0:	f3ef 8305 	mrs	r3, IPSR
 8008cc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008cc6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <osDelay+0x1c>
    stat = osErrorISR;
 8008ccc:	f06f 0305 	mvn.w	r3, #5
 8008cd0:	60fb      	str	r3, [r7, #12]
 8008cd2:	e007      	b.n	8008ce4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 f97c 	bl	8009fdc <vTaskDelay>
    }
  }

  return (stat);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b08a      	sub	sp, #40	@ 0x28
 8008cf2:	af02      	add	r7, sp, #8
 8008cf4:	60f8      	str	r0, [r7, #12]
 8008cf6:	60b9      	str	r1, [r7, #8]
 8008cf8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cfe:	f3ef 8305 	mrs	r3, IPSR
 8008d02:	613b      	str	r3, [r7, #16]
  return(result);
 8008d04:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d15f      	bne.n	8008dca <osMessageQueueNew+0xdc>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d05c      	beq.n	8008dca <osMessageQueueNew+0xdc>
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d059      	beq.n	8008dca <osMessageQueueNew+0xdc>
    mem = -1;
 8008d16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d029      	beq.n	8008d76 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d012      	beq.n	8008d50 <osMessageQueueNew+0x62>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	2b4f      	cmp	r3, #79	@ 0x4f
 8008d30:	d90e      	bls.n	8008d50 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d00a      	beq.n	8008d50 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	695a      	ldr	r2, [r3, #20]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	68b9      	ldr	r1, [r7, #8]
 8008d42:	fb01 f303 	mul.w	r3, r1, r3
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d302      	bcc.n	8008d50 <osMessageQueueNew+0x62>
        mem = 1;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	61bb      	str	r3, [r7, #24]
 8008d4e:	e014      	b.n	8008d7a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d110      	bne.n	8008d7a <osMessageQueueNew+0x8c>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10c      	bne.n	8008d7a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d108      	bne.n	8008d7a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <osMessageQueueNew+0x8c>
          mem = 0;
 8008d70:	2300      	movs	r3, #0
 8008d72:	61bb      	str	r3, [r7, #24]
 8008d74:	e001      	b.n	8008d7a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d10b      	bne.n	8008d98 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691a      	ldr	r2, [r3, #16]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	2100      	movs	r1, #0
 8008d8a:	9100      	str	r1, [sp, #0]
 8008d8c:	68b9      	ldr	r1, [r7, #8]
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 fa30 	bl	80091f4 <xQueueGenericCreateStatic>
 8008d94:	61f8      	str	r0, [r7, #28]
 8008d96:	e008      	b.n	8008daa <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d105      	bne.n	8008daa <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008d9e:	2200      	movs	r2, #0
 8008da0:	68b9      	ldr	r1, [r7, #8]
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f000 faa3 	bl	80092ee <xQueueGenericCreate>
 8008da8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00c      	beq.n	8008dca <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <osMessageQueueNew+0xd0>
        name = attr->name;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	617b      	str	r3, [r7, #20]
 8008dbc:	e001      	b.n	8008dc2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008dc2:	6979      	ldr	r1, [r7, #20]
 8008dc4:	69f8      	ldr	r0, [r7, #28]
 8008dc6:	f000 ff05 	bl	8009bd4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008dca:	69fb      	ldr	r3, [r7, #28]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3720      	adds	r7, #32
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b088      	sub	sp, #32
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	603b      	str	r3, [r7, #0]
 8008de0:	4613      	mov	r3, r2
 8008de2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dec:	f3ef 8305 	mrs	r3, IPSR
 8008df0:	617b      	str	r3, [r7, #20]
  return(result);
 8008df2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d028      	beq.n	8008e4a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d005      	beq.n	8008e0a <osMessageQueuePut+0x36>
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <osMessageQueuePut+0x36>
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008e0a:	f06f 0303 	mvn.w	r3, #3
 8008e0e:	61fb      	str	r3, [r7, #28]
 8008e10:	e038      	b.n	8008e84 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008e12:	2300      	movs	r3, #0
 8008e14:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008e16:	f107 0210 	add.w	r2, r7, #16
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	68b9      	ldr	r1, [r7, #8]
 8008e1e:	69b8      	ldr	r0, [r7, #24]
 8008e20:	f000 fbc6 	bl	80095b0 <xQueueGenericSendFromISR>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d003      	beq.n	8008e32 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008e2a:	f06f 0302 	mvn.w	r3, #2
 8008e2e:	61fb      	str	r3, [r7, #28]
 8008e30:	e028      	b.n	8008e84 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d025      	beq.n	8008e84 <osMessageQueuePut+0xb0>
 8008e38:	4b15      	ldr	r3, [pc, #84]	@ (8008e90 <osMessageQueuePut+0xbc>)
 8008e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	e01c      	b.n	8008e84 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <osMessageQueuePut+0x82>
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d103      	bne.n	8008e5e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008e56:	f06f 0303 	mvn.w	r3, #3
 8008e5a:	61fb      	str	r3, [r7, #28]
 8008e5c:	e012      	b.n	8008e84 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008e5e:	2300      	movs	r3, #0
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	68b9      	ldr	r1, [r7, #8]
 8008e64:	69b8      	ldr	r0, [r7, #24]
 8008e66:	f000 faa1 	bl	80093ac <xQueueGenericSend>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d009      	beq.n	8008e84 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008e76:	f06f 0301 	mvn.w	r3, #1
 8008e7a:	61fb      	str	r3, [r7, #28]
 8008e7c:	e002      	b.n	8008e84 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008e7e:	f06f 0302 	mvn.w	r3, #2
 8008e82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008e84:	69fb      	ldr	r3, [r7, #28]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3720      	adds	r7, #32
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	e000ed04 	.word	0xe000ed04

08008e94 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
 8008ea0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eaa:	f3ef 8305 	mrs	r3, IPSR
 8008eae:	617b      	str	r3, [r7, #20]
  return(result);
 8008eb0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d028      	beq.n	8008f08 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d005      	beq.n	8008ec8 <osMessageQueueGet+0x34>
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d002      	beq.n	8008ec8 <osMessageQueueGet+0x34>
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d003      	beq.n	8008ed0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008ec8:	f06f 0303 	mvn.w	r3, #3
 8008ecc:	61fb      	str	r3, [r7, #28]
 8008ece:	e037      	b.n	8008f40 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008ed4:	f107 0310 	add.w	r3, r7, #16
 8008ed8:	461a      	mov	r2, r3
 8008eda:	68b9      	ldr	r1, [r7, #8]
 8008edc:	69b8      	ldr	r0, [r7, #24]
 8008ede:	f000 fce7 	bl	80098b0 <xQueueReceiveFromISR>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d003      	beq.n	8008ef0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008ee8:	f06f 0302 	mvn.w	r3, #2
 8008eec:	61fb      	str	r3, [r7, #28]
 8008eee:	e027      	b.n	8008f40 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d024      	beq.n	8008f40 <osMessageQueueGet+0xac>
 8008ef6:	4b15      	ldr	r3, [pc, #84]	@ (8008f4c <osMessageQueueGet+0xb8>)
 8008ef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	e01b      	b.n	8008f40 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d002      	beq.n	8008f14 <osMessageQueueGet+0x80>
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d103      	bne.n	8008f1c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008f14:	f06f 0303 	mvn.w	r3, #3
 8008f18:	61fb      	str	r3, [r7, #28]
 8008f1a:	e011      	b.n	8008f40 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	68b9      	ldr	r1, [r7, #8]
 8008f20:	69b8      	ldr	r0, [r7, #24]
 8008f22:	f000 fbe3 	bl	80096ec <xQueueReceive>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d009      	beq.n	8008f40 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d003      	beq.n	8008f3a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008f32:	f06f 0301 	mvn.w	r3, #1
 8008f36:	61fb      	str	r3, [r7, #28]
 8008f38:	e002      	b.n	8008f40 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008f3a:	f06f 0302 	mvn.w	r3, #2
 8008f3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008f40:	69fb      	ldr	r3, [r7, #28]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3720      	adds	r7, #32
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	e000ed04 	.word	0xe000ed04

08008f50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	4a07      	ldr	r2, [pc, #28]	@ (8008f7c <vApplicationGetIdleTaskMemory+0x2c>)
 8008f60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	4a06      	ldr	r2, [pc, #24]	@ (8008f80 <vApplicationGetIdleTaskMemory+0x30>)
 8008f66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2280      	movs	r2, #128	@ 0x80
 8008f6c:	601a      	str	r2, [r3, #0]
}
 8008f6e:	bf00      	nop
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	2000020c 	.word	0x2000020c
 8008f80:	20000268 	.word	0x20000268

08008f84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4a07      	ldr	r2, [pc, #28]	@ (8008fb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008f94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	4a06      	ldr	r2, [pc, #24]	@ (8008fb4 <vApplicationGetTimerTaskMemory+0x30>)
 8008f9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008fa2:	601a      	str	r2, [r3, #0]
}
 8008fa4:	bf00      	nop
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	20000468 	.word	0x20000468
 8008fb4:	200004c4 	.word	0x200004c4

08008fb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f103 0208 	add.w	r2, r3, #8
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f103 0208 	add.w	r2, r3, #8
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f103 0208 	add.w	r2, r3, #8
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009012:	b480      	push	{r7}
 8009014:	b085      	sub	sp, #20
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	689a      	ldr	r2, [r3, #8]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	601a      	str	r2, [r3, #0]
}
 800904e:	bf00      	nop
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009070:	d103      	bne.n	800907a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	e00c      	b.n	8009094 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	3308      	adds	r3, #8
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	e002      	b.n	8009088 <vListInsert+0x2e>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	429a      	cmp	r2, r3
 8009092:	d2f6      	bcs.n	8009082 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	601a      	str	r2, [r3, #0]
}
 80090c0:	bf00      	nop
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	6892      	ldr	r2, [r2, #8]
 80090e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	6852      	ldr	r2, [r2, #4]
 80090ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d103      	bne.n	8009100 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689a      	ldr	r2, [r3, #8]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	1e5a      	subs	r2, r3, #1
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10b      	bne.n	800914c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009146:	bf00      	nop
 8009148:	bf00      	nop
 800914a:	e7fd      	b.n	8009148 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800914c:	f002 f934 	bl	800b3b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009158:	68f9      	ldr	r1, [r7, #12]
 800915a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800915c:	fb01 f303 	mul.w	r3, r1, r3
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800917c:	3b01      	subs	r3, #1
 800917e:	68f9      	ldr	r1, [r7, #12]
 8009180:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009182:	fb01 f303 	mul.w	r3, r1, r3
 8009186:	441a      	add	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	22ff      	movs	r2, #255	@ 0xff
 8009190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	22ff      	movs	r2, #255	@ 0xff
 8009198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d114      	bne.n	80091cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d01a      	beq.n	80091e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	3310      	adds	r3, #16
 80091ae:	4618      	mov	r0, r3
 80091b0:	f001 f9d8 	bl	800a564 <xTaskRemoveFromEventList>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d012      	beq.n	80091e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80091ba:	4b0d      	ldr	r3, [pc, #52]	@ (80091f0 <xQueueGenericReset+0xd0>)
 80091bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	e009      	b.n	80091e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	3310      	adds	r3, #16
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7ff fef1 	bl	8008fb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3324      	adds	r3, #36	@ 0x24
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff feec 	bl	8008fb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80091e0:	f002 f91c 	bl	800b41c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80091e4:	2301      	movs	r3, #1
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	e000ed04 	.word	0xe000ed04

080091f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08e      	sub	sp, #56	@ 0x38
 80091f8:	af02      	add	r7, sp, #8
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10b      	bne.n	8009220 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800921a:	bf00      	nop
 800921c:	bf00      	nop
 800921e:	e7fd      	b.n	800921c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10b      	bne.n	800923e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009238:	bf00      	nop
 800923a:	bf00      	nop
 800923c:	e7fd      	b.n	800923a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d002      	beq.n	800924a <xQueueGenericCreateStatic+0x56>
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <xQueueGenericCreateStatic+0x5a>
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <xQueueGenericCreateStatic+0x5c>
 800924e:	2300      	movs	r3, #0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10b      	bne.n	800926c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	623b      	str	r3, [r7, #32]
}
 8009266:	bf00      	nop
 8009268:	bf00      	nop
 800926a:	e7fd      	b.n	8009268 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d102      	bne.n	8009278 <xQueueGenericCreateStatic+0x84>
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <xQueueGenericCreateStatic+0x88>
 8009278:	2301      	movs	r3, #1
 800927a:	e000      	b.n	800927e <xQueueGenericCreateStatic+0x8a>
 800927c:	2300      	movs	r3, #0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10b      	bne.n	800929a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	61fb      	str	r3, [r7, #28]
}
 8009294:	bf00      	nop
 8009296:	bf00      	nop
 8009298:	e7fd      	b.n	8009296 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800929a:	2350      	movs	r3, #80	@ 0x50
 800929c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b50      	cmp	r3, #80	@ 0x50
 80092a2:	d00b      	beq.n	80092bc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	61bb      	str	r3, [r7, #24]
}
 80092b6:	bf00      	nop
 80092b8:	bf00      	nop
 80092ba:	e7fd      	b.n	80092b8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80092bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80092c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00d      	beq.n	80092e4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80092c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80092d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	4613      	mov	r3, r2
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	68b9      	ldr	r1, [r7, #8]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 f840 	bl	8009364 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3730      	adds	r7, #48	@ 0x30
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b08a      	sub	sp, #40	@ 0x28
 80092f2:	af02      	add	r7, sp, #8
 80092f4:	60f8      	str	r0, [r7, #12]
 80092f6:	60b9      	str	r1, [r7, #8]
 80092f8:	4613      	mov	r3, r2
 80092fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10b      	bne.n	800931a <xQueueGenericCreate+0x2c>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	613b      	str	r3, [r7, #16]
}
 8009314:	bf00      	nop
 8009316:	bf00      	nop
 8009318:	e7fd      	b.n	8009316 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	fb02 f303 	mul.w	r3, r2, r3
 8009322:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	3350      	adds	r3, #80	@ 0x50
 8009328:	4618      	mov	r0, r3
 800932a:	f002 f967 	bl	800b5fc <pvPortMalloc>
 800932e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d011      	beq.n	800935a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	3350      	adds	r3, #80	@ 0x50
 800933e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009348:	79fa      	ldrb	r2, [r7, #7]
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	4613      	mov	r3, r2
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 f805 	bl	8009364 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800935a:	69bb      	ldr	r3, [r7, #24]
	}
 800935c:	4618      	mov	r0, r3
 800935e:	3720      	adds	r7, #32
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d103      	bne.n	8009380 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	601a      	str	r2, [r3, #0]
 800937e:	e002      	b.n	8009386 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009392:	2101      	movs	r1, #1
 8009394:	69b8      	ldr	r0, [r7, #24]
 8009396:	f7ff fec3 	bl	8009120 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	78fa      	ldrb	r2, [r7, #3]
 800939e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80093a2:	bf00      	nop
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b08e      	sub	sp, #56	@ 0x38
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
 80093b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80093ba:	2300      	movs	r3, #0
 80093bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80093c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10b      	bne.n	80093e0 <xQueueGenericSend+0x34>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80093da:	bf00      	nop
 80093dc:	bf00      	nop
 80093de:	e7fd      	b.n	80093dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d103      	bne.n	80093ee <xQueueGenericSend+0x42>
 80093e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <xQueueGenericSend+0x46>
 80093ee:	2301      	movs	r3, #1
 80093f0:	e000      	b.n	80093f4 <xQueueGenericSend+0x48>
 80093f2:	2300      	movs	r3, #0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10b      	bne.n	8009410 <xQueueGenericSend+0x64>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800940a:	bf00      	nop
 800940c:	bf00      	nop
 800940e:	e7fd      	b.n	800940c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b02      	cmp	r3, #2
 8009414:	d103      	bne.n	800941e <xQueueGenericSend+0x72>
 8009416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800941a:	2b01      	cmp	r3, #1
 800941c:	d101      	bne.n	8009422 <xQueueGenericSend+0x76>
 800941e:	2301      	movs	r3, #1
 8009420:	e000      	b.n	8009424 <xQueueGenericSend+0x78>
 8009422:	2300      	movs	r3, #0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10b      	bne.n	8009440 <xQueueGenericSend+0x94>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	623b      	str	r3, [r7, #32]
}
 800943a:	bf00      	nop
 800943c:	bf00      	nop
 800943e:	e7fd      	b.n	800943c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009440:	f001 fa50 	bl	800a8e4 <xTaskGetSchedulerState>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d102      	bne.n	8009450 <xQueueGenericSend+0xa4>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <xQueueGenericSend+0xa8>
 8009450:	2301      	movs	r3, #1
 8009452:	e000      	b.n	8009456 <xQueueGenericSend+0xaa>
 8009454:	2300      	movs	r3, #0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10b      	bne.n	8009472 <xQueueGenericSend+0xc6>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	61fb      	str	r3, [r7, #28]
}
 800946c:	bf00      	nop
 800946e:	bf00      	nop
 8009470:	e7fd      	b.n	800946e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009472:	f001 ffa1 	bl	800b3b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800947a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800947e:	429a      	cmp	r2, r3
 8009480:	d302      	bcc.n	8009488 <xQueueGenericSend+0xdc>
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b02      	cmp	r3, #2
 8009486:	d129      	bne.n	80094dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	68b9      	ldr	r1, [r7, #8]
 800948c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800948e:	f000 fa91 	bl	80099b4 <prvCopyDataToQueue>
 8009492:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009498:	2b00      	cmp	r3, #0
 800949a:	d010      	beq.n	80094be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800949c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949e:	3324      	adds	r3, #36	@ 0x24
 80094a0:	4618      	mov	r0, r3
 80094a2:	f001 f85f 	bl	800a564 <xTaskRemoveFromEventList>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d013      	beq.n	80094d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80094ac:	4b3f      	ldr	r3, [pc, #252]	@ (80095ac <xQueueGenericSend+0x200>)
 80094ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	e00a      	b.n	80094d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80094be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d007      	beq.n	80094d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80094c4:	4b39      	ldr	r3, [pc, #228]	@ (80095ac <xQueueGenericSend+0x200>)
 80094c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094ca:	601a      	str	r2, [r3, #0]
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80094d4:	f001 ffa2 	bl	800b41c <vPortExitCritical>
				return pdPASS;
 80094d8:	2301      	movs	r3, #1
 80094da:	e063      	b.n	80095a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d103      	bne.n	80094ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094e2:	f001 ff9b 	bl	800b41c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	e05c      	b.n	80095a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d106      	bne.n	80094fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094f0:	f107 0314 	add.w	r3, r7, #20
 80094f4:	4618      	mov	r0, r3
 80094f6:	f001 f899 	bl	800a62c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094fa:	2301      	movs	r3, #1
 80094fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094fe:	f001 ff8d 	bl	800b41c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009502:	f000 fe09 	bl	800a118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009506:	f001 ff57 	bl	800b3b8 <vPortEnterCritical>
 800950a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009510:	b25b      	sxtb	r3, r3
 8009512:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009516:	d103      	bne.n	8009520 <xQueueGenericSend+0x174>
 8009518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009522:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009526:	b25b      	sxtb	r3, r3
 8009528:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800952c:	d103      	bne.n	8009536 <xQueueGenericSend+0x18a>
 800952e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009530:	2200      	movs	r2, #0
 8009532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009536:	f001 ff71 	bl	800b41c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800953a:	1d3a      	adds	r2, r7, #4
 800953c:	f107 0314 	add.w	r3, r7, #20
 8009540:	4611      	mov	r1, r2
 8009542:	4618      	mov	r0, r3
 8009544:	f001 f888 	bl	800a658 <xTaskCheckForTimeOut>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d124      	bne.n	8009598 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800954e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009550:	f000 fb28 	bl	8009ba4 <prvIsQueueFull>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d018      	beq.n	800958c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800955a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955c:	3310      	adds	r3, #16
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	4611      	mov	r1, r2
 8009562:	4618      	mov	r0, r3
 8009564:	f000 ffac 	bl	800a4c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800956a:	f000 fab3 	bl	8009ad4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800956e:	f000 fde1 	bl	800a134 <xTaskResumeAll>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	f47f af7c 	bne.w	8009472 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800957a:	4b0c      	ldr	r3, [pc, #48]	@ (80095ac <xQueueGenericSend+0x200>)
 800957c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	e772      	b.n	8009472 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800958c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800958e:	f000 faa1 	bl	8009ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009592:	f000 fdcf 	bl	800a134 <xTaskResumeAll>
 8009596:	e76c      	b.n	8009472 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800959a:	f000 fa9b 	bl	8009ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800959e:	f000 fdc9 	bl	800a134 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80095a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3738      	adds	r7, #56	@ 0x38
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	e000ed04 	.word	0xe000ed04

080095b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b090      	sub	sp, #64	@ 0x40
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80095c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10b      	bne.n	80095e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80095da:	bf00      	nop
 80095dc:	bf00      	nop
 80095de:	e7fd      	b.n	80095dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d103      	bne.n	80095ee <xQueueGenericSendFromISR+0x3e>
 80095e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <xQueueGenericSendFromISR+0x42>
 80095ee:	2301      	movs	r3, #1
 80095f0:	e000      	b.n	80095f4 <xQueueGenericSendFromISR+0x44>
 80095f2:	2300      	movs	r3, #0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10b      	bne.n	8009610 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800960a:	bf00      	nop
 800960c:	bf00      	nop
 800960e:	e7fd      	b.n	800960c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	2b02      	cmp	r3, #2
 8009614:	d103      	bne.n	800961e <xQueueGenericSendFromISR+0x6e>
 8009616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800961a:	2b01      	cmp	r3, #1
 800961c:	d101      	bne.n	8009622 <xQueueGenericSendFromISR+0x72>
 800961e:	2301      	movs	r3, #1
 8009620:	e000      	b.n	8009624 <xQueueGenericSendFromISR+0x74>
 8009622:	2300      	movs	r3, #0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10b      	bne.n	8009640 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	623b      	str	r3, [r7, #32]
}
 800963a:	bf00      	nop
 800963c:	bf00      	nop
 800963e:	e7fd      	b.n	800963c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009640:	f001 ff9a 	bl	800b578 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009644:	f3ef 8211 	mrs	r2, BASEPRI
 8009648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	61fa      	str	r2, [r7, #28]
 800965a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800965c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800965e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009662:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009668:	429a      	cmp	r2, r3
 800966a:	d302      	bcc.n	8009672 <xQueueGenericSendFromISR+0xc2>
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2b02      	cmp	r3, #2
 8009670:	d12f      	bne.n	80096d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009678:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800967c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009680:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	68b9      	ldr	r1, [r7, #8]
 8009686:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009688:	f000 f994 	bl	80099b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800968c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009690:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009694:	d112      	bne.n	80096bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800969a:	2b00      	cmp	r3, #0
 800969c:	d016      	beq.n	80096cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800969e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a0:	3324      	adds	r3, #36	@ 0x24
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 ff5e 	bl	800a564 <xTaskRemoveFromEventList>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00e      	beq.n	80096cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00b      	beq.n	80096cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	e007      	b.n	80096cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80096bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80096c0:	3301      	adds	r3, #1
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	b25a      	sxtb	r2, r3
 80096c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80096cc:	2301      	movs	r3, #1
 80096ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80096d0:	e001      	b.n	80096d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80096e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3740      	adds	r7, #64	@ 0x40
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b08c      	sub	sp, #48	@ 0x30
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80096f8:	2300      	movs	r3, #0
 80096fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10b      	bne.n	800971e <xQueueReceive+0x32>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	623b      	str	r3, [r7, #32]
}
 8009718:	bf00      	nop
 800971a:	bf00      	nop
 800971c:	e7fd      	b.n	800971a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d103      	bne.n	800972c <xQueueReceive+0x40>
 8009724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <xQueueReceive+0x44>
 800972c:	2301      	movs	r3, #1
 800972e:	e000      	b.n	8009732 <xQueueReceive+0x46>
 8009730:	2300      	movs	r3, #0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10b      	bne.n	800974e <xQueueReceive+0x62>
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	61fb      	str	r3, [r7, #28]
}
 8009748:	bf00      	nop
 800974a:	bf00      	nop
 800974c:	e7fd      	b.n	800974a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800974e:	f001 f8c9 	bl	800a8e4 <xTaskGetSchedulerState>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d102      	bne.n	800975e <xQueueReceive+0x72>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <xQueueReceive+0x76>
 800975e:	2301      	movs	r3, #1
 8009760:	e000      	b.n	8009764 <xQueueReceive+0x78>
 8009762:	2300      	movs	r3, #0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10b      	bne.n	8009780 <xQueueReceive+0x94>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	61bb      	str	r3, [r7, #24]
}
 800977a:	bf00      	nop
 800977c:	bf00      	nop
 800977e:	e7fd      	b.n	800977c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009780:	f001 fe1a 	bl	800b3b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009788:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800978a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978c:	2b00      	cmp	r3, #0
 800978e:	d01f      	beq.n	80097d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009790:	68b9      	ldr	r1, [r7, #8]
 8009792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009794:	f000 f978 	bl	8009a88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979a:	1e5a      	subs	r2, r3, #1
 800979c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800979e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00f      	beq.n	80097c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097aa:	3310      	adds	r3, #16
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 fed9 	bl	800a564 <xTaskRemoveFromEventList>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d007      	beq.n	80097c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80097b8:	4b3c      	ldr	r3, [pc, #240]	@ (80098ac <xQueueReceive+0x1c0>)
 80097ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80097c8:	f001 fe28 	bl	800b41c <vPortExitCritical>
				return pdPASS;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e069      	b.n	80098a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d103      	bne.n	80097de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097d6:	f001 fe21 	bl	800b41c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097da:	2300      	movs	r3, #0
 80097dc:	e062      	b.n	80098a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d106      	bne.n	80097f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097e4:	f107 0310 	add.w	r3, r7, #16
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 ff1f 	bl	800a62c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097ee:	2301      	movs	r3, #1
 80097f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097f2:	f001 fe13 	bl	800b41c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097f6:	f000 fc8f 	bl	800a118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097fa:	f001 fddd 	bl	800b3b8 <vPortEnterCritical>
 80097fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009800:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009804:	b25b      	sxtb	r3, r3
 8009806:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800980a:	d103      	bne.n	8009814 <xQueueReceive+0x128>
 800980c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009816:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800981a:	b25b      	sxtb	r3, r3
 800981c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009820:	d103      	bne.n	800982a <xQueueReceive+0x13e>
 8009822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800982a:	f001 fdf7 	bl	800b41c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800982e:	1d3a      	adds	r2, r7, #4
 8009830:	f107 0310 	add.w	r3, r7, #16
 8009834:	4611      	mov	r1, r2
 8009836:	4618      	mov	r0, r3
 8009838:	f000 ff0e 	bl	800a658 <xTaskCheckForTimeOut>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d123      	bne.n	800988a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009844:	f000 f998 	bl	8009b78 <prvIsQueueEmpty>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d017      	beq.n	800987e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800984e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009850:	3324      	adds	r3, #36	@ 0x24
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	4611      	mov	r1, r2
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fe32 	bl	800a4c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800985c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800985e:	f000 f939 	bl	8009ad4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009862:	f000 fc67 	bl	800a134 <xTaskResumeAll>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d189      	bne.n	8009780 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800986c:	4b0f      	ldr	r3, [pc, #60]	@ (80098ac <xQueueReceive+0x1c0>)
 800986e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	e780      	b.n	8009780 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800987e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009880:	f000 f928 	bl	8009ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009884:	f000 fc56 	bl	800a134 <xTaskResumeAll>
 8009888:	e77a      	b.n	8009780 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800988a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800988c:	f000 f922 	bl	8009ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009890:	f000 fc50 	bl	800a134 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009894:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009896:	f000 f96f 	bl	8009b78 <prvIsQueueEmpty>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	f43f af6f 	beq.w	8009780 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80098a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3730      	adds	r7, #48	@ 0x30
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	e000ed04 	.word	0xe000ed04

080098b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08e      	sub	sp, #56	@ 0x38
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80098c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10b      	bne.n	80098de <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	623b      	str	r3, [r7, #32]
}
 80098d8:	bf00      	nop
 80098da:	bf00      	nop
 80098dc:	e7fd      	b.n	80098da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d103      	bne.n	80098ec <xQueueReceiveFromISR+0x3c>
 80098e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d101      	bne.n	80098f0 <xQueueReceiveFromISR+0x40>
 80098ec:	2301      	movs	r3, #1
 80098ee:	e000      	b.n	80098f2 <xQueueReceiveFromISR+0x42>
 80098f0:	2300      	movs	r3, #0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10b      	bne.n	800990e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	61fb      	str	r3, [r7, #28]
}
 8009908:	bf00      	nop
 800990a:	bf00      	nop
 800990c:	e7fd      	b.n	800990a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800990e:	f001 fe33 	bl	800b578 <vPortValidateInterruptPriority>
	__asm volatile
 8009912:	f3ef 8211 	mrs	r2, BASEPRI
 8009916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	61ba      	str	r2, [r7, #24]
 8009928:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800992a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800992c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800992e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009932:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009936:	2b00      	cmp	r3, #0
 8009938:	d02f      	beq.n	800999a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800993a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009944:	68b9      	ldr	r1, [r7, #8]
 8009946:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009948:	f000 f89e 	bl	8009a88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800994c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994e:	1e5a      	subs	r2, r3, #1
 8009950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009952:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009954:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800995c:	d112      	bne.n	8009984 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800995e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d016      	beq.n	8009994 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009968:	3310      	adds	r3, #16
 800996a:	4618      	mov	r0, r3
 800996c:	f000 fdfa 	bl	800a564 <xTaskRemoveFromEventList>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00e      	beq.n	8009994 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00b      	beq.n	8009994 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	601a      	str	r2, [r3, #0]
 8009982:	e007      	b.n	8009994 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009988:	3301      	adds	r3, #1
 800998a:	b2db      	uxtb	r3, r3
 800998c:	b25a      	sxtb	r2, r3
 800998e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009994:	2301      	movs	r3, #1
 8009996:	637b      	str	r3, [r7, #52]	@ 0x34
 8009998:	e001      	b.n	800999e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800999a:	2300      	movs	r3, #0
 800999c:	637b      	str	r3, [r7, #52]	@ 0x34
 800999e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	f383 8811 	msr	BASEPRI, r3
}
 80099a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3738      	adds	r7, #56	@ 0x38
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099c0:	2300      	movs	r3, #0
 80099c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10d      	bne.n	80099ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d14d      	bne.n	8009a76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 ff9e 	bl	800a920 <xTaskPriorityDisinherit>
 80099e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	609a      	str	r2, [r3, #8]
 80099ec:	e043      	b.n	8009a76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d119      	bne.n	8009a28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6858      	ldr	r0, [r3, #4]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099fc:	461a      	mov	r2, r3
 80099fe:	68b9      	ldr	r1, [r7, #8]
 8009a00:	f002 fbf0 	bl	800c1e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	685a      	ldr	r2, [r3, #4]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a0c:	441a      	add	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d32b      	bcc.n	8009a76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	605a      	str	r2, [r3, #4]
 8009a26:	e026      	b.n	8009a76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	68d8      	ldr	r0, [r3, #12]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a30:	461a      	mov	r2, r3
 8009a32:	68b9      	ldr	r1, [r7, #8]
 8009a34:	f002 fbd6 	bl	800c1e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a40:	425b      	negs	r3, r3
 8009a42:	441a      	add	r2, r3
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	68da      	ldr	r2, [r3, #12]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d207      	bcs.n	8009a64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a5c:	425b      	negs	r3, r3
 8009a5e:	441a      	add	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d105      	bne.n	8009a76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	3b01      	subs	r3, #1
 8009a74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	1c5a      	adds	r2, r3, #1
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009a7e:	697b      	ldr	r3, [r7, #20]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d018      	beq.n	8009acc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68da      	ldr	r2, [r3, #12]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa2:	441a      	add	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68da      	ldr	r2, [r3, #12]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d303      	bcc.n	8009abc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68d9      	ldr	r1, [r3, #12]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	6838      	ldr	r0, [r7, #0]
 8009ac8:	f002 fb8c 	bl	800c1e4 <memcpy>
	}
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009adc:	f001 fc6c 	bl	800b3b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ae6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ae8:	e011      	b.n	8009b0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d012      	beq.n	8009b18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	3324      	adds	r3, #36	@ 0x24
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 fd34 	bl	800a564 <xTaskRemoveFromEventList>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b02:	f000 fe0d 	bl	800a720 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	dce9      	bgt.n	8009aea <prvUnlockQueue+0x16>
 8009b16:	e000      	b.n	8009b1a <prvUnlockQueue+0x46>
					break;
 8009b18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	22ff      	movs	r2, #255	@ 0xff
 8009b1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009b22:	f001 fc7b 	bl	800b41c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b26:	f001 fc47 	bl	800b3b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b32:	e011      	b.n	8009b58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d012      	beq.n	8009b62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	3310      	adds	r3, #16
 8009b40:	4618      	mov	r0, r3
 8009b42:	f000 fd0f 	bl	800a564 <xTaskRemoveFromEventList>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b4c:	f000 fde8 	bl	800a720 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
 8009b52:	3b01      	subs	r3, #1
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	dce9      	bgt.n	8009b34 <prvUnlockQueue+0x60>
 8009b60:	e000      	b.n	8009b64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	22ff      	movs	r2, #255	@ 0xff
 8009b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009b6c:	f001 fc56 	bl	800b41c <vPortExitCritical>
}
 8009b70:	bf00      	nop
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b80:	f001 fc1a 	bl	800b3b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d102      	bne.n	8009b92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	e001      	b.n	8009b96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b96:	f001 fc41 	bl	800b41c <vPortExitCritical>

	return xReturn;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bac:	f001 fc04 	bl	800b3b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d102      	bne.n	8009bc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	e001      	b.n	8009bc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bc6:	f001 fc29 	bl	800b41c <vPortExitCritical>

	return xReturn;
 8009bca:	68fb      	ldr	r3, [r7, #12]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bde:	2300      	movs	r3, #0
 8009be0:	60fb      	str	r3, [r7, #12]
 8009be2:	e014      	b.n	8009c0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009be4:	4a0f      	ldr	r2, [pc, #60]	@ (8009c24 <vQueueAddToRegistry+0x50>)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10b      	bne.n	8009c08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009bf0:	490c      	ldr	r1, [pc, #48]	@ (8009c24 <vQueueAddToRegistry+0x50>)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8009c24 <vQueueAddToRegistry+0x50>)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	00db      	lsls	r3, r3, #3
 8009c00:	4413      	add	r3, r2
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c06:	e006      	b.n	8009c16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	60fb      	str	r3, [r7, #12]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2b07      	cmp	r3, #7
 8009c12:	d9e7      	bls.n	8009be4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	200008c4 	.word	0x200008c4

08009c28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c38:	f001 fbbe 	bl	800b3b8 <vPortEnterCritical>
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c42:	b25b      	sxtb	r3, r3
 8009c44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c48:	d103      	bne.n	8009c52 <vQueueWaitForMessageRestricted+0x2a>
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c58:	b25b      	sxtb	r3, r3
 8009c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c5e:	d103      	bne.n	8009c68 <vQueueWaitForMessageRestricted+0x40>
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c68:	f001 fbd8 	bl	800b41c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d106      	bne.n	8009c82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	3324      	adds	r3, #36	@ 0x24
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	68b9      	ldr	r1, [r7, #8]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 fc45 	bl	800a50c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c82:	6978      	ldr	r0, [r7, #20]
 8009c84:	f7ff ff26 	bl	8009ad4 <prvUnlockQueue>
	}
 8009c88:	bf00      	nop
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08e      	sub	sp, #56	@ 0x38
 8009c94:	af04      	add	r7, sp, #16
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10b      	bne.n	8009cbc <xTaskCreateStatic+0x2c>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	623b      	str	r3, [r7, #32]
}
 8009cb6:	bf00      	nop
 8009cb8:	bf00      	nop
 8009cba:	e7fd      	b.n	8009cb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10b      	bne.n	8009cda <xTaskCreateStatic+0x4a>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	61fb      	str	r3, [r7, #28]
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop
 8009cd8:	e7fd      	b.n	8009cd6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cda:	235c      	movs	r3, #92	@ 0x5c
 8009cdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	2b5c      	cmp	r3, #92	@ 0x5c
 8009ce2:	d00b      	beq.n	8009cfc <xTaskCreateStatic+0x6c>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	61bb      	str	r3, [r7, #24]
}
 8009cf6:	bf00      	nop
 8009cf8:	bf00      	nop
 8009cfa:	e7fd      	b.n	8009cf8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cfc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d01e      	beq.n	8009d42 <xTaskCreateStatic+0xb2>
 8009d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d01b      	beq.n	8009d42 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d12:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d16:	2202      	movs	r2, #2
 8009d18:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	9303      	str	r3, [sp, #12]
 8009d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d22:	9302      	str	r3, [sp, #8]
 8009d24:	f107 0314 	add.w	r3, r7, #20
 8009d28:	9301      	str	r3, [sp, #4]
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f000 f850 	bl	8009dda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d3c:	f000 f8de 	bl	8009efc <prvAddNewTaskToReadyList>
 8009d40:	e001      	b.n	8009d46 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009d42:	2300      	movs	r3, #0
 8009d44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d46:	697b      	ldr	r3, [r7, #20]
	}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3728      	adds	r7, #40	@ 0x28
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b08c      	sub	sp, #48	@ 0x30
 8009d54:	af04      	add	r7, sp, #16
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	603b      	str	r3, [r7, #0]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d60:	88fb      	ldrh	r3, [r7, #6]
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	4618      	mov	r0, r3
 8009d66:	f001 fc49 	bl	800b5fc <pvPortMalloc>
 8009d6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00e      	beq.n	8009d90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d72:	205c      	movs	r0, #92	@ 0x5c
 8009d74:	f001 fc42 	bl	800b5fc <pvPortMalloc>
 8009d78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	631a      	str	r2, [r3, #48]	@ 0x30
 8009d86:	e005      	b.n	8009d94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d88:	6978      	ldr	r0, [r7, #20]
 8009d8a:	f001 fd05 	bl	800b798 <vPortFree>
 8009d8e:	e001      	b.n	8009d94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d90:	2300      	movs	r3, #0
 8009d92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d017      	beq.n	8009dca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009da2:	88fa      	ldrh	r2, [r7, #6]
 8009da4:	2300      	movs	r3, #0
 8009da6:	9303      	str	r3, [sp, #12]
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	9302      	str	r3, [sp, #8]
 8009dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dae:	9301      	str	r3, [sp, #4]
 8009db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	68b9      	ldr	r1, [r7, #8]
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 f80e 	bl	8009dda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dbe:	69f8      	ldr	r0, [r7, #28]
 8009dc0:	f000 f89c 	bl	8009efc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	61bb      	str	r3, [r7, #24]
 8009dc8:	e002      	b.n	8009dd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dd0:	69bb      	ldr	r3, [r7, #24]
	}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3720      	adds	r7, #32
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b088      	sub	sp, #32
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	60f8      	str	r0, [r7, #12]
 8009de2:	60b9      	str	r1, [r7, #8]
 8009de4:	607a      	str	r2, [r7, #4]
 8009de6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	461a      	mov	r2, r3
 8009df2:	21a5      	movs	r1, #165	@ 0xa5
 8009df4:	f002 f9b2 	bl	800c15c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009e02:	3b01      	subs	r3, #1
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	4413      	add	r3, r2
 8009e08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	f023 0307 	bic.w	r3, r3, #7
 8009e10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	f003 0307 	and.w	r3, r3, #7
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00b      	beq.n	8009e34 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	617b      	str	r3, [r7, #20]
}
 8009e2e:	bf00      	nop
 8009e30:	bf00      	nop
 8009e32:	e7fd      	b.n	8009e30 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d01f      	beq.n	8009e7a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	61fb      	str	r3, [r7, #28]
 8009e3e:	e012      	b.n	8009e66 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	4413      	add	r3, r2
 8009e46:	7819      	ldrb	r1, [r3, #0]
 8009e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	3334      	adds	r3, #52	@ 0x34
 8009e50:	460a      	mov	r2, r1
 8009e52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e54:	68ba      	ldr	r2, [r7, #8]
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	4413      	add	r3, r2
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d006      	beq.n	8009e6e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	3301      	adds	r3, #1
 8009e64:	61fb      	str	r3, [r7, #28]
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	2b0f      	cmp	r3, #15
 8009e6a:	d9e9      	bls.n	8009e40 <prvInitialiseNewTask+0x66>
 8009e6c:	e000      	b.n	8009e70 <prvInitialiseNewTask+0x96>
			{
				break;
 8009e6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e78:	e003      	b.n	8009e82 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e84:	2b37      	cmp	r3, #55	@ 0x37
 8009e86:	d901      	bls.n	8009e8c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e88:	2337      	movs	r3, #55	@ 0x37
 8009e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e90:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e96:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7ff f8a8 	bl	8008ff8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eaa:	3318      	adds	r3, #24
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7ff f8a3 	bl	8008ff8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ec6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eca:	2200      	movs	r2, #0
 8009ecc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	68f9      	ldr	r1, [r7, #12]
 8009eda:	69b8      	ldr	r0, [r7, #24]
 8009edc:	f001 f93e 	bl	800b15c <pxPortInitialiseStack>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ef0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ef2:	bf00      	nop
 8009ef4:	3720      	adds	r7, #32
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f04:	f001 fa58 	bl	800b3b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f08:	4b2d      	ldr	r3, [pc, #180]	@ (8009fc0 <prvAddNewTaskToReadyList+0xc4>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8009fc0 <prvAddNewTaskToReadyList+0xc4>)
 8009f10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f12:	4b2c      	ldr	r3, [pc, #176]	@ (8009fc4 <prvAddNewTaskToReadyList+0xc8>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d109      	bne.n	8009f2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f1a:	4a2a      	ldr	r2, [pc, #168]	@ (8009fc4 <prvAddNewTaskToReadyList+0xc8>)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f20:	4b27      	ldr	r3, [pc, #156]	@ (8009fc0 <prvAddNewTaskToReadyList+0xc4>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d110      	bne.n	8009f4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f28:	f000 fc1e 	bl	800a768 <prvInitialiseTaskLists>
 8009f2c:	e00d      	b.n	8009f4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f2e:	4b26      	ldr	r3, [pc, #152]	@ (8009fc8 <prvAddNewTaskToReadyList+0xcc>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d109      	bne.n	8009f4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f36:	4b23      	ldr	r3, [pc, #140]	@ (8009fc4 <prvAddNewTaskToReadyList+0xc8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d802      	bhi.n	8009f4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f44:	4a1f      	ldr	r2, [pc, #124]	@ (8009fc4 <prvAddNewTaskToReadyList+0xc8>)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f4a:	4b20      	ldr	r3, [pc, #128]	@ (8009fcc <prvAddNewTaskToReadyList+0xd0>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	4a1e      	ldr	r2, [pc, #120]	@ (8009fcc <prvAddNewTaskToReadyList+0xd0>)
 8009f52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f54:	4b1d      	ldr	r3, [pc, #116]	@ (8009fcc <prvAddNewTaskToReadyList+0xd0>)
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f60:	4b1b      	ldr	r3, [pc, #108]	@ (8009fd0 <prvAddNewTaskToReadyList+0xd4>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d903      	bls.n	8009f70 <prvAddNewTaskToReadyList+0x74>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f6c:	4a18      	ldr	r2, [pc, #96]	@ (8009fd0 <prvAddNewTaskToReadyList+0xd4>)
 8009f6e:	6013      	str	r3, [r2, #0]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f74:	4613      	mov	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4413      	add	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4a15      	ldr	r2, [pc, #84]	@ (8009fd4 <prvAddNewTaskToReadyList+0xd8>)
 8009f7e:	441a      	add	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	3304      	adds	r3, #4
 8009f84:	4619      	mov	r1, r3
 8009f86:	4610      	mov	r0, r2
 8009f88:	f7ff f843 	bl	8009012 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f8c:	f001 fa46 	bl	800b41c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f90:	4b0d      	ldr	r3, [pc, #52]	@ (8009fc8 <prvAddNewTaskToReadyList+0xcc>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00e      	beq.n	8009fb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f98:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc4 <prvAddNewTaskToReadyList+0xc8>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d207      	bcs.n	8009fb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8009fd8 <prvAddNewTaskToReadyList+0xdc>)
 8009fa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fac:	601a      	str	r2, [r3, #0]
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fb6:	bf00      	nop
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20000dd8 	.word	0x20000dd8
 8009fc4:	20000904 	.word	0x20000904
 8009fc8:	20000de4 	.word	0x20000de4
 8009fcc:	20000df4 	.word	0x20000df4
 8009fd0:	20000de0 	.word	0x20000de0
 8009fd4:	20000908 	.word	0x20000908
 8009fd8:	e000ed04 	.word	0xe000ed04

08009fdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d018      	beq.n	800a020 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009fee:	4b14      	ldr	r3, [pc, #80]	@ (800a040 <vTaskDelay+0x64>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00b      	beq.n	800a00e <vTaskDelay+0x32>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	60bb      	str	r3, [r7, #8]
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	e7fd      	b.n	800a00a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a00e:	f000 f883 	bl	800a118 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a012:	2100      	movs	r1, #0
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 fcf3 	bl	800aa00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a01a:	f000 f88b 	bl	800a134 <xTaskResumeAll>
 800a01e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d107      	bne.n	800a036 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a026:	4b07      	ldr	r3, [pc, #28]	@ (800a044 <vTaskDelay+0x68>)
 800a028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a02c:	601a      	str	r2, [r3, #0]
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	20000e00 	.word	0x20000e00
 800a044:	e000ed04 	.word	0xe000ed04

0800a048 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b08a      	sub	sp, #40	@ 0x28
 800a04c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a04e:	2300      	movs	r3, #0
 800a050:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a056:	463a      	mov	r2, r7
 800a058:	1d39      	adds	r1, r7, #4
 800a05a:	f107 0308 	add.w	r3, r7, #8
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fe ff76 	bl	8008f50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	9202      	str	r2, [sp, #8]
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	2300      	movs	r3, #0
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	2300      	movs	r3, #0
 800a074:	460a      	mov	r2, r1
 800a076:	4922      	ldr	r1, [pc, #136]	@ (800a100 <vTaskStartScheduler+0xb8>)
 800a078:	4822      	ldr	r0, [pc, #136]	@ (800a104 <vTaskStartScheduler+0xbc>)
 800a07a:	f7ff fe09 	bl	8009c90 <xTaskCreateStatic>
 800a07e:	4603      	mov	r3, r0
 800a080:	4a21      	ldr	r2, [pc, #132]	@ (800a108 <vTaskStartScheduler+0xc0>)
 800a082:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a084:	4b20      	ldr	r3, [pc, #128]	@ (800a108 <vTaskStartScheduler+0xc0>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d002      	beq.n	800a092 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a08c:	2301      	movs	r3, #1
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	e001      	b.n	800a096 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a092:	2300      	movs	r3, #0
 800a094:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d102      	bne.n	800a0a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a09c:	f000 fd04 	bl	800aaa8 <xTimerCreateTimerTask>
 800a0a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d116      	bne.n	800a0d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a0a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ac:	f383 8811 	msr	BASEPRI, r3
 800a0b0:	f3bf 8f6f 	isb	sy
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	613b      	str	r3, [r7, #16]
}
 800a0ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a0bc:	4b13      	ldr	r3, [pc, #76]	@ (800a10c <vTaskStartScheduler+0xc4>)
 800a0be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a0c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a0c4:	4b12      	ldr	r3, [pc, #72]	@ (800a110 <vTaskStartScheduler+0xc8>)
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a0ca:	4b12      	ldr	r3, [pc, #72]	@ (800a114 <vTaskStartScheduler+0xcc>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a0d0:	f001 f8ce 	bl	800b270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a0d4:	e00f      	b.n	800a0f6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0dc:	d10b      	bne.n	800a0f6 <vTaskStartScheduler+0xae>
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	60fb      	str	r3, [r7, #12]
}
 800a0f0:	bf00      	nop
 800a0f2:	bf00      	nop
 800a0f4:	e7fd      	b.n	800a0f2 <vTaskStartScheduler+0xaa>
}
 800a0f6:	bf00      	nop
 800a0f8:	3718      	adds	r7, #24
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	0800c2c8 	.word	0x0800c2c8
 800a104:	0800a739 	.word	0x0800a739
 800a108:	20000dfc 	.word	0x20000dfc
 800a10c:	20000df8 	.word	0x20000df8
 800a110:	20000de4 	.word	0x20000de4
 800a114:	20000ddc 	.word	0x20000ddc

0800a118 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a118:	b480      	push	{r7}
 800a11a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a11c:	4b04      	ldr	r3, [pc, #16]	@ (800a130 <vTaskSuspendAll+0x18>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	3301      	adds	r3, #1
 800a122:	4a03      	ldr	r2, [pc, #12]	@ (800a130 <vTaskSuspendAll+0x18>)
 800a124:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a126:	bf00      	nop
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	20000e00 	.word	0x20000e00

0800a134 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a13a:	2300      	movs	r3, #0
 800a13c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a13e:	2300      	movs	r3, #0
 800a140:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a142:	4b42      	ldr	r3, [pc, #264]	@ (800a24c <xTaskResumeAll+0x118>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10b      	bne.n	800a162 <xTaskResumeAll+0x2e>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	603b      	str	r3, [r7, #0]
}
 800a15c:	bf00      	nop
 800a15e:	bf00      	nop
 800a160:	e7fd      	b.n	800a15e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a162:	f001 f929 	bl	800b3b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a166:	4b39      	ldr	r3, [pc, #228]	@ (800a24c <xTaskResumeAll+0x118>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3b01      	subs	r3, #1
 800a16c:	4a37      	ldr	r2, [pc, #220]	@ (800a24c <xTaskResumeAll+0x118>)
 800a16e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a170:	4b36      	ldr	r3, [pc, #216]	@ (800a24c <xTaskResumeAll+0x118>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d162      	bne.n	800a23e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a178:	4b35      	ldr	r3, [pc, #212]	@ (800a250 <xTaskResumeAll+0x11c>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d05e      	beq.n	800a23e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a180:	e02f      	b.n	800a1e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a182:	4b34      	ldr	r3, [pc, #208]	@ (800a254 <xTaskResumeAll+0x120>)
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	3318      	adds	r3, #24
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe ff9c 	bl	80090cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	3304      	adds	r3, #4
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fe ff97 	bl	80090cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1a2:	4b2d      	ldr	r3, [pc, #180]	@ (800a258 <xTaskResumeAll+0x124>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d903      	bls.n	800a1b2 <xTaskResumeAll+0x7e>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ae:	4a2a      	ldr	r2, [pc, #168]	@ (800a258 <xTaskResumeAll+0x124>)
 800a1b0:	6013      	str	r3, [r2, #0]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4413      	add	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4a27      	ldr	r2, [pc, #156]	@ (800a25c <xTaskResumeAll+0x128>)
 800a1c0:	441a      	add	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	f7fe ff22 	bl	8009012 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1d2:	4b23      	ldr	r3, [pc, #140]	@ (800a260 <xTaskResumeAll+0x12c>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d302      	bcc.n	800a1e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a1dc:	4b21      	ldr	r3, [pc, #132]	@ (800a264 <xTaskResumeAll+0x130>)
 800a1de:	2201      	movs	r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1e2:	4b1c      	ldr	r3, [pc, #112]	@ (800a254 <xTaskResumeAll+0x120>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1cb      	bne.n	800a182 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d001      	beq.n	800a1f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a1f0:	f000 fb58 	bl	800a8a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a1f4:	4b1c      	ldr	r3, [pc, #112]	@ (800a268 <xTaskResumeAll+0x134>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d010      	beq.n	800a222 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a200:	f000 f846 	bl	800a290 <xTaskIncrementTick>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d002      	beq.n	800a210 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a20a:	4b16      	ldr	r3, [pc, #88]	@ (800a264 <xTaskResumeAll+0x130>)
 800a20c:	2201      	movs	r2, #1
 800a20e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3b01      	subs	r3, #1
 800a214:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1f1      	bne.n	800a200 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a21c:	4b12      	ldr	r3, [pc, #72]	@ (800a268 <xTaskResumeAll+0x134>)
 800a21e:	2200      	movs	r2, #0
 800a220:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a222:	4b10      	ldr	r3, [pc, #64]	@ (800a264 <xTaskResumeAll+0x130>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d009      	beq.n	800a23e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a22a:	2301      	movs	r3, #1
 800a22c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a22e:	4b0f      	ldr	r3, [pc, #60]	@ (800a26c <xTaskResumeAll+0x138>)
 800a230:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	f3bf 8f4f 	dsb	sy
 800a23a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a23e:	f001 f8ed 	bl	800b41c <vPortExitCritical>

	return xAlreadyYielded;
 800a242:	68bb      	ldr	r3, [r7, #8]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	20000e00 	.word	0x20000e00
 800a250:	20000dd8 	.word	0x20000dd8
 800a254:	20000d98 	.word	0x20000d98
 800a258:	20000de0 	.word	0x20000de0
 800a25c:	20000908 	.word	0x20000908
 800a260:	20000904 	.word	0x20000904
 800a264:	20000dec 	.word	0x20000dec
 800a268:	20000de8 	.word	0x20000de8
 800a26c:	e000ed04 	.word	0xe000ed04

0800a270 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a276:	4b05      	ldr	r3, [pc, #20]	@ (800a28c <xTaskGetTickCount+0x1c>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a27c:	687b      	ldr	r3, [r7, #4]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	20000ddc 	.word	0x20000ddc

0800a290 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b086      	sub	sp, #24
 800a294:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a296:	2300      	movs	r3, #0
 800a298:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a29a:	4b4f      	ldr	r3, [pc, #316]	@ (800a3d8 <xTaskIncrementTick+0x148>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f040 8090 	bne.w	800a3c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2a4:	4b4d      	ldr	r3, [pc, #308]	@ (800a3dc <xTaskIncrementTick+0x14c>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a2ac:	4a4b      	ldr	r2, [pc, #300]	@ (800a3dc <xTaskIncrementTick+0x14c>)
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d121      	bne.n	800a2fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a2b8:	4b49      	ldr	r3, [pc, #292]	@ (800a3e0 <xTaskIncrementTick+0x150>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00b      	beq.n	800a2da <xTaskIncrementTick+0x4a>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	603b      	str	r3, [r7, #0]
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop
 800a2d8:	e7fd      	b.n	800a2d6 <xTaskIncrementTick+0x46>
 800a2da:	4b41      	ldr	r3, [pc, #260]	@ (800a3e0 <xTaskIncrementTick+0x150>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	60fb      	str	r3, [r7, #12]
 800a2e0:	4b40      	ldr	r3, [pc, #256]	@ (800a3e4 <xTaskIncrementTick+0x154>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a3e      	ldr	r2, [pc, #248]	@ (800a3e0 <xTaskIncrementTick+0x150>)
 800a2e6:	6013      	str	r3, [r2, #0]
 800a2e8:	4a3e      	ldr	r2, [pc, #248]	@ (800a3e4 <xTaskIncrementTick+0x154>)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6013      	str	r3, [r2, #0]
 800a2ee:	4b3e      	ldr	r3, [pc, #248]	@ (800a3e8 <xTaskIncrementTick+0x158>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	4a3c      	ldr	r2, [pc, #240]	@ (800a3e8 <xTaskIncrementTick+0x158>)
 800a2f6:	6013      	str	r3, [r2, #0]
 800a2f8:	f000 fad4 	bl	800a8a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2fc:	4b3b      	ldr	r3, [pc, #236]	@ (800a3ec <xTaskIncrementTick+0x15c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	429a      	cmp	r2, r3
 800a304:	d349      	bcc.n	800a39a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a306:	4b36      	ldr	r3, [pc, #216]	@ (800a3e0 <xTaskIncrementTick+0x150>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d104      	bne.n	800a31a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a310:	4b36      	ldr	r3, [pc, #216]	@ (800a3ec <xTaskIncrementTick+0x15c>)
 800a312:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a316:	601a      	str	r2, [r3, #0]
					break;
 800a318:	e03f      	b.n	800a39a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a31a:	4b31      	ldr	r3, [pc, #196]	@ (800a3e0 <xTaskIncrementTick+0x150>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a32a:	693a      	ldr	r2, [r7, #16]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d203      	bcs.n	800a33a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a332:	4a2e      	ldr	r2, [pc, #184]	@ (800a3ec <xTaskIncrementTick+0x15c>)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a338:	e02f      	b.n	800a39a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	3304      	adds	r3, #4
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fe fec4 	bl	80090cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d004      	beq.n	800a356 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	3318      	adds	r3, #24
 800a350:	4618      	mov	r0, r3
 800a352:	f7fe febb 	bl	80090cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a35a:	4b25      	ldr	r3, [pc, #148]	@ (800a3f0 <xTaskIncrementTick+0x160>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d903      	bls.n	800a36a <xTaskIncrementTick+0xda>
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a366:	4a22      	ldr	r2, [pc, #136]	@ (800a3f0 <xTaskIncrementTick+0x160>)
 800a368:	6013      	str	r3, [r2, #0]
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a36e:	4613      	mov	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	4413      	add	r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	4a1f      	ldr	r2, [pc, #124]	@ (800a3f4 <xTaskIncrementTick+0x164>)
 800a378:	441a      	add	r2, r3
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	3304      	adds	r3, #4
 800a37e:	4619      	mov	r1, r3
 800a380:	4610      	mov	r0, r2
 800a382:	f7fe fe46 	bl	8009012 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a38a:	4b1b      	ldr	r3, [pc, #108]	@ (800a3f8 <xTaskIncrementTick+0x168>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a390:	429a      	cmp	r2, r3
 800a392:	d3b8      	bcc.n	800a306 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a394:	2301      	movs	r3, #1
 800a396:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a398:	e7b5      	b.n	800a306 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a39a:	4b17      	ldr	r3, [pc, #92]	@ (800a3f8 <xTaskIncrementTick+0x168>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3a0:	4914      	ldr	r1, [pc, #80]	@ (800a3f4 <xTaskIncrementTick+0x164>)
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	440b      	add	r3, r1
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d901      	bls.n	800a3b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a3b6:	4b11      	ldr	r3, [pc, #68]	@ (800a3fc <xTaskIncrementTick+0x16c>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d007      	beq.n	800a3ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	617b      	str	r3, [r7, #20]
 800a3c2:	e004      	b.n	800a3ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a3c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a400 <xTaskIncrementTick+0x170>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	4a0d      	ldr	r2, [pc, #52]	@ (800a400 <xTaskIncrementTick+0x170>)
 800a3cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a3ce:	697b      	ldr	r3, [r7, #20]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3718      	adds	r7, #24
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20000e00 	.word	0x20000e00
 800a3dc:	20000ddc 	.word	0x20000ddc
 800a3e0:	20000d90 	.word	0x20000d90
 800a3e4:	20000d94 	.word	0x20000d94
 800a3e8:	20000df0 	.word	0x20000df0
 800a3ec:	20000df8 	.word	0x20000df8
 800a3f0:	20000de0 	.word	0x20000de0
 800a3f4:	20000908 	.word	0x20000908
 800a3f8:	20000904 	.word	0x20000904
 800a3fc:	20000dec 	.word	0x20000dec
 800a400:	20000de8 	.word	0x20000de8

0800a404 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a40a:	4b28      	ldr	r3, [pc, #160]	@ (800a4ac <vTaskSwitchContext+0xa8>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a412:	4b27      	ldr	r3, [pc, #156]	@ (800a4b0 <vTaskSwitchContext+0xac>)
 800a414:	2201      	movs	r2, #1
 800a416:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a418:	e042      	b.n	800a4a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a41a:	4b25      	ldr	r3, [pc, #148]	@ (800a4b0 <vTaskSwitchContext+0xac>)
 800a41c:	2200      	movs	r2, #0
 800a41e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a420:	4b24      	ldr	r3, [pc, #144]	@ (800a4b4 <vTaskSwitchContext+0xb0>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	60fb      	str	r3, [r7, #12]
 800a426:	e011      	b.n	800a44c <vTaskSwitchContext+0x48>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10b      	bne.n	800a446 <vTaskSwitchContext+0x42>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	607b      	str	r3, [r7, #4]
}
 800a440:	bf00      	nop
 800a442:	bf00      	nop
 800a444:	e7fd      	b.n	800a442 <vTaskSwitchContext+0x3e>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3b01      	subs	r3, #1
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	491a      	ldr	r1, [pc, #104]	@ (800a4b8 <vTaskSwitchContext+0xb4>)
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	4613      	mov	r3, r2
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4413      	add	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	440b      	add	r3, r1
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0e3      	beq.n	800a428 <vTaskSwitchContext+0x24>
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	4613      	mov	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4a13      	ldr	r2, [pc, #76]	@ (800a4b8 <vTaskSwitchContext+0xb4>)
 800a46c:	4413      	add	r3, r2
 800a46e:	60bb      	str	r3, [r7, #8]
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	605a      	str	r2, [r3, #4]
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	685a      	ldr	r2, [r3, #4]
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	3308      	adds	r3, #8
 800a482:	429a      	cmp	r2, r3
 800a484:	d104      	bne.n	800a490 <vTaskSwitchContext+0x8c>
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	605a      	str	r2, [r3, #4]
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	4a09      	ldr	r2, [pc, #36]	@ (800a4bc <vTaskSwitchContext+0xb8>)
 800a498:	6013      	str	r3, [r2, #0]
 800a49a:	4a06      	ldr	r2, [pc, #24]	@ (800a4b4 <vTaskSwitchContext+0xb0>)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6013      	str	r3, [r2, #0]
}
 800a4a0:	bf00      	nop
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	20000e00 	.word	0x20000e00
 800a4b0:	20000dec 	.word	0x20000dec
 800a4b4:	20000de0 	.word	0x20000de0
 800a4b8:	20000908 	.word	0x20000908
 800a4bc:	20000904 	.word	0x20000904

0800a4c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10b      	bne.n	800a4e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	60fb      	str	r3, [r7, #12]
}
 800a4e2:	bf00      	nop
 800a4e4:	bf00      	nop
 800a4e6:	e7fd      	b.n	800a4e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4e8:	4b07      	ldr	r3, [pc, #28]	@ (800a508 <vTaskPlaceOnEventList+0x48>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	3318      	adds	r3, #24
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7fe fdb2 	bl	800905a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4f6:	2101      	movs	r1, #1
 800a4f8:	6838      	ldr	r0, [r7, #0]
 800a4fa:	f000 fa81 	bl	800aa00 <prvAddCurrentTaskToDelayedList>
}
 800a4fe:	bf00      	nop
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	20000904 	.word	0x20000904

0800a50c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10b      	bne.n	800a536 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	617b      	str	r3, [r7, #20]
}
 800a530:	bf00      	nop
 800a532:	bf00      	nop
 800a534:	e7fd      	b.n	800a532 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a536:	4b0a      	ldr	r3, [pc, #40]	@ (800a560 <vTaskPlaceOnEventListRestricted+0x54>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	3318      	adds	r3, #24
 800a53c:	4619      	mov	r1, r3
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f7fe fd67 	bl	8009012 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d002      	beq.n	800a550 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a54a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a54e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a550:	6879      	ldr	r1, [r7, #4]
 800a552:	68b8      	ldr	r0, [r7, #8]
 800a554:	f000 fa54 	bl	800aa00 <prvAddCurrentTaskToDelayedList>
	}
 800a558:	bf00      	nop
 800a55a:	3718      	adds	r7, #24
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	20000904 	.word	0x20000904

0800a564 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10b      	bne.n	800a592 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a57e:	f383 8811 	msr	BASEPRI, r3
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	60fb      	str	r3, [r7, #12]
}
 800a58c:	bf00      	nop
 800a58e:	bf00      	nop
 800a590:	e7fd      	b.n	800a58e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	3318      	adds	r3, #24
 800a596:	4618      	mov	r0, r3
 800a598:	f7fe fd98 	bl	80090cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a59c:	4b1d      	ldr	r3, [pc, #116]	@ (800a614 <xTaskRemoveFromEventList+0xb0>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d11d      	bne.n	800a5e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fe fd8f 	bl	80090cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5b2:	4b19      	ldr	r3, [pc, #100]	@ (800a618 <xTaskRemoveFromEventList+0xb4>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d903      	bls.n	800a5c2 <xTaskRemoveFromEventList+0x5e>
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5be:	4a16      	ldr	r2, [pc, #88]	@ (800a618 <xTaskRemoveFromEventList+0xb4>)
 800a5c0:	6013      	str	r3, [r2, #0]
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	4413      	add	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4a13      	ldr	r2, [pc, #76]	@ (800a61c <xTaskRemoveFromEventList+0xb8>)
 800a5d0:	441a      	add	r2, r3
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4610      	mov	r0, r2
 800a5da:	f7fe fd1a 	bl	8009012 <vListInsertEnd>
 800a5de:	e005      	b.n	800a5ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	3318      	adds	r3, #24
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	480e      	ldr	r0, [pc, #56]	@ (800a620 <xTaskRemoveFromEventList+0xbc>)
 800a5e8:	f7fe fd13 	bl	8009012 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a624 <xTaskRemoveFromEventList+0xc0>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d905      	bls.n	800a606 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a5fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a628 <xTaskRemoveFromEventList+0xc4>)
 800a600:	2201      	movs	r2, #1
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	e001      	b.n	800a60a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a606:	2300      	movs	r3, #0
 800a608:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a60a:	697b      	ldr	r3, [r7, #20]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3718      	adds	r7, #24
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	20000e00 	.word	0x20000e00
 800a618:	20000de0 	.word	0x20000de0
 800a61c:	20000908 	.word	0x20000908
 800a620:	20000d98 	.word	0x20000d98
 800a624:	20000904 	.word	0x20000904
 800a628:	20000dec 	.word	0x20000dec

0800a62c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a634:	4b06      	ldr	r3, [pc, #24]	@ (800a650 <vTaskInternalSetTimeOutState+0x24>)
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a63c:	4b05      	ldr	r3, [pc, #20]	@ (800a654 <vTaskInternalSetTimeOutState+0x28>)
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	605a      	str	r2, [r3, #4]
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	20000df0 	.word	0x20000df0
 800a654:	20000ddc 	.word	0x20000ddc

0800a658 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b088      	sub	sp, #32
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10b      	bne.n	800a680 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66c:	f383 8811 	msr	BASEPRI, r3
 800a670:	f3bf 8f6f 	isb	sy
 800a674:	f3bf 8f4f 	dsb	sy
 800a678:	613b      	str	r3, [r7, #16]
}
 800a67a:	bf00      	nop
 800a67c:	bf00      	nop
 800a67e:	e7fd      	b.n	800a67c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10b      	bne.n	800a69e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68a:	f383 8811 	msr	BASEPRI, r3
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	60fb      	str	r3, [r7, #12]
}
 800a698:	bf00      	nop
 800a69a:	bf00      	nop
 800a69c:	e7fd      	b.n	800a69a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a69e:	f000 fe8b 	bl	800b3b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a6a2:	4b1d      	ldr	r3, [pc, #116]	@ (800a718 <xTaskCheckForTimeOut+0xc0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	69ba      	ldr	r2, [r7, #24]
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6ba:	d102      	bne.n	800a6c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	61fb      	str	r3, [r7, #28]
 800a6c0:	e023      	b.n	800a70a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	4b15      	ldr	r3, [pc, #84]	@ (800a71c <xTaskCheckForTimeOut+0xc4>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d007      	beq.n	800a6de <xTaskCheckForTimeOut+0x86>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	69ba      	ldr	r2, [r7, #24]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d302      	bcc.n	800a6de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	61fb      	str	r3, [r7, #28]
 800a6dc:	e015      	b.n	800a70a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	697a      	ldr	r2, [r7, #20]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d20b      	bcs.n	800a700 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	1ad2      	subs	r2, r2, r3
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7ff ff99 	bl	800a62c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	61fb      	str	r3, [r7, #28]
 800a6fe:	e004      	b.n	800a70a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	2200      	movs	r2, #0
 800a704:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a706:	2301      	movs	r3, #1
 800a708:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a70a:	f000 fe87 	bl	800b41c <vPortExitCritical>

	return xReturn;
 800a70e:	69fb      	ldr	r3, [r7, #28]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3720      	adds	r7, #32
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	20000ddc 	.word	0x20000ddc
 800a71c:	20000df0 	.word	0x20000df0

0800a720 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a720:	b480      	push	{r7}
 800a722:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a724:	4b03      	ldr	r3, [pc, #12]	@ (800a734 <vTaskMissedYield+0x14>)
 800a726:	2201      	movs	r2, #1
 800a728:	601a      	str	r2, [r3, #0]
}
 800a72a:	bf00      	nop
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	20000dec 	.word	0x20000dec

0800a738 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a740:	f000 f852 	bl	800a7e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a744:	4b06      	ldr	r3, [pc, #24]	@ (800a760 <prvIdleTask+0x28>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d9f9      	bls.n	800a740 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a74c:	4b05      	ldr	r3, [pc, #20]	@ (800a764 <prvIdleTask+0x2c>)
 800a74e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a75c:	e7f0      	b.n	800a740 <prvIdleTask+0x8>
 800a75e:	bf00      	nop
 800a760:	20000908 	.word	0x20000908
 800a764:	e000ed04 	.word	0xe000ed04

0800a768 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a76e:	2300      	movs	r3, #0
 800a770:	607b      	str	r3, [r7, #4]
 800a772:	e00c      	b.n	800a78e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	4613      	mov	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4a12      	ldr	r2, [pc, #72]	@ (800a7c8 <prvInitialiseTaskLists+0x60>)
 800a780:	4413      	add	r3, r2
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe fc18 	bl	8008fb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	3301      	adds	r3, #1
 800a78c:	607b      	str	r3, [r7, #4]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2b37      	cmp	r3, #55	@ 0x37
 800a792:	d9ef      	bls.n	800a774 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a794:	480d      	ldr	r0, [pc, #52]	@ (800a7cc <prvInitialiseTaskLists+0x64>)
 800a796:	f7fe fc0f 	bl	8008fb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a79a:	480d      	ldr	r0, [pc, #52]	@ (800a7d0 <prvInitialiseTaskLists+0x68>)
 800a79c:	f7fe fc0c 	bl	8008fb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a7a0:	480c      	ldr	r0, [pc, #48]	@ (800a7d4 <prvInitialiseTaskLists+0x6c>)
 800a7a2:	f7fe fc09 	bl	8008fb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7a6:	480c      	ldr	r0, [pc, #48]	@ (800a7d8 <prvInitialiseTaskLists+0x70>)
 800a7a8:	f7fe fc06 	bl	8008fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a7ac:	480b      	ldr	r0, [pc, #44]	@ (800a7dc <prvInitialiseTaskLists+0x74>)
 800a7ae:	f7fe fc03 	bl	8008fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a7b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a7e0 <prvInitialiseTaskLists+0x78>)
 800a7b4:	4a05      	ldr	r2, [pc, #20]	@ (800a7cc <prvInitialiseTaskLists+0x64>)
 800a7b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a7e4 <prvInitialiseTaskLists+0x7c>)
 800a7ba:	4a05      	ldr	r2, [pc, #20]	@ (800a7d0 <prvInitialiseTaskLists+0x68>)
 800a7bc:	601a      	str	r2, [r3, #0]
}
 800a7be:	bf00      	nop
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20000908 	.word	0x20000908
 800a7cc:	20000d68 	.word	0x20000d68
 800a7d0:	20000d7c 	.word	0x20000d7c
 800a7d4:	20000d98 	.word	0x20000d98
 800a7d8:	20000dac 	.word	0x20000dac
 800a7dc:	20000dc4 	.word	0x20000dc4
 800a7e0:	20000d90 	.word	0x20000d90
 800a7e4:	20000d94 	.word	0x20000d94

0800a7e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7ee:	e019      	b.n	800a824 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a7f0:	f000 fde2 	bl	800b3b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7f4:	4b10      	ldr	r3, [pc, #64]	@ (800a838 <prvCheckTasksWaitingTermination+0x50>)
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	3304      	adds	r3, #4
 800a800:	4618      	mov	r0, r3
 800a802:	f7fe fc63 	bl	80090cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a806:	4b0d      	ldr	r3, [pc, #52]	@ (800a83c <prvCheckTasksWaitingTermination+0x54>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3b01      	subs	r3, #1
 800a80c:	4a0b      	ldr	r2, [pc, #44]	@ (800a83c <prvCheckTasksWaitingTermination+0x54>)
 800a80e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a810:	4b0b      	ldr	r3, [pc, #44]	@ (800a840 <prvCheckTasksWaitingTermination+0x58>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	3b01      	subs	r3, #1
 800a816:	4a0a      	ldr	r2, [pc, #40]	@ (800a840 <prvCheckTasksWaitingTermination+0x58>)
 800a818:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a81a:	f000 fdff 	bl	800b41c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f810 	bl	800a844 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a824:	4b06      	ldr	r3, [pc, #24]	@ (800a840 <prvCheckTasksWaitingTermination+0x58>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1e1      	bne.n	800a7f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a82c:	bf00      	nop
 800a82e:	bf00      	nop
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	20000dac 	.word	0x20000dac
 800a83c:	20000dd8 	.word	0x20000dd8
 800a840:	20000dc0 	.word	0x20000dc0

0800a844 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a852:	2b00      	cmp	r3, #0
 800a854:	d108      	bne.n	800a868 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 ff9c 	bl	800b798 <vPortFree>
				vPortFree( pxTCB );
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 ff99 	bl	800b798 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a866:	e019      	b.n	800a89c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d103      	bne.n	800a87a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 ff90 	bl	800b798 <vPortFree>
	}
 800a878:	e010      	b.n	800a89c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a880:	2b02      	cmp	r3, #2
 800a882:	d00b      	beq.n	800a89c <prvDeleteTCB+0x58>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	60fb      	str	r3, [r7, #12]
}
 800a896:	bf00      	nop
 800a898:	bf00      	nop
 800a89a:	e7fd      	b.n	800a898 <prvDeleteTCB+0x54>
	}
 800a89c:	bf00      	nop
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8aa:	4b0c      	ldr	r3, [pc, #48]	@ (800a8dc <prvResetNextTaskUnblockTime+0x38>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d104      	bne.n	800a8be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a8e0 <prvResetNextTaskUnblockTime+0x3c>)
 800a8b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a8ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8bc:	e008      	b.n	800a8d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8be:	4b07      	ldr	r3, [pc, #28]	@ (800a8dc <prvResetNextTaskUnblockTime+0x38>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	4a04      	ldr	r2, [pc, #16]	@ (800a8e0 <prvResetNextTaskUnblockTime+0x3c>)
 800a8ce:	6013      	str	r3, [r2, #0]
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	20000d90 	.word	0x20000d90
 800a8e0:	20000df8 	.word	0x20000df8

0800a8e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a8ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a918 <xTaskGetSchedulerState+0x34>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d102      	bne.n	800a8f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	607b      	str	r3, [r7, #4]
 800a8f6:	e008      	b.n	800a90a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8f8:	4b08      	ldr	r3, [pc, #32]	@ (800a91c <xTaskGetSchedulerState+0x38>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d102      	bne.n	800a906 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a900:	2302      	movs	r3, #2
 800a902:	607b      	str	r3, [r7, #4]
 800a904:	e001      	b.n	800a90a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a906:	2300      	movs	r3, #0
 800a908:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a90a:	687b      	ldr	r3, [r7, #4]
	}
 800a90c:	4618      	mov	r0, r3
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr
 800a918:	20000de4 	.word	0x20000de4
 800a91c:	20000e00 	.word	0x20000e00

0800a920 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a92c:	2300      	movs	r3, #0
 800a92e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d058      	beq.n	800a9e8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a936:	4b2f      	ldr	r3, [pc, #188]	@ (800a9f4 <xTaskPriorityDisinherit+0xd4>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	693a      	ldr	r2, [r7, #16]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d00b      	beq.n	800a958 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	60fb      	str	r3, [r7, #12]
}
 800a952:	bf00      	nop
 800a954:	bf00      	nop
 800a956:	e7fd      	b.n	800a954 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10b      	bne.n	800a978 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a964:	f383 8811 	msr	BASEPRI, r3
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	60bb      	str	r3, [r7, #8]
}
 800a972:	bf00      	nop
 800a974:	bf00      	nop
 800a976:	e7fd      	b.n	800a974 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a97c:	1e5a      	subs	r2, r3, #1
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d02c      	beq.n	800a9e8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a992:	2b00      	cmp	r3, #0
 800a994:	d128      	bne.n	800a9e8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	3304      	adds	r3, #4
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7fe fb96 	bl	80090cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f8 <xTaskPriorityDisinherit+0xd8>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d903      	bls.n	800a9c8 <xTaskPriorityDisinherit+0xa8>
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9c4:	4a0c      	ldr	r2, [pc, #48]	@ (800a9f8 <xTaskPriorityDisinherit+0xd8>)
 800a9c6:	6013      	str	r3, [r2, #0]
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4a09      	ldr	r2, [pc, #36]	@ (800a9fc <xTaskPriorityDisinherit+0xdc>)
 800a9d6:	441a      	add	r2, r3
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	4619      	mov	r1, r3
 800a9de:	4610      	mov	r0, r2
 800a9e0:	f7fe fb17 	bl	8009012 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a9e8:	697b      	ldr	r3, [r7, #20]
	}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3718      	adds	r7, #24
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	20000904 	.word	0x20000904
 800a9f8:	20000de0 	.word	0x20000de0
 800a9fc:	20000908 	.word	0x20000908

0800aa00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa0a:	4b21      	ldr	r3, [pc, #132]	@ (800aa90 <prvAddCurrentTaskToDelayedList+0x90>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa10:	4b20      	ldr	r3, [pc, #128]	@ (800aa94 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	3304      	adds	r3, #4
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fe fb58 	bl	80090cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa22:	d10a      	bne.n	800aa3a <prvAddCurrentTaskToDelayedList+0x3a>
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d007      	beq.n	800aa3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa2a:	4b1a      	ldr	r3, [pc, #104]	@ (800aa94 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	3304      	adds	r3, #4
 800aa30:	4619      	mov	r1, r3
 800aa32:	4819      	ldr	r0, [pc, #100]	@ (800aa98 <prvAddCurrentTaskToDelayedList+0x98>)
 800aa34:	f7fe faed 	bl	8009012 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa38:	e026      	b.n	800aa88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4413      	add	r3, r2
 800aa40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa42:	4b14      	ldr	r3, [pc, #80]	@ (800aa94 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d209      	bcs.n	800aa66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa52:	4b12      	ldr	r3, [pc, #72]	@ (800aa9c <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	4b0f      	ldr	r3, [pc, #60]	@ (800aa94 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	4610      	mov	r0, r2
 800aa60:	f7fe fafb 	bl	800905a <vListInsert>
}
 800aa64:	e010      	b.n	800aa88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa66:	4b0e      	ldr	r3, [pc, #56]	@ (800aaa0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	4b0a      	ldr	r3, [pc, #40]	@ (800aa94 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3304      	adds	r3, #4
 800aa70:	4619      	mov	r1, r3
 800aa72:	4610      	mov	r0, r2
 800aa74:	f7fe faf1 	bl	800905a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa78:	4b0a      	ldr	r3, [pc, #40]	@ (800aaa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d202      	bcs.n	800aa88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa82:	4a08      	ldr	r2, [pc, #32]	@ (800aaa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	6013      	str	r3, [r2, #0]
}
 800aa88:	bf00      	nop
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	20000ddc 	.word	0x20000ddc
 800aa94:	20000904 	.word	0x20000904
 800aa98:	20000dc4 	.word	0x20000dc4
 800aa9c:	20000d94 	.word	0x20000d94
 800aaa0:	20000d90 	.word	0x20000d90
 800aaa4:	20000df8 	.word	0x20000df8

0800aaa8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b08a      	sub	sp, #40	@ 0x28
 800aaac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aaae:	2300      	movs	r3, #0
 800aab0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aab2:	f000 fb13 	bl	800b0dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aab6:	4b1d      	ldr	r3, [pc, #116]	@ (800ab2c <xTimerCreateTimerTask+0x84>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d021      	beq.n	800ab02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aabe:	2300      	movs	r3, #0
 800aac0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aac2:	2300      	movs	r3, #0
 800aac4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aac6:	1d3a      	adds	r2, r7, #4
 800aac8:	f107 0108 	add.w	r1, r7, #8
 800aacc:	f107 030c 	add.w	r3, r7, #12
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7fe fa57 	bl	8008f84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aad6:	6879      	ldr	r1, [r7, #4]
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	9202      	str	r2, [sp, #8]
 800aade:	9301      	str	r3, [sp, #4]
 800aae0:	2302      	movs	r3, #2
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	2300      	movs	r3, #0
 800aae6:	460a      	mov	r2, r1
 800aae8:	4911      	ldr	r1, [pc, #68]	@ (800ab30 <xTimerCreateTimerTask+0x88>)
 800aaea:	4812      	ldr	r0, [pc, #72]	@ (800ab34 <xTimerCreateTimerTask+0x8c>)
 800aaec:	f7ff f8d0 	bl	8009c90 <xTaskCreateStatic>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	4a11      	ldr	r2, [pc, #68]	@ (800ab38 <xTimerCreateTimerTask+0x90>)
 800aaf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aaf6:	4b10      	ldr	r3, [pc, #64]	@ (800ab38 <xTimerCreateTimerTask+0x90>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aafe:	2301      	movs	r3, #1
 800ab00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10b      	bne.n	800ab20 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ab08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab0c:	f383 8811 	msr	BASEPRI, r3
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	613b      	str	r3, [r7, #16]
}
 800ab1a:	bf00      	nop
 800ab1c:	bf00      	nop
 800ab1e:	e7fd      	b.n	800ab1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ab20:	697b      	ldr	r3, [r7, #20]
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3718      	adds	r7, #24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	20000e34 	.word	0x20000e34
 800ab30:	0800c2d0 	.word	0x0800c2d0
 800ab34:	0800ac75 	.word	0x0800ac75
 800ab38:	20000e38 	.word	0x20000e38

0800ab3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b08a      	sub	sp, #40	@ 0x28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10b      	bne.n	800ab6c <xTimerGenericCommand+0x30>
	__asm volatile
 800ab54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	623b      	str	r3, [r7, #32]
}
 800ab66:	bf00      	nop
 800ab68:	bf00      	nop
 800ab6a:	e7fd      	b.n	800ab68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ab6c:	4b19      	ldr	r3, [pc, #100]	@ (800abd4 <xTimerGenericCommand+0x98>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d02a      	beq.n	800abca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2b05      	cmp	r3, #5
 800ab84:	dc18      	bgt.n	800abb8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab86:	f7ff fead 	bl	800a8e4 <xTaskGetSchedulerState>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d109      	bne.n	800aba4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab90:	4b10      	ldr	r3, [pc, #64]	@ (800abd4 <xTimerGenericCommand+0x98>)
 800ab92:	6818      	ldr	r0, [r3, #0]
 800ab94:	f107 0110 	add.w	r1, r7, #16
 800ab98:	2300      	movs	r3, #0
 800ab9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab9c:	f7fe fc06 	bl	80093ac <xQueueGenericSend>
 800aba0:	6278      	str	r0, [r7, #36]	@ 0x24
 800aba2:	e012      	b.n	800abca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aba4:	4b0b      	ldr	r3, [pc, #44]	@ (800abd4 <xTimerGenericCommand+0x98>)
 800aba6:	6818      	ldr	r0, [r3, #0]
 800aba8:	f107 0110 	add.w	r1, r7, #16
 800abac:	2300      	movs	r3, #0
 800abae:	2200      	movs	r2, #0
 800abb0:	f7fe fbfc 	bl	80093ac <xQueueGenericSend>
 800abb4:	6278      	str	r0, [r7, #36]	@ 0x24
 800abb6:	e008      	b.n	800abca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800abb8:	4b06      	ldr	r3, [pc, #24]	@ (800abd4 <xTimerGenericCommand+0x98>)
 800abba:	6818      	ldr	r0, [r3, #0]
 800abbc:	f107 0110 	add.w	r1, r7, #16
 800abc0:	2300      	movs	r3, #0
 800abc2:	683a      	ldr	r2, [r7, #0]
 800abc4:	f7fe fcf4 	bl	80095b0 <xQueueGenericSendFromISR>
 800abc8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800abca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3728      	adds	r7, #40	@ 0x28
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	20000e34 	.word	0x20000e34

0800abd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b088      	sub	sp, #32
 800abdc:	af02      	add	r7, sp, #8
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abe2:	4b23      	ldr	r3, [pc, #140]	@ (800ac70 <prvProcessExpiredTimer+0x98>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	3304      	adds	r3, #4
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7fe fa6b 	bl	80090cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abfc:	f003 0304 	and.w	r3, r3, #4
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d023      	beq.n	800ac4c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	699a      	ldr	r2, [r3, #24]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	18d1      	adds	r1, r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	683a      	ldr	r2, [r7, #0]
 800ac10:	6978      	ldr	r0, [r7, #20]
 800ac12:	f000 f8d5 	bl	800adc0 <prvInsertTimerInActiveList>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d020      	beq.n	800ac5e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	2300      	movs	r3, #0
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	2100      	movs	r1, #0
 800ac26:	6978      	ldr	r0, [r7, #20]
 800ac28:	f7ff ff88 	bl	800ab3c <xTimerGenericCommand>
 800ac2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d114      	bne.n	800ac5e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ac34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	60fb      	str	r3, [r7, #12]
}
 800ac46:	bf00      	nop
 800ac48:	bf00      	nop
 800ac4a:	e7fd      	b.n	800ac48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac52:	f023 0301 	bic.w	r3, r3, #1
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	6978      	ldr	r0, [r7, #20]
 800ac64:	4798      	blx	r3
}
 800ac66:	bf00      	nop
 800ac68:	3718      	adds	r7, #24
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	20000e2c 	.word	0x20000e2c

0800ac74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac7c:	f107 0308 	add.w	r3, r7, #8
 800ac80:	4618      	mov	r0, r3
 800ac82:	f000 f859 	bl	800ad38 <prvGetNextExpireTime>
 800ac86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f000 f805 	bl	800ac9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac92:	f000 f8d7 	bl	800ae44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac96:	bf00      	nop
 800ac98:	e7f0      	b.n	800ac7c <prvTimerTask+0x8>
	...

0800ac9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aca6:	f7ff fa37 	bl	800a118 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800acaa:	f107 0308 	add.w	r3, r7, #8
 800acae:	4618      	mov	r0, r3
 800acb0:	f000 f866 	bl	800ad80 <prvSampleTimeNow>
 800acb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d130      	bne.n	800ad1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10a      	bne.n	800acd8 <prvProcessTimerOrBlockTask+0x3c>
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d806      	bhi.n	800acd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800acca:	f7ff fa33 	bl	800a134 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800acce:	68f9      	ldr	r1, [r7, #12]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff ff81 	bl	800abd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800acd6:	e024      	b.n	800ad22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d008      	beq.n	800acf0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800acde:	4b13      	ldr	r3, [pc, #76]	@ (800ad2c <prvProcessTimerOrBlockTask+0x90>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <prvProcessTimerOrBlockTask+0x50>
 800ace8:	2301      	movs	r3, #1
 800acea:	e000      	b.n	800acee <prvProcessTimerOrBlockTask+0x52>
 800acec:	2300      	movs	r3, #0
 800acee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800acf0:	4b0f      	ldr	r3, [pc, #60]	@ (800ad30 <prvProcessTimerOrBlockTask+0x94>)
 800acf2:	6818      	ldr	r0, [r3, #0]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	683a      	ldr	r2, [r7, #0]
 800acfc:	4619      	mov	r1, r3
 800acfe:	f7fe ff93 	bl	8009c28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad02:	f7ff fa17 	bl	800a134 <xTaskResumeAll>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10a      	bne.n	800ad22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ad0c:	4b09      	ldr	r3, [pc, #36]	@ (800ad34 <prvProcessTimerOrBlockTask+0x98>)
 800ad0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	f3bf 8f6f 	isb	sy
}
 800ad1c:	e001      	b.n	800ad22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ad1e:	f7ff fa09 	bl	800a134 <xTaskResumeAll>
}
 800ad22:	bf00      	nop
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	20000e30 	.word	0x20000e30
 800ad30:	20000e34 	.word	0x20000e34
 800ad34:	e000ed04 	.word	0xe000ed04

0800ad38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad40:	4b0e      	ldr	r3, [pc, #56]	@ (800ad7c <prvGetNextExpireTime+0x44>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d101      	bne.n	800ad4e <prvGetNextExpireTime+0x16>
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	e000      	b.n	800ad50 <prvGetNextExpireTime+0x18>
 800ad4e:	2200      	movs	r2, #0
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d105      	bne.n	800ad68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad5c:	4b07      	ldr	r3, [pc, #28]	@ (800ad7c <prvGetNextExpireTime+0x44>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	60fb      	str	r3, [r7, #12]
 800ad66:	e001      	b.n	800ad6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	20000e2c 	.word	0x20000e2c

0800ad80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad88:	f7ff fa72 	bl	800a270 <xTaskGetTickCount>
 800ad8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad8e:	4b0b      	ldr	r3, [pc, #44]	@ (800adbc <prvSampleTimeNow+0x3c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d205      	bcs.n	800ada4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad98:	f000 f93a 	bl	800b010 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	601a      	str	r2, [r3, #0]
 800ada2:	e002      	b.n	800adaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800adaa:	4a04      	ldr	r2, [pc, #16]	@ (800adbc <prvSampleTimeNow+0x3c>)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800adb0:	68fb      	ldr	r3, [r7, #12]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	20000e3c 	.word	0x20000e3c

0800adc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800adce:	2300      	movs	r3, #0
 800add0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	68ba      	ldr	r2, [r7, #8]
 800add6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800adde:	68ba      	ldr	r2, [r7, #8]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d812      	bhi.n	800ae0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	1ad2      	subs	r2, r2, r3
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d302      	bcc.n	800adfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800adf4:	2301      	movs	r3, #1
 800adf6:	617b      	str	r3, [r7, #20]
 800adf8:	e01b      	b.n	800ae32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800adfa:	4b10      	ldr	r3, [pc, #64]	@ (800ae3c <prvInsertTimerInActiveList+0x7c>)
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	3304      	adds	r3, #4
 800ae02:	4619      	mov	r1, r3
 800ae04:	4610      	mov	r0, r2
 800ae06:	f7fe f928 	bl	800905a <vListInsert>
 800ae0a:	e012      	b.n	800ae32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d206      	bcs.n	800ae22 <prvInsertTimerInActiveList+0x62>
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d302      	bcc.n	800ae22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	617b      	str	r3, [r7, #20]
 800ae20:	e007      	b.n	800ae32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae22:	4b07      	ldr	r3, [pc, #28]	@ (800ae40 <prvInsertTimerInActiveList+0x80>)
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	3304      	adds	r3, #4
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	4610      	mov	r0, r2
 800ae2e:	f7fe f914 	bl	800905a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae32:	697b      	ldr	r3, [r7, #20]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3718      	adds	r7, #24
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	20000e30 	.word	0x20000e30
 800ae40:	20000e2c 	.word	0x20000e2c

0800ae44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b08e      	sub	sp, #56	@ 0x38
 800ae48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae4a:	e0ce      	b.n	800afea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	da19      	bge.n	800ae86 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae52:	1d3b      	adds	r3, r7, #4
 800ae54:	3304      	adds	r3, #4
 800ae56:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10b      	bne.n	800ae76 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	61fb      	str	r3, [r7, #28]
}
 800ae70:	bf00      	nop
 800ae72:	bf00      	nop
 800ae74:	e7fd      	b.n	800ae72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ae76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae7c:	6850      	ldr	r0, [r2, #4]
 800ae7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae80:	6892      	ldr	r2, [r2, #8]
 800ae82:	4611      	mov	r1, r2
 800ae84:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f2c0 80ae 	blt.w	800afea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d004      	beq.n	800aea4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fe f914 	bl	80090cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aea4:	463b      	mov	r3, r7
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7ff ff6a 	bl	800ad80 <prvSampleTimeNow>
 800aeac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b09      	cmp	r3, #9
 800aeb2:	f200 8097 	bhi.w	800afe4 <prvProcessReceivedCommands+0x1a0>
 800aeb6:	a201      	add	r2, pc, #4	@ (adr r2, 800aebc <prvProcessReceivedCommands+0x78>)
 800aeb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aebc:	0800aee5 	.word	0x0800aee5
 800aec0:	0800aee5 	.word	0x0800aee5
 800aec4:	0800aee5 	.word	0x0800aee5
 800aec8:	0800af5b 	.word	0x0800af5b
 800aecc:	0800af6f 	.word	0x0800af6f
 800aed0:	0800afbb 	.word	0x0800afbb
 800aed4:	0800aee5 	.word	0x0800aee5
 800aed8:	0800aee5 	.word	0x0800aee5
 800aedc:	0800af5b 	.word	0x0800af5b
 800aee0:	0800af6f 	.word	0x0800af6f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aeea:	f043 0301 	orr.w	r3, r3, #1
 800aeee:	b2da      	uxtb	r2, r3
 800aef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	18d1      	adds	r1, r2, r3
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af04:	f7ff ff5c 	bl	800adc0 <prvInsertTimerInActiveList>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d06c      	beq.n	800afe8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af1c:	f003 0304 	and.w	r3, r3, #4
 800af20:	2b00      	cmp	r3, #0
 800af22:	d061      	beq.n	800afe8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af24:	68ba      	ldr	r2, [r7, #8]
 800af26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	441a      	add	r2, r3
 800af2c:	2300      	movs	r3, #0
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	2300      	movs	r3, #0
 800af32:	2100      	movs	r1, #0
 800af34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af36:	f7ff fe01 	bl	800ab3c <xTimerGenericCommand>
 800af3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af3c:	6a3b      	ldr	r3, [r7, #32]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d152      	bne.n	800afe8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800af42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af46:	f383 8811 	msr	BASEPRI, r3
 800af4a:	f3bf 8f6f 	isb	sy
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	61bb      	str	r3, [r7, #24]
}
 800af54:	bf00      	nop
 800af56:	bf00      	nop
 800af58:	e7fd      	b.n	800af56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af60:	f023 0301 	bic.w	r3, r3, #1
 800af64:	b2da      	uxtb	r2, r3
 800af66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800af6c:	e03d      	b.n	800afea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af74:	f043 0301 	orr.w	r3, r3, #1
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af84:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d10b      	bne.n	800afa6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800af8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af92:	f383 8811 	msr	BASEPRI, r3
 800af96:	f3bf 8f6f 	isb	sy
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	617b      	str	r3, [r7, #20]
}
 800afa0:	bf00      	nop
 800afa2:	bf00      	nop
 800afa4:	e7fd      	b.n	800afa2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800afa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa8:	699a      	ldr	r2, [r3, #24]
 800afaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afac:	18d1      	adds	r1, r2, r3
 800afae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afb4:	f7ff ff04 	bl	800adc0 <prvInsertTimerInActiveList>
					break;
 800afb8:	e017      	b.n	800afea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800afba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afc0:	f003 0302 	and.w	r3, r3, #2
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d103      	bne.n	800afd0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800afc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afca:	f000 fbe5 	bl	800b798 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800afce:	e00c      	b.n	800afea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afd6:	f023 0301 	bic.w	r3, r3, #1
 800afda:	b2da      	uxtb	r2, r3
 800afdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800afe2:	e002      	b.n	800afea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800afe4:	bf00      	nop
 800afe6:	e000      	b.n	800afea <prvProcessReceivedCommands+0x1a6>
					break;
 800afe8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afea:	4b08      	ldr	r3, [pc, #32]	@ (800b00c <prvProcessReceivedCommands+0x1c8>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	1d39      	adds	r1, r7, #4
 800aff0:	2200      	movs	r2, #0
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7fe fb7a 	bl	80096ec <xQueueReceive>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	f47f af26 	bne.w	800ae4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b000:	bf00      	nop
 800b002:	bf00      	nop
 800b004:	3730      	adds	r7, #48	@ 0x30
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	20000e34 	.word	0x20000e34

0800b010 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b088      	sub	sp, #32
 800b014:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b016:	e049      	b.n	800b0ac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b018:	4b2e      	ldr	r3, [pc, #184]	@ (800b0d4 <prvSwitchTimerLists+0xc4>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b022:	4b2c      	ldr	r3, [pc, #176]	@ (800b0d4 <prvSwitchTimerLists+0xc4>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	3304      	adds	r3, #4
 800b030:	4618      	mov	r0, r3
 800b032:	f7fe f84b 	bl	80090cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6a1b      	ldr	r3, [r3, #32]
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b044:	f003 0304 	and.w	r3, r3, #4
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d02f      	beq.n	800b0ac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	699b      	ldr	r3, [r3, #24]
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	4413      	add	r3, r2
 800b054:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b056:	68ba      	ldr	r2, [r7, #8]
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d90e      	bls.n	800b07c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	68ba      	ldr	r2, [r7, #8]
 800b062:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b06a:	4b1a      	ldr	r3, [pc, #104]	@ (800b0d4 <prvSwitchTimerLists+0xc4>)
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3304      	adds	r3, #4
 800b072:	4619      	mov	r1, r3
 800b074:	4610      	mov	r0, r2
 800b076:	f7fd fff0 	bl	800905a <vListInsert>
 800b07a:	e017      	b.n	800b0ac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b07c:	2300      	movs	r3, #0
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	2300      	movs	r3, #0
 800b082:	693a      	ldr	r2, [r7, #16]
 800b084:	2100      	movs	r1, #0
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f7ff fd58 	bl	800ab3c <xTimerGenericCommand>
 800b08c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10b      	bne.n	800b0ac <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	603b      	str	r3, [r7, #0]
}
 800b0a6:	bf00      	nop
 800b0a8:	bf00      	nop
 800b0aa:	e7fd      	b.n	800b0a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0ac:	4b09      	ldr	r3, [pc, #36]	@ (800b0d4 <prvSwitchTimerLists+0xc4>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1b0      	bne.n	800b018 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b0b6:	4b07      	ldr	r3, [pc, #28]	@ (800b0d4 <prvSwitchTimerLists+0xc4>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b0bc:	4b06      	ldr	r3, [pc, #24]	@ (800b0d8 <prvSwitchTimerLists+0xc8>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a04      	ldr	r2, [pc, #16]	@ (800b0d4 <prvSwitchTimerLists+0xc4>)
 800b0c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b0c4:	4a04      	ldr	r2, [pc, #16]	@ (800b0d8 <prvSwitchTimerLists+0xc8>)
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	6013      	str	r3, [r2, #0]
}
 800b0ca:	bf00      	nop
 800b0cc:	3718      	adds	r7, #24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20000e2c 	.word	0x20000e2c
 800b0d8:	20000e30 	.word	0x20000e30

0800b0dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b0e2:	f000 f969 	bl	800b3b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b0e6:	4b15      	ldr	r3, [pc, #84]	@ (800b13c <prvCheckForValidListAndQueue+0x60>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d120      	bne.n	800b130 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b0ee:	4814      	ldr	r0, [pc, #80]	@ (800b140 <prvCheckForValidListAndQueue+0x64>)
 800b0f0:	f7fd ff62 	bl	8008fb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b0f4:	4813      	ldr	r0, [pc, #76]	@ (800b144 <prvCheckForValidListAndQueue+0x68>)
 800b0f6:	f7fd ff5f 	bl	8008fb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b0fa:	4b13      	ldr	r3, [pc, #76]	@ (800b148 <prvCheckForValidListAndQueue+0x6c>)
 800b0fc:	4a10      	ldr	r2, [pc, #64]	@ (800b140 <prvCheckForValidListAndQueue+0x64>)
 800b0fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b100:	4b12      	ldr	r3, [pc, #72]	@ (800b14c <prvCheckForValidListAndQueue+0x70>)
 800b102:	4a10      	ldr	r2, [pc, #64]	@ (800b144 <prvCheckForValidListAndQueue+0x68>)
 800b104:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b106:	2300      	movs	r3, #0
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	4b11      	ldr	r3, [pc, #68]	@ (800b150 <prvCheckForValidListAndQueue+0x74>)
 800b10c:	4a11      	ldr	r2, [pc, #68]	@ (800b154 <prvCheckForValidListAndQueue+0x78>)
 800b10e:	2110      	movs	r1, #16
 800b110:	200a      	movs	r0, #10
 800b112:	f7fe f86f 	bl	80091f4 <xQueueGenericCreateStatic>
 800b116:	4603      	mov	r3, r0
 800b118:	4a08      	ldr	r2, [pc, #32]	@ (800b13c <prvCheckForValidListAndQueue+0x60>)
 800b11a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b11c:	4b07      	ldr	r3, [pc, #28]	@ (800b13c <prvCheckForValidListAndQueue+0x60>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d005      	beq.n	800b130 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b124:	4b05      	ldr	r3, [pc, #20]	@ (800b13c <prvCheckForValidListAndQueue+0x60>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	490b      	ldr	r1, [pc, #44]	@ (800b158 <prvCheckForValidListAndQueue+0x7c>)
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7fe fd52 	bl	8009bd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b130:	f000 f974 	bl	800b41c <vPortExitCritical>
}
 800b134:	bf00      	nop
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	20000e34 	.word	0x20000e34
 800b140:	20000e04 	.word	0x20000e04
 800b144:	20000e18 	.word	0x20000e18
 800b148:	20000e2c 	.word	0x20000e2c
 800b14c:	20000e30 	.word	0x20000e30
 800b150:	20000ee0 	.word	0x20000ee0
 800b154:	20000e40 	.word	0x20000e40
 800b158:	0800c2d8 	.word	0x0800c2d8

0800b15c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	3b04      	subs	r3, #4
 800b16c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	3b04      	subs	r3, #4
 800b17a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	f023 0201 	bic.w	r2, r3, #1
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3b04      	subs	r3, #4
 800b18a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b18c:	4a0c      	ldr	r2, [pc, #48]	@ (800b1c0 <pxPortInitialiseStack+0x64>)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3b14      	subs	r3, #20
 800b196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	3b04      	subs	r3, #4
 800b1a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f06f 0202 	mvn.w	r2, #2
 800b1aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	3b20      	subs	r3, #32
 800b1b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	0800b1c5 	.word	0x0800b1c5

0800b1c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1ce:	4b13      	ldr	r3, [pc, #76]	@ (800b21c <prvTaskExitError+0x58>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1d6:	d00b      	beq.n	800b1f0 <prvTaskExitError+0x2c>
	__asm volatile
 800b1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1dc:	f383 8811 	msr	BASEPRI, r3
 800b1e0:	f3bf 8f6f 	isb	sy
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	60fb      	str	r3, [r7, #12]
}
 800b1ea:	bf00      	nop
 800b1ec:	bf00      	nop
 800b1ee:	e7fd      	b.n	800b1ec <prvTaskExitError+0x28>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	60bb      	str	r3, [r7, #8]
}
 800b202:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b204:	bf00      	nop
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d0fc      	beq.n	800b206 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b20c:	bf00      	nop
 800b20e:	bf00      	nop
 800b210:	3714      	adds	r7, #20
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	2000002c 	.word	0x2000002c

0800b220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b220:	4b07      	ldr	r3, [pc, #28]	@ (800b240 <pxCurrentTCBConst2>)
 800b222:	6819      	ldr	r1, [r3, #0]
 800b224:	6808      	ldr	r0, [r1, #0]
 800b226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22a:	f380 8809 	msr	PSP, r0
 800b22e:	f3bf 8f6f 	isb	sy
 800b232:	f04f 0000 	mov.w	r0, #0
 800b236:	f380 8811 	msr	BASEPRI, r0
 800b23a:	4770      	bx	lr
 800b23c:	f3af 8000 	nop.w

0800b240 <pxCurrentTCBConst2>:
 800b240:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b244:	bf00      	nop
 800b246:	bf00      	nop

0800b248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b248:	4808      	ldr	r0, [pc, #32]	@ (800b26c <prvPortStartFirstTask+0x24>)
 800b24a:	6800      	ldr	r0, [r0, #0]
 800b24c:	6800      	ldr	r0, [r0, #0]
 800b24e:	f380 8808 	msr	MSP, r0
 800b252:	f04f 0000 	mov.w	r0, #0
 800b256:	f380 8814 	msr	CONTROL, r0
 800b25a:	b662      	cpsie	i
 800b25c:	b661      	cpsie	f
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	df00      	svc	0
 800b268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b26a:	bf00      	nop
 800b26c:	e000ed08 	.word	0xe000ed08

0800b270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b276:	4b47      	ldr	r3, [pc, #284]	@ (800b394 <xPortStartScheduler+0x124>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a47      	ldr	r2, [pc, #284]	@ (800b398 <xPortStartScheduler+0x128>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d10b      	bne.n	800b298 <xPortStartScheduler+0x28>
	__asm volatile
 800b280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b284:	f383 8811 	msr	BASEPRI, r3
 800b288:	f3bf 8f6f 	isb	sy
 800b28c:	f3bf 8f4f 	dsb	sy
 800b290:	613b      	str	r3, [r7, #16]
}
 800b292:	bf00      	nop
 800b294:	bf00      	nop
 800b296:	e7fd      	b.n	800b294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b298:	4b3e      	ldr	r3, [pc, #248]	@ (800b394 <xPortStartScheduler+0x124>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a3f      	ldr	r2, [pc, #252]	@ (800b39c <xPortStartScheduler+0x12c>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d10b      	bne.n	800b2ba <xPortStartScheduler+0x4a>
	__asm volatile
 800b2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a6:	f383 8811 	msr	BASEPRI, r3
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	60fb      	str	r3, [r7, #12]
}
 800b2b4:	bf00      	nop
 800b2b6:	bf00      	nop
 800b2b8:	e7fd      	b.n	800b2b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b2ba:	4b39      	ldr	r3, [pc, #228]	@ (800b3a0 <xPortStartScheduler+0x130>)
 800b2bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	22ff      	movs	r2, #255	@ 0xff
 800b2ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2d4:	78fb      	ldrb	r3, [r7, #3]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	4b31      	ldr	r3, [pc, #196]	@ (800b3a4 <xPortStartScheduler+0x134>)
 800b2e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b2e2:	4b31      	ldr	r3, [pc, #196]	@ (800b3a8 <xPortStartScheduler+0x138>)
 800b2e4:	2207      	movs	r2, #7
 800b2e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2e8:	e009      	b.n	800b2fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b2ea:	4b2f      	ldr	r3, [pc, #188]	@ (800b3a8 <xPortStartScheduler+0x138>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	4a2d      	ldr	r2, [pc, #180]	@ (800b3a8 <xPortStartScheduler+0x138>)
 800b2f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2f4:	78fb      	ldrb	r3, [r7, #3]
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	005b      	lsls	r3, r3, #1
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2fe:	78fb      	ldrb	r3, [r7, #3]
 800b300:	b2db      	uxtb	r3, r3
 800b302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b306:	2b80      	cmp	r3, #128	@ 0x80
 800b308:	d0ef      	beq.n	800b2ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b30a:	4b27      	ldr	r3, [pc, #156]	@ (800b3a8 <xPortStartScheduler+0x138>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f1c3 0307 	rsb	r3, r3, #7
 800b312:	2b04      	cmp	r3, #4
 800b314:	d00b      	beq.n	800b32e <xPortStartScheduler+0xbe>
	__asm volatile
 800b316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	60bb      	str	r3, [r7, #8]
}
 800b328:	bf00      	nop
 800b32a:	bf00      	nop
 800b32c:	e7fd      	b.n	800b32a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b32e:	4b1e      	ldr	r3, [pc, #120]	@ (800b3a8 <xPortStartScheduler+0x138>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	021b      	lsls	r3, r3, #8
 800b334:	4a1c      	ldr	r2, [pc, #112]	@ (800b3a8 <xPortStartScheduler+0x138>)
 800b336:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b338:	4b1b      	ldr	r3, [pc, #108]	@ (800b3a8 <xPortStartScheduler+0x138>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b340:	4a19      	ldr	r2, [pc, #100]	@ (800b3a8 <xPortStartScheduler+0x138>)
 800b342:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	b2da      	uxtb	r2, r3
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b34c:	4b17      	ldr	r3, [pc, #92]	@ (800b3ac <xPortStartScheduler+0x13c>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a16      	ldr	r2, [pc, #88]	@ (800b3ac <xPortStartScheduler+0x13c>)
 800b352:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b358:	4b14      	ldr	r3, [pc, #80]	@ (800b3ac <xPortStartScheduler+0x13c>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a13      	ldr	r2, [pc, #76]	@ (800b3ac <xPortStartScheduler+0x13c>)
 800b35e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b362:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b364:	f000 f8da 	bl	800b51c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b368:	4b11      	ldr	r3, [pc, #68]	@ (800b3b0 <xPortStartScheduler+0x140>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b36e:	f000 f8f9 	bl	800b564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b372:	4b10      	ldr	r3, [pc, #64]	@ (800b3b4 <xPortStartScheduler+0x144>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a0f      	ldr	r2, [pc, #60]	@ (800b3b4 <xPortStartScheduler+0x144>)
 800b378:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b37c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b37e:	f7ff ff63 	bl	800b248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b382:	f7ff f83f 	bl	800a404 <vTaskSwitchContext>
	prvTaskExitError();
 800b386:	f7ff ff1d 	bl	800b1c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	e000ed00 	.word	0xe000ed00
 800b398:	410fc271 	.word	0x410fc271
 800b39c:	410fc270 	.word	0x410fc270
 800b3a0:	e000e400 	.word	0xe000e400
 800b3a4:	20000f30 	.word	0x20000f30
 800b3a8:	20000f34 	.word	0x20000f34
 800b3ac:	e000ed20 	.word	0xe000ed20
 800b3b0:	2000002c 	.word	0x2000002c
 800b3b4:	e000ef34 	.word	0xe000ef34

0800b3b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	607b      	str	r3, [r7, #4]
}
 800b3d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b3d2:	4b10      	ldr	r3, [pc, #64]	@ (800b414 <vPortEnterCritical+0x5c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	4a0e      	ldr	r2, [pc, #56]	@ (800b414 <vPortEnterCritical+0x5c>)
 800b3da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b3dc:	4b0d      	ldr	r3, [pc, #52]	@ (800b414 <vPortEnterCritical+0x5c>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d110      	bne.n	800b406 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b418 <vPortEnterCritical+0x60>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00b      	beq.n	800b406 <vPortEnterCritical+0x4e>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	603b      	str	r3, [r7, #0]
}
 800b400:	bf00      	nop
 800b402:	bf00      	nop
 800b404:	e7fd      	b.n	800b402 <vPortEnterCritical+0x4a>
	}
}
 800b406:	bf00      	nop
 800b408:	370c      	adds	r7, #12
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	2000002c 	.word	0x2000002c
 800b418:	e000ed04 	.word	0xe000ed04

0800b41c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b422:	4b12      	ldr	r3, [pc, #72]	@ (800b46c <vPortExitCritical+0x50>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10b      	bne.n	800b442 <vPortExitCritical+0x26>
	__asm volatile
 800b42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b42e:	f383 8811 	msr	BASEPRI, r3
 800b432:	f3bf 8f6f 	isb	sy
 800b436:	f3bf 8f4f 	dsb	sy
 800b43a:	607b      	str	r3, [r7, #4]
}
 800b43c:	bf00      	nop
 800b43e:	bf00      	nop
 800b440:	e7fd      	b.n	800b43e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b442:	4b0a      	ldr	r3, [pc, #40]	@ (800b46c <vPortExitCritical+0x50>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	3b01      	subs	r3, #1
 800b448:	4a08      	ldr	r2, [pc, #32]	@ (800b46c <vPortExitCritical+0x50>)
 800b44a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b44c:	4b07      	ldr	r3, [pc, #28]	@ (800b46c <vPortExitCritical+0x50>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d105      	bne.n	800b460 <vPortExitCritical+0x44>
 800b454:	2300      	movs	r3, #0
 800b456:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	f383 8811 	msr	BASEPRI, r3
}
 800b45e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b460:	bf00      	nop
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	2000002c 	.word	0x2000002c

0800b470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b470:	f3ef 8009 	mrs	r0, PSP
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	4b15      	ldr	r3, [pc, #84]	@ (800b4d0 <pxCurrentTCBConst>)
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	f01e 0f10 	tst.w	lr, #16
 800b480:	bf08      	it	eq
 800b482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48a:	6010      	str	r0, [r2, #0]
 800b48c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b490:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b494:	f380 8811 	msr	BASEPRI, r0
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	f7fe ffb0 	bl	800a404 <vTaskSwitchContext>
 800b4a4:	f04f 0000 	mov.w	r0, #0
 800b4a8:	f380 8811 	msr	BASEPRI, r0
 800b4ac:	bc09      	pop	{r0, r3}
 800b4ae:	6819      	ldr	r1, [r3, #0]
 800b4b0:	6808      	ldr	r0, [r1, #0]
 800b4b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b6:	f01e 0f10 	tst.w	lr, #16
 800b4ba:	bf08      	it	eq
 800b4bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b4c0:	f380 8809 	msr	PSP, r0
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	f3af 8000 	nop.w

0800b4d0 <pxCurrentTCBConst>:
 800b4d0:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b4d4:	bf00      	nop
 800b4d6:	bf00      	nop

0800b4d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	607b      	str	r3, [r7, #4]
}
 800b4f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4f2:	f7fe fecd 	bl	800a290 <xTaskIncrementTick>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d003      	beq.n	800b504 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4fc:	4b06      	ldr	r3, [pc, #24]	@ (800b518 <xPortSysTickHandler+0x40>)
 800b4fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b502:	601a      	str	r2, [r3, #0]
 800b504:	2300      	movs	r3, #0
 800b506:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	f383 8811 	msr	BASEPRI, r3
}
 800b50e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b510:	bf00      	nop
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	e000ed04 	.word	0xe000ed04

0800b51c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b51c:	b480      	push	{r7}
 800b51e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b520:	4b0b      	ldr	r3, [pc, #44]	@ (800b550 <vPortSetupTimerInterrupt+0x34>)
 800b522:	2200      	movs	r2, #0
 800b524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b526:	4b0b      	ldr	r3, [pc, #44]	@ (800b554 <vPortSetupTimerInterrupt+0x38>)
 800b528:	2200      	movs	r2, #0
 800b52a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b52c:	4b0a      	ldr	r3, [pc, #40]	@ (800b558 <vPortSetupTimerInterrupt+0x3c>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a0a      	ldr	r2, [pc, #40]	@ (800b55c <vPortSetupTimerInterrupt+0x40>)
 800b532:	fba2 2303 	umull	r2, r3, r2, r3
 800b536:	099b      	lsrs	r3, r3, #6
 800b538:	4a09      	ldr	r2, [pc, #36]	@ (800b560 <vPortSetupTimerInterrupt+0x44>)
 800b53a:	3b01      	subs	r3, #1
 800b53c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b53e:	4b04      	ldr	r3, [pc, #16]	@ (800b550 <vPortSetupTimerInterrupt+0x34>)
 800b540:	2207      	movs	r2, #7
 800b542:	601a      	str	r2, [r3, #0]
}
 800b544:	bf00      	nop
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	e000e010 	.word	0xe000e010
 800b554:	e000e018 	.word	0xe000e018
 800b558:	20000000 	.word	0x20000000
 800b55c:	10624dd3 	.word	0x10624dd3
 800b560:	e000e014 	.word	0xe000e014

0800b564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b564:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b574 <vPortEnableVFP+0x10>
 800b568:	6801      	ldr	r1, [r0, #0]
 800b56a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b56e:	6001      	str	r1, [r0, #0]
 800b570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b572:	bf00      	nop
 800b574:	e000ed88 	.word	0xe000ed88

0800b578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b57e:	f3ef 8305 	mrs	r3, IPSR
 800b582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2b0f      	cmp	r3, #15
 800b588:	d915      	bls.n	800b5b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b58a:	4a18      	ldr	r2, [pc, #96]	@ (800b5ec <vPortValidateInterruptPriority+0x74>)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	4413      	add	r3, r2
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b594:	4b16      	ldr	r3, [pc, #88]	@ (800b5f0 <vPortValidateInterruptPriority+0x78>)
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	7afa      	ldrb	r2, [r7, #11]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d20b      	bcs.n	800b5b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a2:	f383 8811 	msr	BASEPRI, r3
 800b5a6:	f3bf 8f6f 	isb	sy
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	607b      	str	r3, [r7, #4]
}
 800b5b0:	bf00      	nop
 800b5b2:	bf00      	nop
 800b5b4:	e7fd      	b.n	800b5b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b5b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b5f4 <vPortValidateInterruptPriority+0x7c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b5be:	4b0e      	ldr	r3, [pc, #56]	@ (800b5f8 <vPortValidateInterruptPriority+0x80>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d90b      	bls.n	800b5de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ca:	f383 8811 	msr	BASEPRI, r3
 800b5ce:	f3bf 8f6f 	isb	sy
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	603b      	str	r3, [r7, #0]
}
 800b5d8:	bf00      	nop
 800b5da:	bf00      	nop
 800b5dc:	e7fd      	b.n	800b5da <vPortValidateInterruptPriority+0x62>
	}
 800b5de:	bf00      	nop
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	e000e3f0 	.word	0xe000e3f0
 800b5f0:	20000f30 	.word	0x20000f30
 800b5f4:	e000ed0c 	.word	0xe000ed0c
 800b5f8:	20000f34 	.word	0x20000f34

0800b5fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b08a      	sub	sp, #40	@ 0x28
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b604:	2300      	movs	r3, #0
 800b606:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b608:	f7fe fd86 	bl	800a118 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b60c:	4b5c      	ldr	r3, [pc, #368]	@ (800b780 <pvPortMalloc+0x184>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d101      	bne.n	800b618 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b614:	f000 f924 	bl	800b860 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b618:	4b5a      	ldr	r3, [pc, #360]	@ (800b784 <pvPortMalloc+0x188>)
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4013      	ands	r3, r2
 800b620:	2b00      	cmp	r3, #0
 800b622:	f040 8095 	bne.w	800b750 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d01e      	beq.n	800b66a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b62c:	2208      	movs	r2, #8
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4413      	add	r3, r2
 800b632:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f003 0307 	and.w	r3, r3, #7
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d015      	beq.n	800b66a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f023 0307 	bic.w	r3, r3, #7
 800b644:	3308      	adds	r3, #8
 800b646:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f003 0307 	and.w	r3, r3, #7
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00b      	beq.n	800b66a <pvPortMalloc+0x6e>
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	617b      	str	r3, [r7, #20]
}
 800b664:	bf00      	nop
 800b666:	bf00      	nop
 800b668:	e7fd      	b.n	800b666 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d06f      	beq.n	800b750 <pvPortMalloc+0x154>
 800b670:	4b45      	ldr	r3, [pc, #276]	@ (800b788 <pvPortMalloc+0x18c>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	429a      	cmp	r2, r3
 800b678:	d86a      	bhi.n	800b750 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b67a:	4b44      	ldr	r3, [pc, #272]	@ (800b78c <pvPortMalloc+0x190>)
 800b67c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b67e:	4b43      	ldr	r3, [pc, #268]	@ (800b78c <pvPortMalloc+0x190>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b684:	e004      	b.n	800b690 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b688:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	429a      	cmp	r2, r3
 800b698:	d903      	bls.n	800b6a2 <pvPortMalloc+0xa6>
 800b69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1f1      	bne.n	800b686 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6a2:	4b37      	ldr	r3, [pc, #220]	@ (800b780 <pvPortMalloc+0x184>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d051      	beq.n	800b750 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2208      	movs	r2, #8
 800b6b2:	4413      	add	r3, r2
 800b6b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	6a3b      	ldr	r3, [r7, #32]
 800b6bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c0:	685a      	ldr	r2, [r3, #4]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	1ad2      	subs	r2, r2, r3
 800b6c6:	2308      	movs	r3, #8
 800b6c8:	005b      	lsls	r3, r3, #1
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d920      	bls.n	800b710 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b6ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	f003 0307 	and.w	r3, r3, #7
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00b      	beq.n	800b6f8 <pvPortMalloc+0xfc>
	__asm volatile
 800b6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	613b      	str	r3, [r7, #16]
}
 800b6f2:	bf00      	nop
 800b6f4:	bf00      	nop
 800b6f6:	e7fd      	b.n	800b6f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	1ad2      	subs	r2, r2, r3
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b70a:	69b8      	ldr	r0, [r7, #24]
 800b70c:	f000 f90a 	bl	800b924 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b710:	4b1d      	ldr	r3, [pc, #116]	@ (800b788 <pvPortMalloc+0x18c>)
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	1ad3      	subs	r3, r2, r3
 800b71a:	4a1b      	ldr	r2, [pc, #108]	@ (800b788 <pvPortMalloc+0x18c>)
 800b71c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b71e:	4b1a      	ldr	r3, [pc, #104]	@ (800b788 <pvPortMalloc+0x18c>)
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	4b1b      	ldr	r3, [pc, #108]	@ (800b790 <pvPortMalloc+0x194>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	429a      	cmp	r2, r3
 800b728:	d203      	bcs.n	800b732 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b72a:	4b17      	ldr	r3, [pc, #92]	@ (800b788 <pvPortMalloc+0x18c>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a18      	ldr	r2, [pc, #96]	@ (800b790 <pvPortMalloc+0x194>)
 800b730:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b734:	685a      	ldr	r2, [r3, #4]
 800b736:	4b13      	ldr	r3, [pc, #76]	@ (800b784 <pvPortMalloc+0x188>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	431a      	orrs	r2, r3
 800b73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b742:	2200      	movs	r2, #0
 800b744:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b746:	4b13      	ldr	r3, [pc, #76]	@ (800b794 <pvPortMalloc+0x198>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	3301      	adds	r3, #1
 800b74c:	4a11      	ldr	r2, [pc, #68]	@ (800b794 <pvPortMalloc+0x198>)
 800b74e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b750:	f7fe fcf0 	bl	800a134 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	f003 0307 	and.w	r3, r3, #7
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00b      	beq.n	800b776 <pvPortMalloc+0x17a>
	__asm volatile
 800b75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b762:	f383 8811 	msr	BASEPRI, r3
 800b766:	f3bf 8f6f 	isb	sy
 800b76a:	f3bf 8f4f 	dsb	sy
 800b76e:	60fb      	str	r3, [r7, #12]
}
 800b770:	bf00      	nop
 800b772:	bf00      	nop
 800b774:	e7fd      	b.n	800b772 <pvPortMalloc+0x176>
	return pvReturn;
 800b776:	69fb      	ldr	r3, [r7, #28]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3728      	adds	r7, #40	@ 0x28
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	20004b40 	.word	0x20004b40
 800b784:	20004b54 	.word	0x20004b54
 800b788:	20004b44 	.word	0x20004b44
 800b78c:	20004b38 	.word	0x20004b38
 800b790:	20004b48 	.word	0x20004b48
 800b794:	20004b4c 	.word	0x20004b4c

0800b798 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b086      	sub	sp, #24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d04f      	beq.n	800b84a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b7aa:	2308      	movs	r3, #8
 800b7ac:	425b      	negs	r3, r3
 800b7ae:	697a      	ldr	r2, [r7, #20]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	685a      	ldr	r2, [r3, #4]
 800b7bc:	4b25      	ldr	r3, [pc, #148]	@ (800b854 <vPortFree+0xbc>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4013      	ands	r3, r2
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d10b      	bne.n	800b7de <vPortFree+0x46>
	__asm volatile
 800b7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ca:	f383 8811 	msr	BASEPRI, r3
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	f3bf 8f4f 	dsb	sy
 800b7d6:	60fb      	str	r3, [r7, #12]
}
 800b7d8:	bf00      	nop
 800b7da:	bf00      	nop
 800b7dc:	e7fd      	b.n	800b7da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00b      	beq.n	800b7fe <vPortFree+0x66>
	__asm volatile
 800b7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ea:	f383 8811 	msr	BASEPRI, r3
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f3bf 8f4f 	dsb	sy
 800b7f6:	60bb      	str	r3, [r7, #8]
}
 800b7f8:	bf00      	nop
 800b7fa:	bf00      	nop
 800b7fc:	e7fd      	b.n	800b7fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	685a      	ldr	r2, [r3, #4]
 800b802:	4b14      	ldr	r3, [pc, #80]	@ (800b854 <vPortFree+0xbc>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4013      	ands	r3, r2
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d01e      	beq.n	800b84a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d11a      	bne.n	800b84a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	4b0e      	ldr	r3, [pc, #56]	@ (800b854 <vPortFree+0xbc>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	43db      	mvns	r3, r3
 800b81e:	401a      	ands	r2, r3
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b824:	f7fe fc78 	bl	800a118 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	685a      	ldr	r2, [r3, #4]
 800b82c:	4b0a      	ldr	r3, [pc, #40]	@ (800b858 <vPortFree+0xc0>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4413      	add	r3, r2
 800b832:	4a09      	ldr	r2, [pc, #36]	@ (800b858 <vPortFree+0xc0>)
 800b834:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b836:	6938      	ldr	r0, [r7, #16]
 800b838:	f000 f874 	bl	800b924 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b83c:	4b07      	ldr	r3, [pc, #28]	@ (800b85c <vPortFree+0xc4>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	3301      	adds	r3, #1
 800b842:	4a06      	ldr	r2, [pc, #24]	@ (800b85c <vPortFree+0xc4>)
 800b844:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b846:	f7fe fc75 	bl	800a134 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b84a:	bf00      	nop
 800b84c:	3718      	adds	r7, #24
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	20004b54 	.word	0x20004b54
 800b858:	20004b44 	.word	0x20004b44
 800b85c:	20004b50 	.word	0x20004b50

0800b860 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b866:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b86a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b86c:	4b27      	ldr	r3, [pc, #156]	@ (800b90c <prvHeapInit+0xac>)
 800b86e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f003 0307 	and.w	r3, r3, #7
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00c      	beq.n	800b894 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	3307      	adds	r3, #7
 800b87e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f023 0307 	bic.w	r3, r3, #7
 800b886:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	1ad3      	subs	r3, r2, r3
 800b88e:	4a1f      	ldr	r2, [pc, #124]	@ (800b90c <prvHeapInit+0xac>)
 800b890:	4413      	add	r3, r2
 800b892:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b898:	4a1d      	ldr	r2, [pc, #116]	@ (800b910 <prvHeapInit+0xb0>)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b89e:	4b1c      	ldr	r3, [pc, #112]	@ (800b910 <prvHeapInit+0xb0>)
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	68ba      	ldr	r2, [r7, #8]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b8ac:	2208      	movs	r2, #8
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	1a9b      	subs	r3, r3, r2
 800b8b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f023 0307 	bic.w	r3, r3, #7
 800b8ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	4a15      	ldr	r2, [pc, #84]	@ (800b914 <prvHeapInit+0xb4>)
 800b8c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8c2:	4b14      	ldr	r3, [pc, #80]	@ (800b914 <prvHeapInit+0xb4>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b8ca:	4b12      	ldr	r3, [pc, #72]	@ (800b914 <prvHeapInit+0xb4>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	1ad2      	subs	r2, r2, r3
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8e0:	4b0c      	ldr	r3, [pc, #48]	@ (800b914 <prvHeapInit+0xb4>)
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	4a0a      	ldr	r2, [pc, #40]	@ (800b918 <prvHeapInit+0xb8>)
 800b8ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	4a09      	ldr	r2, [pc, #36]	@ (800b91c <prvHeapInit+0xbc>)
 800b8f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8f8:	4b09      	ldr	r3, [pc, #36]	@ (800b920 <prvHeapInit+0xc0>)
 800b8fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b8fe:	601a      	str	r2, [r3, #0]
}
 800b900:	bf00      	nop
 800b902:	3714      	adds	r7, #20
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr
 800b90c:	20000f38 	.word	0x20000f38
 800b910:	20004b38 	.word	0x20004b38
 800b914:	20004b40 	.word	0x20004b40
 800b918:	20004b48 	.word	0x20004b48
 800b91c:	20004b44 	.word	0x20004b44
 800b920:	20004b54 	.word	0x20004b54

0800b924 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b92c:	4b28      	ldr	r3, [pc, #160]	@ (800b9d0 <prvInsertBlockIntoFreeList+0xac>)
 800b92e:	60fb      	str	r3, [r7, #12]
 800b930:	e002      	b.n	800b938 <prvInsertBlockIntoFreeList+0x14>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	60fb      	str	r3, [r7, #12]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d8f7      	bhi.n	800b932 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	4413      	add	r3, r2
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	429a      	cmp	r2, r3
 800b952:	d108      	bne.n	800b966 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	685a      	ldr	r2, [r3, #4]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	441a      	add	r2, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	68ba      	ldr	r2, [r7, #8]
 800b970:	441a      	add	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	429a      	cmp	r2, r3
 800b978:	d118      	bne.n	800b9ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	4b15      	ldr	r3, [pc, #84]	@ (800b9d4 <prvInsertBlockIntoFreeList+0xb0>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	429a      	cmp	r2, r3
 800b984:	d00d      	beq.n	800b9a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	685a      	ldr	r2, [r3, #4]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	441a      	add	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	601a      	str	r2, [r3, #0]
 800b9a0:	e008      	b.n	800b9b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b9a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b9d4 <prvInsertBlockIntoFreeList+0xb0>)
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	601a      	str	r2, [r3, #0]
 800b9aa:	e003      	b.n	800b9b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d002      	beq.n	800b9c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9c2:	bf00      	nop
 800b9c4:	3714      	adds	r7, #20
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	20004b38 	.word	0x20004b38
 800b9d4:	20004b40 	.word	0x20004b40

0800b9d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b9dc:	2201      	movs	r2, #1
 800b9de:	490e      	ldr	r1, [pc, #56]	@ (800ba18 <MX_USB_HOST_Init+0x40>)
 800b9e0:	480e      	ldr	r0, [pc, #56]	@ (800ba1c <MX_USB_HOST_Init+0x44>)
 800b9e2:	f7fb f945 	bl	8006c70 <USBH_Init>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d001      	beq.n	800b9f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b9ec:	f7f4 ffc8 	bl	8000980 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b9f0:	490b      	ldr	r1, [pc, #44]	@ (800ba20 <MX_USB_HOST_Init+0x48>)
 800b9f2:	480a      	ldr	r0, [pc, #40]	@ (800ba1c <MX_USB_HOST_Init+0x44>)
 800b9f4:	f7fb fa0b 	bl	8006e0e <USBH_RegisterClass>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b9fe:	f7f4 ffbf 	bl	8000980 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ba02:	4806      	ldr	r0, [pc, #24]	@ (800ba1c <MX_USB_HOST_Init+0x44>)
 800ba04:	f7fb fa8f 	bl	8006f26 <USBH_Start>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ba0e:	f7f4 ffb7 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ba12:	bf00      	nop
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	0800ba25 	.word	0x0800ba25
 800ba1c:	20004b58 	.word	0x20004b58
 800ba20:	2000000c 	.word	0x2000000c

0800ba24 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ba30:	78fb      	ldrb	r3, [r7, #3]
 800ba32:	3b01      	subs	r3, #1
 800ba34:	2b04      	cmp	r3, #4
 800ba36:	d819      	bhi.n	800ba6c <USBH_UserProcess+0x48>
 800ba38:	a201      	add	r2, pc, #4	@ (adr r2, 800ba40 <USBH_UserProcess+0x1c>)
 800ba3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba3e:	bf00      	nop
 800ba40:	0800ba6d 	.word	0x0800ba6d
 800ba44:	0800ba5d 	.word	0x0800ba5d
 800ba48:	0800ba6d 	.word	0x0800ba6d
 800ba4c:	0800ba65 	.word	0x0800ba65
 800ba50:	0800ba55 	.word	0x0800ba55
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ba54:	4b09      	ldr	r3, [pc, #36]	@ (800ba7c <USBH_UserProcess+0x58>)
 800ba56:	2203      	movs	r2, #3
 800ba58:	701a      	strb	r2, [r3, #0]
  break;
 800ba5a:	e008      	b.n	800ba6e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ba5c:	4b07      	ldr	r3, [pc, #28]	@ (800ba7c <USBH_UserProcess+0x58>)
 800ba5e:	2202      	movs	r2, #2
 800ba60:	701a      	strb	r2, [r3, #0]
  break;
 800ba62:	e004      	b.n	800ba6e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ba64:	4b05      	ldr	r3, [pc, #20]	@ (800ba7c <USBH_UserProcess+0x58>)
 800ba66:	2201      	movs	r2, #1
 800ba68:	701a      	strb	r2, [r3, #0]
  break;
 800ba6a:	e000      	b.n	800ba6e <USBH_UserProcess+0x4a>

  default:
  break;
 800ba6c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ba6e:	bf00      	nop
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	20004f3c 	.word	0x20004f3c

0800ba80 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b08a      	sub	sp, #40	@ 0x28
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba88:	f107 0314 	add.w	r3, r7, #20
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	605a      	str	r2, [r3, #4]
 800ba92:	609a      	str	r2, [r3, #8]
 800ba94:	60da      	str	r2, [r3, #12]
 800ba96:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800baa0:	d147      	bne.n	800bb32 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800baa2:	2300      	movs	r3, #0
 800baa4:	613b      	str	r3, [r7, #16]
 800baa6:	4b25      	ldr	r3, [pc, #148]	@ (800bb3c <HAL_HCD_MspInit+0xbc>)
 800baa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baaa:	4a24      	ldr	r2, [pc, #144]	@ (800bb3c <HAL_HCD_MspInit+0xbc>)
 800baac:	f043 0301 	orr.w	r3, r3, #1
 800bab0:	6313      	str	r3, [r2, #48]	@ 0x30
 800bab2:	4b22      	ldr	r3, [pc, #136]	@ (800bb3c <HAL_HCD_MspInit+0xbc>)
 800bab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bab6:	f003 0301 	and.w	r3, r3, #1
 800baba:	613b      	str	r3, [r7, #16]
 800babc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800babe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bac4:	2300      	movs	r3, #0
 800bac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bac8:	2300      	movs	r3, #0
 800baca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bacc:	f107 0314 	add.w	r3, r7, #20
 800bad0:	4619      	mov	r1, r3
 800bad2:	481b      	ldr	r0, [pc, #108]	@ (800bb40 <HAL_HCD_MspInit+0xc0>)
 800bad4:	f7f5 fb04 	bl	80010e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bad8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800badc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bade:	2302      	movs	r3, #2
 800bae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bae2:	2300      	movs	r3, #0
 800bae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bae6:	2300      	movs	r3, #0
 800bae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800baea:	230a      	movs	r3, #10
 800baec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800baee:	f107 0314 	add.w	r3, r7, #20
 800baf2:	4619      	mov	r1, r3
 800baf4:	4812      	ldr	r0, [pc, #72]	@ (800bb40 <HAL_HCD_MspInit+0xc0>)
 800baf6:	f7f5 faf3 	bl	80010e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bafa:	4b10      	ldr	r3, [pc, #64]	@ (800bb3c <HAL_HCD_MspInit+0xbc>)
 800bafc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bafe:	4a0f      	ldr	r2, [pc, #60]	@ (800bb3c <HAL_HCD_MspInit+0xbc>)
 800bb00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb04:	6353      	str	r3, [r2, #52]	@ 0x34
 800bb06:	2300      	movs	r3, #0
 800bb08:	60fb      	str	r3, [r7, #12]
 800bb0a:	4b0c      	ldr	r3, [pc, #48]	@ (800bb3c <HAL_HCD_MspInit+0xbc>)
 800bb0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb0e:	4a0b      	ldr	r2, [pc, #44]	@ (800bb3c <HAL_HCD_MspInit+0xbc>)
 800bb10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bb14:	6453      	str	r3, [r2, #68]	@ 0x44
 800bb16:	4b09      	ldr	r3, [pc, #36]	@ (800bb3c <HAL_HCD_MspInit+0xbc>)
 800bb18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb1e:	60fb      	str	r3, [r7, #12]
 800bb20:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bb22:	2200      	movs	r2, #0
 800bb24:	2105      	movs	r1, #5
 800bb26:	2043      	movs	r0, #67	@ 0x43
 800bb28:	f7f5 faa3 	bl	8001072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bb2c:	2043      	movs	r0, #67	@ 0x43
 800bb2e:	f7f5 fabc 	bl	80010aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb32:	bf00      	nop
 800bb34:	3728      	adds	r7, #40	@ 0x28
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	40023800 	.word	0x40023800
 800bb40:	40020000 	.word	0x40020000

0800bb44 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fb fe99 	bl	800788a <USBH_LL_IncTimer>
}
 800bb58:	bf00      	nop
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7fb fedd 	bl	800792e <USBH_LL_Connect>
}
 800bb74:	bf00      	nop
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7fb fef2 	bl	8007974 <USBH_LL_Disconnect>
}
 800bb90:	bf00      	nop
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	460b      	mov	r3, r1
 800bba2:	70fb      	strb	r3, [r7, #3]
 800bba4:	4613      	mov	r3, r2
 800bba6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fb ff29 	bl	8007a06 <USBH_LL_NotifyURBChange>
#endif
}
 800bbb4:	bf00      	nop
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7fb fe87 	bl	80078de <USBH_LL_PortEnabled>
}
 800bbd0:	bf00      	nop
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7fb fe93 	bl	8007912 <USBH_LL_PortDisabled>
}
 800bbec:	bf00      	nop
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d12a      	bne.n	800bc5c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bc06:	4a18      	ldr	r2, [pc, #96]	@ (800bc68 <USBH_LL_Init+0x74>)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	4a15      	ldr	r2, [pc, #84]	@ (800bc68 <USBH_LL_Init+0x74>)
 800bc12:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bc16:	4b14      	ldr	r3, [pc, #80]	@ (800bc68 <USBH_LL_Init+0x74>)
 800bc18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bc1c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bc1e:	4b12      	ldr	r3, [pc, #72]	@ (800bc68 <USBH_LL_Init+0x74>)
 800bc20:	2208      	movs	r2, #8
 800bc22:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bc24:	4b10      	ldr	r3, [pc, #64]	@ (800bc68 <USBH_LL_Init+0x74>)
 800bc26:	2201      	movs	r2, #1
 800bc28:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bc2a:	4b0f      	ldr	r3, [pc, #60]	@ (800bc68 <USBH_LL_Init+0x74>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bc30:	4b0d      	ldr	r3, [pc, #52]	@ (800bc68 <USBH_LL_Init+0x74>)
 800bc32:	2202      	movs	r2, #2
 800bc34:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bc36:	4b0c      	ldr	r3, [pc, #48]	@ (800bc68 <USBH_LL_Init+0x74>)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bc3c:	480a      	ldr	r0, [pc, #40]	@ (800bc68 <USBH_LL_Init+0x74>)
 800bc3e:	f7f5 fc04 	bl	800144a <HAL_HCD_Init>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d001      	beq.n	800bc4c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bc48:	f7f4 fe9a 	bl	8000980 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bc4c:	4806      	ldr	r0, [pc, #24]	@ (800bc68 <USBH_LL_Init+0x74>)
 800bc4e:	f7f6 f865 	bl	8001d1c <HAL_HCD_GetCurrentFrame>
 800bc52:	4603      	mov	r3, r0
 800bc54:	4619      	mov	r1, r3
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f7fb fe08 	bl	800786c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3708      	adds	r7, #8
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	20004f40 	.word	0x20004f40

0800bc6c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc74:	2300      	movs	r3, #0
 800bc76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7f5 ffd2 	bl	8001c2c <HAL_HCD_Start>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc8c:	7bfb      	ldrb	r3, [r7, #15]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f000 f95e 	bl	800bf50 <USBH_Get_USB_Status>
 800bc94:	4603      	mov	r3, r0
 800bc96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3710      	adds	r7, #16
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b084      	sub	sp, #16
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7f5 ffda 	bl	8001c72 <HAL_HCD_Stop>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bcc2:	7bfb      	ldrb	r3, [r7, #15]
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f000 f943 	bl	800bf50 <USBH_Get_USB_Status>
 800bcca:	4603      	mov	r3, r0
 800bccc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcce:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3710      	adds	r7, #16
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bce0:	2301      	movs	r3, #1
 800bce2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7f6 f824 	bl	8001d38 <HAL_HCD_GetCurrentSpeed>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d00c      	beq.n	800bd10 <USBH_LL_GetSpeed+0x38>
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	d80d      	bhi.n	800bd16 <USBH_LL_GetSpeed+0x3e>
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d002      	beq.n	800bd04 <USBH_LL_GetSpeed+0x2c>
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d003      	beq.n	800bd0a <USBH_LL_GetSpeed+0x32>
 800bd02:	e008      	b.n	800bd16 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bd04:	2300      	movs	r3, #0
 800bd06:	73fb      	strb	r3, [r7, #15]
    break;
 800bd08:	e008      	b.n	800bd1c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd0e:	e005      	b.n	800bd1c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bd10:	2302      	movs	r3, #2
 800bd12:	73fb      	strb	r3, [r7, #15]
    break;
 800bd14:	e002      	b.n	800bd1c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bd16:	2301      	movs	r3, #1
 800bd18:	73fb      	strb	r3, [r7, #15]
    break;
 800bd1a:	bf00      	nop
  }
  return  speed;
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b084      	sub	sp, #16
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd32:	2300      	movs	r3, #0
 800bd34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7f5 ffb5 	bl	8001cac <HAL_HCD_ResetPort>
 800bd42:	4603      	mov	r3, r0
 800bd44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd46:	7bfb      	ldrb	r3, [r7, #15]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 f901 	bl	800bf50 <USBH_Get_USB_Status>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd52:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3710      	adds	r7, #16
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	460b      	mov	r3, r1
 800bd66:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bd6e:	78fa      	ldrb	r2, [r7, #3]
 800bd70:	4611      	mov	r1, r2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7f5 ffbd 	bl	8001cf2 <HAL_HCD_HC_GetXferCount>
 800bd78:	4603      	mov	r3, r0
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3708      	adds	r7, #8
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bd82:	b590      	push	{r4, r7, lr}
 800bd84:	b089      	sub	sp, #36	@ 0x24
 800bd86:	af04      	add	r7, sp, #16
 800bd88:	6078      	str	r0, [r7, #4]
 800bd8a:	4608      	mov	r0, r1
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	461a      	mov	r2, r3
 800bd90:	4603      	mov	r3, r0
 800bd92:	70fb      	strb	r3, [r7, #3]
 800bd94:	460b      	mov	r3, r1
 800bd96:	70bb      	strb	r3, [r7, #2]
 800bd98:	4613      	mov	r3, r2
 800bd9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bda0:	2300      	movs	r3, #0
 800bda2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bdaa:	787c      	ldrb	r4, [r7, #1]
 800bdac:	78ba      	ldrb	r2, [r7, #2]
 800bdae:	78f9      	ldrb	r1, [r7, #3]
 800bdb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bdb2:	9302      	str	r3, [sp, #8]
 800bdb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bdb8:	9301      	str	r3, [sp, #4]
 800bdba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	4623      	mov	r3, r4
 800bdc2:	f7f5 fba9 	bl	8001518 <HAL_HCD_HC_Init>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bdca:	7bfb      	ldrb	r3, [r7, #15]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f000 f8bf 	bl	800bf50 <USBH_Get_USB_Status>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3714      	adds	r7, #20
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd90      	pop	{r4, r7, pc}

0800bde0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	460b      	mov	r3, r1
 800bdea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bdfa:	78fa      	ldrb	r2, [r7, #3]
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7f5 fc42 	bl	8001688 <HAL_HCD_HC_Halt>
 800be04:	4603      	mov	r3, r0
 800be06:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be08:	7bfb      	ldrb	r3, [r7, #15]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 f8a0 	bl	800bf50 <USBH_Get_USB_Status>
 800be10:	4603      	mov	r3, r0
 800be12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be14:	7bbb      	ldrb	r3, [r7, #14]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800be1e:	b590      	push	{r4, r7, lr}
 800be20:	b089      	sub	sp, #36	@ 0x24
 800be22:	af04      	add	r7, sp, #16
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	4608      	mov	r0, r1
 800be28:	4611      	mov	r1, r2
 800be2a:	461a      	mov	r2, r3
 800be2c:	4603      	mov	r3, r0
 800be2e:	70fb      	strb	r3, [r7, #3]
 800be30:	460b      	mov	r3, r1
 800be32:	70bb      	strb	r3, [r7, #2]
 800be34:	4613      	mov	r3, r2
 800be36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be38:	2300      	movs	r3, #0
 800be3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800be46:	787c      	ldrb	r4, [r7, #1]
 800be48:	78ba      	ldrb	r2, [r7, #2]
 800be4a:	78f9      	ldrb	r1, [r7, #3]
 800be4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800be50:	9303      	str	r3, [sp, #12]
 800be52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800be54:	9302      	str	r3, [sp, #8]
 800be56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be58:	9301      	str	r3, [sp, #4]
 800be5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	4623      	mov	r3, r4
 800be62:	f7f5 fc35 	bl	80016d0 <HAL_HCD_HC_SubmitRequest>
 800be66:	4603      	mov	r3, r0
 800be68:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800be6a:	7bfb      	ldrb	r3, [r7, #15]
 800be6c:	4618      	mov	r0, r3
 800be6e:	f000 f86f 	bl	800bf50 <USBH_Get_USB_Status>
 800be72:	4603      	mov	r3, r0
 800be74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be76:	7bbb      	ldrb	r3, [r7, #14]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3714      	adds	r7, #20
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd90      	pop	{r4, r7, pc}

0800be80 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	460b      	mov	r3, r1
 800be8a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be92:	78fa      	ldrb	r2, [r7, #3]
 800be94:	4611      	mov	r1, r2
 800be96:	4618      	mov	r0, r3
 800be98:	f7f5 ff16 	bl	8001cc8 <HAL_HCD_HC_GetURBState>
 800be9c:	4603      	mov	r3, r0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b082      	sub	sp, #8
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
 800beae:	460b      	mov	r3, r1
 800beb0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d103      	bne.n	800bec4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bebc:	78fb      	ldrb	r3, [r7, #3]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f000 f872 	bl	800bfa8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bec4:	20c8      	movs	r0, #200	@ 0xc8
 800bec6:	f7f4 ffd5 	bl	8000e74 <HAL_Delay>
  return USBH_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b085      	sub	sp, #20
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	460b      	mov	r3, r1
 800bede:	70fb      	strb	r3, [r7, #3]
 800bee0:	4613      	mov	r3, r2
 800bee2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800beea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800beec:	78fa      	ldrb	r2, [r7, #3]
 800beee:	68f9      	ldr	r1, [r7, #12]
 800bef0:	4613      	mov	r3, r2
 800bef2:	011b      	lsls	r3, r3, #4
 800bef4:	1a9b      	subs	r3, r3, r2
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	440b      	add	r3, r1
 800befa:	3317      	adds	r3, #23
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00a      	beq.n	800bf18 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bf02:	78fa      	ldrb	r2, [r7, #3]
 800bf04:	68f9      	ldr	r1, [r7, #12]
 800bf06:	4613      	mov	r3, r2
 800bf08:	011b      	lsls	r3, r3, #4
 800bf0a:	1a9b      	subs	r3, r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	440b      	add	r3, r1
 800bf10:	333c      	adds	r3, #60	@ 0x3c
 800bf12:	78ba      	ldrb	r2, [r7, #2]
 800bf14:	701a      	strb	r2, [r3, #0]
 800bf16:	e009      	b.n	800bf2c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bf18:	78fa      	ldrb	r2, [r7, #3]
 800bf1a:	68f9      	ldr	r1, [r7, #12]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	011b      	lsls	r3, r3, #4
 800bf20:	1a9b      	subs	r3, r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	440b      	add	r3, r1
 800bf26:	333d      	adds	r3, #61	@ 0x3d
 800bf28:	78ba      	ldrb	r2, [r7, #2]
 800bf2a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3714      	adds	r7, #20
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr

0800bf3a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b082      	sub	sp, #8
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f7f4 ff96 	bl	8000e74 <HAL_Delay>
}
 800bf48:	bf00      	nop
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	4603      	mov	r3, r0
 800bf58:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bf5e:	79fb      	ldrb	r3, [r7, #7]
 800bf60:	2b03      	cmp	r3, #3
 800bf62:	d817      	bhi.n	800bf94 <USBH_Get_USB_Status+0x44>
 800bf64:	a201      	add	r2, pc, #4	@ (adr r2, 800bf6c <USBH_Get_USB_Status+0x1c>)
 800bf66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf6a:	bf00      	nop
 800bf6c:	0800bf7d 	.word	0x0800bf7d
 800bf70:	0800bf83 	.word	0x0800bf83
 800bf74:	0800bf89 	.word	0x0800bf89
 800bf78:	0800bf8f 	.word	0x0800bf8f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf80:	e00b      	b.n	800bf9a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bf82:	2302      	movs	r3, #2
 800bf84:	73fb      	strb	r3, [r7, #15]
    break;
 800bf86:	e008      	b.n	800bf9a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf8c:	e005      	b.n	800bf9a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bf8e:	2302      	movs	r3, #2
 800bf90:	73fb      	strb	r3, [r7, #15]
    break;
 800bf92:	e002      	b.n	800bf9a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bf94:	2302      	movs	r3, #2
 800bf96:	73fb      	strb	r3, [r7, #15]
    break;
 800bf98:	bf00      	nop
  }
  return usb_status;
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	4603      	mov	r3, r0
 800bfb0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bfb2:	79fb      	ldrb	r3, [r7, #7]
 800bfb4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bfb6:	79fb      	ldrb	r3, [r7, #7]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d102      	bne.n	800bfc2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	73fb      	strb	r3, [r7, #15]
 800bfc0:	e001      	b.n	800bfc6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bfc6:	7bfb      	ldrb	r3, [r7, #15]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	2101      	movs	r1, #1
 800bfcc:	4803      	ldr	r0, [pc, #12]	@ (800bfdc <MX_DriverVbusFS+0x34>)
 800bfce:	f7f5 fa23 	bl	8001418 <HAL_GPIO_WritePin>
}
 800bfd2:	bf00      	nop
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	40020800 	.word	0x40020800

0800bfe0 <malloc>:
 800bfe0:	4b02      	ldr	r3, [pc, #8]	@ (800bfec <malloc+0xc>)
 800bfe2:	4601      	mov	r1, r0
 800bfe4:	6818      	ldr	r0, [r3, #0]
 800bfe6:	f000 b82d 	b.w	800c044 <_malloc_r>
 800bfea:	bf00      	nop
 800bfec:	20000030 	.word	0x20000030

0800bff0 <free>:
 800bff0:	4b02      	ldr	r3, [pc, #8]	@ (800bffc <free+0xc>)
 800bff2:	4601      	mov	r1, r0
 800bff4:	6818      	ldr	r0, [r3, #0]
 800bff6:	f000 b903 	b.w	800c200 <_free_r>
 800bffa:	bf00      	nop
 800bffc:	20000030 	.word	0x20000030

0800c000 <sbrk_aligned>:
 800c000:	b570      	push	{r4, r5, r6, lr}
 800c002:	4e0f      	ldr	r6, [pc, #60]	@ (800c040 <sbrk_aligned+0x40>)
 800c004:	460c      	mov	r4, r1
 800c006:	6831      	ldr	r1, [r6, #0]
 800c008:	4605      	mov	r5, r0
 800c00a:	b911      	cbnz	r1, 800c012 <sbrk_aligned+0x12>
 800c00c:	f000 f8ae 	bl	800c16c <_sbrk_r>
 800c010:	6030      	str	r0, [r6, #0]
 800c012:	4621      	mov	r1, r4
 800c014:	4628      	mov	r0, r5
 800c016:	f000 f8a9 	bl	800c16c <_sbrk_r>
 800c01a:	1c43      	adds	r3, r0, #1
 800c01c:	d103      	bne.n	800c026 <sbrk_aligned+0x26>
 800c01e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c022:	4620      	mov	r0, r4
 800c024:	bd70      	pop	{r4, r5, r6, pc}
 800c026:	1cc4      	adds	r4, r0, #3
 800c028:	f024 0403 	bic.w	r4, r4, #3
 800c02c:	42a0      	cmp	r0, r4
 800c02e:	d0f8      	beq.n	800c022 <sbrk_aligned+0x22>
 800c030:	1a21      	subs	r1, r4, r0
 800c032:	4628      	mov	r0, r5
 800c034:	f000 f89a 	bl	800c16c <_sbrk_r>
 800c038:	3001      	adds	r0, #1
 800c03a:	d1f2      	bne.n	800c022 <sbrk_aligned+0x22>
 800c03c:	e7ef      	b.n	800c01e <sbrk_aligned+0x1e>
 800c03e:	bf00      	nop
 800c040:	20005320 	.word	0x20005320

0800c044 <_malloc_r>:
 800c044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c048:	1ccd      	adds	r5, r1, #3
 800c04a:	f025 0503 	bic.w	r5, r5, #3
 800c04e:	3508      	adds	r5, #8
 800c050:	2d0c      	cmp	r5, #12
 800c052:	bf38      	it	cc
 800c054:	250c      	movcc	r5, #12
 800c056:	2d00      	cmp	r5, #0
 800c058:	4606      	mov	r6, r0
 800c05a:	db01      	blt.n	800c060 <_malloc_r+0x1c>
 800c05c:	42a9      	cmp	r1, r5
 800c05e:	d904      	bls.n	800c06a <_malloc_r+0x26>
 800c060:	230c      	movs	r3, #12
 800c062:	6033      	str	r3, [r6, #0]
 800c064:	2000      	movs	r0, #0
 800c066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c06a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c140 <_malloc_r+0xfc>
 800c06e:	f000 f869 	bl	800c144 <__malloc_lock>
 800c072:	f8d8 3000 	ldr.w	r3, [r8]
 800c076:	461c      	mov	r4, r3
 800c078:	bb44      	cbnz	r4, 800c0cc <_malloc_r+0x88>
 800c07a:	4629      	mov	r1, r5
 800c07c:	4630      	mov	r0, r6
 800c07e:	f7ff ffbf 	bl	800c000 <sbrk_aligned>
 800c082:	1c43      	adds	r3, r0, #1
 800c084:	4604      	mov	r4, r0
 800c086:	d158      	bne.n	800c13a <_malloc_r+0xf6>
 800c088:	f8d8 4000 	ldr.w	r4, [r8]
 800c08c:	4627      	mov	r7, r4
 800c08e:	2f00      	cmp	r7, #0
 800c090:	d143      	bne.n	800c11a <_malloc_r+0xd6>
 800c092:	2c00      	cmp	r4, #0
 800c094:	d04b      	beq.n	800c12e <_malloc_r+0xea>
 800c096:	6823      	ldr	r3, [r4, #0]
 800c098:	4639      	mov	r1, r7
 800c09a:	4630      	mov	r0, r6
 800c09c:	eb04 0903 	add.w	r9, r4, r3
 800c0a0:	f000 f864 	bl	800c16c <_sbrk_r>
 800c0a4:	4581      	cmp	r9, r0
 800c0a6:	d142      	bne.n	800c12e <_malloc_r+0xea>
 800c0a8:	6821      	ldr	r1, [r4, #0]
 800c0aa:	1a6d      	subs	r5, r5, r1
 800c0ac:	4629      	mov	r1, r5
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	f7ff ffa6 	bl	800c000 <sbrk_aligned>
 800c0b4:	3001      	adds	r0, #1
 800c0b6:	d03a      	beq.n	800c12e <_malloc_r+0xea>
 800c0b8:	6823      	ldr	r3, [r4, #0]
 800c0ba:	442b      	add	r3, r5
 800c0bc:	6023      	str	r3, [r4, #0]
 800c0be:	f8d8 3000 	ldr.w	r3, [r8]
 800c0c2:	685a      	ldr	r2, [r3, #4]
 800c0c4:	bb62      	cbnz	r2, 800c120 <_malloc_r+0xdc>
 800c0c6:	f8c8 7000 	str.w	r7, [r8]
 800c0ca:	e00f      	b.n	800c0ec <_malloc_r+0xa8>
 800c0cc:	6822      	ldr	r2, [r4, #0]
 800c0ce:	1b52      	subs	r2, r2, r5
 800c0d0:	d420      	bmi.n	800c114 <_malloc_r+0xd0>
 800c0d2:	2a0b      	cmp	r2, #11
 800c0d4:	d917      	bls.n	800c106 <_malloc_r+0xc2>
 800c0d6:	1961      	adds	r1, r4, r5
 800c0d8:	42a3      	cmp	r3, r4
 800c0da:	6025      	str	r5, [r4, #0]
 800c0dc:	bf18      	it	ne
 800c0de:	6059      	strne	r1, [r3, #4]
 800c0e0:	6863      	ldr	r3, [r4, #4]
 800c0e2:	bf08      	it	eq
 800c0e4:	f8c8 1000 	streq.w	r1, [r8]
 800c0e8:	5162      	str	r2, [r4, r5]
 800c0ea:	604b      	str	r3, [r1, #4]
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	f000 f82f 	bl	800c150 <__malloc_unlock>
 800c0f2:	f104 000b 	add.w	r0, r4, #11
 800c0f6:	1d23      	adds	r3, r4, #4
 800c0f8:	f020 0007 	bic.w	r0, r0, #7
 800c0fc:	1ac2      	subs	r2, r0, r3
 800c0fe:	bf1c      	itt	ne
 800c100:	1a1b      	subne	r3, r3, r0
 800c102:	50a3      	strne	r3, [r4, r2]
 800c104:	e7af      	b.n	800c066 <_malloc_r+0x22>
 800c106:	6862      	ldr	r2, [r4, #4]
 800c108:	42a3      	cmp	r3, r4
 800c10a:	bf0c      	ite	eq
 800c10c:	f8c8 2000 	streq.w	r2, [r8]
 800c110:	605a      	strne	r2, [r3, #4]
 800c112:	e7eb      	b.n	800c0ec <_malloc_r+0xa8>
 800c114:	4623      	mov	r3, r4
 800c116:	6864      	ldr	r4, [r4, #4]
 800c118:	e7ae      	b.n	800c078 <_malloc_r+0x34>
 800c11a:	463c      	mov	r4, r7
 800c11c:	687f      	ldr	r7, [r7, #4]
 800c11e:	e7b6      	b.n	800c08e <_malloc_r+0x4a>
 800c120:	461a      	mov	r2, r3
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	42a3      	cmp	r3, r4
 800c126:	d1fb      	bne.n	800c120 <_malloc_r+0xdc>
 800c128:	2300      	movs	r3, #0
 800c12a:	6053      	str	r3, [r2, #4]
 800c12c:	e7de      	b.n	800c0ec <_malloc_r+0xa8>
 800c12e:	230c      	movs	r3, #12
 800c130:	6033      	str	r3, [r6, #0]
 800c132:	4630      	mov	r0, r6
 800c134:	f000 f80c 	bl	800c150 <__malloc_unlock>
 800c138:	e794      	b.n	800c064 <_malloc_r+0x20>
 800c13a:	6005      	str	r5, [r0, #0]
 800c13c:	e7d6      	b.n	800c0ec <_malloc_r+0xa8>
 800c13e:	bf00      	nop
 800c140:	20005324 	.word	0x20005324

0800c144 <__malloc_lock>:
 800c144:	4801      	ldr	r0, [pc, #4]	@ (800c14c <__malloc_lock+0x8>)
 800c146:	f000 b84b 	b.w	800c1e0 <__retarget_lock_acquire_recursive>
 800c14a:	bf00      	nop
 800c14c:	20005460 	.word	0x20005460

0800c150 <__malloc_unlock>:
 800c150:	4801      	ldr	r0, [pc, #4]	@ (800c158 <__malloc_unlock+0x8>)
 800c152:	f000 b846 	b.w	800c1e2 <__retarget_lock_release_recursive>
 800c156:	bf00      	nop
 800c158:	20005460 	.word	0x20005460

0800c15c <memset>:
 800c15c:	4402      	add	r2, r0
 800c15e:	4603      	mov	r3, r0
 800c160:	4293      	cmp	r3, r2
 800c162:	d100      	bne.n	800c166 <memset+0xa>
 800c164:	4770      	bx	lr
 800c166:	f803 1b01 	strb.w	r1, [r3], #1
 800c16a:	e7f9      	b.n	800c160 <memset+0x4>

0800c16c <_sbrk_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	4d06      	ldr	r5, [pc, #24]	@ (800c188 <_sbrk_r+0x1c>)
 800c170:	2300      	movs	r3, #0
 800c172:	4604      	mov	r4, r0
 800c174:	4608      	mov	r0, r1
 800c176:	602b      	str	r3, [r5, #0]
 800c178:	f7f4 fd98 	bl	8000cac <_sbrk>
 800c17c:	1c43      	adds	r3, r0, #1
 800c17e:	d102      	bne.n	800c186 <_sbrk_r+0x1a>
 800c180:	682b      	ldr	r3, [r5, #0]
 800c182:	b103      	cbz	r3, 800c186 <_sbrk_r+0x1a>
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	bd38      	pop	{r3, r4, r5, pc}
 800c188:	20005464 	.word	0x20005464

0800c18c <__errno>:
 800c18c:	4b01      	ldr	r3, [pc, #4]	@ (800c194 <__errno+0x8>)
 800c18e:	6818      	ldr	r0, [r3, #0]
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop
 800c194:	20000030 	.word	0x20000030

0800c198 <__libc_init_array>:
 800c198:	b570      	push	{r4, r5, r6, lr}
 800c19a:	4d0d      	ldr	r5, [pc, #52]	@ (800c1d0 <__libc_init_array+0x38>)
 800c19c:	4c0d      	ldr	r4, [pc, #52]	@ (800c1d4 <__libc_init_array+0x3c>)
 800c19e:	1b64      	subs	r4, r4, r5
 800c1a0:	10a4      	asrs	r4, r4, #2
 800c1a2:	2600      	movs	r6, #0
 800c1a4:	42a6      	cmp	r6, r4
 800c1a6:	d109      	bne.n	800c1bc <__libc_init_array+0x24>
 800c1a8:	4d0b      	ldr	r5, [pc, #44]	@ (800c1d8 <__libc_init_array+0x40>)
 800c1aa:	4c0c      	ldr	r4, [pc, #48]	@ (800c1dc <__libc_init_array+0x44>)
 800c1ac:	f000 f872 	bl	800c294 <_init>
 800c1b0:	1b64      	subs	r4, r4, r5
 800c1b2:	10a4      	asrs	r4, r4, #2
 800c1b4:	2600      	movs	r6, #0
 800c1b6:	42a6      	cmp	r6, r4
 800c1b8:	d105      	bne.n	800c1c6 <__libc_init_array+0x2e>
 800c1ba:	bd70      	pop	{r4, r5, r6, pc}
 800c1bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1c0:	4798      	blx	r3
 800c1c2:	3601      	adds	r6, #1
 800c1c4:	e7ee      	b.n	800c1a4 <__libc_init_array+0xc>
 800c1c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ca:	4798      	blx	r3
 800c1cc:	3601      	adds	r6, #1
 800c1ce:	e7f2      	b.n	800c1b6 <__libc_init_array+0x1e>
 800c1d0:	0800c324 	.word	0x0800c324
 800c1d4:	0800c324 	.word	0x0800c324
 800c1d8:	0800c324 	.word	0x0800c324
 800c1dc:	0800c328 	.word	0x0800c328

0800c1e0 <__retarget_lock_acquire_recursive>:
 800c1e0:	4770      	bx	lr

0800c1e2 <__retarget_lock_release_recursive>:
 800c1e2:	4770      	bx	lr

0800c1e4 <memcpy>:
 800c1e4:	440a      	add	r2, r1
 800c1e6:	4291      	cmp	r1, r2
 800c1e8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c1ec:	d100      	bne.n	800c1f0 <memcpy+0xc>
 800c1ee:	4770      	bx	lr
 800c1f0:	b510      	push	{r4, lr}
 800c1f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1fa:	4291      	cmp	r1, r2
 800c1fc:	d1f9      	bne.n	800c1f2 <memcpy+0xe>
 800c1fe:	bd10      	pop	{r4, pc}

0800c200 <_free_r>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	4605      	mov	r5, r0
 800c204:	2900      	cmp	r1, #0
 800c206:	d041      	beq.n	800c28c <_free_r+0x8c>
 800c208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c20c:	1f0c      	subs	r4, r1, #4
 800c20e:	2b00      	cmp	r3, #0
 800c210:	bfb8      	it	lt
 800c212:	18e4      	addlt	r4, r4, r3
 800c214:	f7ff ff96 	bl	800c144 <__malloc_lock>
 800c218:	4a1d      	ldr	r2, [pc, #116]	@ (800c290 <_free_r+0x90>)
 800c21a:	6813      	ldr	r3, [r2, #0]
 800c21c:	b933      	cbnz	r3, 800c22c <_free_r+0x2c>
 800c21e:	6063      	str	r3, [r4, #4]
 800c220:	6014      	str	r4, [r2, #0]
 800c222:	4628      	mov	r0, r5
 800c224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c228:	f7ff bf92 	b.w	800c150 <__malloc_unlock>
 800c22c:	42a3      	cmp	r3, r4
 800c22e:	d908      	bls.n	800c242 <_free_r+0x42>
 800c230:	6820      	ldr	r0, [r4, #0]
 800c232:	1821      	adds	r1, r4, r0
 800c234:	428b      	cmp	r3, r1
 800c236:	bf01      	itttt	eq
 800c238:	6819      	ldreq	r1, [r3, #0]
 800c23a:	685b      	ldreq	r3, [r3, #4]
 800c23c:	1809      	addeq	r1, r1, r0
 800c23e:	6021      	streq	r1, [r4, #0]
 800c240:	e7ed      	b.n	800c21e <_free_r+0x1e>
 800c242:	461a      	mov	r2, r3
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	b10b      	cbz	r3, 800c24c <_free_r+0x4c>
 800c248:	42a3      	cmp	r3, r4
 800c24a:	d9fa      	bls.n	800c242 <_free_r+0x42>
 800c24c:	6811      	ldr	r1, [r2, #0]
 800c24e:	1850      	adds	r0, r2, r1
 800c250:	42a0      	cmp	r0, r4
 800c252:	d10b      	bne.n	800c26c <_free_r+0x6c>
 800c254:	6820      	ldr	r0, [r4, #0]
 800c256:	4401      	add	r1, r0
 800c258:	1850      	adds	r0, r2, r1
 800c25a:	4283      	cmp	r3, r0
 800c25c:	6011      	str	r1, [r2, #0]
 800c25e:	d1e0      	bne.n	800c222 <_free_r+0x22>
 800c260:	6818      	ldr	r0, [r3, #0]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	6053      	str	r3, [r2, #4]
 800c266:	4408      	add	r0, r1
 800c268:	6010      	str	r0, [r2, #0]
 800c26a:	e7da      	b.n	800c222 <_free_r+0x22>
 800c26c:	d902      	bls.n	800c274 <_free_r+0x74>
 800c26e:	230c      	movs	r3, #12
 800c270:	602b      	str	r3, [r5, #0]
 800c272:	e7d6      	b.n	800c222 <_free_r+0x22>
 800c274:	6820      	ldr	r0, [r4, #0]
 800c276:	1821      	adds	r1, r4, r0
 800c278:	428b      	cmp	r3, r1
 800c27a:	bf04      	itt	eq
 800c27c:	6819      	ldreq	r1, [r3, #0]
 800c27e:	685b      	ldreq	r3, [r3, #4]
 800c280:	6063      	str	r3, [r4, #4]
 800c282:	bf04      	itt	eq
 800c284:	1809      	addeq	r1, r1, r0
 800c286:	6021      	streq	r1, [r4, #0]
 800c288:	6054      	str	r4, [r2, #4]
 800c28a:	e7ca      	b.n	800c222 <_free_r+0x22>
 800c28c:	bd38      	pop	{r3, r4, r5, pc}
 800c28e:	bf00      	nop
 800c290:	20005324 	.word	0x20005324

0800c294 <_init>:
 800c294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c296:	bf00      	nop
 800c298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c29a:	bc08      	pop	{r3}
 800c29c:	469e      	mov	lr, r3
 800c29e:	4770      	bx	lr

0800c2a0 <_fini>:
 800c2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a2:	bf00      	nop
 800c2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2a6:	bc08      	pop	{r3}
 800c2a8:	469e      	mov	lr, r3
 800c2aa:	4770      	bx	lr
